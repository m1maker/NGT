/* C++ Standard Library wrapper for Unicode Algorithms Implementation.
 * License: Public Domain or MIT - choose whatever you want.
 * See notice at the end of this file. */

// AMALGAMATION GENERATED BY: test/random_stuff/amalgamation.h

#ifndef UNI_ALGO_H_AMALGAMATION
#define UNI_ALGO_H_AMALGAMATION

#define UNI_ALGO_STATIC_DATA
#define UNI_ALGO_DISABLE_SYSTEM_LOCALE

// AMALGAMATION: uni_algo/impl/impl_cpp_lib_version.h

// Describes C++ library version number in XYYYZZZ format such that:
// (VERSION % 1000) is the patch version 0..255,
// (VERSION / 1000 % 1000) is the minor version 0..255,
// (VERSION / 1000000) is the major version 0..255.

// NOLINTNEXTLINE(cppcoreguidelines-macro-usage, modernize-macro-to-enum)
#define UNI_ALGO_CPP_LIB_VERSION 1002000

// AMALGAMATION: uni_algo/impl/impl_unicode_version.h

// Describes Unicode version number in XYYYZZZ format such that:
// (VERSION % 1000) is the update version 0..255,
// (VERSION / 1000 % 1000) is the minor version 0..255,
// (VERSION / 1000000) is the major version 1..255.
// For reference see The Unicode Standard: 3.1 Versions of the Unicode Standard -> Version Numbering

// NOLINTNEXTLINE(cppcoreguidelines-macro-usage, modernize-macro-to-enum)
#define UNI_ALGO_UNICODE_VERSION 15001000

// AMALGAMATION: uni_algo/config.h


// Note that you can just add the following defines to your project
// instead of uncommenting the defines here.

//#define UNI_ALGO_DISABLE_CASE
// Disable Case module.
// Reduces Unicode data size by ~200 KB.

//#define UNI_ALGO_DISABLE_NORM
// Disable Normalization module.
// Reduces Unicode data size by ~200 KB.

//#define UNI_ALGO_DISABLE_PROP
// Disable Code Point Properties module.
// Reduces Unicode data size by ~35 KB.
// Note that if this module is disabled unaccent functions
// in Normalization module will be disabled too.

//#define UNI_ALGO_DISABLE_SCRIPT
// Disable Script module.
// Reduces Unicode data size by ~70 KB.

//#define UNI_ALGO_DISABLE_SEGMENT_GRAPHEME
// Disable Grapheme segmentation module.
// Reduces Unicode data size by ~25 KB.

//#define UNI_ALGO_DISABLE_SEGMENT_WORD
// Disable Word segmentation module.
// Reduces Unicode data size by ~35 KB.
// Note that if Word segmentation module is disabled title case functions
// in Case module will be disabled too because it is needed for them.

//#define UNI_ALGO_DISABLE_COLLATE
// Disable collation functions (part of Case module).
// Reduces Unicode data size by ~100 KB.

//#define UNI_ALGO_DISABLE_NFKC_NFKD
// Disable NFKC and NFKD normalization forms (part of Normalization module).
// These forms are rarely used and can be disabled.
// Reduces Unicode data size by ~100 KB.

// ----------------------- ALL DEFINES BELOW THIS LINE DO NOT CHANGE UNICODE DATA SIZE ----------------------

//#define UNI_ALGO_ENABLE_SAFE_LAYER
// Force to enable safe layer even in release (enabled in debug by default).

//#define UNI_ALGO_DISABLE_SYSTEM_LOCALE
// Disable system locale facilities: una::locale::system() function etc.

//#define UNI_ALGO_NO_SHRINK_TO_FIT
// Most of functions do shrink_to_fit() call at the end of a function by default
// but if you use a custom allocator or want to maximize the performance of the library
// it might be better to disable it and do the call manually only when needed.
// Note that ranges (una::ranges::to_utf8/to_utf16 and such) never do shring_to_fit() call.

//#define UNI_ALGO_STATIC_DATA
// Note that with CMake use UNI_ALGO_HEADER_ONLY=ON option instead.
// The define can be used for header-only version of the library.
// Also even when the library was built and installed with
// CMake option UNI_ALGO_HEADER_ONLY=OFF the define can be used to
// force header-only version, but treat it as a workaround in this case.

//#define UNI_ALGO_DLL_EXPORT
//#define UNI_ALGO_DLL_IMPORT
// Note that with CMake use BUILD_SHARED_LIBS=ON option instead.
// The defines can be used to build shared library
// export must be defined when building and import when using.

// --------------------------------- DO NOT CHANGE ANYTHING BELOW THIS LINE ---------------------------------

// All the comments below are not for users of the library

// This file must include only these 2 files
// Low-level requires <cstddef> for size_t and such, static asserts here require <type_traits>
// Note that most low-level modules also need type_array to be defined it's located in safe layer
// that need to be included after config.h (this file) for such low-level modules.
// Note that one extra include <version> below may be used in C++20 for proper constexpr detection.
#include <cstddef> // size_t, nullptr_t
#include <type_traits> // std::is_unsigned

#if (__cplusplus < 201703L && !defined(_MSVC_LANG)) || (defined(_MSVC_LANG) && _MSVC_LANG < 201703L)
#error "C++17 or higher is required"
#endif

namespace una::detail {
// Never change these types except for tests.
using type_codept = char32_t;
using type_char8  = unsigned char;
using type_char16 = char16_t;
using type_char32 = char32_t;
//using type_array = [std::array like]; // Defined in internal/safe_layer.h
inline constexpr size_t impl_npos = static_cast<size_t>(-1);
inline constexpr std::nullptr_t impl_nullptr = nullptr;
// The types can be changed for tests without violating these static asserts.
// Note that there will be many conversion warnings because the wrapper is not designed
// to silent them in such mode but still all tests must pass even if all types are unsigned long long.
// With this we almost guarantee that it will work when all types will be actually long long.
static_assert(std::is_unsigned<type_codept>::value && sizeof(type_codept) >= sizeof(char32_t));
static_assert(std::is_unsigned<type_char8>::value);
static_assert(std::is_unsigned<type_char16>::value && sizeof(type_char16) >= sizeof(char16_t));
static_assert(std::is_unsigned<type_char32>::value && sizeof(type_char32) >= sizeof(char32_t));
// Note that the the library supports CHAR_BIT more than 8-bit perfectly fine.
// Such platforms are rare so it is just mentioned here.
//static_assert(std::numeric_limits<unsigned char>::max() >= 255); // Always true
} // namespace una::detail

// Define namespace that low-level will use
#define UNI_ALGO_IMPL_NAMESPACE_BEGIN namespace una::detail {
#define UNI_ALGO_IMPL_NAMESPACE_END }

// Enable safe layer if it is forced with this define and in debug
#ifndef UNI_ALGO_ENABLE_SAFE_LAYER
#ifndef NDEBUG
#define UNI_ALGO_ENABLE_SAFE_LAYER
#endif
#endif

// Using any of the followings defines will disable a part of safe layer.
// Use them only for perf testing to make sure safe layer doesn't mess things up.
//#define UNI_ALGO_FORCE_CPP_ITERATORS // Force to use C++ iterators in low-level
//#define UNI_ALGO_FORCE_C_POINTERS // Force to use C pointers in low-level
//#define UNI_ALGO_FORCE_C_ARRAYS // Force to use C arrays in low-level

// Define dllexport/dllimport for shared library
#if defined(UNI_ALGO_DLL_EXPORT) && !defined(UNI_ALGO_STATIC_DATA)
#  if defined(_WIN32)
#    define UNI_ALGO_DLL __declspec(dllexport)
#  elif defined(__GNUC__) || defined(__clang__)
#    define UNI_ALGO_DLL __attribute__((visibility("default")))
#  endif
#elif defined(UNI_ALGO_DLL_IMPORT) && !defined(UNI_ALGO_STATIC_DATA)
#  if defined(_WIN32)
#    define UNI_ALGO_DLL __declspec(dllimport)
#  elif defined(__GNUC__) || defined(__clang__)
#    define UNI_ALGO_DLL __attribute__((visibility("default")))
#  endif
#endif
#ifndef UNI_ALGO_DLL
#define UNI_ALGO_DLL
#endif

// C++20 or higher and header-only version is required for constexpr library
#if defined(UNI_ALGO_STATIC_DATA) && (__cplusplus >= 202002L || _MSVC_LANG >= 202002L)
// NOTE: This include is needed for __cpp_lib_constexpr_string below
#include <version>
#if (__cpp_constexpr >= 201907L) && defined(__cpp_lib_constexpr_string) \
    && !(defined(__clang__) && defined(__GLIBCXX__)) // constexpr standard lib is broken in Clang with libstdc++
#define UNI_ALGO_CONSTEXPR
#define uaiw_constexpr constexpr
#endif
#endif
#ifndef UNI_ALGO_CONSTEXPR
#define uaiw_constexpr
#endif

//#define UNI_ALGO_EXPERIMENTAL // Enable experimental stuff for tests
//#define UNI_ALGO_LOG_CPP_ITER // Enable logging for UTF-8/16 iterators

// Disable full case mapping and use simple case mapping instead in Case module
//#define UNI_ALGO_DISABLE_FULL_CASE

// Can be enabled for testing and debugging aid and must be disabled in stable releases.
// The define must only be used by the low-level and it must never rely on asserts.
//#define UNI_ALGO_TEST_ASSERT
#ifdef UNI_ALGO_TEST_ASSERT
#include <cassert>
#define uaix_assert assert
#endif

// Other test defines
//#define UNI_ALGO_TEST_DISABLE_ALWAYS_INLINE_GLOBAL
//#define UNI_ALGO_TEST_DISABLE_ALWAYS_INLINE_GLOBAL_EX


// AMALGAMATION: uni_algo/internal/safe_layer.h


#include <cstdlib>
#ifndef UNI_ALGO_ENABLE_SAFE_LAYER
#include <array>
#endif

//!#include "../config.h" // detail::type_codept

namespace una::detail {

namespace safe {

[[noreturn]] inline void kms() noexcept
{
    // Everything is lost, nothing can be done, kmsing is the only option.
    // If we are inside this function then there is a critical bug exists in the library.
    // If we will continue then we try to read or write to a memory that is not belong to us.
    // Note that we cannot even throw an exception from here because we can be inside
    // noexcept function or inside std::string::resize_and_overwrite and throwing from there is UB.
    std::abort();
}

// ----------
// SAFE ARRAY
// ----------

// Safe array is similar to std::array but with bound checks and more strict
// so the compilation will break if the low-level won't follow the rules.

template<typename T, std::size_t N>
struct array
{
    static_assert(N != 0, "Low-level must never try to use 0 sized arrays");

    static_assert(!std::is_integral_v<T> || // For multidimensional arrays
                  std::is_same_v<T, char>           ||
                  std::is_same_v<T, unsigned char>  ||
                  std::is_same_v<T, unsigned short> ||
                  std::is_same_v<T, detail::type_codept>,
                 "Low-level must never use disallowed types for arrays");

    using value_type      = T;
    using size_type       = std::size_t;
    using difference_type = std::ptrdiff_t;
    using reference       = value_type&;
    using const_reference = const value_type&;
    using pointer         = value_type*;
    using const_pointer   = const value_type*;
    using iterator        = value_type*;
    using const_iterator  = const value_type*;

    // NOLINTNEXTLINE(cppcoreguidelines-avoid-c-arrays, modernize-avoid-c-arrays, hicpp-avoid-c-arrays)
    T internal_array[N];

    constexpr reference operator[](size_type pos) noexcept
    { if (pos >= N) kms(); return internal_array[pos]; }
    constexpr const_reference operator[](size_type pos) const noexcept
    { if (pos >= N) kms(); return internal_array[pos]; }
    // Low-level must never use the folowing functions but they might be helpfull for tests
    constexpr size_type size() const noexcept { return N; }
    constexpr size_type max_size() const noexcept { return N; }
    constexpr bool empty() const noexcept { return N == 0; }
    constexpr pointer data() noexcept { return internal_array; }
    constexpr const_pointer data() const noexcept { return internal_array; }
    constexpr iterator begin() noexcept { return internal_array; }
    constexpr const_iterator begin() const noexcept { return internal_array; }
    constexpr iterator end() noexcept { return internal_array + N; }
    constexpr const_iterator end() const noexcept { return internal_array + N; }
    // Low-level must never try to copy arrays
    // But this doesn't work without copy constructor and copy constructor breaks aggregate
    // https://timsong-cpp.github.io/cppwp/n4659/dcl.init.aggr#1.1
    //constexpr type_array& operator=(const type_array&) = delete;
    // Low-level must never try to compare arrays so no comparison operators
};
static_assert(std::is_aggregate_v<safe::array<char, 1>>, "safe::array must be aggregate");

// --------------
// SAFE ITERATORS
// --------------

// Safe iterators only implement operators that the low-level uses
// safe end iterator is only used as sentinel so no operators there.

template<class Iter>
class end
{
    template<class U> friend class in;
private:
    Iter it;
public:
    uaiw_constexpr end() = delete;
    uaiw_constexpr explicit end(Iter iter) : it{iter} {}
};

template<class Iter>
class in
{
private:
    Iter it;
#ifdef UNI_ALGO_ENABLE_SAFE_LAYER
    Iter begin;
    Iter end;
public:
    uaiw_constexpr explicit in(Iter iter, std::size_t size)
        : it{iter}, begin{it}, end{it + static_cast<std::ptrdiff_t>(size)} {}
    uaiw_constexpr decltype(*it) operator*() const { if (it < begin || it >= end) kms(); return *it; }
#else
public:
    uaiw_constexpr explicit in(Iter iter, std::size_t) : it{iter} {}
    uaiw_constexpr decltype(*it) operator*() const { return *it; }
#endif
    uaiw_constexpr in() = delete;
    uaiw_constexpr in& operator++()
    {
        ++it;
        return *this;
    }
    // NOTE: Never ever use postfix operator++ for low-level iterators
    // because it may cause problems with input iterators.
    // https://github.com/uni-algo/uni-algo/issues/22
    //uaiw_constexpr in operator++(int)
    uaiw_constexpr in& operator--()
    {
        --it;
        return *this;
    }
    // NOTE: Postfix operator-- is not implemented for consistency with
    // the previous NOTE but it should not be needed anyway.
    //uaiw_constexpr in operator--(int)
    uaiw_constexpr in& operator+=(std::ptrdiff_t n)
    {
        it += n;
        return *this;
    }
    uaiw_constexpr in& operator-=(std::ptrdiff_t n)
    {
        it -= n;
        return *this;
    }
    friend uaiw_constexpr in operator+(in x, std::ptrdiff_t n)
    {
        x += n;
        return x;
    }
    friend uaiw_constexpr in operator-(in x, std::ptrdiff_t n)
    {
        x -= n;
        return x;
    }
    friend uaiw_constexpr std::ptrdiff_t operator-(const in& x, const in& y) { return x.it - y.it; }
    friend uaiw_constexpr bool operator==(const in& x, const in& y) { return x.it == y.it; }
    friend uaiw_constexpr bool operator!=(const in& x, const in& y) { return x.it != y.it; }
    friend uaiw_constexpr bool operator>(const in& x, const in& y) { return x.it > y.it; }
private:
    static uaiw_constexpr const Iter& friend_it(const safe::end<Iter>& i) { return i.it; }
public:
    friend uaiw_constexpr bool operator==(const in& x, const safe::end<Iter>& y) { return x.it == friend_it(y); }
    friend uaiw_constexpr bool operator!=(const in& x, const safe::end<Iter>& y) { return x.it != friend_it(y); }
    // NOTE: The following is only used by fast ASCII functions
    friend uaiw_constexpr std::ptrdiff_t operator-(const safe::end<Iter>& x, const in& y) { return friend_it(x) - y.it; }
};

template<class Iter>
class out
{
private:
    Iter it;
#ifdef UNI_ALGO_ENABLE_SAFE_LAYER
    Iter end;
public:
    uaiw_constexpr explicit out(Iter iter, std::size_t size)
        : it{iter}, end{it + static_cast<std::ptrdiff_t>(size)} {}
    uaiw_constexpr decltype(*it) operator*() const { if (it >= end) kms(); return *it; }
#else
public:
    uaiw_constexpr explicit out(Iter iter, std::size_t) : it{iter} {}
    uaiw_constexpr decltype(*it) operator*() const { return *it; }
#endif
    uaiw_constexpr out() = delete;
    uaiw_constexpr out operator++(int)
    {
        out tmp = *this;
        ++it;
        return tmp;
    }
    friend uaiw_constexpr std::ptrdiff_t operator-(const out& x, const out& y) { return x.it - y.it; }
};

} // namespace safe

#ifdef UNI_ALGO_ENABLE_SAFE_LAYER
template<typename T, std::size_t N>
using type_array = safe::array<T, N>;
#else
template<typename T, std::size_t N>
using type_array = std::array<T, N>;
#endif

} // namespace una::detail


// AMALGAMATION: uni_algo/impl/internal_defines.h

/* Unicode Algorithms Implementation by Marl Gigical.
 * License: Public Domain or MIT - sign whatever you want.
 * See LICENSE.txt */

// IMPORTANT: This file must never be used by a wrapper

// Internal defines, must be used together with internal_undefs.h

// The internal defines are lowercased because they make too much noise in the code if uppercased.

// Always inlining is important in the low-level.
// There will be 20-70% performance loss without it.
#ifndef UNI_ALGO_TEST_DISABLE_ALWAYS_INLINE_GLOBAL
#  if defined(__GNUC__) || defined(__clang__)
#    define uaix_always_inline      __attribute__((__always_inline__)) inline
#    define uaix_always_inline_tmpl __attribute__((__always_inline__)) inline
#  elif defined(_MSC_VER)
#    define uaix_always_inline      __forceinline
#    define uaix_always_inline_tmpl __forceinline
#  else
#    define uaix_always_inline      inline
#    define uaix_always_inline_tmpl inline
#  endif
#else // UNI_ALGO_TEST_DISABLE_ALWAYS_INLINE_GLOBAL
#  ifndef UNI_ALGO_TEST_DISABLE_ALWAYS_INLINE_GLOBAL_EX
#    define uaix_always_inline inline // Functions still need to use inline to prevent ODR
#    define uaix_always_inline_tmpl // Do not inline templates (this includes iterator functions)
#  else // UNI_ALGO_TEST_DISABLE_ALWAYS_INLINE_GLOBAL_EX
/* Use this to force to compile the smallest possible code.
 * It makes everything template so only very small functions will be inlined by default
 * (with inline that prevents ODR GCC inlines medium functions too).
 * This also compiles the slowest possible code.
 * Compare the size with always inline version to make sure always inline is not much bigger.
 * Use nm to check what a compiler actually does. */
#    define uaix_always_inline template<typename = void>
#    define uaix_always_inline_tmpl
#  endif
#endif

// NOLINTBEGIN(cppcoreguidelines-macro-usage)

// Must not be used without performance testing it can degrade performance in many cases
#if defined(__GNUC__) || defined(__clang__)
#  define uaix_likely(x)   __builtin_expect(!!(x),1)
#  define uaix_unlikely(x) __builtin_expect(!!(x),0)
#else
#  define uaix_likely(x)   (!!(x))
#  define uaix_unlikely(x) (!!(x))
#endif

// NOLINTEND(cppcoreguidelines-macro-usage)

// C implementation must be static because it will be included in .c file
// Also add maybe unused to everything in C because a wrapper doesn't need to implement everything
// If an internal (non-template) function should not be always inlined
// then uaix_inline must be used instead of uaix_static. This prevents C++ ODR violation.
// Note that it must be used for small functions only because we test with -Winline too.
#ifdef __cplusplus
#  ifdef UNI_ALGO_CONSTEXPR
#    define uaix_static constexpr
#    define uaix_inline constexpr
#  else
#    define uaix_static
#    define uaix_inline inline // template<typename = void> alternative if -Winline will be too annoying
#  endif
#else
#  if defined(__GNUC__) || defined(__clang__)
#    define uaix_static static __attribute__((__unused__))
#  else
#    define uaix_static static
#  endif
#  define uaix_inline uaix_static
#endif

// All variables that are outside functions must use uaix_const
// and all variables that are inside functions must just use const if needed.
#ifdef __cplusplus
#  if (!defined(_MSVC_LANG) && __cplusplus >= 201703L) || (defined(_MSVC_LANG) && _MSVC_LANG >= 201703L)
#    define uaix_const inline constexpr
#  else
#    define uaix_const constexpr
#  endif
#else
#  define uaix_const uaix_static const
#endif

// The define can be used to switch Unicode data to static (constexpr in C++) mode
// uaix_const_data is only used by generated Unicode data files
#ifdef UNI_ALGO_STATIC_DATA
#  ifdef __cplusplus
#    define uaix_const_data uaix_const
#  else
#    define uaix_const_data uaix_static const
#  endif
#else
#  define uaix_const_data const
#endif

// NOLINTBEGIN(cppcoreguidelines-macro-usage)

#if defined(__cplusplus) && !defined(UNI_ALGO_FORCE_C_ARRAYS)
#define uaix_array(type, var, size) type_array<type, size> var
#define uaix_array2(type, var, size1, size2) type_array<type_array<type, size2>, size1> var
// This helper is needed to trigger brace ellison for multidimensional array: https://stackoverflow.com/a/53308148
#define uaix_array_brace_ellison(type, size) type_array<type, size>
#else
#define uaix_array(type, var, size) type var[size]
#define uaix_array2(type, var, size1, size2) type var[size1][size2]
#define uaix_array_brace_ellison(type, size)
#endif
#define uaix_data_array uaix_array
#define uaix_data_array2 uaix_array2

// NOLINTEND(cppcoreguidelines-macro-usage)

// -Wsign-conversion is the only warning that cannot be suppressed in C++ by using other tools
// because it's almost impossible to suppress it inside templates.
// Note that because of this the warning isn't even enabled in GCC
// by -Wconversion in C++ but it is enabled by -Wconversion in Clang even in C++.
// Note that in C mode it isn't a problem so it need to be suppressed only in C++ mode.
// Suppress -Wold-style-cast here too, low-level uses C casts to suppress conversion warnings
// so we need to suppress the warning about suppressing warnings.
// Note that even though these warnings are supressed it doesn't mean stupid things with
// casts are allowed that means the low-level must use casts only to suppress warnings.
// -Wmissing-braces is just broken in GCC but works fine in Clang.
#ifdef __cplusplus
#  if defined(__GNUC__) || defined(__clang__)
#    pragma GCC diagnostic push
#    pragma GCC diagnostic ignored "-Wsign-conversion"
#    pragma GCC diagnostic ignored "-Wold-style-cast"
#    if defined(__GNUC__) && !defined(__clang__)
#      pragma GCC diagnostic ignored "-Wmissing-braces"
#    endif
#  endif
#endif

// AMALGAMATION: uni_algo/impl/data/data_case.h

// GENERATED. DO NOT EDIT.

// Unicode 15.1.0

UNI_ALGO_IMPL_NAMESPACE_BEGIN

uaix_const_data uaix_data_array(unsigned char, stage1_lower, 8704) = {
0,1,2,3,4,5,6,7,
8,9,10,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,11,5,5,5,5,5,12,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,13,5,5,14,15,16,17,
5,5,18,19,5,5,5,5,
5,20,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
21,22,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,23,24,25,26,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,27,5,
5,5,5,5,5,5,5,5,
28,29,30,31,5,5,5,5,
5,5,5,5,5,5,5,5,
5,32,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,33,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,34,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,35,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5};

uaix_const_data uaix_data_array(type_codept, stage2_lower, 4608) = {
/* Block: 0 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,97,98,99,100,101,102,103,
104,105,106,107,108,109,110,111,
112,113,114,115,116,117,118,119,
120,121,122,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 1 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
224,225,226,227,228,229,230,231,
232,233,234,235,236,237,238,239,
240,241,242,243,244,245,246,0,
248,249,250,251,252,253,254,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 2 */
257,0,259,0,261,0,263,0,
265,0,267,0,269,0,271,0,
273,0,275,0,277,0,279,0,
281,0,283,0,285,0,287,0,
289,0,291,0,293,0,295,0,
297,0,299,0,301,0,303,0,
105,0,307,0,309,0,311,0,
0,314,0,316,0,318,0,320,
0,322,0,324,0,326,0,328,
0,0,331,0,333,0,335,0,
337,0,339,0,341,0,343,0,
345,0,347,0,349,0,351,0,
353,0,355,0,357,0,359,0,
361,0,363,0,365,0,367,0,
369,0,371,0,373,0,375,0,
255,378,0,380,0,382,0,0,
/* Block: 3 */
0,595,387,0,389,0,596,392,
0,598,599,396,0,0,477,601,
603,402,0,608,611,0,617,616,
409,0,0,0,623,626,0,629,
417,0,419,0,421,0,640,424,
0,643,0,0,429,0,648,432,
0,650,651,436,0,438,0,658,
441,0,0,0,445,0,0,0,
0,0,0,0,454,454,0,457,
457,0,460,460,0,462,0,464,
0,466,0,468,0,470,0,472,
0,474,0,476,0,0,479,0,
481,0,483,0,485,0,487,0,
489,0,491,0,493,0,495,0,
0,499,499,0,501,0,405,447,
505,0,507,0,509,0,511,0,
/* Block: 4 */
513,0,515,0,517,0,519,0,
521,0,523,0,525,0,527,0,
529,0,531,0,533,0,535,0,
537,0,539,0,541,0,543,0,
414,0,547,0,549,0,551,0,
553,0,555,0,557,0,559,0,
561,0,563,0,0,0,0,0,
0,0,11365,572,0,410,11366,0,
0,578,0,384,649,652,583,0,
585,0,587,0,589,0,591,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 5 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 6 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
881,0,883,0,0,0,887,0,
0,0,0,0,0,0,0,1011,
/* Block: 7 */
0,0,0,0,0,0,940,0,
941,942,943,0,972,0,973,974,
0,945,946,947,948,949,950,951,
952,953,954,955,956,957,958,959,
960,961,0,963,964,965,966,967,
968,969,970,971,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,983,
0,0,0,0,0,0,0,0,
985,0,987,0,989,0,991,0,
993,0,995,0,997,0,999,0,
1001,0,1003,0,1005,0,1007,0,
0,0,0,0,952,0,0,1016,
0,1010,1019,0,0,891,892,893,
/* Block: 8 */
1104,1105,1106,1107,1108,1109,1110,1111,
1112,1113,1114,1115,1116,1117,1118,1119,
1072,1073,1074,1075,1076,1077,1078,1079,
1080,1081,1082,1083,1084,1085,1086,1087,
1088,1089,1090,1091,1092,1093,1094,1095,
1096,1097,1098,1099,1100,1101,1102,1103,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
1121,0,1123,0,1125,0,1127,0,
1129,0,1131,0,1133,0,1135,0,
1137,0,1139,0,1141,0,1143,0,
1145,0,1147,0,1149,0,1151,0,
/* Block: 9 */
1153,0,0,0,0,0,0,0,
0,0,1163,0,1165,0,1167,0,
1169,0,1171,0,1173,0,1175,0,
1177,0,1179,0,1181,0,1183,0,
1185,0,1187,0,1189,0,1191,0,
1193,0,1195,0,1197,0,1199,0,
1201,0,1203,0,1205,0,1207,0,
1209,0,1211,0,1213,0,1215,0,
1231,1218,0,1220,0,1222,0,1224,
0,1226,0,1228,0,1230,0,0,
1233,0,1235,0,1237,0,1239,0,
1241,0,1243,0,1245,0,1247,0,
1249,0,1251,0,1253,0,1255,0,
1257,0,1259,0,1261,0,1263,0,
1265,0,1267,0,1269,0,1271,0,
1273,0,1275,0,1277,0,1279,0,
/* Block: 10 */
1281,0,1283,0,1285,0,1287,0,
1289,0,1291,0,1293,0,1295,0,
1297,0,1299,0,1301,0,1303,0,
1305,0,1307,0,1309,0,1311,0,
1313,0,1315,0,1317,0,1319,0,
1321,0,1323,0,1325,0,1327,0,
0,1377,1378,1379,1380,1381,1382,1383,
1384,1385,1386,1387,1388,1389,1390,1391,
1392,1393,1394,1395,1396,1397,1398,1399,
1400,1401,1402,1403,1404,1405,1406,1407,
1408,1409,1410,1411,1412,1413,1414,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 11 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
11520,11521,11522,11523,11524,11525,11526,11527,
11528,11529,11530,11531,11532,11533,11534,11535,
11536,11537,11538,11539,11540,11541,11542,11543,
11544,11545,11546,11547,11548,11549,11550,11551,
11552,11553,11554,11555,11556,11557,0,11559,
0,0,0,0,0,11565,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 12 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
43888,43889,43890,43891,43892,43893,43894,43895,
43896,43897,43898,43899,43900,43901,43902,43903,
43904,43905,43906,43907,43908,43909,43910,43911,
43912,43913,43914,43915,43916,43917,43918,43919,
43920,43921,43922,43923,43924,43925,43926,43927,
43928,43929,43930,43931,43932,43933,43934,43935,
43936,43937,43938,43939,43940,43941,43942,43943,
43944,43945,43946,43947,43948,43949,43950,43951,
43952,43953,43954,43955,43956,43957,43958,43959,
43960,43961,43962,43963,43964,43965,43966,43967,
5112,5113,5114,5115,5116,5117,0,0,
0,0,0,0,0,0,0,0,
/* Block: 13 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
4304,4305,4306,4307,4308,4309,4310,4311,
4312,4313,4314,4315,4316,4317,4318,4319,
4320,4321,4322,4323,4324,4325,4326,4327,
4328,4329,4330,4331,4332,4333,4334,4335,
4336,4337,4338,4339,4340,4341,4342,4343,
4344,4345,4346,0,0,4349,4350,4351,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 14 */
7681,0,7683,0,7685,0,7687,0,
7689,0,7691,0,7693,0,7695,0,
7697,0,7699,0,7701,0,7703,0,
7705,0,7707,0,7709,0,7711,0,
7713,0,7715,0,7717,0,7719,0,
7721,0,7723,0,7725,0,7727,0,
7729,0,7731,0,7733,0,7735,0,
7737,0,7739,0,7741,0,7743,0,
7745,0,7747,0,7749,0,7751,0,
7753,0,7755,0,7757,0,7759,0,
7761,0,7763,0,7765,0,7767,0,
7769,0,7771,0,7773,0,7775,0,
7777,0,7779,0,7781,0,7783,0,
7785,0,7787,0,7789,0,7791,0,
7793,0,7795,0,7797,0,7799,0,
7801,0,7803,0,7805,0,7807,0,
/* Block: 15 */
7809,0,7811,0,7813,0,7815,0,
7817,0,7819,0,7821,0,7823,0,
7825,0,7827,0,7829,0,0,0,
0,0,0,0,0,0,223,0,
7841,0,7843,0,7845,0,7847,0,
7849,0,7851,0,7853,0,7855,0,
7857,0,7859,0,7861,0,7863,0,
7865,0,7867,0,7869,0,7871,0,
7873,0,7875,0,7877,0,7879,0,
7881,0,7883,0,7885,0,7887,0,
7889,0,7891,0,7893,0,7895,0,
7897,0,7899,0,7901,0,7903,0,
7905,0,7907,0,7909,0,7911,0,
7913,0,7915,0,7917,0,7919,0,
7921,0,7923,0,7925,0,7927,0,
7929,0,7931,0,7933,0,7935,0,
/* Block: 16 */
0,0,0,0,0,0,0,0,
7936,7937,7938,7939,7940,7941,7942,7943,
0,0,0,0,0,0,0,0,
7952,7953,7954,7955,7956,7957,0,0,
0,0,0,0,0,0,0,0,
7968,7969,7970,7971,7972,7973,7974,7975,
0,0,0,0,0,0,0,0,
7984,7985,7986,7987,7988,7989,7990,7991,
0,0,0,0,0,0,0,0,
8000,8001,8002,8003,8004,8005,0,0,
0,0,0,0,0,0,0,0,
0,8017,0,8019,0,8021,0,8023,
0,0,0,0,0,0,0,0,
8032,8033,8034,8035,8036,8037,8038,8039,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 17 */
0,0,0,0,0,0,0,0,
8064,8065,8066,8067,8068,8069,8070,8071,
0,0,0,0,0,0,0,0,
8080,8081,8082,8083,8084,8085,8086,8087,
0,0,0,0,0,0,0,0,
8096,8097,8098,8099,8100,8101,8102,8103,
0,0,0,0,0,0,0,0,
8112,8113,8048,8049,8115,0,0,0,
0,0,0,0,0,0,0,0,
8050,8051,8052,8053,8131,0,0,0,
0,0,0,0,0,0,0,0,
8144,8145,8054,8055,0,0,0,0,
0,0,0,0,0,0,0,0,
8160,8161,8058,8059,8165,0,0,0,
0,0,0,0,0,0,0,0,
8056,8057,8060,8061,8179,0,0,0,
/* Block: 18 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,969,0,
0,0,107,229,0,0,0,0,
0,0,8526,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
8560,8561,8562,8563,8564,8565,8566,8567,
8568,8569,8570,8571,8572,8573,8574,8575,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 19 */
0,0,0,8580,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 20 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,9424,9425,
9426,9427,9428,9429,9430,9431,9432,9433,
9434,9435,9436,9437,9438,9439,9440,9441,
9442,9443,9444,9445,9446,9447,9448,9449,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 21 */
11312,11313,11314,11315,11316,11317,11318,11319,
11320,11321,11322,11323,11324,11325,11326,11327,
11328,11329,11330,11331,11332,11333,11334,11335,
11336,11337,11338,11339,11340,11341,11342,11343,
11344,11345,11346,11347,11348,11349,11350,11351,
11352,11353,11354,11355,11356,11357,11358,11359,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
11361,0,619,7549,637,0,0,11368,
0,11370,0,11372,0,593,625,592,
594,0,11379,0,0,11382,0,0,
0,0,0,0,0,0,575,576,
/* Block: 22 */
11393,0,11395,0,11397,0,11399,0,
11401,0,11403,0,11405,0,11407,0,
11409,0,11411,0,11413,0,11415,0,
11417,0,11419,0,11421,0,11423,0,
11425,0,11427,0,11429,0,11431,0,
11433,0,11435,0,11437,0,11439,0,
11441,0,11443,0,11445,0,11447,0,
11449,0,11451,0,11453,0,11455,0,
11457,0,11459,0,11461,0,11463,0,
11465,0,11467,0,11469,0,11471,0,
11473,0,11475,0,11477,0,11479,0,
11481,0,11483,0,11485,0,11487,0,
11489,0,11491,0,0,0,0,0,
0,0,0,11500,0,11502,0,0,
0,0,11507,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 23 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
42561,0,42563,0,42565,0,42567,0,
42569,0,42571,0,42573,0,42575,0,
42577,0,42579,0,42581,0,42583,0,
42585,0,42587,0,42589,0,42591,0,
42593,0,42595,0,42597,0,42599,0,
42601,0,42603,0,42605,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 24 */
42625,0,42627,0,42629,0,42631,0,
42633,0,42635,0,42637,0,42639,0,
42641,0,42643,0,42645,0,42647,0,
42649,0,42651,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 25 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,42787,0,42789,0,42791,0,
42793,0,42795,0,42797,0,42799,0,
0,0,42803,0,42805,0,42807,0,
42809,0,42811,0,42813,0,42815,0,
42817,0,42819,0,42821,0,42823,0,
42825,0,42827,0,42829,0,42831,0,
42833,0,42835,0,42837,0,42839,0,
42841,0,42843,0,42845,0,42847,0,
42849,0,42851,0,42853,0,42855,0,
42857,0,42859,0,42861,0,42863,0,
0,0,0,0,0,0,0,0,
0,42874,0,42876,0,7545,42879,0,
/* Block: 26 */
42881,0,42883,0,42885,0,42887,0,
0,0,0,42892,0,613,0,0,
42897,0,42899,0,0,0,42903,0,
42905,0,42907,0,42909,0,42911,0,
42913,0,42915,0,42917,0,42919,0,
42921,0,614,604,609,620,618,0,
670,647,669,43859,42933,0,42935,0,
42937,0,42939,0,42941,0,42943,0,
42945,0,42947,0,42900,642,7566,42952,
0,42954,0,0,0,0,0,0,
42961,0,0,0,0,0,42967,0,
42969,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,42998,0,0,
0,0,0,0,0,0,0,0,
/* Block: 27 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,65345,65346,65347,65348,65349,65350,65351,
65352,65353,65354,65355,65356,65357,65358,65359,
65360,65361,65362,65363,65364,65365,65366,65367,
65368,65369,65370,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 28 */
66600,66601,66602,66603,66604,66605,66606,66607,
66608,66609,66610,66611,66612,66613,66614,66615,
66616,66617,66618,66619,66620,66621,66622,66623,
66624,66625,66626,66627,66628,66629,66630,66631,
66632,66633,66634,66635,66636,66637,66638,66639,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 29 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
66776,66777,66778,66779,66780,66781,66782,66783,
66784,66785,66786,66787,66788,66789,66790,66791,
66792,66793,66794,66795,66796,66797,66798,66799,
66800,66801,66802,66803,66804,66805,66806,66807,
66808,66809,66810,66811,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 30 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
66967,66968,66969,66970,66971,66972,66973,66974,
66975,66976,66977,0,66979,66980,66981,66982,
/* Block: 31 */
66983,66984,66985,66986,66987,66988,66989,66990,
66991,66992,66993,0,66995,66996,66997,66998,
66999,67000,67001,0,67003,67004,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 32 */
68800,68801,68802,68803,68804,68805,68806,68807,
68808,68809,68810,68811,68812,68813,68814,68815,
68816,68817,68818,68819,68820,68821,68822,68823,
68824,68825,68826,68827,68828,68829,68830,68831,
68832,68833,68834,68835,68836,68837,68838,68839,
68840,68841,68842,68843,68844,68845,68846,68847,
68848,68849,68850,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 33 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
71872,71873,71874,71875,71876,71877,71878,71879,
71880,71881,71882,71883,71884,71885,71886,71887,
71888,71889,71890,71891,71892,71893,71894,71895,
71896,71897,71898,71899,71900,71901,71902,71903,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 34 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
93792,93793,93794,93795,93796,93797,93798,93799,
93800,93801,93802,93803,93804,93805,93806,93807,
93808,93809,93810,93811,93812,93813,93814,93815,
93816,93817,93818,93819,93820,93821,93822,93823,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 35 */
125218,125219,125220,125221,125222,125223,125224,125225,
125226,125227,125228,125229,125230,125231,125232,125233,
125234,125235,125236,125237,125238,125239,125240,125241,
125242,125243,125244,125245,125246,125247,125248,125249,
125250,125251,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0};

uaix_const_data uaix_data_array(unsigned char, stage1_upper, 8704) = {
0,1,2,3,4,5,6,7,
8,9,10,11,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,13,12,12,12,12,12,14,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,15,16,17,18,19,20,21,
12,12,22,23,12,12,12,12,
12,24,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
25,26,27,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,28,29,30,31,
12,12,12,12,12,12,32,33,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,34,12,
12,12,12,12,12,12,12,12,
35,36,12,37,12,12,12,12,
12,12,12,12,12,12,12,12,
12,38,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,39,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,40,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,41,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12};

uaix_const_data uaix_data_array(type_codept, stage2_upper, 5376) = {
/* Block: 0 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,65,66,67,68,69,70,71,
72,73,74,75,76,77,78,79,
80,81,82,83,84,85,86,87,
88,89,90,0,0,0,0,0,
/* Block: 1 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,924,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
192,193,194,195,196,197,198,199,
200,201,202,203,204,205,206,207,
208,209,210,211,212,213,214,0,
216,217,218,219,220,221,222,376,
/* Block: 2 */
0,256,0,258,0,260,0,262,
0,264,0,266,0,268,0,270,
0,272,0,274,0,276,0,278,
0,280,0,282,0,284,0,286,
0,288,0,290,0,292,0,294,
0,296,0,298,0,300,0,302,
0,73,0,306,0,308,0,310,
0,0,313,0,315,0,317,0,
319,0,321,0,323,0,325,0,
327,0,0,330,0,332,0,334,
0,336,0,338,0,340,0,342,
0,344,0,346,0,348,0,350,
0,352,0,354,0,356,0,358,
0,360,0,362,0,364,0,366,
0,368,0,370,0,372,0,374,
0,0,377,0,379,0,381,83,
/* Block: 3 */
579,0,0,386,0,388,0,0,
391,0,0,0,395,0,0,0,
0,0,401,0,0,502,0,0,
0,408,573,0,0,0,544,0,
0,416,0,418,0,420,0,0,
423,0,0,0,0,428,0,0,
431,0,0,0,435,0,437,0,
0,440,0,0,0,444,0,503,
0,0,0,0,0,452,452,0,
455,455,0,458,458,0,461,0,
463,0,465,0,467,0,469,0,
471,0,473,0,475,398,0,478,
0,480,0,482,0,484,0,486,
0,488,0,490,0,492,0,494,
0,0,497,497,0,500,0,0,
0,504,0,506,0,508,0,510,
/* Block: 4 */
0,512,0,514,0,516,0,518,
0,520,0,522,0,524,0,526,
0,528,0,530,0,532,0,534,
0,536,0,538,0,540,0,542,
0,0,0,546,0,548,0,550,
0,552,0,554,0,556,0,558,
0,560,0,562,0,0,0,0,
0,0,0,0,571,0,0,11390,
11391,0,577,0,0,0,0,582,
0,584,0,586,0,588,0,590,
11375,11373,11376,385,390,0,393,394,
0,399,0,400,42923,0,0,0,
403,42924,0,404,0,42893,42922,0,
407,406,42926,11362,42925,0,0,412,
0,11374,413,0,0,415,0,0,
0,0,0,0,0,11364,0,0,
/* Block: 5 */
422,0,42949,425,0,0,0,42929,
430,580,433,434,581,0,0,0,
0,0,439,0,0,0,0,0,
0,0,0,0,0,42930,42928,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 6 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,921,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,880,0,882,0,0,0,886,
0,0,0,1021,1022,1023,0,0,
/* Block: 7 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,902,904,905,906,
0,913,914,915,916,917,918,919,
920,921,922,923,924,925,926,927,
928,929,931,931,932,933,934,935,
936,937,938,939,908,910,911,0,
914,920,0,0,0,934,928,975,
0,984,0,986,0,988,0,990,
0,992,0,994,0,996,0,998,
0,1000,0,1002,0,1004,0,1006,
922,929,1017,895,0,917,0,0,
1015,0,0,1018,0,0,0,0,
/* Block: 8 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
1040,1041,1042,1043,1044,1045,1046,1047,
1048,1049,1050,1051,1052,1053,1054,1055,
1056,1057,1058,1059,1060,1061,1062,1063,
1064,1065,1066,1067,1068,1069,1070,1071,
1024,1025,1026,1027,1028,1029,1030,1031,
1032,1033,1034,1035,1036,1037,1038,1039,
0,1120,0,1122,0,1124,0,1126,
0,1128,0,1130,0,1132,0,1134,
0,1136,0,1138,0,1140,0,1142,
0,1144,0,1146,0,1148,0,1150,
/* Block: 9 */
0,1152,0,0,0,0,0,0,
0,0,0,1162,0,1164,0,1166,
0,1168,0,1170,0,1172,0,1174,
0,1176,0,1178,0,1180,0,1182,
0,1184,0,1186,0,1188,0,1190,
0,1192,0,1194,0,1196,0,1198,
0,1200,0,1202,0,1204,0,1206,
0,1208,0,1210,0,1212,0,1214,
0,0,1217,0,1219,0,1221,0,
1223,0,1225,0,1227,0,1229,1216,
0,1232,0,1234,0,1236,0,1238,
0,1240,0,1242,0,1244,0,1246,
0,1248,0,1250,0,1252,0,1254,
0,1256,0,1258,0,1260,0,1262,
0,1264,0,1266,0,1268,0,1270,
0,1272,0,1274,0,1276,0,1278,
/* Block: 10 */
0,1280,0,1282,0,1284,0,1286,
0,1288,0,1290,0,1292,0,1294,
0,1296,0,1298,0,1300,0,1302,
0,1304,0,1306,0,1308,0,1310,
0,1312,0,1314,0,1316,0,1318,
0,1320,0,1322,0,1324,0,1326,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,1329,1330,1331,1332,1333,1334,1335,
1336,1337,1338,1339,1340,1341,1342,1343,
1344,1345,1346,1347,1348,1349,1350,1351,
1352,1353,1354,1355,1356,1357,1358,1359,
/* Block: 11 */
1360,1361,1362,1363,1364,1365,1366,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 12 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 13 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
7312,7313,7314,7315,7316,7317,7318,7319,
7320,7321,7322,7323,7324,7325,7326,7327,
7328,7329,7330,7331,7332,7333,7334,7335,
7336,7337,7338,7339,7340,7341,7342,7343,
7344,7345,7346,7347,7348,7349,7350,7351,
7352,7353,7354,0,0,7357,7358,7359,
/* Block: 14 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
5104,5105,5106,5107,5108,5109,0,0,
/* Block: 15 */
1042,1044,1054,1057,1058,1058,1066,1122,
42570,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 16 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,42877,0,0,0,11363,0,0,
/* Block: 17 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,42950,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 18 */
0,7680,0,7682,0,7684,0,7686,
0,7688,0,7690,0,7692,0,7694,
0,7696,0,7698,0,7700,0,7702,
0,7704,0,7706,0,7708,0,7710,
0,7712,0,7714,0,7716,0,7718,
0,7720,0,7722,0,7724,0,7726,
0,7728,0,7730,0,7732,0,7734,
0,7736,0,7738,0,7740,0,7742,
0,7744,0,7746,0,7748,0,7750,
0,7752,0,7754,0,7756,0,7758,
0,7760,0,7762,0,7764,0,7766,
0,7768,0,7770,0,7772,0,7774,
0,7776,0,7778,0,7780,0,7782,
0,7784,0,7786,0,7788,0,7790,
0,7792,0,7794,0,7796,0,7798,
0,7800,0,7802,0,7804,0,7806,
/* Block: 19 */
0,7808,0,7810,0,7812,0,7814,
0,7816,0,7818,0,7820,0,7822,
0,7824,0,7826,0,7828,0,0,
0,0,0,7776,0,0,0,0,
0,7840,0,7842,0,7844,0,7846,
0,7848,0,7850,0,7852,0,7854,
0,7856,0,7858,0,7860,0,7862,
0,7864,0,7866,0,7868,0,7870,
0,7872,0,7874,0,7876,0,7878,
0,7880,0,7882,0,7884,0,7886,
0,7888,0,7890,0,7892,0,7894,
0,7896,0,7898,0,7900,0,7902,
0,7904,0,7906,0,7908,0,7910,
0,7912,0,7914,0,7916,0,7918,
0,7920,0,7922,0,7924,0,7926,
0,7928,0,7930,0,7932,0,7934,
/* Block: 20 */
7944,7945,7946,7947,7948,7949,7950,7951,
0,0,0,0,0,0,0,0,
7960,7961,7962,7963,7964,7965,0,0,
0,0,0,0,0,0,0,0,
7976,7977,7978,7979,7980,7981,7982,7983,
0,0,0,0,0,0,0,0,
7992,7993,7994,7995,7996,7997,7998,7999,
0,0,0,0,0,0,0,0,
8008,8009,8010,8011,8012,8013,0,0,
0,0,0,0,0,0,0,0,
0,8025,0,8027,0,8029,0,8031,
0,0,0,0,0,0,0,0,
8040,8041,8042,8043,8044,8045,8046,8047,
0,0,0,0,0,0,0,0,
8122,8123,8136,8137,8138,8139,8154,8155,
8184,8185,8170,8171,8186,8187,0,0,
/* Block: 21 */
8072,8073,8074,8075,8076,8077,8078,8079,
0,0,0,0,0,0,0,0,
8088,8089,8090,8091,8092,8093,8094,8095,
0,0,0,0,0,0,0,0,
8104,8105,8106,8107,8108,8109,8110,8111,
0,0,0,0,0,0,0,0,
8120,8121,0,8124,0,0,0,0,
0,0,0,0,0,0,921,0,
0,0,0,8140,0,0,0,0,
0,0,0,0,0,0,0,0,
8152,8153,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
8168,8169,0,0,0,8172,0,0,
0,0,0,0,0,0,0,0,
0,0,0,8188,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 22 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,8498,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
8544,8545,8546,8547,8548,8549,8550,8551,
8552,8553,8554,8555,8556,8557,8558,8559,
/* Block: 23 */
0,0,0,0,8579,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 24 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
9398,9399,9400,9401,9402,9403,9404,9405,
9406,9407,9408,9409,9410,9411,9412,9413,
9414,9415,9416,9417,9418,9419,9420,9421,
9422,9423,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 25 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
11264,11265,11266,11267,11268,11269,11270,11271,
11272,11273,11274,11275,11276,11277,11278,11279,
11280,11281,11282,11283,11284,11285,11286,11287,
11288,11289,11290,11291,11292,11293,11294,11295,
11296,11297,11298,11299,11300,11301,11302,11303,
11304,11305,11306,11307,11308,11309,11310,11311,
0,11360,0,0,0,570,574,0,
11367,0,11369,0,11371,0,0,0,
0,0,0,11378,0,0,11381,0,
0,0,0,0,0,0,0,0,
/* Block: 26 */
0,11392,0,11394,0,11396,0,11398,
0,11400,0,11402,0,11404,0,11406,
0,11408,0,11410,0,11412,0,11414,
0,11416,0,11418,0,11420,0,11422,
0,11424,0,11426,0,11428,0,11430,
0,11432,0,11434,0,11436,0,11438,
0,11440,0,11442,0,11444,0,11446,
0,11448,0,11450,0,11452,0,11454,
0,11456,0,11458,0,11460,0,11462,
0,11464,0,11466,0,11468,0,11470,
0,11472,0,11474,0,11476,0,11478,
0,11480,0,11482,0,11484,0,11486,
0,11488,0,11490,0,0,0,0,
0,0,0,0,11499,0,11501,0,
0,0,0,11506,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 27 */
4256,4257,4258,4259,4260,4261,4262,4263,
4264,4265,4266,4267,4268,4269,4270,4271,
4272,4273,4274,4275,4276,4277,4278,4279,
4280,4281,4282,4283,4284,4285,4286,4287,
4288,4289,4290,4291,4292,4293,0,4295,
0,0,0,0,0,4301,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 28 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,42560,0,42562,0,42564,0,42566,
0,42568,0,42570,0,42572,0,42574,
0,42576,0,42578,0,42580,0,42582,
0,42584,0,42586,0,42588,0,42590,
0,42592,0,42594,0,42596,0,42598,
0,42600,0,42602,0,42604,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 29 */
0,42624,0,42626,0,42628,0,42630,
0,42632,0,42634,0,42636,0,42638,
0,42640,0,42642,0,42644,0,42646,
0,42648,0,42650,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 30 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,42786,0,42788,0,42790,
0,42792,0,42794,0,42796,0,42798,
0,0,0,42802,0,42804,0,42806,
0,42808,0,42810,0,42812,0,42814,
0,42816,0,42818,0,42820,0,42822,
0,42824,0,42826,0,42828,0,42830,
0,42832,0,42834,0,42836,0,42838,
0,42840,0,42842,0,42844,0,42846,
0,42848,0,42850,0,42852,0,42854,
0,42856,0,42858,0,42860,0,42862,
0,0,0,0,0,0,0,0,
0,0,42873,0,42875,0,0,42878,
/* Block: 31 */
0,42880,0,42882,0,42884,0,42886,
0,0,0,0,42891,0,0,0,
0,42896,0,42898,42948,0,0,42902,
0,42904,0,42906,0,42908,0,42910,
0,42912,0,42914,0,42916,0,42918,
0,42920,0,0,0,0,0,0,
0,0,0,0,0,42932,0,42934,
0,42936,0,42938,0,42940,0,42942,
0,42944,0,42946,0,0,0,0,
42951,0,42953,0,0,0,0,0,
0,42960,0,0,0,0,0,42966,
0,42968,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,42997,0,
0,0,0,0,0,0,0,0,
/* Block: 32 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,42931,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
5024,5025,5026,5027,5028,5029,5030,5031,
5032,5033,5034,5035,5036,5037,5038,5039,
/* Block: 33 */
5040,5041,5042,5043,5044,5045,5046,5047,
5048,5049,5050,5051,5052,5053,5054,5055,
5056,5057,5058,5059,5060,5061,5062,5063,
5064,5065,5066,5067,5068,5069,5070,5071,
5072,5073,5074,5075,5076,5077,5078,5079,
5080,5081,5082,5083,5084,5085,5086,5087,
5088,5089,5090,5091,5092,5093,5094,5095,
5096,5097,5098,5099,5100,5101,5102,5103,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 34 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,65313,65314,65315,65316,65317,65318,65319,
65320,65321,65322,65323,65324,65325,65326,65327,
65328,65329,65330,65331,65332,65333,65334,65335,
65336,65337,65338,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 35 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
66560,66561,66562,66563,66564,66565,66566,66567,
66568,66569,66570,66571,66572,66573,66574,66575,
66576,66577,66578,66579,66580,66581,66582,66583,
66584,66585,66586,66587,66588,66589,66590,66591,
66592,66593,66594,66595,66596,66597,66598,66599,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 36 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
66736,66737,66738,66739,66740,66741,66742,66743,
66744,66745,66746,66747,66748,66749,66750,66751,
66752,66753,66754,66755,66756,66757,66758,66759,
66760,66761,66762,66763,66764,66765,66766,66767,
66768,66769,66770,66771,0,0,0,0,
/* Block: 37 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,66928,
66929,66930,66931,66932,66933,66934,66935,66936,
66937,66938,0,66940,66941,66942,66943,66944,
66945,66946,66947,66948,66949,66950,66951,66952,
66953,66954,0,66956,66957,66958,66959,66960,
66961,66962,0,66964,66965,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 38 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
68736,68737,68738,68739,68740,68741,68742,68743,
68744,68745,68746,68747,68748,68749,68750,68751,
68752,68753,68754,68755,68756,68757,68758,68759,
68760,68761,68762,68763,68764,68765,68766,68767,
68768,68769,68770,68771,68772,68773,68774,68775,
68776,68777,68778,68779,68780,68781,68782,68783,
68784,68785,68786,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 39 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
71840,71841,71842,71843,71844,71845,71846,71847,
71848,71849,71850,71851,71852,71853,71854,71855,
71856,71857,71858,71859,71860,71861,71862,71863,
71864,71865,71866,71867,71868,71869,71870,71871,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 40 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
93760,93761,93762,93763,93764,93765,93766,93767,
93768,93769,93770,93771,93772,93773,93774,93775,
93776,93777,93778,93779,93780,93781,93782,93783,
93784,93785,93786,93787,93788,93789,93790,93791,
/* Block: 41 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,125184,125185,125186,125187,125188,125189,
125190,125191,125192,125193,125194,125195,125196,125197,
125198,125199,125200,125201,125202,125203,125204,125205,
125206,125207,125208,125209,125210,125211,125212,125213,
125214,125215,125216,125217,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0};

uaix_const_data uaix_data_array(unsigned char, stage1_fold, 8704) = {
0,1,2,3,4,5,6,7,
8,9,10,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,11,5,5,5,5,5,12,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,13,5,5,14,15,16,17,
5,5,18,19,5,5,5,5,
5,20,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
21,22,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,23,24,25,26,
5,5,5,5,5,5,27,28,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,29,5,
5,5,5,5,5,5,30,5,
5,5,5,5,5,5,5,5,
31,32,33,34,5,5,5,5,
5,5,5,5,5,5,5,5,
5,35,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,36,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,37,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,38,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5};

uaix_const_data uaix_data_array(type_codept, stage2_fold, 4992) = {
/* Block: 0 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,97,98,99,100,101,102,103,
104,105,106,107,108,109,110,111,
112,113,114,115,116,117,118,119,
120,121,122,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 1 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,956,0,0,
0,0,0,0,0,0,0,0,
224,225,226,227,228,229,230,231,
232,233,234,235,236,237,238,239,
240,241,242,243,244,245,246,0,
248,249,250,251,252,253,254,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 2 */
257,0,259,0,261,0,263,0,
265,0,267,0,269,0,271,0,
273,0,275,0,277,0,279,0,
281,0,283,0,285,0,287,0,
289,0,291,0,293,0,295,0,
297,0,299,0,301,0,303,0,
0,0,307,0,309,0,311,0,
0,314,0,316,0,318,0,320,
0,322,0,324,0,326,0,328,
0,0,331,0,333,0,335,0,
337,0,339,0,341,0,343,0,
345,0,347,0,349,0,351,0,
353,0,355,0,357,0,359,0,
361,0,363,0,365,0,367,0,
369,0,371,0,373,0,375,0,
255,378,0,380,0,382,0,115,
/* Block: 3 */
0,595,387,0,389,0,596,392,
0,598,599,396,0,0,477,601,
603,402,0,608,611,0,617,616,
409,0,0,0,623,626,0,629,
417,0,419,0,421,0,640,424,
0,643,0,0,429,0,648,432,
0,650,651,436,0,438,0,658,
441,0,0,0,445,0,0,0,
0,0,0,0,454,454,0,457,
457,0,460,460,0,462,0,464,
0,466,0,468,0,470,0,472,
0,474,0,476,0,0,479,0,
481,0,483,0,485,0,487,0,
489,0,491,0,493,0,495,0,
0,499,499,0,501,0,405,447,
505,0,507,0,509,0,511,0,
/* Block: 4 */
513,0,515,0,517,0,519,0,
521,0,523,0,525,0,527,0,
529,0,531,0,533,0,535,0,
537,0,539,0,541,0,543,0,
414,0,547,0,549,0,551,0,
553,0,555,0,557,0,559,0,
561,0,563,0,0,0,0,0,
0,0,11365,572,0,410,11366,0,
0,578,0,384,649,652,583,0,
585,0,587,0,589,0,591,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 5 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 6 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,953,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
881,0,883,0,0,0,887,0,
0,0,0,0,0,0,0,1011,
/* Block: 7 */
0,0,0,0,0,0,940,0,
941,942,943,0,972,0,973,974,
0,945,946,947,948,949,950,951,
952,953,954,955,956,957,958,959,
960,961,0,963,964,965,966,967,
968,969,970,971,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,963,0,0,0,0,0,
0,0,0,0,0,0,0,983,
946,952,0,0,0,966,960,0,
985,0,987,0,989,0,991,0,
993,0,995,0,997,0,999,0,
1001,0,1003,0,1005,0,1007,0,
954,961,0,0,952,949,0,1016,
0,1010,1019,0,0,891,892,893,
/* Block: 8 */
1104,1105,1106,1107,1108,1109,1110,1111,
1112,1113,1114,1115,1116,1117,1118,1119,
1072,1073,1074,1075,1076,1077,1078,1079,
1080,1081,1082,1083,1084,1085,1086,1087,
1088,1089,1090,1091,1092,1093,1094,1095,
1096,1097,1098,1099,1100,1101,1102,1103,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
1121,0,1123,0,1125,0,1127,0,
1129,0,1131,0,1133,0,1135,0,
1137,0,1139,0,1141,0,1143,0,
1145,0,1147,0,1149,0,1151,0,
/* Block: 9 */
1153,0,0,0,0,0,0,0,
0,0,1163,0,1165,0,1167,0,
1169,0,1171,0,1173,0,1175,0,
1177,0,1179,0,1181,0,1183,0,
1185,0,1187,0,1189,0,1191,0,
1193,0,1195,0,1197,0,1199,0,
1201,0,1203,0,1205,0,1207,0,
1209,0,1211,0,1213,0,1215,0,
1231,1218,0,1220,0,1222,0,1224,
0,1226,0,1228,0,1230,0,0,
1233,0,1235,0,1237,0,1239,0,
1241,0,1243,0,1245,0,1247,0,
1249,0,1251,0,1253,0,1255,0,
1257,0,1259,0,1261,0,1263,0,
1265,0,1267,0,1269,0,1271,0,
1273,0,1275,0,1277,0,1279,0,
/* Block: 10 */
1281,0,1283,0,1285,0,1287,0,
1289,0,1291,0,1293,0,1295,0,
1297,0,1299,0,1301,0,1303,0,
1305,0,1307,0,1309,0,1311,0,
1313,0,1315,0,1317,0,1319,0,
1321,0,1323,0,1325,0,1327,0,
0,1377,1378,1379,1380,1381,1382,1383,
1384,1385,1386,1387,1388,1389,1390,1391,
1392,1393,1394,1395,1396,1397,1398,1399,
1400,1401,1402,1403,1404,1405,1406,1407,
1408,1409,1410,1411,1412,1413,1414,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 11 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
11520,11521,11522,11523,11524,11525,11526,11527,
11528,11529,11530,11531,11532,11533,11534,11535,
11536,11537,11538,11539,11540,11541,11542,11543,
11544,11545,11546,11547,11548,11549,11550,11551,
11552,11553,11554,11555,11556,11557,0,11559,
0,0,0,0,0,11565,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 12 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
5104,5105,5106,5107,5108,5109,0,0,
/* Block: 13 */
1074,1076,1086,1089,1090,1090,1098,1123,
42571,0,0,0,0,0,0,0,
4304,4305,4306,4307,4308,4309,4310,4311,
4312,4313,4314,4315,4316,4317,4318,4319,
4320,4321,4322,4323,4324,4325,4326,4327,
4328,4329,4330,4331,4332,4333,4334,4335,
4336,4337,4338,4339,4340,4341,4342,4343,
4344,4345,4346,0,0,4349,4350,4351,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 14 */
7681,0,7683,0,7685,0,7687,0,
7689,0,7691,0,7693,0,7695,0,
7697,0,7699,0,7701,0,7703,0,
7705,0,7707,0,7709,0,7711,0,
7713,0,7715,0,7717,0,7719,0,
7721,0,7723,0,7725,0,7727,0,
7729,0,7731,0,7733,0,7735,0,
7737,0,7739,0,7741,0,7743,0,
7745,0,7747,0,7749,0,7751,0,
7753,0,7755,0,7757,0,7759,0,
7761,0,7763,0,7765,0,7767,0,
7769,0,7771,0,7773,0,7775,0,
7777,0,7779,0,7781,0,7783,0,
7785,0,7787,0,7789,0,7791,0,
7793,0,7795,0,7797,0,7799,0,
7801,0,7803,0,7805,0,7807,0,
/* Block: 15 */
7809,0,7811,0,7813,0,7815,0,
7817,0,7819,0,7821,0,7823,0,
7825,0,7827,0,7829,0,0,0,
0,0,0,7777,0,0,223,0,
7841,0,7843,0,7845,0,7847,0,
7849,0,7851,0,7853,0,7855,0,
7857,0,7859,0,7861,0,7863,0,
7865,0,7867,0,7869,0,7871,0,
7873,0,7875,0,7877,0,7879,0,
7881,0,7883,0,7885,0,7887,0,
7889,0,7891,0,7893,0,7895,0,
7897,0,7899,0,7901,0,7903,0,
7905,0,7907,0,7909,0,7911,0,
7913,0,7915,0,7917,0,7919,0,
7921,0,7923,0,7925,0,7927,0,
7929,0,7931,0,7933,0,7935,0,
/* Block: 16 */
0,0,0,0,0,0,0,0,
7936,7937,7938,7939,7940,7941,7942,7943,
0,0,0,0,0,0,0,0,
7952,7953,7954,7955,7956,7957,0,0,
0,0,0,0,0,0,0,0,
7968,7969,7970,7971,7972,7973,7974,7975,
0,0,0,0,0,0,0,0,
7984,7985,7986,7987,7988,7989,7990,7991,
0,0,0,0,0,0,0,0,
8000,8001,8002,8003,8004,8005,0,0,
0,0,0,0,0,0,0,0,
0,8017,0,8019,0,8021,0,8023,
0,0,0,0,0,0,0,0,
8032,8033,8034,8035,8036,8037,8038,8039,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 17 */
0,0,0,0,0,0,0,0,
8064,8065,8066,8067,8068,8069,8070,8071,
0,0,0,0,0,0,0,0,
8080,8081,8082,8083,8084,8085,8086,8087,
0,0,0,0,0,0,0,0,
8096,8097,8098,8099,8100,8101,8102,8103,
0,0,0,0,0,0,0,0,
8112,8113,8048,8049,8115,0,953,0,
0,0,0,0,0,0,0,0,
8050,8051,8052,8053,8131,0,0,0,
0,0,0,912,0,0,0,0,
8144,8145,8054,8055,0,0,0,0,
0,0,0,944,0,0,0,0,
8160,8161,8058,8059,8165,0,0,0,
0,0,0,0,0,0,0,0,
8056,8057,8060,8061,8179,0,0,0,
/* Block: 18 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,969,0,
0,0,107,229,0,0,0,0,
0,0,8526,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
8560,8561,8562,8563,8564,8565,8566,8567,
8568,8569,8570,8571,8572,8573,8574,8575,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 19 */
0,0,0,8580,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 20 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,9424,9425,
9426,9427,9428,9429,9430,9431,9432,9433,
9434,9435,9436,9437,9438,9439,9440,9441,
9442,9443,9444,9445,9446,9447,9448,9449,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 21 */
11312,11313,11314,11315,11316,11317,11318,11319,
11320,11321,11322,11323,11324,11325,11326,11327,
11328,11329,11330,11331,11332,11333,11334,11335,
11336,11337,11338,11339,11340,11341,11342,11343,
11344,11345,11346,11347,11348,11349,11350,11351,
11352,11353,11354,11355,11356,11357,11358,11359,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
11361,0,619,7549,637,0,0,11368,
0,11370,0,11372,0,593,625,592,
594,0,11379,0,0,11382,0,0,
0,0,0,0,0,0,575,576,
/* Block: 22 */
11393,0,11395,0,11397,0,11399,0,
11401,0,11403,0,11405,0,11407,0,
11409,0,11411,0,11413,0,11415,0,
11417,0,11419,0,11421,0,11423,0,
11425,0,11427,0,11429,0,11431,0,
11433,0,11435,0,11437,0,11439,0,
11441,0,11443,0,11445,0,11447,0,
11449,0,11451,0,11453,0,11455,0,
11457,0,11459,0,11461,0,11463,0,
11465,0,11467,0,11469,0,11471,0,
11473,0,11475,0,11477,0,11479,0,
11481,0,11483,0,11485,0,11487,0,
11489,0,11491,0,0,0,0,0,
0,0,0,11500,0,11502,0,0,
0,0,11507,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 23 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
42561,0,42563,0,42565,0,42567,0,
42569,0,42571,0,42573,0,42575,0,
42577,0,42579,0,42581,0,42583,0,
42585,0,42587,0,42589,0,42591,0,
42593,0,42595,0,42597,0,42599,0,
42601,0,42603,0,42605,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 24 */
42625,0,42627,0,42629,0,42631,0,
42633,0,42635,0,42637,0,42639,0,
42641,0,42643,0,42645,0,42647,0,
42649,0,42651,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 25 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,42787,0,42789,0,42791,0,
42793,0,42795,0,42797,0,42799,0,
0,0,42803,0,42805,0,42807,0,
42809,0,42811,0,42813,0,42815,0,
42817,0,42819,0,42821,0,42823,0,
42825,0,42827,0,42829,0,42831,0,
42833,0,42835,0,42837,0,42839,0,
42841,0,42843,0,42845,0,42847,0,
42849,0,42851,0,42853,0,42855,0,
42857,0,42859,0,42861,0,42863,0,
0,0,0,0,0,0,0,0,
0,42874,0,42876,0,7545,42879,0,
/* Block: 26 */
42881,0,42883,0,42885,0,42887,0,
0,0,0,42892,0,613,0,0,
42897,0,42899,0,0,0,42903,0,
42905,0,42907,0,42909,0,42911,0,
42913,0,42915,0,42917,0,42919,0,
42921,0,614,604,609,620,618,0,
670,647,669,43859,42933,0,42935,0,
42937,0,42939,0,42941,0,42943,0,
42945,0,42947,0,42900,642,7566,42952,
0,42954,0,0,0,0,0,0,
42961,0,0,0,0,0,42967,0,
42969,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,42998,0,0,
0,0,0,0,0,0,0,0,
/* Block: 27 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
5024,5025,5026,5027,5028,5029,5030,5031,
5032,5033,5034,5035,5036,5037,5038,5039,
/* Block: 28 */
5040,5041,5042,5043,5044,5045,5046,5047,
5048,5049,5050,5051,5052,5053,5054,5055,
5056,5057,5058,5059,5060,5061,5062,5063,
5064,5065,5066,5067,5068,5069,5070,5071,
5072,5073,5074,5075,5076,5077,5078,5079,
5080,5081,5082,5083,5084,5085,5086,5087,
5088,5089,5090,5091,5092,5093,5094,5095,
5096,5097,5098,5099,5100,5101,5102,5103,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 29 */
0,0,0,0,0,64262,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 30 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,65345,65346,65347,65348,65349,65350,65351,
65352,65353,65354,65355,65356,65357,65358,65359,
65360,65361,65362,65363,65364,65365,65366,65367,
65368,65369,65370,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 31 */
66600,66601,66602,66603,66604,66605,66606,66607,
66608,66609,66610,66611,66612,66613,66614,66615,
66616,66617,66618,66619,66620,66621,66622,66623,
66624,66625,66626,66627,66628,66629,66630,66631,
66632,66633,66634,66635,66636,66637,66638,66639,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 32 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
66776,66777,66778,66779,66780,66781,66782,66783,
66784,66785,66786,66787,66788,66789,66790,66791,
66792,66793,66794,66795,66796,66797,66798,66799,
66800,66801,66802,66803,66804,66805,66806,66807,
66808,66809,66810,66811,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 33 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
66967,66968,66969,66970,66971,66972,66973,66974,
66975,66976,66977,0,66979,66980,66981,66982,
/* Block: 34 */
66983,66984,66985,66986,66987,66988,66989,66990,
66991,66992,66993,0,66995,66996,66997,66998,
66999,67000,67001,0,67003,67004,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 35 */
68800,68801,68802,68803,68804,68805,68806,68807,
68808,68809,68810,68811,68812,68813,68814,68815,
68816,68817,68818,68819,68820,68821,68822,68823,
68824,68825,68826,68827,68828,68829,68830,68831,
68832,68833,68834,68835,68836,68837,68838,68839,
68840,68841,68842,68843,68844,68845,68846,68847,
68848,68849,68850,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 36 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
71872,71873,71874,71875,71876,71877,71878,71879,
71880,71881,71882,71883,71884,71885,71886,71887,
71888,71889,71890,71891,71892,71893,71894,71895,
71896,71897,71898,71899,71900,71901,71902,71903,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 37 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
93792,93793,93794,93795,93796,93797,93798,93799,
93800,93801,93802,93803,93804,93805,93806,93807,
93808,93809,93810,93811,93812,93813,93814,93815,
93816,93817,93818,93819,93820,93821,93822,93823,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 38 */
125218,125219,125220,125221,125222,125223,125224,125225,
125226,125227,125228,125229,125230,125231,125232,125233,
125234,125235,125236,125237,125238,125239,125240,125241,
125242,125243,125244,125245,125246,125247,125248,125249,
125250,125251,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0};

#ifndef UNI_ALGO_DISABLE_SEGMENT_WORD

uaix_const_data uaix_data_array(unsigned char, stage1_title, 8704) = {
0,1,2,3,4,5,6,7,
8,9,10,11,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,13,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,14,15,16,17,18,19,20,
12,12,21,22,12,12,12,12,
12,23,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
24,25,26,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,27,28,29,30,
12,12,12,12,12,12,31,32,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,33,12,
12,12,12,12,12,12,12,12,
34,35,12,36,12,12,12,12,
12,12,12,12,12,12,12,12,
12,37,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,38,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,39,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,40,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12};

uaix_const_data uaix_data_array(type_codept, stage2_title, 5248) = {
/* Block: 0 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,65,66,67,68,69,70,71,
72,73,74,75,76,77,78,79,
80,81,82,83,84,85,86,87,
88,89,90,0,0,0,0,0,
/* Block: 1 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,924,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
192,193,194,195,196,197,198,199,
200,201,202,203,204,205,206,207,
208,209,210,211,212,213,214,0,
216,217,218,219,220,221,222,376,
/* Block: 2 */
0,256,0,258,0,260,0,262,
0,264,0,266,0,268,0,270,
0,272,0,274,0,276,0,278,
0,280,0,282,0,284,0,286,
0,288,0,290,0,292,0,294,
0,296,0,298,0,300,0,302,
0,73,0,306,0,308,0,310,
0,0,313,0,315,0,317,0,
319,0,321,0,323,0,325,0,
327,0,0,330,0,332,0,334,
0,336,0,338,0,340,0,342,
0,344,0,346,0,348,0,350,
0,352,0,354,0,356,0,358,
0,360,0,362,0,364,0,366,
0,368,0,370,0,372,0,374,
0,0,377,0,379,0,381,83,
/* Block: 3 */
579,0,0,386,0,388,0,0,
391,0,0,0,395,0,0,0,
0,0,401,0,0,502,0,0,
0,408,573,0,0,0,544,0,
0,416,0,418,0,420,0,0,
423,0,0,0,0,428,0,0,
431,0,0,0,435,0,437,0,
0,440,0,0,0,444,0,503,
0,0,0,0,453,0,453,456,
0,456,459,0,459,0,461,0,
463,0,465,0,467,0,469,0,
471,0,473,0,475,398,0,478,
0,480,0,482,0,484,0,486,
0,488,0,490,0,492,0,494,
0,498,0,498,0,500,0,0,
0,504,0,506,0,508,0,510,
/* Block: 4 */
0,512,0,514,0,516,0,518,
0,520,0,522,0,524,0,526,
0,528,0,530,0,532,0,534,
0,536,0,538,0,540,0,542,
0,0,0,546,0,548,0,550,
0,552,0,554,0,556,0,558,
0,560,0,562,0,0,0,0,
0,0,0,0,571,0,0,11390,
11391,0,577,0,0,0,0,582,
0,584,0,586,0,588,0,590,
11375,11373,11376,385,390,0,393,394,
0,399,0,400,42923,0,0,0,
403,42924,0,404,0,42893,42922,0,
407,406,42926,11362,42925,0,0,412,
0,11374,413,0,0,415,0,0,
0,0,0,0,0,11364,0,0,
/* Block: 5 */
422,0,42949,425,0,0,0,42929,
430,580,433,434,581,0,0,0,
0,0,439,0,0,0,0,0,
0,0,0,0,0,42930,42928,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 6 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,921,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,880,0,882,0,0,0,886,
0,0,0,1021,1022,1023,0,0,
/* Block: 7 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,902,904,905,906,
0,913,914,915,916,917,918,919,
920,921,922,923,924,925,926,927,
928,929,931,931,932,933,934,935,
936,937,938,939,908,910,911,0,
914,920,0,0,0,934,928,975,
0,984,0,986,0,988,0,990,
0,992,0,994,0,996,0,998,
0,1000,0,1002,0,1004,0,1006,
922,929,1017,895,0,917,0,0,
1015,0,0,1018,0,0,0,0,
/* Block: 8 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
1040,1041,1042,1043,1044,1045,1046,1047,
1048,1049,1050,1051,1052,1053,1054,1055,
1056,1057,1058,1059,1060,1061,1062,1063,
1064,1065,1066,1067,1068,1069,1070,1071,
1024,1025,1026,1027,1028,1029,1030,1031,
1032,1033,1034,1035,1036,1037,1038,1039,
0,1120,0,1122,0,1124,0,1126,
0,1128,0,1130,0,1132,0,1134,
0,1136,0,1138,0,1140,0,1142,
0,1144,0,1146,0,1148,0,1150,
/* Block: 9 */
0,1152,0,0,0,0,0,0,
0,0,0,1162,0,1164,0,1166,
0,1168,0,1170,0,1172,0,1174,
0,1176,0,1178,0,1180,0,1182,
0,1184,0,1186,0,1188,0,1190,
0,1192,0,1194,0,1196,0,1198,
0,1200,0,1202,0,1204,0,1206,
0,1208,0,1210,0,1212,0,1214,
0,0,1217,0,1219,0,1221,0,
1223,0,1225,0,1227,0,1229,1216,
0,1232,0,1234,0,1236,0,1238,
0,1240,0,1242,0,1244,0,1246,
0,1248,0,1250,0,1252,0,1254,
0,1256,0,1258,0,1260,0,1262,
0,1264,0,1266,0,1268,0,1270,
0,1272,0,1274,0,1276,0,1278,
/* Block: 10 */
0,1280,0,1282,0,1284,0,1286,
0,1288,0,1290,0,1292,0,1294,
0,1296,0,1298,0,1300,0,1302,
0,1304,0,1306,0,1308,0,1310,
0,1312,0,1314,0,1316,0,1318,
0,1320,0,1322,0,1324,0,1326,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,1329,1330,1331,1332,1333,1334,1335,
1336,1337,1338,1339,1340,1341,1342,1343,
1344,1345,1346,1347,1348,1349,1350,1351,
1352,1353,1354,1355,1356,1357,1358,1359,
/* Block: 11 */
1360,1361,1362,1363,1364,1365,1366,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 12 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 13 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
5104,5105,5106,5107,5108,5109,0,0,
/* Block: 14 */
1042,1044,1054,1057,1058,1058,1066,1122,
42570,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 15 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,42877,0,0,0,11363,0,0,
/* Block: 16 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,42950,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 17 */
0,7680,0,7682,0,7684,0,7686,
0,7688,0,7690,0,7692,0,7694,
0,7696,0,7698,0,7700,0,7702,
0,7704,0,7706,0,7708,0,7710,
0,7712,0,7714,0,7716,0,7718,
0,7720,0,7722,0,7724,0,7726,
0,7728,0,7730,0,7732,0,7734,
0,7736,0,7738,0,7740,0,7742,
0,7744,0,7746,0,7748,0,7750,
0,7752,0,7754,0,7756,0,7758,
0,7760,0,7762,0,7764,0,7766,
0,7768,0,7770,0,7772,0,7774,
0,7776,0,7778,0,7780,0,7782,
0,7784,0,7786,0,7788,0,7790,
0,7792,0,7794,0,7796,0,7798,
0,7800,0,7802,0,7804,0,7806,
/* Block: 18 */
0,7808,0,7810,0,7812,0,7814,
0,7816,0,7818,0,7820,0,7822,
0,7824,0,7826,0,7828,0,0,
0,0,0,7776,0,0,0,0,
0,7840,0,7842,0,7844,0,7846,
0,7848,0,7850,0,7852,0,7854,
0,7856,0,7858,0,7860,0,7862,
0,7864,0,7866,0,7868,0,7870,
0,7872,0,7874,0,7876,0,7878,
0,7880,0,7882,0,7884,0,7886,
0,7888,0,7890,0,7892,0,7894,
0,7896,0,7898,0,7900,0,7902,
0,7904,0,7906,0,7908,0,7910,
0,7912,0,7914,0,7916,0,7918,
0,7920,0,7922,0,7924,0,7926,
0,7928,0,7930,0,7932,0,7934,
/* Block: 19 */
7944,7945,7946,7947,7948,7949,7950,7951,
0,0,0,0,0,0,0,0,
7960,7961,7962,7963,7964,7965,0,0,
0,0,0,0,0,0,0,0,
7976,7977,7978,7979,7980,7981,7982,7983,
0,0,0,0,0,0,0,0,
7992,7993,7994,7995,7996,7997,7998,7999,
0,0,0,0,0,0,0,0,
8008,8009,8010,8011,8012,8013,0,0,
0,0,0,0,0,0,0,0,
0,8025,0,8027,0,8029,0,8031,
0,0,0,0,0,0,0,0,
8040,8041,8042,8043,8044,8045,8046,8047,
0,0,0,0,0,0,0,0,
8122,8123,8136,8137,8138,8139,8154,8155,
8184,8185,8170,8171,8186,8187,0,0,
/* Block: 20 */
8072,8073,8074,8075,8076,8077,8078,8079,
0,0,0,0,0,0,0,0,
8088,8089,8090,8091,8092,8093,8094,8095,
0,0,0,0,0,0,0,0,
8104,8105,8106,8107,8108,8109,8110,8111,
0,0,0,0,0,0,0,0,
8120,8121,0,8124,0,0,0,0,
0,0,0,0,0,0,921,0,
0,0,0,8140,0,0,0,0,
0,0,0,0,0,0,0,0,
8152,8153,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
8168,8169,0,0,0,8172,0,0,
0,0,0,0,0,0,0,0,
0,0,0,8188,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 21 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,8498,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
8544,8545,8546,8547,8548,8549,8550,8551,
8552,8553,8554,8555,8556,8557,8558,8559,
/* Block: 22 */
0,0,0,0,8579,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 23 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
9398,9399,9400,9401,9402,9403,9404,9405,
9406,9407,9408,9409,9410,9411,9412,9413,
9414,9415,9416,9417,9418,9419,9420,9421,
9422,9423,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 24 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
11264,11265,11266,11267,11268,11269,11270,11271,
11272,11273,11274,11275,11276,11277,11278,11279,
11280,11281,11282,11283,11284,11285,11286,11287,
11288,11289,11290,11291,11292,11293,11294,11295,
11296,11297,11298,11299,11300,11301,11302,11303,
11304,11305,11306,11307,11308,11309,11310,11311,
0,11360,0,0,0,570,574,0,
11367,0,11369,0,11371,0,0,0,
0,0,0,11378,0,0,11381,0,
0,0,0,0,0,0,0,0,
/* Block: 25 */
0,11392,0,11394,0,11396,0,11398,
0,11400,0,11402,0,11404,0,11406,
0,11408,0,11410,0,11412,0,11414,
0,11416,0,11418,0,11420,0,11422,
0,11424,0,11426,0,11428,0,11430,
0,11432,0,11434,0,11436,0,11438,
0,11440,0,11442,0,11444,0,11446,
0,11448,0,11450,0,11452,0,11454,
0,11456,0,11458,0,11460,0,11462,
0,11464,0,11466,0,11468,0,11470,
0,11472,0,11474,0,11476,0,11478,
0,11480,0,11482,0,11484,0,11486,
0,11488,0,11490,0,0,0,0,
0,0,0,0,11499,0,11501,0,
0,0,0,11506,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 26 */
4256,4257,4258,4259,4260,4261,4262,4263,
4264,4265,4266,4267,4268,4269,4270,4271,
4272,4273,4274,4275,4276,4277,4278,4279,
4280,4281,4282,4283,4284,4285,4286,4287,
4288,4289,4290,4291,4292,4293,0,4295,
0,0,0,0,0,4301,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 27 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,42560,0,42562,0,42564,0,42566,
0,42568,0,42570,0,42572,0,42574,
0,42576,0,42578,0,42580,0,42582,
0,42584,0,42586,0,42588,0,42590,
0,42592,0,42594,0,42596,0,42598,
0,42600,0,42602,0,42604,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 28 */
0,42624,0,42626,0,42628,0,42630,
0,42632,0,42634,0,42636,0,42638,
0,42640,0,42642,0,42644,0,42646,
0,42648,0,42650,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 29 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,42786,0,42788,0,42790,
0,42792,0,42794,0,42796,0,42798,
0,0,0,42802,0,42804,0,42806,
0,42808,0,42810,0,42812,0,42814,
0,42816,0,42818,0,42820,0,42822,
0,42824,0,42826,0,42828,0,42830,
0,42832,0,42834,0,42836,0,42838,
0,42840,0,42842,0,42844,0,42846,
0,42848,0,42850,0,42852,0,42854,
0,42856,0,42858,0,42860,0,42862,
0,0,0,0,0,0,0,0,
0,0,42873,0,42875,0,0,42878,
/* Block: 30 */
0,42880,0,42882,0,42884,0,42886,
0,0,0,0,42891,0,0,0,
0,42896,0,42898,42948,0,0,42902,
0,42904,0,42906,0,42908,0,42910,
0,42912,0,42914,0,42916,0,42918,
0,42920,0,0,0,0,0,0,
0,0,0,0,0,42932,0,42934,
0,42936,0,42938,0,42940,0,42942,
0,42944,0,42946,0,0,0,0,
42951,0,42953,0,0,0,0,0,
0,42960,0,0,0,0,0,42966,
0,42968,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,42997,0,
0,0,0,0,0,0,0,0,
/* Block: 31 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,42931,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
5024,5025,5026,5027,5028,5029,5030,5031,
5032,5033,5034,5035,5036,5037,5038,5039,
/* Block: 32 */
5040,5041,5042,5043,5044,5045,5046,5047,
5048,5049,5050,5051,5052,5053,5054,5055,
5056,5057,5058,5059,5060,5061,5062,5063,
5064,5065,5066,5067,5068,5069,5070,5071,
5072,5073,5074,5075,5076,5077,5078,5079,
5080,5081,5082,5083,5084,5085,5086,5087,
5088,5089,5090,5091,5092,5093,5094,5095,
5096,5097,5098,5099,5100,5101,5102,5103,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 33 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,65313,65314,65315,65316,65317,65318,65319,
65320,65321,65322,65323,65324,65325,65326,65327,
65328,65329,65330,65331,65332,65333,65334,65335,
65336,65337,65338,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 34 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
66560,66561,66562,66563,66564,66565,66566,66567,
66568,66569,66570,66571,66572,66573,66574,66575,
66576,66577,66578,66579,66580,66581,66582,66583,
66584,66585,66586,66587,66588,66589,66590,66591,
66592,66593,66594,66595,66596,66597,66598,66599,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 35 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
66736,66737,66738,66739,66740,66741,66742,66743,
66744,66745,66746,66747,66748,66749,66750,66751,
66752,66753,66754,66755,66756,66757,66758,66759,
66760,66761,66762,66763,66764,66765,66766,66767,
66768,66769,66770,66771,0,0,0,0,
/* Block: 36 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,66928,
66929,66930,66931,66932,66933,66934,66935,66936,
66937,66938,0,66940,66941,66942,66943,66944,
66945,66946,66947,66948,66949,66950,66951,66952,
66953,66954,0,66956,66957,66958,66959,66960,
66961,66962,0,66964,66965,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 37 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
68736,68737,68738,68739,68740,68741,68742,68743,
68744,68745,68746,68747,68748,68749,68750,68751,
68752,68753,68754,68755,68756,68757,68758,68759,
68760,68761,68762,68763,68764,68765,68766,68767,
68768,68769,68770,68771,68772,68773,68774,68775,
68776,68777,68778,68779,68780,68781,68782,68783,
68784,68785,68786,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 38 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
71840,71841,71842,71843,71844,71845,71846,71847,
71848,71849,71850,71851,71852,71853,71854,71855,
71856,71857,71858,71859,71860,71861,71862,71863,
71864,71865,71866,71867,71868,71869,71870,71871,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 39 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
93760,93761,93762,93763,93764,93765,93766,93767,
93768,93769,93770,93771,93772,93773,93774,93775,
93776,93777,93778,93779,93780,93781,93782,93783,
93784,93785,93786,93787,93788,93789,93790,93791,
/* Block: 40 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,125184,125185,125186,125187,125188,125189,
125190,125191,125192,125193,125194,125195,125196,125197,
125198,125199,125200,125201,125202,125203,125204,125205,
125206,125207,125208,125209,125210,125211,125212,125213,
125214,125215,125216,125217,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0};

#endif // UNI_ALGO_DISABLE_SEGMENT_WORD

#ifndef UNI_ALGO_DISABLE_COLLATE

uaix_const_data uaix_data_array(unsigned short, stage1_order, 8704) = {
0,1,2,3,4,5,6,7,
8,9,10,11,12,13,14,15,
16,17,18,19,20,21,22,23,
24,25,26,27,28,29,30,31,
32,33,34,35,36,37,38,39,
40,41,42,43,44,45,46,47,
48,49,50,51,52,53,54,55,
56,57,58,59,60,61,62,63,
64,65,66,67,68,69,70,71,
72,73,74,75,76,77,78,79,
80,81,82,83,84,85,86,87,
88,89,90,91,92,93,94,95,
96,97,98,99,100,101,102,103,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,105,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
106,107,108,109,110,111,112,113,
114,115,116,117,118,119,120,121,
122,123,124,125,126,127,128,129,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,130,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,131,132,133,134,135,136,
137,138,139,140,141,142,143,144,
145,146,147,148,104,149,150,151,
152,153,154,155,156,157,158,159,
160,161,162,163,164,165,166,167,
168,169,170,104,171,172,173,174,
175,176,177,178,179,180,181,104,
182,183,104,184,185,186,187,104,
188,189,190,191,192,193,194,104,
195,196,197,198,104,199,200,201,
202,203,204,205,206,207,208,209,
210,211,212,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,213,
214,215,216,217,218,219,220,221,
222,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
223,224,225,226,227,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
228,229,230,231,232,233,234,235,
104,104,104,104,236,237,238,239,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,240,
241,242,243,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
244,245,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,246,247,
248,249,250,251,252,253,254,104,
255,256,257,258,259,260,261,262,
263,264,265,266,267,268,104,104,
104,104,104,104,104,104,269,104,
270,271,272,104,104,273,104,104,
104,274,104,104,104,104,104,275,
276,277,278,104,104,104,104,104,
279,280,281,104,282,283,104,104,
284,285,286,287,288,104,289,290,
291,292,293,294,295,296,297,298,
299,300,301,302,303,304,305,306,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
307,308,309,310,311,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
312,104,313,314,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104};

uaix_const_data uaix_data_array(unsigned short, stage2_order, 40320) = {
/* Block: 0 */
1,2,3,4,5,6,7,8,
9,473,474,475,476,477,10,11,
12,13,14,15,16,17,18,19,
20,21,22,23,24,25,26,27,
478,479,480,481,9655,482,483,484,
485,486,487,488,489,490,491,492,
9712,9798,10011,10176,10323,10463,10595,10707,
10820,10931,493,494,495,496,497,498,
499,11060,11222,11289,11376,11485,11616,11683,
11774,11868,11977,12033,12121,12244,12329,12428,
12596,12673,12724,12841,12952,13048,13193,13266,
13332,13389,13458,500,501,502,503,504,
505,11042,11204,11270,11356,11466,11598,11665,
11756,11847,11959,12015,12101,12225,12311,12410,
12578,12656,12705,12823,12934,13030,13174,13247,
13313,13372,13440,506,507,508,509,28,
/* Block: 1 */
29,30,31,32,33,510,34,35,
36,37,38,39,40,41,42,43,
44,45,46,47,48,49,50,51,
52,53,54,55,56,57,58,59,
511,512,9653,9658,9652,9660,513,514,
515,516,11078,517,518,60,519,520,
521,522,10134,10299,523,13929,524,525,
526,9926,12446,527,9970,9954,10311,528,
11087,11085,11099,11123,11118,11111,11156,11324,
11511,11509,11515,11527,11895,11893,11899,11903,
11417,12359,12455,12453,12459,12480,12473,529,
12492,13074,13072,13078,13086,13411,13523,12900,
11086,11084,11098,11122,11115,11110,11154,11322,
11510,11508,11514,11526,11894,11892,11898,11902,
11415,12358,12454,12452,12458,12479,12470,530,
12491,13073,13071,13077,13083,13410,13522,13417,
/* Block: 2 */
11133,11132,11089,11088,11130,11128,11315,11314,
11317,11316,11321,11320,11319,11318,11402,11401,
11408,11407,11539,11538,11513,11512,11531,11530,
11537,11536,11525,11524,11710,11709,11708,11707,
11714,11713,11716,11715,11798,11797,11809,11807,
11907,11906,11912,11911,11897,11896,11910,11909,
11908,11937,11930,11929,12001,12000,12062,12061,
12704,12146,12145,12150,12149,12148,12147,12162,
12161,12152,12151,12353,12352,12363,12362,12357,
12356,13564,12405,12404,12501,12500,12457,12456,
12478,12477,12530,12529,12749,12748,12755,12754,
12751,12750,12865,12864,12869,12868,12877,12876,
12871,12870,12981,12980,12976,12975,13012,13011,
13099,13098,13105,13104,13076,13075,13082,13081,
13097,13096,13103,13102,13293,13292,13415,13414,
13418,13480,13479,13486,13485,13484,13483,12886,
/* Block: 3 */
11254,11263,11266,11265,13558,13557,12551,11349,
11348,11453,11456,11462,11461,13491,11569,11574,
11579,11661,11660,11743,11752,11828,11956,11947,
12088,12087,12186,12220,13164,12391,12393,12566,
12514,12513,11755,11754,12647,12646,12781,13554,
13553,12924,12929,13016,13019,13018,13021,13116,
13115,13171,13237,13434,13433,13494,13493,13511,
13517,13516,13520,13546,13556,13555,12999,13529,
13587,13589,13591,13593,11437,11436,11435,12165,
12164,12163,12378,12377,12376,11109,11108,11901,
11900,12469,12468,13080,13079,13095,13094,13089,
13088,13093,13092,13091,13090,11568,11121,11120,
11127,11126,11162,11161,11740,11739,11712,11711,
12060,12059,12497,12496,12499,12498,13514,13513,
12002,11433,11432,11430,11706,11705,11829,13530,
12355,12354,11114,11113,11160,11159,12495,12494,
/* Block: 4 */
11137,11136,11139,11138,11547,11546,11549,11548,
11916,11915,11918,11917,12510,12509,12512,12511,
12759,12758,12761,12760,13112,13111,13114,13113,
12885,12884,12985,12984,13439,13438,11800,11799,
12394,11463,12575,12574,13499,13498,11125,11124,
11533,11532,12476,12475,12486,12485,12488,12487,
12490,12489,13424,13423,12212,12401,13025,12003,
11423,12695,11183,11342,11341,12187,13014,12916,
13504,13561,13560,11255,13147,13245,11564,11563,
12007,12006,12703,12702,12786,12785,13432,13431,
11191,11194,11200,11262,12550,11350,11452,11455,
11583,11572,11585,11578,11586,11592,11593,12011,
11742,11731,11736,11751,11596,13158,11831,11843,
11946,11955,11939,12190,12196,12206,12214,13163,
13168,12304,12390,12398,12384,12565,12539,12570,
12653,12788,12791,12795,12799,12800,12805,12809,
/* Block: 5 */
12779,12815,12910,12922,12013,12930,12931,13027,
13020,13146,13170,13236,13244,13310,12221,13429,
13500,13502,13510,13521,13559,13572,13585,13596,
13598,11252,11595,11745,11826,12008,12098,12178,
12701,13581,13583,11431,11442,11440,13000,13004,
12993,11650,12172,12176,13600,13601,13161,13162,
11792,11833,11995,12743,12789,12796,12816,13284,
13407,531,532,11845,13563,11846,13566,13574,
13562,13575,533,534,535,536,537,538,
539,540,541,542,543,544,545,546,
9617,9619,547,548,549,550,551,552,
553,554,555,556,557,558,559,560,
11753,12140,12860,13351,13573,561,562,563,
564,565,566,567,568,569,13565,570,
571,572,573,574,575,576,577,578,
579,580,581,582,583,584,585,586,
/* Block: 6 */
8978,8975,8982,8989,8994,9174,8981,8990,
8986,9175,8984,8988,8983,8995,8996,9176,
9177,9178,8997,8968,8972,8998,9079,9080,
9081,9082,8999,9179,9083,9084,9085,9086,
9087,9180,9181,9182,9183,9184,9185,8992,
8993,9088,9089,9090,9091,9186,9187,9092,
9188,9189,8967,9093,9190,9173,9152,9153,
8991,9191,9094,9095,9096,9000,9001,9002,
8979,8976,8985,8969,8987,9192,9003,9097,
9098,9099,9004,9005,9006,9100,9101,587,
9007,9008,9009,9102,9103,9104,9105,9010,
9193,9106,9107,9011,9108,9012,9013,9109,
9194,9197,9110,11044,11468,11849,12412,13032,
11272,11358,11758,12227,12707,12936,13176,13315,
13764,13763,14244,14243,588,589,13748,13747,
0,0,13848,14076,14074,14078,590,13894,
/* Block: 7 */
0,0,0,0,591,592,13648,593,
13739,13811,13878,0,13999,0,14119,14230,
13887,13608,13669,13684,13700,13719,13757,13771,
13833,13854,13907,13921,13935,13955,13967,13979,
14016,14042,0,14066,14086,14098,14148,14162,
14176,14189,13886,14128,13646,13737,13809,13876,
14130,13602,13662,13677,13694,13707,13751,13765,
13821,13846,13895,13915,13928,13949,13961,13973,
14003,14030,14073,14054,14080,14092,14136,14156,
14170,14183,13885,14127,13997,14117,14228,13914,
13663,13822,14099,14121,14129,14137,14004,13913,
14029,14028,13750,13749,13745,13743,14027,14026,
14242,14241,14311,14310,14321,14320,14323,14322,
14329,14328,14343,14342,14349,14348,14357,14356,
13896,14031,14055,13893,13834,13708,594,14246,
14245,14067,14025,14024,14053,14077,14075,14079,
/* Block: 8 */
14437,14441,14424,14401,14444,14476,14504,14509,
14515,14556,14588,14661,14526,14495,14668,14757,
14370,14386,14392,14397,14416,14433,14447,14462,
14491,14513,14522,14543,14565,14573,14600,14617,
14628,14637,14650,14664,14689,14694,14722,14735,
14761,14768,14776,14784,14791,14802,14808,14816,
14368,14384,14389,14395,14413,14431,14445,14460,
14489,14512,14520,14541,14563,14571,14591,14615,
14626,14634,14646,14662,14687,14692,14720,14733,
14759,14766,14773,14782,14789,14801,14806,14815,
14436,14440,14423,14400,14442,14475,14502,14507,
14514,14555,14587,14660,14525,14494,14667,14756,
14711,14709,14798,14795,14821,14819,14824,14822,
14833,14832,14829,14827,14838,14836,14840,14839,
14842,14841,14845,14843,14847,14846,14849,14848,
14686,14685,14719,14718,14717,14716,14713,14712,
/* Block: 9 */
14625,14624,595,9199,9014,8973,8970,9015,
596,597,14501,14500,14794,14793,14631,14630,
14404,14403,14406,14405,14410,14409,14459,14458,
14430,14429,14528,14527,14536,14535,14534,14533,
14532,14531,14580,14579,14586,14585,14623,14622,
14853,14852,14644,14643,14657,14656,14676,14675,
14679,14678,14702,14701,14730,14729,14745,14744,
14749,14748,14704,14703,14753,14752,14755,14754,
14857,14451,14450,14530,14529,14548,14547,14582,
14581,14578,14577,14747,14746,14568,14567,14856,
14374,14373,14376,14375,14383,14382,14439,14438,
14378,14377,14381,14380,14453,14452,14466,14465,
14481,14480,14499,14498,14497,14496,14609,14608,
14611,14610,14614,14613,14805,14804,14674,14673,
14670,14669,14672,14671,14739,14738,14412,14411,
14788,14787,14408,14407,14698,14697,14700,14699,
/* Block: 10 */
14420,14419,14428,14427,14470,14469,14486,14485,
14560,14559,14590,14589,14642,14641,14655,14654,
14472,14471,14552,14551,14562,14561,14633,14632,
14818,14817,14540,14539,14855,14854,14538,14537,
14554,14553,14584,14583,14621,14620,14706,14705,
14576,14575,14455,14454,14741,14740,14550,14549,
0,15210,15213,15215,15217,15219,15222,15224,
15226,15228,15230,15232,15234,15236,15238,15240,
15242,15244,15246,15248,15250,15256,15259,15261,
15263,15265,15267,15269,15271,15273,15275,15278,
15280,15282,15284,15286,15288,15290,15292,0,
0,15293,598,599,600,601,602,603,
15211,15209,15212,15214,15216,15218,15221,15223,
15225,15227,15229,15231,15233,15235,15237,15239,
15241,15243,15245,15247,15249,15255,15258,15260,
15262,15264,15266,15268,15270,15272,15274,15277,
/* Block: 11 */
15279,15281,15283,15285,15287,15289,15291,15220,
15257,604,605,0,0,606,607,9662,
0,608,609,610,611,612,613,614,
615,616,617,618,619,620,621,622,
623,624,625,626,627,628,629,630,
631,632,633,634,635,636,637,638,
9202,9203,9204,9205,9206,9207,9208,9209,
9210,9212,9213,9214,9217,639,640,9218,
641,9216,9215,642,643,644,645,9211,
0,0,0,0,0,0,0,0,
15294,15301,15305,15308,15312,15315,15320,15322,
15323,15325,15333,15331,15337,15342,15340,15345,
15344,15347,15349,15352,15351,15357,15356,15359,
15361,15364,15370,0,0,0,0,15328,
15318,15319,15329,9615,9616,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 12 */
646,647,648,649,650,651,652,653,
654,655,656,9663,657,658,659,660,
661,662,663,664,665,666,667,668,
669,670,671,672,61,673,674,675,
16530,15421,15432,15435,15442,15445,15451,15495,
15527,15585,15588,15631,15674,15726,15748,15777,
15783,15811,15820,15847,15888,15940,15971,16004,
16026,16042,16068,16243,16245,16527,16528,16529,
676,16097,16145,16175,16249,16303,16341,16400,
16434,16468,16475,9240,9245,9250,9255,9263,
9270,9277,9283,9288,9293,9295,9297,9298,
9299,9301,9302,9303,9304,9305,9306,9296,
9713,9799,10012,10177,10324,10464,10596,10708,
10821,10932,677,678,679,680,15524,16142,
9315,15439,15438,15448,15422,15427,15428,15429,
15431,15654,15659,15558,15664,15665,15563,15666,
/* Block: 13 */
15568,15768,15769,15700,15705,15770,15711,15717,
15790,15793,15794,15795,15796,15799,15803,15806,
15807,15826,15829,15830,15831,15832,15833,15834,
15835,15838,15931,15932,15933,16000,16002,16038,
16090,16122,16125,16127,16128,16134,16135,16169,
16171,16206,16211,16212,16213,16215,16220,16222,
16229,16230,16235,16236,16241,16296,16297,16298,
16299,16395,16382,16388,16393,16394,16417,15716,
16431,16422,16427,16428,16443,16444,16447,16450,
16453,16456,16459,16460,16513,16519,16520,16464,
16521,16526,16535,16538,681,16430,682,683,
684,685,686,687,688,689,690,691,
692,693,694,695,696,16435,16476,697,
698,699,700,701,702,703,15808,15839,
9714,9800,10013,10178,10325,10465,10597,10709,
10822,10933,15934,16003,16092,15426,16313,16429,
/* Block: 14 */
704,705,706,707,708,709,710,711,
712,713,714,715,716,717,0,718,
16544,9316,16545,16547,16548,16551,16550,16553,
16554,16555,16557,16558,16559,16560,16561,16562,
16564,16565,16566,16567,16568,16569,16570,16571,
16573,16574,16575,16576,16577,16546,16549,16552,
9317,9318,9319,9320,9321,9322,9323,9324,
9325,9326,9327,9328,9329,9330,9331,9332,
719,9016,9111,720,721,9017,9112,722,
723,724,725,0,0,16556,16563,16572,
15573,15574,15575,15576,15577,15578,15580,15771,
15772,15809,15810,15840,15935,16093,16094,16095,
16140,16141,16242,16246,16247,16338,16339,16396,
16397,16398,16300,15841,15842,15936,15773,15774,
15937,15843,15775,15449,15450,16531,16532,16533,
16465,16466,16541,16542,15776,15938,15939,16214,
/* Block: 15 */
16614,16617,16618,16619,16621,16622,16623,16624,
16627,16629,16630,16631,16633,16637,16638,16640,
16641,16645,16646,16647,16648,16649,16650,16651,
16634,16615,16616,16632,16620,16642,16643,16644,
16635,16636,16625,16626,16639,16628,16653,16654,
16655,16656,16657,16658,16659,16660,16661,16662,
16663,16652,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
9715,9801,10014,10179,10326,10466,10598,10710,
10823,10934,16664,16665,16666,16667,16668,16669,
16670,16671,16672,16673,16674,16675,16676,16678,
16680,16681,16683,16684,16685,16686,16687,16688,
16689,16690,16691,16692,16693,16694,16695,16696,
16677,16679,16682,9333,9334,9335,9336,9337,
9338,9339,9340,9341,16697,16698,726,727,
728,729,730,0,0,9113,9664,9665,
/* Block: 16 */
15395,15396,15397,15398,15399,15400,15401,15402,
15403,15404,15405,15406,15407,15408,15409,15410,
15411,15412,15413,15414,15415,15416,15417,15418,
9237,9238,15419,15420,9220,9221,9222,9223,
9224,9225,9226,9227,9228,9229,9230,9231,
9232,9233,9234,9235,9236,9239,0,0,
731,732,733,734,735,736,737,738,
739,740,741,742,743,744,745,0,
16589,16590,16591,16592,16593,16594,16595,16596,
16597,16598,16599,16600,16601,16602,16603,16604,
16605,16606,16607,16608,16609,16610,16611,16612,
16613,9114,9115,9116,0,0,746,0,
16578,16579,16580,16581,16582,16583,16584,16585,
16586,16587,16588,0,0,0,0,0,
15496,15497,15498,15499,15500,15501,15502,15503,
15504,15505,15506,15507,15508,15509,15510,15511,
/* Block: 17 */
15512,15513,15514,15423,16436,16477,16478,15424,
747,16399,15710,16040,16041,16244,16543,0,
748,749,0,0,0,0,0,0,
750,751,752,753,754,755,9289,9290,
15579,15582,15722,16039,16133,16173,16301,16340,
15492,15493,15844,16467,15494,15515,15802,16001,
16227,16463,15845,16096,16221,16174,15583,15584,
15671,15846,16534,16126,16170,16387,15581,15672,
15673,15723,16248,16091,16172,15724,15725,16302,
16228,16514,756,757,758,759,760,761,
762,763,764,765,766,767,768,769,
770,771,772,773,774,775,776,777,
778,779,780,9307,9260,9268,9275,9244,
9249,9254,781,782,783,784,785,786,
9243,9248,9253,787,9261,9262,9276,9308,
9309,9313,9314,9311,9312,9310,9269,9300,
/* Block: 18 */
9388,9389,9423,9470,17240,17241,17242,17248,
17249,17250,17251,17252,17254,17256,17257,17258,
17259,17261,17262,17263,17264,17265,17267,17269,
17272,17273,17274,17275,17276,17280,17281,17282,
17283,17285,17288,17290,17291,17292,17293,17294,
17295,17296,17297,17298,17300,17302,17303,17304,
17307,17308,17309,17310,17311,17312,17313,17314,
17315,17316,17338,17339,9359,17317,17337,17343,
17344,17345,17346,17347,17348,17351,17353,17354,
17356,17358,17359,17360,17361,17362,17355,17340,
17237,788,789,8980,8977,17352,17341,17342,
17266,17268,17270,17277,17286,17289,17299,17305,
17253,17255,17349,17350,790,791,9716,9802,
10015,10180,10327,10467,10599,10711,10824,10935,
792,9621,17239,17243,17244,17245,17246,17247,
17284,17278,17306,17271,17279,17318,17287,17301,
/* Block: 19 */
17363,9390,9424,9471,0,17364,17365,17366,
17367,17368,17369,17370,17372,0,0,17374,
17375,0,0,17376,17377,17378,17379,17380,
17381,17382,17383,17384,17385,17386,17387,17388,
17389,17390,17392,17394,17395,17397,17398,17399,
17400,0,17401,17402,17403,17404,17405,17406,
17408,0,17410,0,0,0,17412,17413,
17414,17415,0,0,9360,17416,17417,17418,
17419,17420,17421,17422,17423,0,0,17426,
17427,0,0,17428,17429,17430,17396,0,
0,0,0,0,0,0,0,17431,
0,0,0,0,17391,17393,0,17407,
17371,17373,17424,17425,0,0,9717,9803,
10016,10181,10328,10468,10600,10712,10825,10936,
17409,17411,9666,9667,793,794,795,796,
797,798,799,9668,17432,800,9507,0,
/* Block: 20 */
0,9391,9425,9472,0,17438,17439,17443,
17444,17435,17436,0,0,0,0,17445,
17440,0,0,17437,17441,17450,17451,17453,
17455,17456,17457,17458,17459,17461,17462,17463,
17464,17465,17466,17467,17468,17469,17470,17471,
17472,0,17473,17474,17476,17477,17478,17479,
17481,0,17482,17483,0,17484,17447,0,
17446,17448,0,0,9361,0,17486,17487,
17488,17489,17490,0,0,0,0,17491,
17492,0,0,17493,17494,17495,0,0,
0,17449,0,0,0,0,0,0,
0,17452,17454,17460,17485,0,17475,0,
0,0,0,0,0,0,9718,9804,
10017,10182,10329,10469,10601,10713,10826,10937,
9510,9511,17442,17434,17433,17480,801,0,
0,0,0,0,0,0,0,0,
/* Block: 21 */
0,9392,9426,9473,0,17497,17498,17499,
17500,17501,17502,17503,17505,17507,0,17508,
17509,17510,0,17511,17512,17513,17514,17515,
17516,17517,17518,17519,17520,17522,17523,17524,
17525,17526,17527,17528,17529,17530,17531,17532,
17533,0,17534,17535,17536,17537,17538,17539,
17540,0,17541,17547,0,17542,17543,17544,
17545,17546,0,0,9362,17548,17549,17550,
17551,17552,17553,17554,17555,17558,0,17559,
17560,17561,0,17562,17563,17564,0,0,
17496,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
17504,17506,17556,17557,0,0,9719,9805,
10018,10183,10330,10470,10602,10714,10827,10938,
802,9669,0,0,0,0,0,0,
0,17521,9284,9278,9291,9363,9364,9365,
/* Block: 22 */
0,9393,9427,9474,0,17565,17566,17567,
17568,17569,17570,17571,17573,0,0,17575,
17576,0,0,17577,17578,17579,17580,17581,
17582,17583,17584,17585,17586,17587,17588,17589,
17590,17591,17593,17595,17596,17597,17598,17599,
17600,0,17601,17602,17603,17604,17605,17606,
17608,0,17609,17610,0,17611,17613,17614,
17615,17616,0,0,9366,17617,17618,17619,
17620,17621,17622,17623,17624,0,0,17627,
17628,0,0,17629,17630,17631,0,0,
0,0,0,0,0,9018,17632,17633,
0,0,0,0,17592,17594,0,17607,
17572,17574,17625,17626,0,0,9720,9806,
10019,10184,10331,10471,10603,10715,10828,10939,
803,17612,804,805,806,807,808,809,
0,0,0,0,0,0,0,0,
/* Block: 23 */
0,0,9428,17647,0,17635,17636,17637,
17638,17639,17640,0,0,0,17641,17642,
17643,0,17644,17645,17646,17648,0,0,
0,17649,17650,0,17666,0,17651,17652,
0,0,0,17653,17654,0,0,0,
17655,17665,17656,0,0,0,17657,17658,
17659,17664,17660,17663,17662,17661,17667,17668,
17669,17670,0,0,0,0,17671,17672,
17673,17674,17675,0,0,0,17676,17677,
17678,0,17679,17680,17681,17682,0,0,
17634,0,0,0,0,0,0,17683,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,9721,9807,
10020,10185,10332,10472,10604,10716,10829,10940,
810,811,812,813,814,815,816,817,
818,9671,819,0,0,0,0,0,
/* Block: 24 */
9394,9395,9429,9475,9430,17684,17685,17686,
17687,17688,17689,17690,17692,0,17694,17695,
17696,0,17697,17698,17699,17700,17701,17702,
17703,17704,17705,17707,17708,17710,17711,17712,
17713,17714,17715,17716,17717,17718,17719,17720,
17721,0,17723,17724,17725,17726,17727,17728,
17729,17730,17731,17737,17738,17732,17733,17734,
17735,17736,0,0,9367,17740,17741,17742,
17743,17744,17745,17746,17747,0,17750,17751,
17752,0,17753,17754,17755,17756,0,0,
0,0,0,0,0,17757,17758,0,
17706,17709,17739,0,0,17722,0,0,
17691,17693,17748,17749,0,0,9722,9808,
10021,10186,10333,10473,10605,10717,10830,10941,
0,0,0,0,0,0,0,820,
9723,9809,10022,10187,9810,10023,10188,821,
/* Block: 25 */
17815,9396,9431,9476,822,17759,17760,17761,
17762,17763,17764,17765,17767,0,17769,17770,
17771,0,17772,17773,17774,17775,17776,17777,
17778,17779,17780,17781,17782,17783,17784,17785,
17786,17787,17788,17789,17790,17791,17792,17793,
17794,0,17796,17797,17798,17799,17800,17801,
17802,17803,17804,17810,0,17805,17806,17807,
17808,17809,0,0,9368,17812,17816,17817,
17818,17819,17820,17821,17822,0,17825,17826,
17827,0,17828,17829,17830,17831,0,0,
0,0,0,0,0,17832,17833,0,
0,0,0,0,0,17795,17811,0,
17766,17768,17823,17824,0,0,9724,9811,
10024,10189,10334,10474,10606,10718,10831,10942,
0,17813,17814,9432,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 26 */
9433,9397,9434,9477,17900,17834,17835,17836,
17837,17839,17840,17841,17843,0,17845,17846,
17847,0,17848,17849,17850,17851,17853,17854,
17855,17856,17857,17858,17859,17860,17861,17862,
17863,17864,17865,17866,17868,17869,17870,17871,
17872,17874,17875,17876,17877,17878,17879,17881,
17883,17897,17886,17893,17895,17888,17889,17890,
17891,17892,17898,17918,17919,17899,17901,17902,
17903,17904,17905,17906,17907,0,17910,17911,
17912,0,17913,17914,17915,17917,17884,823,
0,0,0,0,17880,17882,17896,17916,
824,825,826,827,828,829,830,17838,
17842,17844,17908,17909,0,0,9725,9812,
10025,10190,10335,10475,10607,10719,10832,10943,
831,832,833,834,835,836,837,838,
839,840,17867,17873,17885,17887,17894,17852,
/* Block: 27 */
0,9398,9435,9478,0,17920,17921,17922,
17923,17924,17925,17926,17927,17928,17929,17930,
17931,17932,17933,17934,17935,17936,17937,0,
0,0,17938,17939,17940,17941,17942,17943,
17944,17945,17946,17947,17948,17949,17950,17951,
17952,17953,17954,17955,17956,17957,17958,17959,
17960,17961,0,17962,17963,17964,17965,17966,
17967,17968,17969,17970,0,17971,0,0,
17972,17973,17974,17975,17976,17977,17978,0,
0,0,17996,0,0,0,0,17979,
17980,17981,17982,17983,17984,0,17985,0,
17986,17990,17991,17992,17993,17994,17995,17988,
0,0,0,0,0,0,9726,9813,
10026,10191,10336,10476,10608,10720,10833,10944,
0,0,17987,17989,841,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 28 */
0,19433,19434,19435,19436,19437,19438,19439,
19440,19441,19442,19443,19444,19445,19446,19447,
19448,19449,19450,19451,19452,19453,19454,19455,
19456,19457,19458,19459,19460,19461,19462,19463,
19464,19465,19466,19467,19468,19469,19470,19471,
19472,19473,19474,19475,19476,19477,19478,19479,
19480,19481,19482,19483,19484,19485,19486,19487,
19488,19489,19490,0,0,0,0,9676,
19491,19492,19493,19494,19495,19496,9622,9523,
9524,9525,9526,9527,9528,9529,9522,842,
9727,9814,10027,10192,10337,10477,10609,10721,
10834,10945,843,844,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 29 */
0,19498,19499,0,19500,0,19501,19502,
19503,19504,19506,0,19507,19510,19508,19511,
19512,19513,19514,19515,19516,19517,19518,19519,
19520,19521,19522,19523,19524,19525,19526,19527,
19528,19529,19530,19531,0,19532,0,19533,
19534,19535,19505,19536,19539,19540,19541,19542,
19543,19544,19545,19546,19547,19548,19549,19550,
19551,19552,19553,19554,19555,19556,0,0,
19557,19558,19559,19560,19561,0,9623,0,
9531,9532,9533,9534,9535,9536,9530,0,
9728,9815,10028,10193,10338,10478,10610,10722,
10835,10946,0,0,19537,19538,19497,19509,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 30 */
19716,845,846,847,848,849,850,851,
852,853,854,855,856,857,858,859,
860,861,862,863,864,865,866,867,
868,869,870,871,872,873,874,875,
9729,9816,10029,10194,10339,10479,10611,10723,
10836,10947,9911,10119,10284,10429,10569,10684,
10796,10908,11021,9781,876,877,878,879,
880,9539,881,882,883,884,885,886,
19629,19634,19636,19637,19640,19642,19644,19646,
0,19648,19650,19652,19654,19655,19658,19660,
19662,19664,19665,19668,19670,19672,19674,19675,
19678,19680,19682,19684,19685,19688,19691,19693,
19695,19697,19700,19705,19707,19709,19711,19713,
19715,19630,19701,19633,19704,0,0,0,
0,19726,19727,19728,19731,19732,19733,19734,
19735,19736,19737,19738,19739,19740,9436,9479,
/* Block: 31 */
19729,19730,9399,9400,19741,887,888,889,
19718,19720,19724,19725,19722,19719,19721,19723,
19631,19635,19638,19639,19641,19643,19645,19647,
0,19649,19651,19653,19656,19657,19659,19661,
19663,19666,19667,19669,19671,19673,19676,19677,
19679,19681,19683,19686,19687,19689,19692,19694,
19696,19698,19702,19706,19708,19710,19712,19714,
19717,19632,19690,19699,19703,0,890,891,
892,893,894,895,896,897,898,899,
900,901,902,903,904,0,905,906,
907,908,909,910,911,912,913,914,
915,916,917,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 32 */
20351,20353,20355,20359,20362,20364,20367,20371,
20376,20383,20387,20388,20390,20392,20395,20398,
20402,20403,20404,20407,20410,20414,20415,20421,
20424,20427,20429,20431,20435,20437,20444,20447,
20453,20460,20461,20462,20463,20464,20465,20470,
20471,20472,20473,20475,20474,20479,20481,20483,
20486,20491,20495,20482,20498,20493,9437,9543,
9480,20503,20504,20430,20434,20438,20450,20445,
9730,9817,10030,10195,10340,10480,10612,10724,
10837,10948,918,919,920,921,922,923,
20441,20442,20466,20467,20468,20469,20487,20488,
20489,20490,20363,20377,20455,20456,20413,20428,
20436,20381,20499,20505,20506,20443,20459,20500,
20501,20507,20508,20509,20510,20511,20399,20457,
20458,20480,20477,20484,20485,20352,20354,20356,
20365,20374,20384,20405,20411,20416,20417,20422,
/* Block: 33 */
20440,20448,20439,20476,20492,20494,20497,20512,
20514,20517,20518,20513,20515,20516,20419,20519,
9731,9818,10031,10196,10341,10481,10613,10725,
10838,10949,20520,20521,20478,20496,924,925,
15039,15043,15047,15051,15055,15059,15063,15071,
15075,15079,15083,15087,15092,15100,15104,15108,
15112,15116,15120,15128,15132,15136,15140,15144,
15148,15152,15156,15160,15164,15168,15172,15180,
15184,15067,15096,15124,15176,15188,0,15194,
0,0,0,0,0,15204,0,0,
15036,15040,15044,15048,15052,15056,15060,15068,
15072,15076,15080,15084,15088,15097,15101,15105,
15109,15113,15117,15125,15129,15133,15137,15141,
15145,15149,15153,15157,15161,15165,15169,15177,
15181,15064,15093,15121,15173,15185,15189,15191,
15195,15197,15199,926,15090,15201,15205,15207,
/* Block: 34 */
23856,23863,23866,23873,23880,23883,23890,23897,
23904,23907,23914,23917,23927,23936,23939,23947,
23954,23961,23968,23975,23976,23978,23980,23981,
23982,23983,23984,23987,23988,23990,23992,23994,
23995,23997,24000,24002,24004,24005,24006,24007,
24009,24010,24012,24013,24015,24017,24019,24021,
24023,24024,24025,24027,24028,24029,24030,24032,
24033,24034,24035,24036,24037,24038,24039,24040,
24041,24043,24044,24045,24046,24047,24048,24049,
24051,24052,24053,24054,24055,24057,24058,24059,
24060,24061,24062,24063,24064,24065,24066,24067,
24069,24071,24073,24074,24075,24076,24077,24107,
24108,24111,24114,24117,24120,24123,24126,24129,
24132,24135,24138,24141,24144,24147,24150,24153,
24156,24159,24162,24165,24168,24171,24174,24175,
24176,24177,24178,24179,24180,24181,24182,24183,
/* Block: 35 */
24184,24185,24186,24187,24188,24190,24192,24193,
24194,24196,24197,24198,24199,24200,24201,24202,
24203,24204,24206,24208,24209,24211,24212,24213,
24214,24215,24216,24217,24218,24219,24220,24222,
24223,24224,24226,24227,24228,24229,24230,24231,
24255,24256,24257,24260,24261,24264,24267,24268,
24269,24272,24275,24278,24281,24284,24287,24288,
24289,24290,24291,24292,24293,24294,24295,24296,
24297,24298,24299,24300,24301,24302,24303,24304,
24306,24308,24309,24310,24311,24313,24314,24316,
24317,24318,24319,24320,24322,24323,24324,24325,
24327,24328,24330,24331,24332,24333,24335,24336,
24338,24339,24340,24341,24342,24343,24344,24345,
24346,24347,24348,24349,24350,24351,24352,24353,
24354,24355,24357,24359,24360,24361,24362,24363,
24364,24365,24366,24367,24368,24369,24370,24371,
/* Block: 36 */
16756,16757,16758,16759,16760,16761,16762,16763,
16764,16765,16766,16767,16768,16769,16770,16771,
16773,16774,16775,16776,16777,16778,16779,16780,
16781,16782,16783,16784,16785,16786,16787,16788,
16796,16797,16798,16799,16800,16801,16802,16803,
16804,16805,16806,16807,16808,16809,16810,16811,
16813,16814,16815,16816,16817,16818,16819,16820,
16828,16829,16830,16831,16832,16833,16834,16835,
16837,16838,16839,16840,16841,16842,16843,16844,
16845,0,16847,16848,16850,16852,0,0,
16853,16854,16855,16856,16857,16858,16859,0,
16860,0,16861,16862,16863,16864,0,0,
16865,16866,16867,16868,16869,16870,16871,16872,
16880,16881,16882,16883,16884,16885,16886,16887,
16888,16889,16890,16891,16892,16893,16894,16895,
16897,16898,16899,16900,16901,16902,16903,16904,
/* Block: 37 */
16906,16907,16908,16909,16910,16911,16912,16913,
16914,0,16915,16916,16917,16918,0,0,
16919,16920,16921,16922,16923,16924,16925,16926,
16928,16929,16930,16931,16932,16933,16934,16935,
16937,16938,16939,16940,16941,16942,16943,16944,
16946,16947,16948,16949,16950,16951,16952,16953,
16954,0,16956,16957,16959,16961,0,0,
16962,16963,16964,16965,16966,16967,16968,0,
16970,0,16972,16973,16975,16977,0,0,
16978,16979,16980,16981,16982,16983,16984,16985,
16986,16987,16988,16989,16990,16991,16992,0,
16993,16994,16995,16996,16997,16998,16999,17000,
17008,17009,17010,17011,17012,17013,17014,17015,
17016,17017,17018,17019,17020,17021,17022,17023,
17024,17025,17026,17027,17028,17029,17030,17031,
17039,17040,17041,17042,17043,17044,17045,17046,
/* Block: 38 */
17048,17049,17050,17051,17052,17053,17054,17055,
17057,17058,17059,17060,17061,17062,17063,17064,
17065,0,17067,17068,17070,17072,0,0,
17073,17074,17075,17076,17077,17078,17079,17080,
17085,17086,17087,17088,17089,17090,17091,17092,
17094,17095,17096,17097,17098,17099,17100,17101,
17110,17111,17112,17113,17114,17115,17116,17117,
17119,17120,17121,17122,17123,17124,17125,17126,
17134,17135,17136,17137,17138,17139,17140,17141,
17142,17143,17144,17145,17146,17147,17148,17149,
17156,17157,17158,17159,17160,17161,17162,17163,
17171,17172,17173,0,0,9344,9343,9342,
927,928,929,930,931,932,933,934,
935,9819,10032,10197,10342,10482,10614,10726,
10839,10950,936,937,938,939,940,941,
942,943,944,945,946,0,0,0,
/* Block: 39 */
16789,16791,16793,16794,16873,16875,16877,16878,
17150,17152,17154,17155,17164,17166,17168,17169,
947,948,949,950,951,952,953,954,
955,956,0,0,0,0,0,0,
21307,21309,21311,21313,21315,21317,21319,21321,
21323,21325,21327,21329,21331,21333,21335,21337,
21339,21341,21343,21345,21347,21349,21351,21353,
21355,21357,21359,21361,21363,21365,21367,21369,
21371,21373,21375,21377,21379,21381,21383,21385,
21387,21389,21391,21393,21395,21397,21399,21401,
21403,21405,21407,21409,21411,21413,21415,21417,
21419,21421,21423,21425,21427,21429,21431,21433,
21435,21437,21439,21441,21443,21445,21447,21449,
21451,21453,21455,21457,21459,21461,21463,21465,
21467,21469,21471,21473,21475,21477,0,0,
21466,21468,21470,21472,21474,21476,0,0,
/* Block: 40 */
957,21550,21551,21552,21553,21554,21555,21556,
21557,21558,21559,21560,21561,21562,21563,21564,
21565,21566,21567,21568,21569,21570,21571,21572,
21573,21574,21575,21576,21577,21578,21579,21580,
21581,21582,21583,21584,21585,21586,21587,21588,
21589,21590,21591,21592,21593,21594,21595,21596,
21597,21598,21599,21600,21601,21602,21603,21604,
21605,21606,21607,21608,21609,21610,21611,21612,
21613,21614,21615,21616,21617,21618,21619,21620,
21621,21622,21623,21624,21625,21626,21627,21628,
21629,21630,21631,21632,21633,21634,21635,21636,
21637,21638,21639,21640,21641,21642,21643,21644,
21645,21646,21647,21648,21649,21650,21651,21652,
21653,21654,21655,21656,21657,21658,21659,21660,
21661,21662,21663,21664,21665,21666,21667,21668,
21669,21670,21671,21672,21673,21674,21675,21676,
/* Block: 41 */
21677,21678,21679,21680,21681,21682,21683,21684,
21685,21686,21687,21688,21689,21690,21691,21692,
21693,21694,21695,21696,21697,21698,21699,21700,
21701,21702,21703,21704,21705,21706,21707,21708,
21709,21710,21711,21712,21713,21714,21715,21716,
21717,21718,21719,21720,21721,21722,21723,21724,
21725,21726,21727,21728,21729,21730,21731,21732,
21733,21734,21735,21736,21737,21738,21739,21740,
21741,21742,21743,21744,21745,21746,21747,21748,
21749,21750,21751,21752,21753,21754,21755,21756,
21757,21758,21759,21760,21761,21762,21763,21764,
21765,21766,21767,21768,21769,21770,21771,21772,
21773,21774,21775,21776,21777,21778,21779,21780,
21781,21782,21783,21784,21785,21786,21787,21788,
21789,21790,21791,21792,21793,21794,21795,21796,
21797,21798,21799,21800,21801,21802,21803,21804,
/* Block: 42 */
21805,21806,21807,21808,21809,21810,21811,21812,
21813,21814,21815,21816,21817,21818,21819,21820,
21821,21822,21823,21824,21825,21826,21827,21828,
21829,21830,21831,21832,21833,21834,21835,21836,
21837,21838,21839,21840,21841,21842,21843,21844,
21845,21846,21847,21848,21849,21850,21851,21852,
21853,21854,21855,21856,21857,21858,21859,21860,
21861,21862,21863,21864,21865,21866,21867,21868,
21869,21870,21871,21872,21873,21874,21875,21876,
21877,21878,21879,21880,21881,21882,21883,21884,
21885,21886,21887,21888,21889,21890,21891,21892,
21893,21894,21895,21896,21897,21898,21899,21900,
21901,21902,21903,21904,21905,21906,21907,21908,
21909,21910,21911,21912,21913,21914,21915,21916,
21917,21918,21919,21920,21921,21922,21923,21924,
21925,21926,21927,21928,21979,21929,21931,21932,
/* Block: 43 */
21933,21934,21935,21936,21937,21938,21939,21940,
21941,21942,21943,21944,21945,21946,21948,21949,
21950,21951,21952,21953,21954,21955,21962,21963,
21964,21965,21966,21967,21968,21969,21970,21971,
21972,21973,21974,21975,21976,21977,21978,21980,
21981,21982,21983,21984,21985,21986,21987,21988,
21989,21990,21991,21992,21993,21994,21995,21996,
21997,21998,21999,22000,22001,22002,22003,22004,
22005,22006,22007,22008,22009,22010,22011,22012,
22013,22014,22015,22016,22017,22018,22019,22020,
22021,22022,22023,22024,22025,22026,22027,22028,
22029,22030,22031,22032,22033,22034,22035,22036,
22037,22038,22039,22040,22041,22042,22043,22044,
22045,22046,22047,22048,22049,22050,22051,22052,
22053,22054,22055,22056,22057,22058,22059,22060,
22061,22062,22063,22064,22065,22066,22067,22068,
/* Block: 44 */
22069,22070,22071,22072,22073,22074,22075,22076,
22077,22078,22079,22080,22081,22082,22083,22084,
22085,22086,22087,22088,22089,22090,22091,22092,
22093,22094,22095,22096,22097,22098,22099,22100,
22101,22102,22103,22104,22105,22106,22107,22108,
22109,22110,22111,22112,22113,22114,22115,22116,
22117,22118,22119,22120,22121,22122,22123,22124,
22125,22126,22127,22128,22129,22130,22131,22132,
22133,22134,22135,22136,22137,22138,22139,22140,
22141,22142,22143,22144,22145,22146,22147,22148,
22149,22150,22151,22152,22153,22154,22155,22156,
22157,22158,22159,22160,22161,22162,22163,22164,
22165,22166,22167,22168,22169,22170,22171,22172,
22173,22174,22175,22176,22177,958,959,21930,
21947,21956,21957,21958,21959,21960,21961,22178,
22179,22180,22181,22182,22183,22184,22185,22186,
/* Block: 45 */
960,22273,22274,22275,22276,22277,22278,22279,
22280,22281,22282,22283,22284,22285,22286,22287,
22288,22289,22290,22291,22292,22293,22294,22295,
22296,22297,22298,961,962,0,0,0,
22299,22300,22301,22374,22302,22303,22304,22305,
22307,22308,22370,22372,22309,22310,22311,22313,
22314,22315,22316,22317,22318,22319,22320,22322,
22377,22323,22325,22326,22327,22328,22329,22330,
22331,22332,22333,22335,22336,22337,22338,22340,
22341,22343,22344,22345,22347,22348,22349,22351,
22352,22353,22354,22355,22356,22342,22357,22359,
22360,22361,22363,22364,22365,22366,22367,22368,
22375,22379,22380,22376,22378,22381,22382,22383,
22384,22324,22346,963,964,965,22339,22362,
22306,22321,22350,22369,22312,22334,22358,22371,
22373,0,0,0,0,0,0,0,
/* Block: 46 */
20098,20099,20100,20101,20102,20103,20104,20105,
20106,20107,20108,20109,20110,20111,20113,20114,
20115,20116,20117,20118,20119,20120,0,0,
0,0,0,0,0,0,0,20112,
20121,20122,20123,20124,20125,20126,20127,20128,
20129,20130,20131,20132,20133,20134,20135,20136,
20137,20138,20139,20140,20141,966,967,0,
0,0,0,0,0,0,0,0,
20142,20143,20144,20145,20146,20147,20148,20149,
20150,20151,20152,20153,20154,20155,20156,20157,
20158,20159,20160,20161,0,0,0,0,
0,0,0,0,0,0,0,0,
20162,20163,20164,20165,20166,20167,20168,20169,
20170,20171,20172,20173,20174,0,20175,20176,
20177,0,20178,20179,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 47 */
20618,20619,20620,20621,20622,20623,20624,20625,
20626,20627,20628,20629,20630,20631,20632,20633,
20634,20635,20636,20637,20638,20639,20640,20641,
20642,20643,20644,20645,20646,20647,20648,20649,
20650,20651,20652,20654,20655,20656,20657,20658,
20659,20660,20661,20662,20663,20664,20665,20666,
20667,20668,20669,20670,968,969,20671,20672,
20673,20674,20675,20676,20677,20678,20679,20680,
20681,20682,20683,20684,20685,20686,9438,9481,
9544,9545,9546,9019,9020,9021,9022,9023,
9024,9025,20687,970,971,972,973,9624,
974,975,976,9677,20653,9026,0,0,
9732,9820,10033,10198,10343,10483,10615,10727,
10840,10951,0,0,0,0,0,0,
9733,9821,10034,10199,10344,10484,10616,10728,
10841,10952,0,0,0,0,0,0,
/* Block: 48 */
977,978,979,980,981,982,983,984,
985,986,987,62,63,64,65,66,
9734,9822,10035,10200,10345,10485,10617,10729,
10842,10953,0,0,0,0,0,0,
21146,21148,21151,21157,21159,21162,21164,21167,
21168,21169,21174,21176,21179,21181,21186,21188,
21189,21190,21197,21200,21203,21209,21213,21216,
21218,21220,21223,21228,21229,21232,21236,21239,
21240,21241,21242,21145,21149,21152,21158,21160,
21163,21165,21170,21175,21177,21180,21182,21187,
21198,21201,21204,21210,21230,21214,21219,21224,
21234,21237,21243,21244,21207,21150,21153,21156,
21166,21161,21171,21225,21183,21185,21178,21191,
21199,21202,21211,21221,21235,21238,21231,21233,
21245,21205,21215,21154,21226,21217,21222,21212,
21206,0,0,0,0,0,0,0,
/* Block: 49 */
21138,21139,21140,21141,21142,21143,21144,21147,
21155,21227,21172,21208,21246,21248,21249,21251,
21252,21255,21257,21258,21260,21262,21264,21265,
21253,21263,21184,21173,21192,21193,21247,21250,
21254,21256,21194,21261,21195,21196,21266,21267,
21259,21269,21268,0,0,0,0,0,
22187,22188,22189,22190,22191,22192,22193,22194,
22195,22196,22197,22198,22199,22200,22201,22202,
22203,22204,22205,22206,22207,22208,22209,22210,
22211,22212,22213,22214,22215,22216,22217,22218,
22219,22220,22221,22222,22223,22224,22225,22226,
22227,22228,22229,22230,22231,22232,22233,22234,
22235,22236,22237,22238,22239,22240,22241,22242,
22243,22244,22245,22246,22247,22248,22249,22250,
22251,22252,22253,22254,22255,22256,0,0,
0,0,0,0,0,0,0,0,
/* Block: 50 */
20046,20047,20048,20049,20050,20051,20052,20053,
20054,20056,20057,20058,20060,20061,20062,20063,
20064,20065,20066,20067,20068,20069,20070,20071,
20072,20073,20074,20075,20076,20055,20059,0,
20077,20078,20079,20080,20081,20082,20083,20084,
20085,20086,20087,20088,0,0,0,0,
20089,20090,20091,20092,20093,20094,20095,20096,
20097,9555,9556,9557,0,0,0,0,
988,0,0,0,989,990,9735,9823,
10036,10201,10346,10486,10618,10730,10843,10954,
20688,20689,20690,20691,20692,20693,20694,20695,
20696,20697,20698,20699,20700,20701,20702,20703,
20704,20705,20706,20707,20708,20709,20710,20711,
20712,20713,20714,20715,20716,20717,0,0,
20718,20719,20720,20721,20722,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 51 */
20723,20724,20725,20726,20727,20728,20729,20730,
20731,20732,20733,20734,20735,20736,20737,20738,
20739,20740,20741,20742,20743,20744,20745,20746,
20747,20748,20749,20750,20751,20754,20755,20756,
20757,20758,20759,20760,20761,20762,20763,20764,
20765,20766,20767,20768,0,0,0,0,
20769,20770,20771,20772,20773,20774,20775,20776,
20777,20778,20779,20780,20781,20782,20783,20784,
20785,20786,20787,20788,20789,20790,20791,20792,
20793,20794,0,0,0,0,0,0,
9736,9824,10037,10202,10347,10487,10619,10731,
10844,10955,9825,0,0,0,20752,20753,
991,992,993,994,995,996,997,998,
999,1000,1001,1002,1003,1004,1005,1006,
1007,1008,1009,1010,1011,1012,1013,1014,
1015,1016,1017,1018,1019,1020,1021,1022,
/* Block: 52 */
20180,20181,20182,20183,20184,20185,20186,20187,
20188,20189,20190,20191,20192,20193,20194,20195,
20196,20197,20198,20199,20200,20201,20202,20203,
20204,20205,20206,20207,0,0,1023,1024,
20795,20796,20797,20798,20799,20800,20801,20804,
20805,20806,20807,20808,20809,20810,20811,20812,
20813,20814,20815,20816,20817,20818,20819,20820,
20821,20822,20823,20824,20827,20828,20829,20830,
20831,20832,20833,20834,20835,20836,20837,20839,
20840,20841,20842,20843,20844,20853,20854,20855,
20856,20857,20858,20845,20838,20847,20848,20849,
20802,20803,20825,20826,20850,20851,20852,0,
20877,20859,20861,20862,20863,20864,20865,20866,
20867,20868,20869,20846,20860,20876,20870,20871,
20873,20874,20875,20872,9439,9547,9548,9549,
9550,9551,9552,9553,9554,0,0,1025,
/* Block: 53 */
9737,9826,10038,10203,10348,10488,10620,10732,
10845,10956,0,0,0,0,0,0,
9738,9827,10039,10204,10349,10489,10621,10733,
10846,10957,0,0,0,0,0,0,
1026,1027,1028,1029,1030,1031,1032,9625,
1033,1034,1035,1036,1037,1038,0,0,
9027,9028,9029,9030,9031,9117,9118,9119,
9120,9121,9122,9032,9033,9123,9161,13249,
13311,9034,9035,9124,9125,9036,9037,9038,
9039,9040,9126,9041,11721,12768,12990,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 54 */
9401,9402,9440,9512,9482,20947,20948,20949,
20950,20951,20952,20953,20954,20955,20956,20957,
20958,20959,20960,20961,20964,20965,20966,20967,
20968,20969,20970,20972,20973,20974,20975,20976,
20977,20978,20979,20981,20982,20983,20984,20985,
20987,20988,20989,20990,20991,20992,20993,20994,
20996,20997,20998,21001,9369,21002,21003,21004,
21005,21006,21007,21008,21009,21010,21011,21012,
21013,21014,21015,21016,21017,20962,20963,20980,
20986,20995,20999,21000,20971,0,0,0,
9739,9828,10040,10205,10350,10490,10622,10734,
10847,10958,1039,1040,1041,1042,1043,1044,
1045,1046,1047,1048,1049,1050,1051,1052,
1053,1054,1055,1056,1057,1058,1059,1060,
1061,1062,1063,1064,1065,1066,1067,1068,
1069,1070,1071,1072,1073,1074,1075,0,
/* Block: 55 */
9441,9514,9483,19203,19205,19206,19207,19208,
19209,19210,19211,19214,19215,19216,19217,19218,
19219,19220,19221,19222,19223,19224,19225,19226,
19227,19229,19232,19234,19237,19240,19242,19243,
19245,19233,19235,19238,19246,19247,19248,19249,
19250,19251,19252,19253,19231,19241,19213,19244,
9740,9829,10041,10206,10351,10491,10623,10735,
10848,10959,19204,19236,19239,19228,19212,19230,
20231,20232,20233,20234,20235,20236,20237,20238,
20239,20240,20241,20242,20243,20244,20245,20246,
20247,20248,20249,20250,20251,20252,20253,20254,
20255,20256,20257,20258,20259,20260,20261,20262,
20263,20264,20265,20266,20267,20268,9370,20269,
20270,20271,20272,20273,20274,20275,20276,20277,
20278,20279,20280,20281,0,0,0,0,
0,0,0,0,1076,1077,1078,1079,
/* Block: 56 */
19936,19937,19938,19939,19940,19941,19942,19943,
19944,19945,19949,19950,19951,19952,19953,19954,
19955,19956,19957,19958,19959,19960,19961,19962,
19963,19964,19965,19967,19969,19970,19971,19972,
19973,19974,19975,19976,19966,19968,19978,19979,
19980,19981,19982,19983,19984,19985,19986,19987,
19988,19989,19990,19991,19992,19993,19977,9371,
0,0,0,1080,1081,1082,1083,1084,
9741,9830,10042,10207,10352,10492,10624,10736,
10849,10960,0,0,0,19946,19947,19948,
9742,9831,10043,10208,10353,10493,10625,10737,
10850,10961,21270,21271,21272,21273,21274,21275,
21276,21277,21278,21279,21280,21281,21282,21283,
21284,21285,21286,21287,21288,21289,21290,21291,
21292,21293,21294,21295,21296,21297,21298,21299,
21300,21301,21302,21303,21304,21305,1085,1086,
/* Block: 57 */
14390,14414,14592,14635,14647,14648,14774,14796,
14682,0,0,0,0,0,0,0,
15037,15041,15045,15049,15053,15057,15061,15069,
15073,15077,15081,15085,15089,15098,15102,15106,
15110,15114,15118,15126,15130,15134,15138,15142,
15146,15150,15154,15158,15162,15166,15170,15178,
15182,15065,15094,15122,15174,15186,15190,15192,
15196,15198,15200,0,0,15202,15206,15208,
1087,1088,1089,1090,1091,1092,1093,1094,
0,0,0,0,0,0,0,0,
1095,1096,1097,1098,1099,1100,1101,1102,
1103,1104,1105,1106,1107,1108,1109,1110,
1111,1112,1113,1114,1115,1116,1117,1118,
1119,17319,17320,17321,17322,9442,17323,17324,
17325,17326,9484,9485,1120,17328,17329,1121,
1122,1123,17327,0,0,0,0,0,
/* Block: 58 */
11181,11187,11188,11257,11340,11446,11447,11560,
11590,11944,12005,12085,12183,12300,12388,12536,
12553,12537,12554,12547,12541,12577,12560,12562,
12639,12784,12790,13010,13137,13140,13142,13167,
13232,13307,13492,13515,13576,13577,13693,13927,
14023,14052,14182,14546,11081,11157,11241,11256,
11398,11505,11570,11702,11794,11889,11997,12054,
12142,12265,12349,12387,12449,12576,12616,12745,
12972,13068,13285,11079,11193,11197,11189,11240,
11396,11503,11575,11581,11591,11701,11945,12052,
12263,12406,12447,12552,12561,12563,12614,12970,
13066,13141,13165,13212,13578,13675,13691,13706,
14154,14168,11888,12744,13067,13213,13676,13692,
14048,14155,14169,13143,11258,11450,11658,12302,
12389,12644,12787,12807,12908,13015,13495,11747,
14574,11722,12996,11949,11958,12640,13152,13173,
/* Block: 59 */
11261,11451,11659,11741,12086,12204,12303,12397,
12645,12798,12909,12927,13235,13363,13496,11184,
11199,11459,11565,11582,11589,11577,11952,12556,
12928,13153,13519,11202,11310,11351,11418,11588,
11635,12012,11733,13160,11948,11957,11941,11950,
12010,12207,12205,12180,12306,13169,12392,12399,
12386,12567,12654,12912,12925,13017,13148,13172,
13138,13238,13246,13476,13501,13503,13512,13845,
9042,9043,9127,9044,9045,9046,9047,9048,
9049,9050,12708,9051,9052,9053,9054,9128,
9129,9055,13542,11148,11155,11165,11173,11323,
11419,11416,11667,11737,12017,12103,12179,12301,
12313,12385,12780,12771,12825,12887,13442,11195,
11206,11268,11573,11600,12194,12506,12580,12923,
13108,13250,11116,12471,13084,9056,9057,9058,
9059,9130,9131,9060,9132,9133,9061,9134,
/* Block: 60 */
11147,11146,11245,11244,11247,11246,11249,11248,
11326,11325,11404,11403,11410,11409,11414,11413,
11406,11405,11412,11411,11543,11542,11541,11540,
11555,11554,11557,11556,11535,11534,11640,11639,
11718,11717,11804,11803,11813,11812,11802,11801,
11806,11805,11815,11814,11922,11921,11905,11904,
12058,12057,12066,12065,12068,12067,12154,12153,
12156,12155,12160,12159,12158,12157,12269,12268,
12271,12270,12273,12272,12361,12360,12367,12366,
12371,12370,12369,12368,12482,12481,12484,12483,
12505,12504,12503,12502,12621,12620,12623,12622,
12753,12752,12763,12762,12765,12764,12767,12766,
12875,12874,12881,12880,12867,12866,12873,12872,
12883,12882,12979,12978,12983,12982,12989,12988,
12987,12986,13130,13129,13134,13133,13132,13131,
13101,13100,13107,13106,13218,13217,13220,13219,
/* Block: 61 */
13291,13290,13289,13288,13296,13295,13298,13297,
13300,13299,13358,13357,13356,13355,13422,13421,
13482,13481,13488,13487,13490,13489,11816,12977,
13294,13416,11180,12888,12920,12921,12901,11465,
11141,11140,11135,11134,11101,11100,11103,11102,
11107,11106,11105,11104,11145,11144,11091,11090,
11093,11092,11097,11096,11095,11094,11143,11142,
11551,11550,11545,11544,11529,11528,11517,11516,
11519,11518,11523,11522,11521,11520,11553,11552,
11914,11913,11920,11919,12526,12525,12508,12507,
12461,12460,12463,12462,12467,12466,12465,12464,
12528,12527,12516,12515,12518,12517,12522,12521,
12520,12519,12524,12523,13128,13127,13110,13109,
13118,13117,13120,13119,13124,13123,13122,13121,
13126,13125,13413,13412,13428,13427,13426,13425,
13420,13419,12167,12166,13243,13242,13436,13435,
/* Block: 62 */
13614,13630,13620,13636,13616,13632,13624,13640,
13615,13631,13621,13637,13617,13633,13625,13641,
13725,13731,13729,13735,13727,13733,0,0,
13726,13732,13730,13736,13728,13734,0,0,
13777,13793,13783,13799,13779,13795,13787,13803,
13778,13794,13784,13800,13780,13796,13788,13804,
13860,13868,13864,13872,13862,13870,13866,13874,
13861,13869,13865,13873,13863,13871,13867,13875,
13985,13991,13989,13995,13987,13993,0,0,
13986,13992,13990,13996,13988,13994,0,0,
14105,14109,14107,14113,14106,14111,14108,14115,
0,14110,0,14114,0,14112,0,14116,
14196,14212,14202,14218,14198,14214,14206,14222,
14197,14213,14203,14219,14199,14215,14207,14223,
13651,13647,13741,13738,13814,13810,13880,13877,
14001,13998,14122,14118,14233,14229,0,0,
/* Block: 63 */
13628,13644,13622,13638,13618,13634,13626,13642,
13629,13645,13623,13639,13619,13635,13627,13643,
13791,13807,13785,13801,13781,13797,13789,13805,
13792,13808,13786,13802,13782,13798,13790,13806,
14210,14226,14204,14220,14200,14216,14208,14224,
14211,14227,14205,14221,14201,14217,14209,14225,
13654,13658,13653,13660,13650,0,13656,13657,
13655,13659,13652,13649,13661,1124,13847,1125,
1126,1127,13816,13819,13813,0,13817,13818,
13742,13740,13815,13812,13820,1128,1129,1130,
13882,13891,13889,13888,0,0,13884,13890,
13883,13892,13881,13879,0,1131,1132,1133,
14124,14134,14132,14131,14049,14050,14126,14133,
14125,14135,14123,14120,14051,1134,1135,1136,
0,0,14235,14238,14232,0,14236,14237,
14002,14000,14234,14231,14239,1137,1138,0,
/* Block: 64 */
1139,1140,1141,1142,1143,1144,1145,1146,
1147,1148,1149,67,68,69,70,71,
1150,1151,1152,1153,1154,1155,1156,1157,
9603,9605,9607,9609,9604,9606,9608,9610,
1158,1159,1160,1161,1162,1163,1164,1165,
1166,1167,72,73,74,75,76,1168,
1169,1170,1171,1172,1173,1174,1175,1176,
1177,1178,1179,1180,1181,1182,1183,1184,
1185,1186,1187,1188,1189,1190,1191,1192,
1193,1194,1195,1196,1197,1198,1199,1200,
1201,1202,1203,1204,1205,1206,1207,1208,
1209,1210,1211,1212,1213,1214,1215,1216,
77,1217,1218,1219,1220,0,78,79,
80,81,82,83,84,85,86,87,
9794,11887,0,0,10444,10584,10699,10811,
10923,11036,1221,1222,1223,1224,1225,12347,
/* Block: 65 */
9795,9927,10135,10300,10445,10585,10700,10812,
10924,11037,1226,1227,1228,1229,1230,0,
11080,11504,12448,13352,11576,11793,12053,12141,
12264,12348,12615,12861,12971,0,0,0,
9679,9680,9681,9682,9683,9684,9685,12636,
12777,9686,9688,9689,9690,9691,9692,9693,
9694,9695,9696,9697,9698,9699,9700,9701,
9702,9703,9705,9706,9707,9708,9709,9710,
9711,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
9588,9589,9590,9591,9592,9593,9594,9595,
9154,9155,9156,9596,9597,9162,9163,9164,
9165,9598,9166,9167,9168,9157,9599,9600,
9601,9602,9158,9159,9135,9136,9137,9138,
9062,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 66 */
11153,11168,11294,11291,1231,11336,11339,11580,
1232,11618,11669,11777,11778,11779,11760,11808,
11872,11873,12125,12106,1233,12332,12380,1234,
1235,12599,12676,12727,12728,12729,1236,1237,
12896,12995,12998,1238,13461,1239,14190,1240,
13462,1241,12034,11112,11225,11295,1242,11470,
11488,11620,11663,12248,12414,15295,15302,15306,
15309,11852,1243,11643,14005,13678,13685,14017,
1244,1245,1246,1247,1248,11380,11361,11471,
11853,11962,1249,1250,1251,11169,11662,1252,
9991,10005,9946,9963,10154,9977,10161,10313,
10454,9984,10590,9998,10317,10591,10816,9928,
11870,11926,11928,11934,13195,13222,13224,13226,
11936,13334,13360,13362,12123,11292,11378,12246,
11850,11925,11927,11933,13177,13221,13223,13225,
11935,13316,13359,13361,12104,11273,11359,12228,
/* Block: 67 */
1253,1254,1255,11353,11352,10626,1256,1257,
1258,9796,1259,1260,0,0,0,0,
1261,1262,1263,1264,1265,1266,1267,1268,
1269,1270,1271,1272,1273,1274,1275,1276,
1277,1278,1279,1280,1281,1282,1283,1284,
1285,1286,1287,1288,1289,1290,1291,1292,
1293,1294,1295,1296,1297,1298,1299,1300,
1301,1302,1303,1304,1305,1306,1307,1308,
1309,1310,1311,1312,1313,1314,1315,1316,
1317,1318,1319,1320,1321,1322,1323,1324,
1325,1326,1327,1328,1329,1330,1331,1332,
1333,1334,1335,1336,1337,1338,1339,1340,
1341,1342,1343,1344,1345,1346,1347,1348,
1349,1350,1351,1352,1353,1354,1355,1356,
1357,1358,1359,1360,1361,1362,1363,1364,
1365,1366,1367,1368,1369,1370,1371,1372,
/* Block: 68 */
1373,1374,1375,1376,1377,1378,1379,1380,
1381,1382,1383,1384,1385,1386,1387,1388,
1389,1390,1391,1392,1393,1394,1395,1396,
1397,1398,1399,1400,1401,1402,1403,1404,
1405,1406,1407,1408,1409,1410,1411,1412,
1413,1414,1415,1416,1417,1418,1419,1420,
1421,1422,1423,1424,1425,1426,1427,1428,
1429,1430,1431,1432,1433,1434,1435,1436,
1437,1438,1439,1440,1441,1442,1443,1444,
1445,1446,1447,1448,1449,1450,1451,1452,
1453,1454,1455,1456,1457,1458,1459,1460,
1461,1462,1463,1464,1465,1466,1467,1468,
1469,1470,1471,1472,1473,1474,1475,1476,
1477,1478,1479,1480,1481,1482,1483,1484,
1485,1486,1487,1488,1489,1490,1491,1492,
1493,1494,1495,1496,1497,1498,1499,1500,
/* Block: 69 */
1501,1502,1503,1504,1505,1506,1507,1508,
1509,1510,1511,1512,1513,1514,1515,1516,
1517,1518,1519,1520,1521,1522,1523,1524,
1525,1526,1527,1528,1529,1530,1531,1532,
1533,1534,1535,1536,1537,1538,1539,1540,
1541,1542,1543,1544,1545,1546,1547,1548,
1549,1550,1551,1552,1553,1554,1555,1556,
1557,1558,1559,1560,1561,1562,1563,1564,
1565,1566,1567,1568,1569,1570,1571,1572,
1573,1574,1575,1576,1577,1578,1579,1580,
1581,1582,1583,1584,1585,1586,1587,1588,
1589,1590,1591,1592,1593,1594,1595,1596,
1597,1598,1599,1600,1601,1602,1603,1604,
1605,1606,1607,1608,1609,1610,1611,1612,
1613,1614,1615,1616,1617,1618,1619,1620,
1621,1622,1623,1624,1625,1626,1627,1628,
/* Block: 70 */
1629,1630,1631,1632,1633,1634,1635,1636,
1637,1638,1639,1640,1641,1642,1643,1644,
1645,1646,1647,1648,1649,1650,1651,1652,
1653,1654,1655,1656,1657,1658,1659,1660,
1661,1662,1663,1664,1665,1666,1667,1668,
1669,1670,1671,1672,1673,1674,1675,1676,
1677,1678,1679,1680,1681,1682,1683,1684,
1685,1686,1687,1688,1689,1690,1691,1692,
1693,1694,1695,1696,1697,1698,1699,1700,
1701,1702,1703,1704,1705,1706,1707,1708,
1709,1710,1711,1712,1713,1714,1715,1716,
1717,1718,1719,1720,1721,1722,1723,1724,
1725,1726,1727,1728,1729,1730,1731,1732,
1733,1734,1735,1736,1737,1738,1739,1740,
1741,1742,1743,1744,1745,1746,1747,1748,
1749,1750,1751,1752,1753,1754,1755,1756,
/* Block: 71 */
1757,1758,1759,1760,1761,1762,1763,1764,
1765,1766,1767,1768,1769,1770,1771,1772,
1773,1774,1775,1776,1777,1778,1779,1780,
1781,1782,1783,1784,1785,1786,1787,1788,
1789,1790,1791,1792,1793,1794,1795,1796,
1797,1798,1799,1800,1801,1802,1803,1804,
1805,1806,1807,1808,1809,1810,1811,1812,
1813,1814,1815,1816,1817,1818,1819,1820,
1821,1822,1823,1824,1825,1826,1827,1828,
1829,1830,1831,1832,1833,1834,1835,1836,
1837,1838,1839,1840,1841,1842,1843,1844,
1845,1846,1847,1848,1849,1850,1851,1852,
1853,1854,1855,1856,1857,1858,1859,1860,
1861,1862,1863,1864,1865,1866,1867,1868,
1869,1870,1871,1872,1873,1874,1875,1876,
1877,1878,1879,1880,1881,1882,1883,1884,
/* Block: 72 */
1885,1886,1887,1888,1889,1890,1891,1892,
1893,1894,1895,1896,1897,1898,1899,1900,
1901,1902,1903,1904,1905,1906,1907,1908,
1909,1910,1911,1912,1913,1914,1915,1916,
1917,1918,1919,1920,1921,1922,1923,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
1924,1925,1926,1927,1928,1929,1930,1931,
1932,1933,1934,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
9921,10129,10294,10439,10579,10694,10806,10918,
11031,9933,9944,9952,9961,9968,9975,9982,
9989,9996,10003,10141,9912,10120,10285,10430,
10570,10685,10797,10909,11022,9931,9942,9950,
/* Block: 73 */
9959,9966,9973,9980,9987,9994,10001,10139,
9913,10121,10286,10431,10571,10686,10798,10910,
11023,9932,9943,9951,9960,9967,9974,9981,
9988,9995,10002,10140,11045,11207,11274,11360,
11469,11601,11668,11759,11851,11961,12018,12105,
12229,12314,12413,12581,12658,12709,12826,12937,
13033,13178,13251,13317,13374,13443,11076,11238,
11307,11394,11501,11633,11699,11790,11885,11993,
12050,12138,12261,12345,12444,12612,12689,12740,
12858,12968,13064,13210,13282,13349,13405,13474,
11059,11221,11288,11375,11484,11615,11682,11773,
11867,11976,12032,12120,12243,12328,12427,12595,
12672,12723,12840,12951,13047,13192,13265,13331,
13388,13457,9790,9945,9953,9962,9969,9976,
9983,9990,9997,10004,10142,9922,10130,10295,
10440,10580,10695,10807,10919,11032,9934,9791,
/* Block: 74 */
1935,1936,1937,1938,1939,1940,1941,1942,
1943,1944,1945,1946,1947,1948,1949,1950,
1951,1952,1953,1954,1955,1956,1957,1958,
1959,1960,1961,1962,1963,1964,1965,1966,
1967,1968,1969,1970,1971,1972,1973,1974,
1975,1976,1977,1978,1979,1980,1981,1982,
1983,1984,1985,1986,1987,1988,1989,1990,
1991,1992,1993,1994,1995,1996,1997,1998,
1999,2000,2001,2002,2003,2004,2005,2006,
2007,2008,2009,2010,2011,2012,2013,2014,
2015,2016,2017,2018,2019,2020,2021,2022,
2023,2024,2025,2026,2027,2028,2029,2030,
2031,2032,2033,2034,2035,2036,2037,2038,
2039,2040,2041,2042,2043,2044,2045,2046,
2047,2048,2049,2050,2051,2052,2053,2054,
2055,2056,2057,2058,2059,2060,2061,2062,
/* Block: 75 */
2063,2064,2065,2066,2067,2068,2069,2070,
2071,2072,2073,2074,2075,2076,2077,2078,
2079,2080,2081,2082,2083,2084,2085,2086,
2087,2088,2089,2090,2091,2092,2093,2094,
2095,2096,2097,2098,2099,2100,2101,2102,
2103,2104,2105,2106,2107,2108,2109,2110,
2111,2112,2113,2114,2115,2116,2117,2118,
2119,2120,2121,2122,2123,2124,2125,2126,
2127,2128,2129,2130,2131,2132,2133,2134,
2135,2136,2137,2138,2139,2140,2141,2142,
2143,2144,2145,2146,2147,2148,2149,2150,
2151,2152,2153,2154,2155,2156,2157,2158,
2159,2160,2161,2162,2163,2164,2165,2166,
2167,2168,2169,2170,2171,2172,2173,2174,
2175,2176,2177,2178,2179,2180,2181,2182,
2183,2184,2185,2186,2187,2188,2189,2190,
/* Block: 76 */
2191,2192,2193,2194,2195,2196,2197,2198,
2199,2200,2201,2202,2203,2204,2205,2206,
2207,2208,2209,2210,2211,2212,2213,2214,
2215,2216,2217,2218,2219,2220,2221,2222,
2223,2224,2225,2226,2227,2228,2229,2230,
2231,2232,2233,2234,2235,2236,2237,2238,
2239,2240,2241,2242,2243,2244,2245,2246,
2247,2248,2249,2250,2251,2252,2253,2254,
2255,2256,2257,2258,2259,2260,2261,2262,
2263,2264,2265,2266,2267,2268,2269,2270,
2271,2272,2273,2274,2275,2276,2277,2278,
2279,2280,2281,2282,2283,2284,2285,2286,
2287,2288,2289,2290,2291,2292,2293,2294,
2295,2296,2297,2298,2299,2300,2301,2302,
2303,2304,2305,2306,2307,2308,2309,2310,
2311,2312,2313,2314,2315,2316,2317,2318,
/* Block: 77 */
2319,2320,2321,2322,2323,2324,2325,2326,
2327,2328,2329,2330,2331,2332,2333,2334,
2335,2336,2337,2338,2339,2340,2341,2342,
2343,2344,2345,2346,2347,2348,2349,2350,
2351,2352,2353,2354,2355,2356,2357,2358,
2359,2360,2361,2362,2363,2364,2365,2366,
2367,2368,2369,2370,2371,2372,2373,2374,
2375,2376,2377,2378,2379,2380,2381,2382,
2383,2384,2385,2386,2387,2388,2389,2390,
2391,2392,2393,2394,2395,2396,2397,2398,
2399,2400,2401,2402,2403,2404,2405,2406,
2407,2408,2409,2410,2411,2412,2413,2414,
2415,2416,2417,2418,2419,2420,2421,2422,
2423,2424,2425,2426,2427,2428,2429,2430,
2431,2432,2433,2434,2435,2436,2437,2438,
2439,2440,2441,2442,2443,2444,2445,2446,
/* Block: 78 */
2447,2448,2449,2450,2451,2452,2453,2454,
2455,2456,2457,2458,2459,2460,2461,2462,
2463,2464,2465,2466,2467,2468,2469,2470,
2471,2472,2473,2474,2475,2476,2477,2478,
2479,2480,2481,2482,2483,2484,2485,2486,
2487,2488,2489,2490,2491,2492,2493,2494,
2495,2496,2497,2498,2499,2500,2501,2502,
2503,2504,2505,2506,2507,2508,2509,2510,
2511,2512,2513,2514,2515,2516,2517,2518,
2519,2520,2521,2522,2523,2524,2525,2526,
2527,2528,2529,2530,2531,2532,2533,2534,
2535,2536,2537,2538,2539,2540,2541,2542,
2543,2544,2545,2546,2547,2548,2549,2550,
2551,2552,2553,2554,2555,2556,2557,2558,
2559,2560,2561,2562,2563,2564,9923,10131,
10296,10441,10581,10696,10808,10920,11033,9935,
/* Block: 79 */
9924,10132,10297,10442,10582,10697,10809,10921,
11034,9936,9925,10133,10298,10443,10583,10698,
10810,10922,11035,9937,2565,2566,2567,2568,
2569,2570,2571,2572,2573,2574,2575,2576,
2577,2578,2579,2580,2581,2582,2583,2584,
2585,2586,2587,2588,2589,2590,2591,2592,
2593,2594,2595,2596,2597,2598,2599,2600,
2601,2602,2603,2604,2605,2606,2607,2608,
2609,2610,2611,2612,2613,2614,2615,2616,
2617,2618,2619,2620,2621,2622,2623,2624,
2625,2626,2627,2628,2629,2630,2631,2632,
2633,2634,2635,2636,2637,2638,2639,2640,
2641,2642,2643,2644,2645,2646,2647,2648,
2649,2650,2651,2652,2653,2654,2655,2656,
2657,2658,2659,2660,2661,2662,2663,2664,
2665,2666,2667,2668,2669,2670,2671,2672,
/* Block: 80 */
2673,2674,2675,2676,2677,2678,2679,2680,
2681,2682,2683,2684,2685,2686,2687,2688,
2689,2690,2691,2692,2693,2694,2695,2696,
2697,2698,2699,2700,2701,2702,2703,2704,
2705,2706,2707,2708,2709,2710,2711,2712,
2713,2714,2715,2716,2717,2718,2719,2720,
2721,2722,2723,2724,2725,2726,2727,2728,
2729,2730,2731,2732,2733,2734,2735,2736,
2737,2738,2739,2740,2741,2742,2743,2744,
2745,2746,2747,2748,2749,2750,2751,2752,
2753,2754,2755,2756,2757,2758,2759,2760,
2761,2762,2763,2764,2765,2766,2767,2768,
2769,2770,2771,2772,2773,2774,2775,2776,
2777,2778,2779,2780,2781,2782,2783,2784,
2785,2786,2787,2788,2789,2790,2791,2792,
2793,2794,2795,2796,2797,2798,2799,2800,
/* Block: 81 */
2801,2802,2803,2804,2805,2806,2807,2808,
2809,2810,2811,2812,2813,2814,2815,2816,
2817,2818,2819,2820,2821,2822,2823,2824,
2825,2826,2827,2828,2829,2830,2831,2832,
2833,2834,2835,2836,2837,2838,2839,2840,
2841,2842,2843,2844,2845,2846,2847,2848,
2849,2850,2851,2852,2853,2854,2855,2856,
2857,2858,2859,2860,2861,2862,2863,2864,
2865,2866,2867,2868,2869,2870,2871,2872,
2873,2874,2875,2876,2877,2878,2879,2880,
2881,2882,2883,2884,2885,2886,2887,2888,
2889,2890,2891,2892,2893,2894,2895,2896,
2897,2898,2899,2900,2901,2902,2903,2904,
2905,2906,2907,2908,2909,2910,2911,2912,
2913,2914,2915,2916,2917,2918,2919,2920,
2921,2922,2923,2924,2925,2926,2927,2928,
/* Block: 82 */
2929,2930,2931,2932,2933,2934,2935,2936,
2937,2938,2939,2940,2941,2942,2943,2944,
2945,2946,2947,2948,2949,2950,2951,2952,
2953,2954,2955,2956,2957,2958,2959,2960,
2961,2962,2963,2964,2965,2966,2967,2968,
2969,2970,2971,2972,2973,2974,2975,2976,
2977,2978,2979,2980,2981,2982,2983,2984,
2985,2986,2987,2988,2989,2990,2991,2992,
2993,2994,2995,2996,2997,2998,2999,3000,
3001,3002,3003,3004,3005,3006,3007,3008,
3009,3010,3011,3012,3013,3014,3015,3016,
3017,3018,3019,3020,3021,3022,3023,3024,
3025,3026,3027,3028,3029,3030,3031,3032,
3033,3034,3035,3036,3037,3038,3039,3040,
3041,3042,3043,3044,3045,3046,3047,3048,
3049,3050,3051,3052,3053,3054,3055,3056,
/* Block: 83 */
3057,3058,3059,3060,3061,3062,3063,3064,
3065,3066,3067,3068,3069,3070,3071,3072,
3073,3074,3075,3076,3077,3078,3079,3080,
3081,3082,3083,3084,3085,3086,3087,3088,
3089,3090,3091,3092,3093,3094,3095,3096,
3097,3098,3099,3100,3101,3102,3103,3104,
3105,3106,3107,3108,3109,3110,3111,3112,
3113,3114,3115,3116,3117,3118,3119,3120,
3121,3122,3123,3124,3125,3126,3127,3128,
3129,3130,3131,3132,3133,3134,3135,3136,
3137,3138,3139,3140,3141,3142,3143,3144,
3145,3146,3147,3148,3149,3150,3151,3152,
3153,3154,3155,3156,3157,3158,3159,3160,
3161,3162,3163,3164,3165,3166,3167,3168,
3169,3170,3171,3172,3173,3174,3175,3176,
3177,3178,3179,3180,3181,3182,3183,3184,
/* Block: 84 */
3185,3186,3187,3188,3189,3190,3191,3192,
3193,3194,3195,3196,3197,3198,3199,3200,
3201,3202,3203,3204,3205,3206,3207,3208,
3209,3210,3211,3212,3213,3214,3215,3216,
3217,3218,3219,3220,3221,3222,3223,3224,
3225,3226,3227,3228,3229,3230,3231,3232,
3233,3234,3235,3236,3237,3238,3239,3240,
3241,3242,3243,3244,3245,3246,3247,3248,
3249,3250,3251,3252,3253,3254,3255,3256,
3257,3258,3259,3260,3261,3262,3263,3264,
3265,3266,3267,3268,3269,3270,3271,3272,
3273,3274,3275,3276,3277,3278,3279,3280,
3281,3282,3283,3284,3285,3286,3287,3288,
3289,3290,3291,3292,3293,3294,3295,3296,
3297,3298,3299,3300,3301,3302,3303,3304,
3305,3306,3307,3308,3309,3310,3311,3312,
/* Block: 85 */
3313,3314,3315,3316,3317,3318,3319,3320,
3321,3322,3323,3324,3325,3326,3327,3328,
3329,3330,3331,3332,3333,3334,3335,3336,
3337,3338,3339,3340,3341,3342,3343,3344,
3345,3346,3347,3348,3349,3350,3351,3352,
3353,3354,3355,3356,3357,3358,3359,3360,
3361,3362,3363,3364,3365,3366,3367,3368,
3369,3370,3371,3372,3373,3374,3375,3376,
3377,3378,3379,3380,3381,3382,3383,3384,
3385,3386,3387,3388,3389,3390,3391,3392,
3393,3394,3395,3396,3397,3398,3399,3400,
3401,3402,3403,3404,3405,3406,3407,3408,
3409,3410,3411,3412,3413,3414,3415,3416,
3417,3418,3419,3420,3421,3422,3423,3424,
3425,3426,3427,3428,3429,3430,3431,3432,
3433,3434,3435,3436,3437,3438,3439,3440,
/* Block: 86 */
3441,3442,3443,3444,3445,3446,3447,3448,
3449,3450,3451,3452,3453,3454,3455,3456,
3457,3458,3459,3460,3461,3462,3463,3464,
3465,3466,3467,3468,3469,3470,3471,3472,
3473,3474,3475,3476,3477,3478,3479,3480,
3481,3482,3483,3484,3485,3486,3487,3488,
3489,3490,3491,3492,3493,3494,3495,3496,
3497,3498,3499,3500,3501,3502,3503,3504,
3505,3506,3507,3508,3509,3510,3511,3512,
3513,3514,3515,3516,3517,3518,3519,3520,
3521,3522,3523,3524,3525,3526,3527,3528,
3529,3530,3531,3532,3533,3534,3535,3536,
3537,3538,3539,3540,3541,3542,3543,3544,
3545,3546,3547,3548,3549,3550,3551,3552,
3553,3554,3555,3556,0,0,3557,3558,
3559,3560,3561,3562,3563,3564,3565,3566,
/* Block: 87 */
3567,3568,3569,3570,3571,3572,3573,3574,
3575,3576,3577,3578,3579,3580,3581,3582,
3583,3584,3585,3586,3587,3588,0,3589,
3590,3591,3592,3593,3594,3595,3596,3597,
3598,3599,3600,3601,3602,3603,3604,3605,
3606,3607,3608,3609,3610,3611,3612,3613,
3614,3615,3616,3617,3618,3619,3620,3621,
3622,3623,3624,3625,3626,3627,3628,3629,
3630,3631,3632,3633,3634,3635,3636,3637,
3638,3639,3640,3641,3642,3643,3644,3645,
3646,3647,3648,3649,3650,3651,3652,3653,
3654,3655,3656,3657,3658,3659,3660,3661,
3662,3663,3664,3665,3666,3667,3668,3669,
3670,3671,3672,3673,3674,3675,3676,3677,
3678,3679,3680,3681,3682,3683,3684,3685,
3686,3687,3688,3689,3690,3691,3692,3693,
/* Block: 88 */
14861,14864,14867,14870,14873,14876,14879,14881,
14884,14887,14890,14893,14896,14899,14902,14905,
14908,14911,14914,14917,14920,14923,14926,14929,
14932,14934,14936,14939,14942,14945,14948,14951,
14954,14957,14959,14962,14965,14967,14970,14973,
14976,14979,14982,14984,14986,14988,14990,14992,
14859,14862,14865,14868,14871,14874,14877,14880,
14882,14885,14888,14891,14894,14897,14900,14903,
14906,14909,14912,14915,14918,14921,14924,14927,
14930,14933,14935,14937,14940,14943,14946,14949,
14952,14955,14958,14960,14963,14966,14968,14971,
14974,14977,14980,14983,14985,14987,14989,14991,
12189,12188,12191,12641,12801,11182,13013,11835,
11834,12090,12089,13507,13506,11196,12305,11192,
11201,13239,13309,13308,13241,11837,11836,12655,
11567,12797,12564,11571,11996,13214,12917,13505,
/* Block: 89 */
14248,14247,14250,14249,14252,14251,14254,14253,
14256,14255,14260,14259,14262,14261,14264,14263,
14266,14265,14268,14267,14270,14269,14275,14274,
14277,14276,14279,14278,14285,14284,14287,14286,
14289,14288,14291,14290,14293,14292,14295,14294,
14297,14296,14299,14298,14301,14300,14303,14302,
14305,14304,14359,14358,14361,14360,14258,14257,
14273,14272,14281,14280,14283,14282,14307,14306,
14309,14308,14315,14314,14317,14316,14319,14318,
14327,14326,14331,14330,14333,14332,14335,14334,
14337,14336,14339,14338,14341,14340,14347,14346,
14351,14350,14353,14352,14355,14354,14363,14362,
14365,14364,14367,14366,14271,3694,3695,3696,
3697,3698,3699,14313,14312,14345,14344,9063,
8974,8971,14325,14324,0,0,0,0,
0,3700,3701,3702,3703,3704,3705,3706,
/* Block: 90 */
15038,15042,15046,15050,15054,15058,15062,15070,
15074,15078,15082,15086,15091,15099,15103,15107,
15111,15115,15119,15127,15131,15135,15139,15143,
15147,15151,15155,15159,15163,15167,15171,15179,
15183,15066,15095,15123,15175,15187,0,15193,
0,0,0,0,0,15203,0,0,
16699,16700,16701,16702,16703,16704,16705,16706,
16707,16708,16709,16710,16712,16713,16714,16715,
16716,16717,16718,16719,16720,16721,16722,16723,
16724,16725,16726,16727,16728,16729,16730,16731,
16732,16733,16734,16735,16737,16738,16739,16740,
16741,16742,16743,16744,16745,16746,16747,16748,
16749,16750,16751,16752,16753,16754,16711,16736,
0,0,0,0,0,0,0,16755,
3707,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,3708,
/* Block: 91 */
16772,16795,16812,16821,16836,16879,16896,16905,
16927,16936,16945,17001,17032,17047,17056,17093,
17102,17118,17170,17081,17082,17083,17084,0,
0,0,0,0,0,0,0,0,
17174,17175,17176,17177,17178,17179,17180,0,
17181,17182,17183,17184,17185,17186,17187,0,
17188,17189,17190,17191,17192,17193,17194,0,
17195,17196,17197,17198,17199,17200,17201,0,
17202,17203,17204,17205,17206,17207,17208,0,
17209,17210,17211,17212,17213,17214,17215,0,
17217,17219,17221,17223,17225,17227,17229,0,
17230,17231,17232,17233,17234,17235,17236,0,
14385,14391,14396,14415,14446,14461,14521,14542,
14564,14572,14593,14616,14627,14636,14649,14693,
14721,14734,14760,14767,14844,14640,14369,14432,
14518,14683,14797,14807,14813,14823,14828,14837,
/* Block: 92 */
3709,3710,3711,3712,3713,3714,3715,3716,
3717,3718,3719,3720,3721,3722,3723,3724,
3725,3726,3727,3728,3729,3730,3731,3732,
3733,3734,3735,3736,3737,3738,3739,3740,
3741,3742,3743,3744,3745,3746,3747,3748,
3749,3750,3751,3752,3753,3754,3755,14771,
3756,3757,3758,3759,3760,3761,3762,3763,
3764,3765,3766,3767,3768,3769,3770,3771,
3772,3773,9611,3774,3775,3776,3777,3778,
3779,3780,3781,3782,3783,3784,3785,3786,
3787,3788,3789,3790,3791,3792,3793,3794,
3795,3796,3797,3798,3799,3800,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 93 */
31777,31944,31787,31786,31785,31806,31853,31872,
31876,31877,31933,31935,32078,32079,32083,32084,
32081,32085,32113,32122,32147,32146,32162,32161,
32208,32243,0,32260,32266,32288,32343,32352,
32356,32361,32362,32417,32439,32440,31771,32450,
32457,32470,32505,32525,32551,32552,32593,32612,
32631,32637,32635,32638,32639,32636,32645,32646,
32647,32655,32669,32668,32671,32686,32700,32701,
32702,32744,32770,32783,32782,32789,32790,32792,
32816,32837,32843,32858,32865,32866,32867,32877,
32908,32909,32911,32912,32917,32919,32920,32938,
32945,32954,32969,32971,32973,32974,32977,32976,
32983,32985,32993,32995,33004,33009,33016,33018,
33024,33028,33036,33047,33048,33050,33051,33054,
33056,33061,33062,33063,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 94 */
31750,31770,31776,31781,31783,31791,31793,31801,
31804,31833,31840,31844,31852,31858,31862,31871,
31874,31875,31893,31908,31913,31916,31917,31920,
31932,31934,31943,31945,31947,31951,31997,32004,
32023,32028,32030,32031,32036,32046,32059,32063,
32074,32077,32082,32086,32094,32095,32106,32109,
32112,32115,32119,32123,32125,32137,32139,32141,
32142,32145,32149,32153,32160,32200,32205,32206,
32241,32242,32250,32252,32255,32257,32259,32263,
32280,32284,32298,32334,32337,32342,32346,32351,
32353,32354,32355,32357,32358,32414,32437,32443,
32444,32445,32446,32448,32449,32456,32465,32468,
32486,32487,32489,32490,32493,32494,32504,32506,
32513,32514,32515,32516,32524,32537,32538,32539,
32550,32575,32576,32585,32590,32592,32602,32611,
32632,32634,32644,32651,32654,32659,32660,32661,
/* Block: 95 */
32667,32670,32678,32680,32683,32685,32690,32692,
32693,32694,32696,32697,32743,32750,32764,32766,
32769,32781,32786,32791,32794,32817,32818,32821,
32822,32823,32838,32839,32842,32848,32850,32859,
32862,32863,32876,32885,32890,32892,32895,32910,
32913,32918,32929,32932,32937,32944,32948,32949,
32950,32951,32955,32956,32959,32970,32972,32975,
32984,32986,32988,32994,32996,32997,33000,33001,
33002,33003,33005,33010,33017,33020,33023,33026,
33027,33029,33031,33033,33034,33038,33040,33042,
33044,33046,33049,33053,33060,33064,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
3801,3802,3803,3804,3805,3806,3807,3808,
3809,3810,3811,3812,3813,3814,3815,3816,
/* Block: 96 */
3817,3818,3819,3820,3821,9636,24545,9743,
3822,3823,3824,3825,3826,3827,3828,3829,
3830,3831,3832,3833,3834,3835,3836,3837,
3838,3839,3840,3841,3842,9612,9613,9614,
3843,9832,10044,10209,10354,10494,10627,10738,
10851,10962,9580,9581,9582,9583,9584,9585,
3844,9641,9642,9643,9644,9645,3845,3846,
31921,31924,31925,9637,24707,3847,3848,3849,
0,24421,24422,24432,24433,24441,24442,24452,
24453,24461,24462,24471,24476,24483,24487,24497,
24502,24509,24514,24518,24523,24529,24534,24538,
24543,24547,24552,24554,24558,24562,24566,24568,
24572,24575,24579,24581,24582,24588,24590,24594,
24598,24603,24607,24612,24616,24621,24625,24630,
24635,24637,24643,24648,24650,24656,24661,24663,
24669,24674,24676,24685,24690,24692,24701,24711,
/* Block: 97 */
24718,24723,24730,24734,24735,24744,24745,24753,
24754,24761,24766,24773,24780,24787,24792,24793,
24801,24809,24815,24821,24448,24470,24508,0,
0,9169,9171,3850,3851,9646,9647,24760,
3852,24423,24425,24434,24436,24443,24445,24454,
24456,24463,24465,24473,24477,24484,24488,24499,
24503,24511,24515,24520,24524,24530,24535,24540,
24544,24549,24553,24555,24559,24563,24567,24569,
24573,24576,24580,24583,24585,24589,24591,24595,
24600,24604,24608,24613,24618,24622,24626,24632,
24636,24638,24645,24649,24651,24658,24662,24664,
24671,24675,24677,24687,24691,24693,24702,24712,
24720,24724,24731,24736,24738,24746,24748,24755,
24757,24763,24768,24775,24782,24789,24794,24795,
24803,24811,24817,24823,24449,24472,24510,24798,
24805,24813,24820,3853,9648,9650,9651,24527,
/* Block: 98 */
0,0,0,0,0,25111,25113,25115,
25117,25119,25120,25122,25124,25125,25128,25132,
25134,25136,25137,25141,25142,25143,25144,25145,
25147,25148,25152,25154,25157,25159,25162,25164,
25165,25167,25168,25169,25170,25172,25175,25176,
25179,25182,25118,25130,25138,25183,25158,25123,
0,23857,23864,24258,23867,24262,24265,23874,
23881,23884,24270,24273,24276,24279,24282,24285,
23985,23891,23898,23905,23998,23908,23915,23918,
23928,23937,23940,23948,23955,23962,23969,24112,
24115,24118,24121,24124,24127,24130,24133,24136,
24139,24142,24145,24148,24151,24154,24157,24160,
24163,24166,24169,24172,24109,23977,23979,24305,
24307,24312,24315,24321,24326,24329,23989,24334,
24337,23991,23993,23996,24001,24003,24008,24011,
24014,24016,24018,24020,24022,24026,24031,24042,
/* Block: 99 */
24050,24056,24356,24358,24068,24070,24072,24189,
24191,24195,24205,24207,24210,24221,24225,0,
3854,3855,31753,31797,31761,32000,31764,31773,
31766,32495,31784,31768,31755,32038,32007,31805,
25112,25146,25135,25127,25160,25161,25156,25155,
25181,25153,25177,25180,25116,25131,25163,25166,
25173,25174,25171,25178,25114,25121,25129,25133,
25149,25150,25151,25126,25139,25140,25184,25185,
3856,3857,3858,3859,3860,3861,3862,3863,
3864,3865,3866,3867,3868,3869,3870,3871,
3872,3873,3874,3875,3876,3877,3878,3879,
3880,3881,3882,3883,3884,3885,3886,3887,
3888,3889,3890,3891,0,0,0,0,
0,0,0,0,0,0,0,3892,
24498,24539,24548,24599,24617,24631,24644,24657,
24670,24686,24719,24762,24767,24774,24781,24788,
/* Block: 100 */
23858,23868,23875,23885,23892,23899,23909,23919,
23929,23941,23949,23956,23963,23970,23861,23871,
23878,23888,23895,23902,23912,23922,23932,23944,
23952,23959,23966,23973,23934,23924,23925,0,
31751,31794,31758,31998,31799,31848,31756,31845,
31788,31922,32285,32415,32359,32299,32896,32005,
32264,32313,32289,32555,31960,32452,32824,32563,
31896,31809,31969,32061,32521,31812,32830,31929,
32567,31814,32681,32684,31975,32124,32251,32595,
9938,10143,10303,10447,10587,10702,10814,10926,
12635,10146,10149,10153,10157,10160,10163,10165,
10167,10169,10304,10306,10308,10309,10310,10312,
23859,23869,23876,23886,23893,23900,23910,23920,
23930,23942,23950,23957,23964,23971,23862,23872,
23879,23889,23896,23903,23913,23923,23933,23945,
23953,23960,23967,23974,23946,23935,23926,3893,
/* Block: 101 */
31752,31796,31760,31999,31800,31849,31757,31846,
31789,31923,32286,32416,32360,32300,32897,32006,
32265,32314,32290,32556,31961,32453,32825,32564,
31897,32578,32497,32047,32872,31832,31936,32370,
32960,31815,31860,32338,31763,31772,31765,32110,
31956,31918,32066,32062,32522,31813,32831,31930,
32034,10314,10315,10316,10318,10448,10449,10450,
10451,10452,10453,10455,10456,10457,10458,10588,
10009,10174,10321,10461,10593,10705,10818,10929,
11040,9940,9948,9957,11820,11558,11559,12174,
24427,24438,24447,24458,24467,24475,24486,24501,
24513,24522,24532,24542,24551,24557,24565,24571,
24578,24587,24593,24602,24610,24615,24620,24624,
24628,24634,24647,24660,24673,24689,24704,24714,
24722,24726,24733,24740,24750,24759,24765,24770,
24777,24784,24791,24797,24804,24812,24819,31811,
/* Block: 102 */
24429,24430,24431,24428,24439,24440,24450,24460,
24459,24469,24468,24478,24479,24480,24481,24482,
24489,24490,24491,24492,24493,24494,24495,24496,
24504,24505,24506,24507,24516,24528,24525,24536,
24537,24546,24560,24561,24574,24597,24605,24606,
24611,24629,24642,24639,24640,24641,24652,24653,
24654,24655,24665,24666,24667,24668,24680,24681,
24682,24683,24684,24678,24679,24696,24698,24699,
24700,24694,24695,24705,24706,24708,24709,24710,
24715,24716,24717,24728,24729,24727,24741,24742,
24751,24771,24772,24779,24778,24785,24786,24799,
9797,10010,10175,10322,10462,10594,10706,10819,
10930,11041,9941,9949,9958,9965,9972,9979,
9986,9993,10000,10007,10145,10148,10152,10156,
10159,11823,11422,11172,11250,12535,12627,11427,
11428,11429,11932,32120,32270,32037,32267,32315,
/* Block: 103 */
12624,12372,13941,12276,12069,12070,12278,11725,
11327,12071,12628,12374,13942,13943,12281,12072,
11825,12073,12282,11726,12997,13944,12284,11426,
12075,11649,12379,13945,12285,11333,12076,12286,
11334,12274,12078,12287,11335,12275,12079,12291,
12293,12625,12080,12289,11727,12774,12775,12776,
12634,12381,13946,12292,12637,12382,13947,12294,
12082,12295,12638,12383,13948,12297,12083,12298,
12084,12299,11163,11251,11328,11330,11331,11337,
11424,11728,11817,11822,11931,12074,12077,12081,
12168,12169,12170,12175,12277,12283,12288,12629,
12630,12631,12633,12898,12904,13303,13227,11164,
10008,10173,10320,10460,10592,10704,10817,10928,
11039,9939,9947,9956,9964,9971,9978,9985,
9992,9999,10006,10144,10147,10151,10155,10158,
10162,10164,10166,10168,10170,10305,10307,11724,
/* Block: 104 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 105 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
3894,3895,3896,3897,3898,3899,3900,3901,
3902,3903,3904,3905,3906,3907,3908,3909,
3910,3911,3912,3913,3914,3915,3916,3917,
3918,3919,3920,3921,3922,3923,3924,3925,
3926,3927,3928,3929,3930,3931,3932,3933,
3934,3935,3936,3937,3938,3939,3940,3941,
3942,3943,3944,3945,3946,3947,3948,3949,
3950,3951,3952,3953,3954,3955,3956,3957,
/* Block: 106 */
25186,25187,25188,25189,25190,25191,25192,25193,
25194,25195,25196,25197,25198,25199,25200,25201,
25202,25203,25204,25205,25206,25207,25208,25209,
25210,25211,25212,25213,25214,25215,25216,25217,
25218,25219,25220,25221,25222,25223,25224,25225,
25226,25227,25228,25229,25230,25231,25232,25233,
25234,25235,25236,25237,25238,25239,25240,25241,
25242,25243,25244,25245,25246,25247,25248,25249,
25250,25251,25252,25253,25254,25255,25256,25257,
25258,25259,25260,25261,25262,25263,25264,25265,
25266,25267,25268,25269,25270,25271,25272,25273,
25274,25275,25276,25277,25278,25279,25280,25281,
25282,25283,25284,25285,25286,25287,25288,25289,
25290,25291,25292,25293,25294,25295,25296,25297,
25298,25299,25300,25301,25302,25303,25304,25305,
25306,25307,25308,25309,25310,25311,25312,25313,
/* Block: 107 */
25314,25315,25316,25317,25318,25319,25320,25321,
25322,25323,25324,25325,25326,25327,25328,25329,
25330,25331,25332,25333,25334,25335,25336,25337,
25338,25339,25340,25341,25342,25343,25344,25345,
25346,25347,25348,25349,25350,25351,25352,25353,
25354,25355,25356,25357,25358,25359,25360,25361,
25362,25363,25364,25365,25366,25367,25368,25369,
25370,25371,25372,25373,25374,25375,25376,25377,
25378,25379,25380,25381,25382,25383,25384,25385,
25386,25387,25388,25389,25390,25391,25392,25393,
25394,25395,25396,25397,25398,25399,25400,25401,
25402,25403,25404,25405,25406,25407,25408,25409,
25410,25411,25412,25413,25414,25415,25416,25417,
25418,25419,25420,25421,25422,25423,25424,25425,
25426,25427,25428,25429,25430,25431,25432,25433,
25434,25435,25436,25437,25438,25439,25440,25441,
/* Block: 108 */
25442,25443,25444,25445,25446,25447,25448,25449,
25450,25451,25452,25453,25454,25455,25456,25457,
25458,25459,25460,25461,25462,25463,25464,25465,
25466,25467,25468,25469,25470,25471,25472,25473,
25474,25475,25476,25477,25478,25479,25480,25481,
25482,25483,25484,25485,25486,25487,25488,25489,
25490,25491,25492,25493,25494,25495,25496,25497,
25498,25499,25500,25501,25502,25503,25504,25505,
25506,25507,25508,25509,25510,25511,25512,25513,
25514,25515,25516,25517,25518,25519,25520,25521,
25522,25523,25524,25525,25526,25527,25528,25529,
25530,25531,25532,25533,25534,25535,25536,25537,
25538,25539,25540,25541,25542,25543,25544,25545,
25546,25547,25548,25549,25550,25551,25552,25553,
25554,25555,25556,25557,25558,25559,25560,25561,
25562,25563,25564,25565,25566,25567,25568,25569,
/* Block: 109 */
25570,25571,25572,25573,25574,25575,25576,25577,
25578,25579,25580,25581,25582,25583,25584,25585,
25586,25587,25588,25589,25590,25591,25592,25593,
25594,25595,25596,25597,25598,25599,25600,25601,
25602,25603,25604,25605,25606,25607,25608,25609,
25610,25611,25612,25613,25614,25615,25616,25617,
25618,25619,25620,25621,25622,25623,25624,25625,
25626,25627,25628,25629,25630,25631,25632,25633,
25634,25635,25636,25637,25638,25639,25640,25641,
25642,25643,25644,25645,25646,25647,25648,25649,
25650,25651,25652,25653,25654,25655,25656,25657,
25658,25659,25660,25661,25662,25663,25664,25665,
25666,25667,25668,25669,25670,25671,25672,25673,
25674,25675,25676,25677,25678,25679,25680,25681,
25682,25683,25684,25685,25686,25687,25688,25689,
25690,25691,25692,25693,25694,25695,25696,25697,
/* Block: 110 */
25698,25699,25700,25701,25702,25703,25704,25705,
25706,25707,25708,25709,25710,25711,25712,25713,
25714,25715,25716,25717,25718,25719,25720,25721,
25722,25723,25724,25725,25726,25727,25728,25729,
25730,25731,25732,25733,25734,25735,25736,25737,
25738,25739,25740,25741,25742,25743,25744,25745,
25746,25747,25748,25749,25750,25751,25752,25753,
25754,25755,25756,25757,25758,25759,25760,25761,
25762,25763,25764,25765,25766,25767,25768,25769,
25770,25771,25772,25773,25774,25775,25776,25777,
25778,25779,25780,25781,25782,25783,25784,25785,
25786,25787,25788,25789,25790,25791,25792,25793,
25794,25795,25796,25797,25798,25799,25800,25801,
25802,25803,25804,25805,25806,25807,25808,25809,
25810,25811,25812,25813,25814,25815,25816,25817,
25818,25819,25820,25821,25822,25823,25824,25825,
/* Block: 111 */
25826,25827,25828,25829,25830,25831,25832,25833,
25834,25835,25836,25837,25838,25839,25840,25841,
25842,25843,25844,25845,25846,25847,25848,25849,
25850,25851,25852,25853,25854,25855,25856,25857,
25858,25859,25860,25861,25862,25863,25864,25865,
25866,25867,25868,25869,25870,25871,25872,25873,
25874,25875,25876,25877,25878,25879,25880,25881,
25882,25883,25884,25885,25886,25887,25888,25889,
25890,25891,25892,25893,25894,25895,25896,25897,
25898,25899,25900,25901,25902,25903,25904,25905,
25906,25907,25908,25909,25910,25911,25912,25913,
25914,25915,25916,25917,25918,25919,25920,25921,
25922,25923,25924,25925,25926,25927,25928,25929,
25930,25931,25932,25933,25934,25935,25936,25937,
25938,25939,25940,25941,25942,25943,25944,25945,
25946,25947,25948,25949,25950,25951,25952,25953,
/* Block: 112 */
25954,25955,25956,25957,25958,25959,25960,25961,
25962,25963,25964,25965,25966,25967,25968,25969,
25970,25971,25972,25973,25974,25975,25976,25977,
25978,25979,25980,25981,25982,25983,25984,25985,
25986,25987,25988,25989,25990,25991,25992,25993,
25994,25995,25996,25997,25998,25999,26000,26001,
26002,26003,26004,26005,26006,26007,26008,26009,
26010,26011,26012,26013,26014,26015,26016,26017,
26018,26019,26020,26021,26022,26023,26024,26025,
26026,26027,26028,26029,26030,26031,26032,26033,
26034,26035,26036,26037,26038,26039,26040,26041,
26042,26043,26044,26045,26046,26047,26048,26049,
26050,26051,26052,26053,26054,26055,26056,26057,
26058,26059,26060,26061,26062,26063,26064,26065,
26066,26067,26068,26069,26070,26071,26072,26073,
26074,26075,26076,26077,26078,26079,26080,26081,
/* Block: 113 */
26082,26083,26084,26085,26086,26087,26088,26089,
26090,26091,26092,26093,26094,26095,26096,26097,
26098,26099,26100,26101,26102,26103,26104,26105,
26106,26107,26108,26109,26110,26111,26112,26113,
26114,26115,26116,26117,26118,26119,26120,26121,
26122,26123,26124,26125,26126,26127,26128,26129,
26130,26131,26132,26133,26134,26135,26136,26137,
26138,26139,26140,26141,26142,26143,26144,26145,
26146,26147,26148,26149,26150,26151,26152,26153,
26154,26155,26156,26157,26158,26159,26160,26161,
26162,26163,26164,26165,26166,26167,26168,26169,
26170,26171,26172,26173,26174,26175,26176,26177,
26178,26179,26180,26181,26182,26183,26184,26185,
26186,26187,26188,26189,26190,26191,26192,26193,
26194,26195,26196,26197,26198,26199,26200,26201,
26202,26203,26204,26205,26206,26207,26208,26209,
/* Block: 114 */
26210,26211,26212,26213,26214,26215,26216,26217,
26218,26219,26220,26221,26222,26223,26224,26225,
26226,26227,26228,26229,26230,26231,26232,26233,
26234,26235,26236,26237,26238,26239,26240,26241,
26242,26243,26244,26245,26246,26247,26248,26249,
26250,26251,26252,26253,26254,26255,26256,26257,
26258,26259,26260,26261,26262,26263,26264,26265,
26266,26267,26268,26269,26270,26271,26272,26273,
26274,26275,26276,26277,26278,26279,26280,26281,
26282,26283,26284,26285,26286,26287,26288,26289,
26290,26291,26292,26293,26294,26295,26296,26297,
26298,26299,26300,26301,26302,26303,26304,26305,
26306,26307,26308,26309,26310,26311,26312,26313,
26314,26315,26316,26317,26318,26319,26320,26321,
26322,26323,26324,26325,26326,26327,26328,26329,
26330,26331,26332,26333,26334,26335,26336,26337,
/* Block: 115 */
26338,26339,26340,26341,26342,26343,26344,26345,
26346,26347,26348,26349,26350,0,0,0,
3958,3959,3960,3961,3962,3963,3964,3965,
3966,3967,3968,3969,3970,3971,3972,3973,
3974,3975,3976,3977,3978,3979,3980,3981,
3982,3983,3984,3985,3986,3987,3988,3989,
3990,3991,3992,3993,3994,3995,3996,3997,
3998,3999,4000,4001,4002,4003,4004,4005,
4006,4007,4008,4009,4010,4011,4012,0,
0,0,0,0,0,0,0,0,
26357,26358,26359,26360,26361,26362,26363,26364,
26365,26366,26367,26368,26369,26370,26371,26372,
26373,26374,26375,26376,26377,26378,26379,26380,
26381,26382,26385,26383,26386,26384,26388,26389,
26390,26391,26392,26393,26394,26395,26396,26397,
26351,26352,26353,26354,26356,26355,4013,4014,
/* Block: 116 */
22560,22561,22562,22563,22564,22565,22566,22567,
22568,22569,22570,22571,22572,22574,22575,22576,
22577,22578,22579,22580,22581,22582,22583,22584,
22585,22586,22587,22588,22589,22590,22591,22593,
22594,22595,22596,22597,22598,22599,22600,22601,
22602,22603,22604,22605,22606,22607,22608,22609,
22610,22611,22612,22613,22615,22616,22617,22618,
22619,22620,22621,22622,22623,22624,22625,22626,
22627,22628,22629,22630,22631,22632,22633,22634,
22636,22637,22638,22639,22640,22641,22642,22643,
22644,22645,22646,22648,22649,22650,22651,22652,
22653,22656,22657,22659,22660,22661,22662,22663,
22664,22666,22667,22668,22669,22670,22671,22672,
22673,22674,22675,22677,22678,22679,22680,22682,
22683,22684,22685,22686,22687,22688,22689,22690,
22691,22692,22693,22694,22695,22696,22697,22698,
/* Block: 117 */
22699,22700,22701,22702,22703,22704,22706,22707,
22709,22710,22711,22712,22713,22714,22715,22716,
22717,22718,22719,22720,22721,22722,22723,22724,
22725,22726,22727,22728,22729,22730,22731,22732,
22733,22734,22735,22736,22737,22738,22739,22740,
22741,22742,22743,22744,22745,22746,22747,22748,
22749,22750,22751,22752,22753,22755,22756,22757,
22758,22759,22760,22761,22762,22763,22764,22765,
22766,22767,22768,22769,22770,22771,22772,22773,
22774,22775,22776,22777,22779,22780,22781,22782,
22783,22784,22787,22788,22789,22790,22791,22792,
22793,22795,22796,22797,22798,22799,22800,22801,
22802,22803,22804,22805,22806,22807,22808,22809,
22810,22811,22812,22813,22814,22815,22816,22817,
22818,22819,22820,22821,22822,22823,22824,22825,
22826,22827,22828,22829,22830,22831,22832,22833,
/* Block: 118 */
22834,22835,22836,22837,22838,22839,22840,22841,
22842,22843,22844,22845,22846,4015,4016,4017,
22654,22676,22708,22573,22592,22614,22635,22647,
22655,22658,22665,22705,22754,22778,22786,22794,
9744,9833,10045,10210,10355,10495,10628,10739,
10852,10963,22681,22785,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
14468,14467,14474,14473,14479,14478,14511,14510,
14519,14517,14684,14681,14715,14714,14770,14769,
14780,14779,14800,14799,14811,14810,14814,14812,
14826,14825,14831,14830,14835,14834,14851,14850,
14726,14725,14426,14425,14558,14557,14570,14569,
14601,14594,14602,14595,14603,14596,14597,9201,
4018,4019,4020,4021,14443,14490,14508,14663,
14775,14783,14790,14710,9064,9065,4022,14772,
/* Block: 119 */
14422,14421,14488,14487,14457,14456,14751,14750,
14483,14482,14659,14658,14653,14652,14728,14727,
14732,14731,14743,14742,14708,14707,14765,14764,
14604,14598,14605,14599,14777,14792,14688,14820,
22847,22848,22849,22850,22851,22852,22853,22854,
22855,22856,22857,22858,22859,22860,22861,22862,
22863,22864,22865,22866,22867,22868,22869,22870,
22871,22872,22873,22874,22875,22876,22877,22878,
22879,22880,22881,22882,22883,22884,22885,22886,
22887,22888,22889,22890,22891,22892,22893,22894,
22895,22896,22897,22898,22899,22900,22901,22902,
22903,22904,22905,22906,22907,22908,22909,22910,
22911,22912,22913,22914,22915,22916,22917,22918,
22919,22920,22921,22922,22923,22924,22925,22926,
9345,9346,4023,4024,4025,4026,4027,4028,
0,0,0,0,0,0,0,0,
/* Block: 120 */
4029,4030,4031,4032,4033,4034,4035,4036,
4037,4038,4039,4040,4041,4042,4043,4044,
4045,4046,4047,4048,4049,4050,4051,4052,
4053,4054,4055,4056,4057,4058,4059,4060,
4061,4062,13568,13567,13580,13579,11841,11840,
13009,13008,13548,13547,13550,13549,13552,13551,
11654,12905,11150,11149,11167,11166,11171,11170,
11175,11174,11177,11176,11179,11178,11355,11354,
12092,12091,12094,12093,12096,12095,12182,12181,
12185,12184,12569,12568,12559,12558,12534,12533,
12643,12642,12649,12648,12651,12650,12698,12697,
12700,12699,12773,12772,12822,12821,13234,13233,
13231,13230,13509,13508,13526,13525,13528,13527,
13533,13532,13538,13537,13540,13539,13543,13541,
13544,11464,12213,12310,12403,12819,12820,13026,
13545,11421,11420,11642,11641,11723,11750,11749,
/* Block: 121 */
12219,12218,12770,12769,12890,12889,12992,12991,
4063,4064,4065,13570,13569,13159,12209,13571,
12396,12395,11344,11343,11345,11830,11260,11259,
11657,11656,11119,11117,12474,12472,13087,13085,
11720,11719,12064,12063,12365,12364,12757,12756,
12879,12878,11832,11587,11732,12197,11940,12696,
12099,13028,12009,13369,11269,11267,12573,12572,
13151,13150,11186,11185,11954,11953,13157,13156,
11131,11129,13302,13301,11346,12911,13497,11449,
11448,12907,12906,0,0,0,0,0,
11730,11729,0,13524,0,13531,12919,12918,
12892,12891,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,11311,11636,12692,11839,11838,11943,
11810,12531,13166,11664,12652,12308,11942,12309,
/* Block: 122 */
18060,18061,18062,18063,18064,18065,18066,18068,
18069,18070,18071,9443,18072,18073,18074,18075,
18076,18077,18078,18079,18080,18081,18082,18083,
18084,18085,18086,18087,18088,18089,18090,18091,
18092,18093,18094,18095,18096,18097,18098,18099,
4066,4067,4068,4069,18067,0,0,0,
4070,4071,4072,4073,4074,4075,4076,4077,
9670,4078,0,0,0,0,0,0,
19994,19995,19996,19997,19998,19999,20000,20001,
20006,20007,20008,20009,20010,20011,20012,20013,
20014,20015,20016,20017,20019,20020,20021,20022,
20025,20028,20029,20031,20032,20035,20040,20041,
20042,20043,20036,20037,20038,20039,20044,20018,
20023,20002,20003,20004,20005,20024,20030,20033,
20034,20026,20027,20045,4079,4080,4081,4082,
0,0,0,0,0,0,0,0,
/* Block: 123 */
9444,9486,18100,18101,18102,18103,18104,18105,
18106,18107,18108,18109,18110,18111,18112,18113,
18114,18115,18116,18117,18118,18119,18120,18121,
18122,18123,18124,18125,18126,18127,18128,18129,
18130,18131,18132,18133,18134,18135,18136,18137,
18138,18139,18140,18141,18142,18143,18144,18145,
18146,18147,18148,18149,18150,18151,18152,18153,
18154,18155,18156,18157,18158,18159,18160,18161,
18162,18163,18164,18165,18166,9403,0,0,
0,0,0,0,0,0,4083,4084,
9745,9834,10046,10211,10356,10496,10629,10740,
10853,10964,0,0,0,0,0,0,
4085,4086,4087,4088,4089,4090,4091,4092,
4093,4094,4095,4096,4097,4098,4099,4100,
4101,4102,17330,17331,17332,17333,17334,17335,
4103,4104,4105,17336,4106,17238,17260,17357,
/* Block: 124 */
9746,9835,10047,10212,10357,10497,10630,10741,
10854,10965,20318,20319,20320,20321,20322,20323,
20324,20325,20326,20327,20328,20329,20330,20331,
20332,20333,20334,20335,20336,20337,20338,20339,
20340,20341,20342,20343,20344,20345,20346,20347,
20348,20349,20350,9540,9541,9542,4107,4108,
20282,20283,20284,20285,20286,20287,20288,20289,
20290,20291,20292,20293,20294,20295,20296,20297,
20298,20299,20300,20301,20302,20303,20304,20305,
20306,20307,20308,20309,20310,20311,20312,20313,
20314,20315,20316,20317,0,0,0,0,
0,0,0,0,0,0,0,4109,
24078,24079,24080,24081,24082,24083,24084,24085,
24086,24087,24088,24089,24090,24091,24092,24093,
24094,24095,24096,24097,24098,24099,24100,24101,
24102,24103,24104,24105,24106,0,0,0,
/* Block: 125 */
9404,9445,9513,9487,21018,21019,21020,21021,
21022,21023,21024,21025,21026,21027,21028,21029,
21030,21031,21032,21033,21034,21035,21036,21037,
21038,21039,21040,21041,21042,21043,21044,21045,
21046,21047,21048,21049,21050,21051,21052,21053,
21054,21055,21056,21058,21059,21061,21062,21063,
21064,21065,21066,9372,21067,21068,21070,21071,
21072,21073,21075,21076,21069,21074,21057,21060,
21077,4110,4111,4112,4113,4114,4115,4116,
4117,4118,4119,4120,4121,4122,0,9626,
9747,9836,10048,10213,10358,10498,10631,10742,
10855,10966,0,0,0,0,4123,4124,
20360,20368,20378,20400,20425,20502,9627,20386,
20420,20358,20361,20373,20380,20394,20397,20401,
9748,9837,10049,10214,10359,10499,10632,10743,
10856,10967,20454,20406,20409,20423,20426,0,
/* Block: 126 */
20878,20879,20880,20881,20882,20883,20884,20885,
20886,20887,20888,20889,20890,20891,20892,20893,
20894,20895,20896,20897,20898,20899,20900,20901,
20902,20903,20904,20905,20906,20907,20908,20909,
20910,20911,20912,20913,20914,20915,20916,20917,
20918,20923,20924,20925,20926,20927,20928,20929,
20930,20931,20932,20919,20920,20921,20922,0,
0,0,0,0,0,0,0,0,
20933,20934,20935,20936,20937,20938,20939,20940,
20941,20942,20943,20944,20945,20946,0,0,
9749,9838,10050,10215,10360,10500,10633,10744,
10857,10968,0,0,4125,4126,4127,4128,
20357,20366,20369,20372,20379,20385,20389,20391,
20393,20396,20408,20412,20446,20449,20451,20418,
9628,20452,20375,20432,20525,20526,20527,4129,
4130,4131,20433,20522,20523,20524,20370,20382,
/* Block: 127 */
19562,19563,19564,19565,19566,19567,19568,19569,
19570,19571,19572,19573,19574,19575,19576,19577,
19578,19579,19580,19581,19582,19583,19584,19585,
19586,19587,19588,19589,19590,19591,19592,19593,
19594,19595,19596,19597,19598,19599,19600,19601,
19602,19603,19604,19605,19606,19607,19608,19609,
19610,19611,19612,19613,19614,19615,19616,19617,
19618,19619,19620,19621,19622,19623,19624,9537,
19625,9538,19626,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,19627,19628,9629,4132,4133,
18025,18026,18027,18028,18029,18030,18031,18032,
18033,18034,18035,18044,18045,18046,18047,18048,
4134,4135,17997,9630,9631,18049,18059,0,
0,0,0,0,0,0,0,0,
/* Block: 128 */
0,16822,16823,16824,16825,16826,16827,0,
0,17033,17034,17035,17036,17037,17038,0,
0,17002,17003,17004,17005,17006,17007,0,
0,0,0,0,0,0,0,0,
17103,17104,17105,17106,17107,17108,17109,0,
17127,17128,17129,17130,17131,17132,17133,0,
11198,11190,11561,11562,11566,11655,11735,12202,
12193,12195,12307,12402,12407,12538,12548,12555,
12544,12542,12543,12545,12546,12778,12783,12810,
12811,12804,12812,12813,12814,12926,13139,13149,
13144,13145,13154,13368,13370,13371,13364,13365,
13366,13367,13437,4136,11842,12203,12192,13155,
13534,13535,12557,13536,11203,14240,11438,13002,
12817,13312,4137,4138,0,0,0,0,
21306,21308,21310,21312,21314,21316,21318,21320,
21322,21324,21326,21328,21330,21332,21334,21336,
/* Block: 129 */
21338,21340,21342,21344,21346,21348,21350,21352,
21354,21356,21358,21360,21362,21364,21366,21368,
21370,21372,21374,21376,21378,21380,21382,21384,
21386,21388,21390,21392,21394,21396,21398,21400,
21402,21404,21406,21408,21410,21412,21414,21416,
21418,21420,21422,21424,21426,21428,21430,21432,
21434,21436,21438,21440,21442,21444,21446,21448,
21450,21452,21454,21456,21458,21460,21462,21464,
17998,17999,18000,18001,18002,18003,18004,18005,
18006,18007,18008,18009,18010,18011,18012,18013,
18014,18015,18016,18017,18018,18019,18020,18021,
18022,18023,18024,18050,18051,18052,18053,18054,
18055,18056,18057,18036,18037,18038,18039,18040,
18041,18042,18043,4139,9515,18058,0,0,
9750,9839,10051,10216,10361,10501,10634,10745,
10858,10969,0,0,0,0,0,0,
/* Block: 130 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
24232,24233,24234,24235,24236,24237,24238,24239,
24240,24241,24242,24243,24244,24245,24246,24247,
24248,24249,24250,24251,24252,24253,24254,0,
0,0,0,24372,24373,24374,24375,24376,
24377,24378,24379,24380,24381,24382,24383,24384,
24385,24386,24387,24388,24389,24390,24391,24392,
24393,24394,24395,24396,24397,24398,24399,24400,
24401,24402,24403,24404,24405,24406,24407,24408,
24409,24410,24411,24412,24413,24414,24415,24416,
24417,24418,24419,24420,0,0,0,0,
/* Block: 131 */
32819,32281,32849,32832,32398,31775,31952,33057,
33058,32042,32894,31981,32041,32197,32512,32643,
32742,32760,32776,32875,32326,32372,32425,32473,
32727,32887,32990,31790,31938,32333,32435,32741,
33015,32100,32407,32737,32780,32214,32677,32763,
32131,32292,32380,32460,32879,31818,31866,31904,
32240,32331,32434,32523,32653,32739,32746,32846,
32942,33006,33014,32542,32568,32620,32720,32904,
33019,32801,32022,32140,32601,32666,32451,32545,
32829,32940,32021,32089,32329,32386,32400,32616,
32628,32922,31902,32672,31869,31868,32580,32621,
32726,32924,32813,32215,32327,32806,31779,32069,
32167,32466,32502,31914,32548,31823,32158,31767,
32367,32249,32615,31946,32017,32528,32728,32796,
32347,32861,32365,32219,32709,32227,32501,31803,
31843,31867,32317,32609,32695,32800,32893,31907,
/* Block: 132 */
31966,32045,32136,32258,32408,32549,32915,32992,
33021,33030,31892,32279,32340,32857,32121,32189,
32199,32238,32404,32428,32483,32577,32623,32664,
32852,32731,32868,32905,31881,31894,31972,32424,
32771,32797,32130,32165,32225,32345,32600,32463,
31810,32001,32070,32105,32168,32472,32479,32649,
32662,32898,32939,32943,32964,31819,32574,32889,
32931,32175,31792,31829,32072,32087,32253,32328,
32432,32511,32734,32874,33052,32274,32921,31891,
32306,32309,32376,32393,32475,32500,32541,32614,
32968,31847,32203,32925,31825,32098,32387,32853,
32154,32177,32311,32467,32927,31883,31962,32091,
32268,32302,32321,32369,32474,32507,32641,32772,
32775,32891,32934,31919,32394,31963,32433,32484,
32738,32928,33008,33022,32308,32385,32679,32589,
32594,32604,32459,32421,32812,31807,32714,31884,
/* Block: 133 */
31879,32126,32216,32607,32064,32373,32278,32856,
32765,32923,32785,32134,31834,31989,33065,33066,
32015,33067,32272,33068,33069,31870,32461,32517,
32553,32565,32566,32572,32946,32605,32650,33070,
32740,33071,32804,33072,33073,32869,32882,33074,
33075,33076,32979,32980,32981,33013,32880,32930,
31820,31830,31836,31900,31905,31927,31984,31992,
31995,32014,32018,32090,32092,32171,32184,32186,
32194,32244,32261,32275,32318,32381,32389,32402,
32429,32438,32476,32544,32554,32558,32557,32559,
32560,32562,32570,32571,32581,32587,32596,32624,
32627,32629,32640,32656,32682,32698,32699,32729,
32778,32787,32808,32810,32833,32834,32864,32870,
32935,32957,32966,32169,33191,32691,0,0,
31769,31864,31842,31817,31835,31851,31898,31909,
31985,31977,31982,31991,32016,32020,32040,32043,
/* Block: 134 */
32052,32056,32133,32135,32151,32159,32174,32181,
32176,32187,32183,32195,32204,32229,32232,32234,
32246,32273,32293,32295,32304,32341,32348,32377,
32399,32396,32403,32410,32430,32536,32441,32458,
32462,32480,32488,32498,32509,32510,32518,32520,
32526,32533,32532,32546,32588,32597,32603,32618,
32625,32633,32657,32715,32725,32757,32779,32784,
32788,32798,32805,32799,32809,32807,32802,32811,
32814,32835,32854,32873,32888,32900,32926,32936,
32947,32952,32958,32961,32967,32998,33059,33170,
33169,33179,33098,33110,33111,33205,33215,33239,
33045,33055,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 135 */
11644,11647,11648,11645,11646,12903,12902,0,
0,0,0,0,0,0,0,0,
0,0,0,15254,15251,15252,15276,15253,
0,0,0,0,0,15326,9219,15330,
15350,15296,15310,15313,15332,15338,15341,15362,
15371,4140,15366,15365,15369,15368,15297,15298,
15299,15303,15307,15311,15314,15317,15321,0,
15324,15327,15335,15334,15339,0,15343,0,
15346,15348,0,15354,15353,0,15358,15360,
15363,15367,15372,15316,15304,15336,15355,15300,
15441,15440,15562,15561,15559,15560,15567,15566,
15564,15565,15572,15571,15569,15570,15663,15662,
15660,15661,15670,15669,15667,15668,15658,15657,
15655,15656,16132,16131,16129,16130,16139,16138,
16136,16137,15709,15708,15706,15707,15704,15703,
15701,15702,15715,15714,15712,15713,15721,15720,
/* Block: 136 */
15718,15719,15801,15800,15798,15797,15805,15804,
15792,15791,15837,15836,15828,15827,16210,16209,
16207,16208,16226,16225,16223,16224,16240,16239,
16237,16238,16234,16233,16231,16232,16386,16385,
16392,16391,16389,16390,16433,16432,16426,16425,
16423,16424,16421,16420,16418,16419,16537,16536,
16540,16539,4141,4142,4143,4144,4145,4146,
4147,4148,4149,4150,4151,4152,4153,4154,
4155,4156,4157,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,16219,16218,16216,16217,16452,
16451,16449,16448,16455,16454,15430,16462,16461,
16446,16445,16458,16457,16525,16524,16522,16523,
16469,16470,15457,15456,15473,15472,15475,15474,
15479,15478,15477,15476,15481,15480,15491,15490,
15489,15485,15483,15482,16518,16517,16515,16516,
/* Block: 137 */
15459,15461,15468,15486,15488,15538,15540,15543,
15550,15555,15557,15599,15604,15609,15618,15628,
15630,15641,15647,15651,15653,15686,15691,15738,
15741,15760,15761,15763,15860,15865,15869,15876,
15952,15964,15983,15985,15989,15995,16014,16017,
16037,16054,16059,16080,16082,16108,16110,16112,
16116,16119,16121,16157,16160,16166,16168,16184,
16186,16188,16190,16194,16198,16203,16205,16268,
16275,16281,16287,16293,16295,16316,16322,16328,
16334,16336,16337,16353,16361,16366,16372,16379,
16381,16410,16412,16415,16416,16490,16493,16496,
16502,16510,16512,15789,15817,16474,9247,9252,
9259,9267,9274,9282,15463,15464,15467,15469,
15484,15487,15545,15546,15549,15551,15554,15556,
15613,15614,15617,15624,15627,15629,15642,15643,
15646,15648,15650,15652,16118,16120,16165,16167,
/* Block: 138 */
16183,16193,16197,16202,16204,16286,16292,16294,
16314,16333,16367,16368,16371,16375,16378,16380,
16473,16497,16498,16501,16506,16509,16511,15458,
15460,15462,15465,15470,15537,15539,15542,15547,
15552,15598,15603,15608,15615,15625,15644,15685,
15690,15737,15740,15759,15762,15858,15863,15867,
15874,15951,15956,15963,15982,15984,15988,15994,
16013,16035,16053,16058,16079,16081,16107,16109,
16111,16115,16156,16159,16185,16187,16189,16191,
16195,16267,16274,16280,16284,16291,16315,16321,
16327,16332,16352,16360,16365,16369,16376,16409,
16411,16408,16489,16492,16495,16499,16507,15466,
15471,15548,15553,15616,15626,15645,15649,15875,
15883,15918,15926,16192,16196,16285,16370,16377,
16500,16508,9258,9266,9273,16023,16025,16065,
16067,16087,16089,15885,15887,15928,15930,15745,
/* Block: 139 */
15747,15697,15699,15765,15767,15968,15970,15997,
15999,15902,15907,15914,15920,15916,15873,15958,
15993,16022,16024,16064,16066,16086,16088,15884,
15886,15927,15929,15744,15746,15696,15698,15764,
15766,15967,15969,15996,15998,15901,15906,15913,
15919,15915,15872,15957,15992,15899,15904,15911,
15917,15882,15925,16015,15859,15864,15868,15900,
15905,15912,16016,16036,15520,15521,4158,4159,
4160,4161,4162,4163,4164,4165,4166,4167,
4168,4169,4170,4171,4172,4173,4174,4175,
15600,15606,15605,15607,15610,15619,15620,15621,
15693,15692,15743,15742,15866,15861,15862,15879,
15878,15877,15881,15880,15954,15953,15966,15909,
15908,15903,15922,15921,15924,15923,15986,15991,
15990,16019,16018,16020,16021,16056,16061,16060,
16062,16083,16085,16084,16114,16113,16162,16163,
/* Block: 140 */
16277,16279,16278,16269,16270,16283,16282,16289,
16288,16323,16324,16326,16317,16319,16329,16330,
0,0,16318,16413,16414,16362,16363,16357,
16356,16358,16374,16373,16504,16503,15544,15602,
15601,15612,15611,15623,15622,15695,15687,15694,
15870,15955,15910,15987,16273,16290,16494,16491,
16505,16335,16164,16364,16161,16276,16063,16201,
16354,16331,16271,16200,16272,16355,15688,15739,
16320,16117,15541,16199,16055,15965,15871,16359,
0,0,0,0,0,0,0,4176,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
15962,16158,15523,15522,16325,15959,15818,16057,
16442,15960,15961,15689,15819,4177,4178,4179,
/* Block: 141 */
88,89,90,91,92,93,94,95,
96,97,98,99,100,101,102,103,
4180,4181,4182,4183,4184,4185,4186,4187,
4188,4189,0,0,0,0,0,0,
9198,4190,9195,4191,4192,4193,4194,9139,
4195,9196,4196,4197,4198,4199,9200,4200,
4201,4202,4203,4204,4205,4206,4207,4208,
4209,4210,4211,4212,4213,4214,4215,4216,
4217,4218,4219,4220,4221,4222,4223,4224,
4225,4226,4227,4228,4229,4230,4231,4232,
4233,4234,4235,0,4236,4237,4238,4239,
4240,4241,4242,4243,4244,4245,4246,4247,
4248,4249,4250,4251,4252,4253,4254,0,
4255,9657,4256,4257,0,0,0,0,
9242,9241,9246,4258,9251,0,9257,9256,
9265,9264,9272,9271,9281,9280,9287,9286,
/* Block: 142 */
15425,15434,15433,15437,15436,15444,15443,15447,
15446,15455,15454,15452,15453,15519,15518,15536,
15535,15533,15534,15587,15586,15597,15596,15594,
15595,15640,15639,15637,15638,15684,15683,15681,
15682,15736,15735,15733,15734,15758,15757,15755,
15756,15782,15781,15788,15787,15816,15815,15825,
15824,15857,15856,15854,15855,15898,15897,15895,
15896,15950,15949,15947,15948,15981,15980,15978,
15979,16012,16011,16009,16010,16034,16033,16031,
16032,16052,16051,16049,16050,16078,16077,16075,
16076,16106,16105,16103,16104,16155,16154,16152,
16153,16182,16181,16179,16180,16258,16257,16255,
16256,16312,16311,16309,16310,16351,16350,16348,
16349,16407,16406,16404,16405,16441,16440,16472,
16471,16488,16487,16485,16486,16260,16259,16262,
16261,16264,16263,16266,16265,0,0,104,
/* Block: 143 */
0,4259,4260,4261,9656,4262,4263,4264,
4265,4266,4267,4268,4269,4270,4271,4272,
9780,9910,10118,10283,10428,10568,10683,10795,
10907,11020,4273,4274,4275,4276,4277,4278,
4279,11061,11223,11290,11377,11486,11617,11684,
11775,11869,11978,12035,12122,12245,12330,12429,
12597,12674,12725,12842,12953,13049,13194,13267,
13333,13390,13459,4280,4281,4282,4283,4284,
4285,11043,11205,11271,11357,11467,11599,11666,
11757,11848,11960,12016,12102,12226,12312,12411,
12579,12657,12706,12824,12935,13031,13175,13248,
13314,13373,13441,4286,4287,4288,4289,4290,
4291,4292,4293,4294,4295,4296,24818,24424,
24435,24444,24455,24464,24737,24747,24756,24584,
9649,24426,24437,24446,24457,24466,24474,24485,
24500,24512,24521,24531,24541,24550,24556,24564,
/* Block: 144 */
24570,24577,24586,24592,24601,24609,24614,24619,
24623,24627,24633,24646,24659,24672,24688,24703,
24713,24721,24725,24732,24739,24749,24758,24764,
24769,24776,24783,24790,24796,24824,9170,9172,
24110,23860,23865,24259,23870,24263,24266,23877,
23882,23887,24271,24274,24277,24280,24283,24286,
23986,23894,23901,23906,23999,23911,23916,23921,
23931,23938,23943,23951,23958,23965,23972,0,
0,0,24113,24116,24119,24122,24125,24128,
0,0,24131,24134,24137,24140,24143,24146,
0,0,24149,24152,24155,24158,24161,24164,
0,0,24167,24170,24173,0,0,0,
9654,9659,4297,4298,4299,9661,9687,0,
4300,4301,4302,4303,4304,4305,4306,0,
0,0,0,0,0,0,0,0,
0,105,106,107,4307,33259,0,0,
/* Block: 145 */
27672,27673,27674,27675,27676,27677,27678,27679,
27680,27681,27682,27683,0,27684,27685,27686,
27687,27688,27689,27690,27691,27692,27693,27694,
27695,27696,27697,27698,27699,27700,27701,27702,
27703,27704,27705,27706,27707,27708,27709,0,
27710,27711,27712,27713,27714,27715,27716,27717,
27718,27719,27720,27721,27722,27723,27724,27725,
27726,27727,27728,0,27729,27730,0,27731,
27732,27733,27734,27735,27736,27737,27738,27739,
27740,27741,27742,27743,27744,27745,0,0,
27746,27747,27748,27749,27750,27751,27752,27753,
27754,27755,27756,27757,27758,27759,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 146 */
27760,27761,27762,27763,27764,27765,27766,27767,
27768,27769,27770,27771,27772,27773,27774,27775,
27776,27777,27778,27779,27780,27781,27782,27783,
27784,27785,27786,27787,27788,27789,27790,27791,
27792,27793,27794,27795,27796,27797,27798,27799,
27800,27801,27802,27803,27804,27805,27806,27807,
27808,27809,27810,27811,27812,27813,27814,27815,
27816,27817,27818,27819,27820,27821,27822,27823,
27824,27825,27826,27827,27828,27829,27830,27831,
27832,27833,27834,27835,27836,27837,27838,27839,
27840,27841,27842,27843,27844,27845,27846,27847,
27848,27849,27850,27851,27852,27853,27854,27855,
27856,27857,27858,27859,27860,27861,27862,27863,
27864,27865,27866,27867,27868,27869,27870,27871,
27872,27873,27874,27875,27876,27877,27878,27879,
27880,27881,27882,0,0,0,0,0,
/* Block: 147 */
4308,4309,4310,0,0,0,0,9840,
10052,10217,10362,10502,10635,10746,10859,10970,
4311,4312,4313,4314,4315,4316,4317,4318,
4319,4320,4321,4322,4323,4324,4325,4326,
4327,4328,4329,4330,4331,4332,4333,4334,
4335,4336,4337,4338,4339,4340,4341,4342,
4343,4344,4345,4346,0,0,0,4347,
4348,4349,4350,4351,4352,4353,4354,4355,
4356,4357,9841,10503,4358,4359,4360,4361,
10504,4362,4363,4364,4365,4366,4367,10505,
4368,4369,4370,4371,4372,4373,4374,4375,
9842,9843,9844,10053,10054,10055,10056,10506,
4376,4377,4378,4379,4380,4381,4382,4383,
4384,4385,4386,4387,4388,4389,4390,4391,
4392,4393,4394,10507,4395,4396,4397,4398,
4399,4400,4401,4402,4403,4404,4405,4406,
/* Block: 148 */
4407,4408,4409,4410,4411,4412,4413,4414,
4415,4416,9751,4417,4418,4419,4420,0,
4421,4422,4423,4424,4425,4426,4427,4428,
4429,4430,4431,4432,4433,0,0,0,
4434,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
4435,4436,4437,4438,4439,4440,4441,4442,
4443,4444,4445,4446,4447,4448,4449,4450,
4451,4452,4453,4454,4455,4456,4457,4458,
4459,4460,4461,4462,4463,4464,4465,4466,
4467,4468,4469,4470,4471,4472,4473,4474,
4475,4476,4477,4478,4479,9140,0,0,
/* Block: 149 */
26912,26913,26914,26915,26916,26917,26918,26919,
26920,26921,26922,26923,26924,26925,26926,26927,
26928,26929,26930,26931,26932,26933,26934,26935,
26936,26937,26938,26939,26940,0,0,0,
26941,26942,26943,26944,26945,26946,26947,26948,
26949,26950,26951,26952,26953,26954,26955,26956,
26957,26958,26959,26960,26961,26962,26963,26964,
26965,26966,26967,26968,26969,26970,26971,26972,
26973,26974,26975,26976,26977,26978,26979,26980,
26981,26982,26983,26984,26985,26986,26987,26988,
26989,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
4480,9845,10057,10218,10363,10508,10636,10747,
10860,10971,4481,4482,4483,4484,4485,4486,
4487,4488,4489,4490,4491,4492,4493,4494,
4495,4496,4497,4498,0,0,0,0,
/* Block: 150 */
27016,27017,27018,27019,27020,27021,27022,27023,
27024,27025,27026,27027,27028,27029,27030,27032,
27033,27034,27035,27036,27037,27038,27039,27040,
27041,27042,27043,27044,27045,27046,27047,27031,
9846,10509,4499,4500,0,0,0,0,
0,0,0,0,0,27048,27049,27050,
27051,27052,27053,27054,27055,27056,27057,27058,
27059,27060,27061,27062,27063,27064,27065,27066,
27067,27068,27069,27070,27071,27072,27073,27074,
27075,27076,27077,0,0,0,0,0,
14993,14995,14996,14997,14999,15000,15001,15002,
15004,15005,15006,15007,15008,15009,15011,15012,
15013,15014,15016,15017,15018,15019,15020,15021,
15022,15023,15024,15025,15026,15027,15028,15029,
15030,15031,15032,15033,15034,15035,14994,14998,
15003,15010,15015,0,0,0,0,0,
/* Block: 151 */
28839,28840,28841,28842,28843,28844,28845,28846,
28847,28848,28849,28850,28851,28852,28853,28854,
28855,28856,28857,28858,28859,28860,28861,28862,
28863,28864,28865,28866,28867,28868,0,4501,
28869,28870,28871,28872,28873,28874,28875,28876,
28877,28878,28879,28880,28881,28882,28883,28884,
28885,28886,28887,28888,28889,28890,28891,28892,
28893,28894,28895,28896,28897,28898,28899,28900,
28901,28902,28903,28904,0,0,0,0,
28905,28906,28907,28908,28909,28910,28911,28912,
4502,9847,10058,4503,4504,4505,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 152 */
27079,27081,27083,27085,27087,27089,27091,27093,
27095,27097,27099,27101,27103,27105,27107,27109,
27111,27113,27115,27117,27119,27121,27123,27125,
27127,27129,27131,27133,27135,27137,27139,27141,
27143,27145,27147,27149,27151,27153,27155,27157,
27078,27080,27082,27084,27086,27088,27090,27092,
27094,27096,27098,27100,27102,27104,27106,27108,
27110,27112,27114,27116,27118,27120,27122,27124,
27126,27128,27130,27132,27134,27136,27138,27140,
27142,27144,27146,27148,27150,27152,27154,27156,
27158,27159,27160,27161,27162,27163,27164,27165,
27166,27167,27168,27169,27170,27171,27172,27173,
27174,27175,27176,27177,27178,27179,27180,27181,
27182,27183,27184,27185,27186,27187,27188,27189,
27190,27191,27192,27193,27194,27195,27196,27197,
27198,27199,27200,27201,27202,27203,27204,27205,
/* Block: 153 */
27345,27346,27347,27348,27349,27350,27351,27352,
27353,27354,27355,27356,27357,27358,27359,27360,
27361,27362,27363,27364,27365,27366,27367,27368,
27369,27370,27371,27372,27373,27374,0,0,
9752,9848,10059,10219,10364,10510,10637,10748,
10861,10972,0,0,0,0,0,0,
21479,21481,21483,21485,21487,21489,21491,21493,
21495,21497,21499,21501,21503,21505,21507,21509,
21511,21513,21515,21517,21519,21521,21523,21525,
21527,21529,21531,21533,21535,21537,21539,21541,
21543,21545,21547,21549,0,0,0,0,
21478,21480,21482,21484,21486,21488,21490,21492,
21494,21496,21498,21500,21502,21504,21506,21508,
21510,21512,21514,21516,21518,21520,21522,21524,
21526,21528,21530,21532,21534,21536,21538,21540,
21542,21544,21546,21548,0,0,0,0,
/* Block: 154 */
27375,27376,27377,27378,27379,27380,27381,27382,
27383,27384,27385,27386,27387,27388,27389,27390,
27391,27392,27393,27394,27395,27396,27397,27398,
27399,27400,27401,27402,27403,27404,27405,27406,
27407,27408,27409,27410,27411,27412,27413,27414,
0,0,0,0,0,0,0,0,
27415,27416,27417,27418,27419,27420,27421,27422,
27423,27424,27425,27426,27427,27428,27429,27430,
27431,27432,27433,27434,27435,27436,27437,27438,
27439,27440,27441,27442,27443,27444,27445,27446,
27447,27448,27449,27450,27451,27452,27453,27454,
27455,27456,27457,27458,27459,27460,27461,27462,
27463,27464,27465,27466,0,0,0,0,
0,0,0,0,0,0,0,4506,
27468,27470,27472,27474,27476,27478,27480,27482,
27484,27486,27488,0,27490,27492,27494,27496,
/* Block: 155 */
27498,27500,27502,27504,27506,27508,27510,27512,
27514,27516,27518,0,27520,27522,27524,27526,
27528,27530,27532,0,27534,27536,0,27467,
27469,27471,27473,27475,27477,27479,27481,27483,
27485,27487,0,27489,27491,27493,27495,27497,
27499,27501,27503,27505,27507,27509,27511,27513,
27515,27517,0,27519,27521,27523,27525,27527,
27529,27531,0,27533,27535,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 156 */
27883,27884,27885,27886,27887,27888,27889,27890,
27891,27892,27893,27894,27895,27896,27897,27898,
27899,27900,27901,27902,27903,27904,27905,27906,
27907,27908,27909,27910,27911,27912,27913,27914,
27915,27916,27917,27918,27919,27920,27921,27922,
27923,27924,27925,27926,27927,27928,27929,27930,
27931,27932,27933,27934,27935,27936,27937,27938,
27939,27940,27941,27942,27943,27944,27945,27946,
27947,27948,27949,27950,27951,27952,27953,27954,
27955,27956,27957,27958,27959,27960,27961,27962,
27963,27964,27965,27966,27967,27968,27969,27970,
27971,27972,27973,27974,27975,27976,27977,27978,
27979,27980,27981,27982,27983,27984,27985,27986,
27987,27988,27989,27990,27991,27992,27993,27994,
27995,27996,27997,27998,27999,28000,28001,28002,
28003,28004,28005,28006,28007,28008,28009,28010,
/* Block: 157 */
28011,28012,28013,28014,28015,28016,28017,28018,
28019,28020,28021,28022,28023,28024,28025,28026,
28027,28028,28029,28030,28031,28032,28033,28034,
28035,28036,28037,28038,28039,28040,28041,28042,
28043,28044,28045,28046,28047,28048,28049,28050,
28051,28052,28053,28054,28055,28056,28057,28058,
28059,28060,28061,28062,28063,28064,28065,28066,
28067,28068,28069,28070,28071,28072,28073,28074,
28075,28076,28077,28078,28079,28080,28081,28082,
28083,28084,28085,28086,28087,28088,28089,28090,
28091,28092,28093,28094,28095,28096,28097,28098,
28099,28100,28101,28102,28103,28104,28105,28106,
28107,28108,28109,28110,28111,28112,28113,28114,
28115,28116,28117,28118,28119,28120,28121,28122,
28123,28124,28125,28126,28127,28128,28129,28130,
28131,28132,28133,28134,28135,28136,28137,28138,
/* Block: 158 */
28139,28140,28141,28142,28143,28144,28145,28146,
28147,28148,28149,28150,28151,28152,28153,28154,
28155,28156,28157,28158,28159,28160,28161,28162,
28163,28164,28165,28166,28167,28168,28169,28170,
28171,28172,28173,28174,28175,28176,28177,28178,
28179,28180,28181,28182,28183,28184,28185,28186,
28187,28188,28189,28190,28191,28192,28193,0,
0,0,0,0,0,0,0,0,
28194,28195,28196,28197,28198,28199,28200,28201,
28202,28203,28204,28205,28206,28207,28208,28209,
28210,28211,28212,28213,28214,28215,0,0,
0,0,0,0,0,0,0,0,
28216,28217,28218,28219,28220,28221,28222,28223,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 159 */
11151,9618,9620,11158,11253,11264,0,11434,
11439,11441,11443,11454,11457,11460,11584,11594,
11651,11597,11738,11744,11746,11811,11827,11844,
12014,12173,12177,12198,12200,12210,12215,12217,
12222,12224,12493,12540,12571,12691,12792,12794,
12802,12806,12782,12994,13001,13003,13005,13022,
13240,0,13430,13582,13584,13599,13588,13590,
13592,13595,12915,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 160 */
28224,28225,28226,28227,28228,28229,0,0,
28230,0,28231,28232,28233,28234,28235,28236,
28237,28238,28239,28240,28241,28242,28243,28244,
28245,28246,28247,28248,28249,28250,28251,28252,
28253,28254,28255,28256,28257,28258,28259,28260,
28261,28262,28263,28264,28265,28266,28267,28268,
28269,28270,28271,28272,28273,28274,0,28275,
28276,0,0,0,28277,0,0,28278,
28563,28564,28565,28566,28567,28568,28569,28570,
28571,28572,28573,28574,28575,28576,28577,28578,
28579,28580,28581,28582,28583,28584,0,4507,
9849,10060,10220,4508,4509,4510,4511,4512,
28488,28489,28490,28491,28492,28493,28494,28495,
28496,28497,28498,28499,28500,28502,28501,28503,
28504,28505,28506,28507,28508,28509,28510,4513,
4514,9850,10061,10221,10365,10511,4515,4516,
/* Block: 161 */
28512,28511,28514,28513,28515,28516,28518,28517,
28519,28520,28521,28522,28524,28523,28526,28525,
28528,28527,28530,28529,28532,28531,28533,28534,
28535,28536,28537,28538,28540,28539,28541,0,
0,0,0,0,0,0,0,9851,
10062,10222,10366,10367,10512,4517,4518,4519,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
28542,28543,28544,28545,28546,28547,28548,28549,
28550,28551,28552,28553,28554,28555,28556,28557,
28558,28559,28560,0,28561,28562,0,0,
0,0,0,9852,10513,4520,4521,4522,
/* Block: 162 */
15373,15374,15375,15376,15377,15378,15379,15380,
15381,15382,15383,15384,15385,15386,15387,15388,
15389,15390,15391,15392,15393,15394,9853,4523,
4524,4525,10063,10223,0,0,0,4526,
26990,26991,26992,26993,26994,26995,26996,26997,
26998,26999,27000,27001,27002,27003,27004,27005,
27006,27007,27008,27009,27010,27011,27012,27013,
27014,27015,0,0,0,0,0,4527,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 163 */
31110,31112,31114,31116,31118,31120,31122,31123,
31125,31127,31129,31130,31132,31133,31135,31136,
31138,31140,31142,31145,31146,31148,31150,31152,
31154,31155,31157,31158,31160,31162,31165,31166,
31109,31111,31113,31115,31117,31119,31121,31124,
31126,31128,31131,31134,31137,31139,31141,31143,
31144,31147,31149,31151,31153,31156,31159,31161,
0,0,0,0,4528,4529,31163,31164,
9854,10064,10224,10368,10514,10638,10749,10862,
10973,4530,4531,4532,4533,4534,4535,4536,
0,0,4537,4538,4539,4540,4541,4542,
4543,4544,4545,4546,4547,4548,4549,4550,
4551,4552,4553,4554,4555,4556,4557,4558,
4559,4560,4561,4562,4563,4564,4565,4566,
4567,4568,4569,4570,4571,4572,4573,4574,
4575,4576,4577,4578,4579,4580,4581,4582,
/* Block: 164 */
19329,19330,19331,19332,0,19333,19334,0,
0,0,0,0,19335,9141,9446,9488,
19336,19338,19339,19340,0,19341,19342,19343,
0,19344,19345,19347,19349,19350,19351,19352,
19353,19354,19355,19356,19357,19358,19359,19360,
19361,19362,19363,19364,19365,19367,19368,19369,
19370,19371,19337,19348,19346,19366,0,0,
9516,9517,9518,0,0,0,0,19372,
9855,10065,10225,10369,4583,4584,4585,4586,
4587,0,0,0,0,0,0,0,
4588,4589,4590,4591,4592,4593,4594,4595,
4596,0,0,0,0,0,0,0,
28376,28377,28378,28379,28380,28381,28382,28383,
28384,28385,28386,28387,28388,28389,28390,28391,
28392,28393,28394,28395,28396,28397,28398,28399,
28400,28401,28402,28403,28404,9856,4597,4598,
/* Block: 165 */
28405,28406,28407,28408,28409,28410,28411,28412,
28413,28414,28415,28416,28417,28418,28419,28420,
28421,28422,28423,28424,28425,28426,28427,28428,
28429,28430,28431,28432,28433,9857,4599,4600,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
28667,28668,28669,28670,28671,28672,28673,28674,
28675,28676,28677,28678,28679,28680,28681,28682,
28683,28684,28685,28686,28687,28688,28689,28690,
28691,28692,28693,28694,28695,28696,28697,28698,
28699,28700,28701,28702,28703,9066,9142,0,
0,0,0,9858,10515,4601,4602,4603,
4604,4605,4606,4607,4608,4609,4610,0,
0,0,0,0,0,0,0,0,
/* Block: 166 */
28434,28435,28436,28437,28438,28439,28440,28441,
28442,28443,28444,28445,28446,28447,28448,28449,
28450,28451,28452,28453,28454,28455,28456,28457,
28458,28459,28460,28461,28462,28463,28464,28465,
28466,28467,28468,28469,28470,28471,28472,28473,
28474,28475,28476,28477,28478,28479,28480,28481,
28482,28483,28484,28485,28486,28487,0,0,
0,4611,4612,4613,4614,4615,4616,4617,
28585,28586,28587,28588,28589,28590,28591,28592,
28593,28594,28595,28596,28597,28598,28599,28600,
28601,28602,28603,28604,28605,28606,0,0,
9859,10066,10226,10370,4618,4619,4620,4621,
28607,28608,28609,28610,28611,28612,28613,28614,
28615,28616,28617,28618,28619,28620,28621,28622,
28623,28624,28625,0,0,0,0,0,
9860,10067,10227,10371,4622,4623,4624,4625,
/* Block: 167 */
28626,28627,28628,28629,28630,28631,28632,28633,
28634,28635,28636,28637,28638,28639,28640,28641,
28642,28643,0,0,0,0,0,0,
0,4626,4627,4628,4629,0,0,0,
0,0,0,0,0,0,0,0,
0,9861,10068,10228,10372,4630,4631,4632,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 168 */
22487,22488,22489,22490,22491,22492,22493,22494,
22495,22496,22497,22498,22499,22500,22501,22502,
22503,22504,22505,22506,22507,22508,22509,22510,
22511,22512,22513,22514,22515,22516,22517,22518,
22519,22520,22521,22522,22523,22524,22525,22526,
22527,22528,22529,22530,22531,22532,22533,22534,
22535,22536,22537,22538,22539,22540,22541,22542,
22543,22544,22545,22546,22547,22548,22549,22550,
22551,22552,22553,22554,22555,22556,22557,22558,
22559,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 169 */
22386,22388,22390,22392,22394,22396,22398,22400,
22402,22404,22406,22408,22410,22412,22414,22416,
22418,22420,22422,22424,22426,22428,22430,22432,
22434,22436,22438,22440,22442,22444,22446,22448,
22450,22452,22454,22456,22458,22460,22462,22464,
22466,22468,22470,22472,22474,22476,22478,22480,
22482,22484,22486,0,0,0,0,0,
0,0,0,0,0,0,0,0,
22385,22387,22389,22391,22393,22395,22397,22399,
22401,22403,22405,22407,22409,22411,22413,22415,
22417,22419,22421,22423,22425,22427,22429,22431,
22433,22435,22437,22439,22441,22443,22445,22447,
22449,22451,22453,22455,22457,22459,22461,22463,
22465,22467,22469,22471,22473,22475,22477,22479,
22481,22483,22485,0,0,0,0,0,
0,0,9862,10516,4633,4634,4635,4636,
/* Block: 170 */
20528,20534,20535,20536,20537,20538,20539,20540,
20541,20542,20543,20544,20545,20546,20547,20548,
20549,20550,20551,20552,20553,20554,20555,20556,
20557,20558,20559,20560,20561,20529,20530,20531,
20532,20533,20562,20563,9067,9068,9069,9070,
0,0,0,0,0,0,0,0,
9753,9863,10069,10229,10373,10517,10639,10750,
10863,10974,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 171 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
9864,10070,10230,10374,10518,10640,10751,10864,
10975,4637,4638,4639,4640,4641,4642,4643,
4644,4645,4646,4647,4648,4649,4650,4651,
4652,4653,4654,4655,4656,4657,4658,0,
/* Block: 172 */
28774,28775,28776,28777,28778,28779,28780,28781,
28782,28783,28784,28785,28786,28787,28788,28789,
28790,28791,28792,28793,28794,28795,28796,28797,
28798,28799,28800,28801,28802,28803,28804,28805,
28806,28808,28809,28810,28811,28812,28813,28814,
28815,28817,0,9294,9292,4659,0,0,
28807,28816,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,4660,4661,4662,
/* Block: 173 */
28704,28705,28706,28707,28708,28709,28710,28711,
28712,28713,28714,28715,28716,28717,28718,28719,
28720,28721,28722,28723,28725,28726,28727,28728,
28729,28730,28731,28732,28733,9865,10071,10231,
10375,10519,4663,4664,4665,4666,4667,28724,
0,0,0,0,0,0,0,0,
28734,28735,28736,28737,28738,28739,28740,28741,
28742,28743,28744,28745,28746,28747,28748,28749,
28750,28751,28753,28754,28755,28752,9143,9144,
9071,9072,9073,9145,9074,9146,9147,9148,
9149,9866,4668,4669,4670,4671,4672,4673,
4674,4675,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
28756,28757,28758,28759,28760,28761,28762,28763,
28764,28765,28766,28767,28768,28769,28770,28771,
/* Block: 174 */
28772,28773,9075,9150,9076,9151,4676,4677,
4678,4679,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
28818,28819,28820,28821,28822,28823,28824,28825,
28826,28827,28828,28829,28830,28831,28832,28833,
28834,28835,28836,28837,28838,9867,10072,10232,
10376,4680,4681,4682,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
28644,28645,28646,28647,28648,28649,28650,28652,
28653,28654,28655,28656,28657,28658,28659,28660,
28661,28662,28663,28664,28665,28666,28651,0,
0,0,0,0,0,0,0,0,
/* Block: 175 */
9405,9447,9489,19303,19304,19254,19255,19256,
19257,19258,19259,19260,19261,19262,19263,19265,
19266,19268,19269,19270,19271,19272,19273,19274,
19275,19276,19277,19278,19279,19280,19281,19282,
19283,19284,19285,19286,19287,19288,19289,19290,
19291,19292,19293,19294,19295,19296,19297,19298,
19299,19300,19301,19302,19305,19306,19308,19309,
19310,19311,19312,19313,19314,19315,19316,19317,
19318,19319,19321,19322,19324,19325,19326,4683,
4684,4685,4686,4687,4688,4689,0,0,
0,0,9868,10073,10233,10377,10520,10641,
10752,10865,10976,4690,4691,4692,4693,4694,
4695,4696,4697,4698,4699,4700,9754,9869,
10074,10234,10378,10521,10642,10753,10866,10977,
19328,19264,19267,19320,19323,19307,0,0,
0,0,0,0,0,0,0,19327,
/* Block: 176 */
9406,9448,9490,18167,18168,18169,18170,18171,
18172,18173,18174,18175,18176,18177,18178,18179,
18180,18181,18182,18183,18184,18185,18186,18187,
18188,18189,18190,18191,18192,18193,18194,18195,
18196,18197,18198,18199,18200,18201,18203,18204,
18205,18206,18207,18202,18208,18209,18210,18211,
18212,18213,18214,18215,18216,18218,18219,18220,
18221,18222,9373,4701,4702,4703,4704,4705,
4706,4707,18217,0,0,0,0,0,
0,0,0,0,0,4708,0,0,
27537,27538,27539,27540,27541,27542,27543,27544,
27545,27546,27547,27548,27549,27550,27551,27552,
27553,27554,27555,27556,27557,27558,27559,27560,
27561,0,0,0,0,0,0,0,
9755,9870,10075,10235,10379,10522,10643,10754,
10867,10978,0,0,0,0,0,0,
/* Block: 177 */
9407,9449,9491,20564,20565,20566,20567,20568,
20569,20570,20571,20572,20573,20574,20575,20576,
20577,20578,20579,20580,20581,20582,20583,20584,
20585,20586,20587,20588,20589,20590,20591,20592,
20593,20594,20595,20596,20598,20599,20600,20602,
20603,20604,20605,20606,20607,20608,20609,20610,
20611,20612,20613,20616,20617,0,9756,9871,
10076,10236,10380,10523,10644,10755,10868,10979,
4709,4710,4711,4712,20601,20614,20615,20597,
0,0,0,0,0,0,0,0,
18223,18224,18225,18226,18227,18228,18229,18230,
18231,18232,18233,18234,18235,18236,18237,18238,
18239,18240,18241,18242,18243,18244,18245,18246,
18247,18248,18249,18250,18251,18252,18253,18254,
18256,18257,18258,9374,4713,4714,18255,0,
0,0,0,0,0,0,0,0,
/* Block: 178 */
9408,9450,9492,18261,18262,18263,18264,18265,
18266,18267,18268,18269,18270,18271,18272,18273,
18274,18275,18276,18277,18278,18279,18280,18281,
18282,18283,18284,18285,18286,18287,18288,18289,
18290,18291,18292,18293,18294,18295,18296,18297,
18298,18299,18300,18301,18302,18303,18304,18305,
18306,18307,18308,18313,18314,18315,18316,18317,
18318,18319,18320,18321,18322,18324,18325,18326,
18327,18309,18310,18311,18259,4715,4716,4717,
4718,9508,9375,9519,9520,4719,18323,9409,
9757,9872,10077,10237,10381,10524,10645,10756,
10869,10980,18260,4720,18312,4721,4722,4723,
0,9873,10078,10238,10382,10525,10646,10757,
10870,10981,4724,4725,4726,4727,4728,4729,
4730,4731,4732,4733,4734,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 179 */
18328,18329,18331,18332,18333,18334,18335,18336,
18337,18339,18340,18341,18342,18343,18344,18345,
18346,18347,0,18348,18349,18350,18351,18352,
18353,18354,18355,18356,18357,18358,18359,18360,
18361,18362,18363,18364,18365,18366,18367,18368,
18369,18370,18371,18372,18373,18374,18375,18376,
18378,18379,18380,18381,9451,18382,9376,9279,
4735,4736,4737,4738,4739,4740,9285,18338,
18330,18377,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 180 */
18440,18441,18442,18443,18446,18447,18448,0,
18449,0,18450,18451,18452,18453,0,18454,
18455,18456,18457,18458,18459,18460,18461,18462,
18463,18464,18465,18466,18467,18468,0,18469,
18470,18471,18472,18473,18474,18444,18445,18475,
18476,4741,0,0,0,0,0,0,
18383,18384,18385,18386,18387,18388,18389,18390,
18391,18392,18393,18394,18395,18396,18397,18398,
18399,18400,18401,18402,18403,18404,18405,18406,
18407,18408,18409,18410,18411,18412,18413,18414,
18415,18416,18417,18418,18419,18420,18421,18422,
18423,18424,18425,18426,18427,18428,18429,9452,
18430,18431,18432,18433,18434,18435,18436,18437,
18438,9377,18439,0,0,0,0,0,
9758,9874,10079,10239,10383,10526,10647,10758,
10871,10982,0,0,0,0,0,0,
/* Block: 181 */
9453,9410,9454,9493,0,18478,18479,18480,
18481,18482,18483,18484,18486,0,0,18488,
18489,0,0,18490,18491,18492,18493,18494,
18495,18496,18497,18498,18499,18500,18501,18502,
18503,18504,18505,18506,18507,18508,18509,18510,
18511,0,18512,18513,18514,18515,18516,18517,
18518,0,18519,18520,0,18521,18522,18523,
18524,18525,0,9378,9379,18526,18529,18530,
18531,18532,18533,18534,18535,0,0,18538,
18539,0,0,18540,18541,18542,0,0,
18477,0,0,0,0,0,0,18543,
0,0,0,0,0,18544,18527,18528,
18485,18487,18536,18537,0,0,4742,4743,
4744,4745,4746,4747,4748,0,0,0,
4749,4750,4751,4752,4753,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 182 */
18547,18548,18549,18550,18551,18552,18553,18554,
18555,18556,18557,18558,18559,18560,18561,18562,
18563,18564,18565,18566,18567,18568,18569,18570,
18571,18572,18573,18574,18575,18576,18577,18578,
18579,18580,18581,18582,18583,18584,18585,18586,
18587,18588,18589,18590,18591,18592,18593,18594,
18595,18596,18597,18598,18599,18605,18606,18607,
18608,18609,18610,18611,18612,18613,18614,18615,
18616,18617,18618,9411,9455,9494,9380,18600,
18603,18545,18546,4754,4755,4756,4757,4758,
9759,9875,10080,10240,10384,10527,10648,10759,
10872,10983,4759,4760,0,4761,9509,18604,
18601,18602,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 183 */
18620,18621,18622,18623,18624,18625,18626,18627,
18628,18629,18630,18631,18632,18633,18634,18635,
18636,18637,18638,18639,18640,18641,18642,18643,
18644,18645,18646,18647,18648,18649,18650,18651,
18652,18653,18654,18655,18656,18657,18658,18659,
18660,18661,18662,18663,18664,18665,18666,18667,
18670,18671,18672,18673,18674,18675,18676,18677,
18678,18679,18680,18681,18682,18683,18684,9412,
9456,9495,18685,9381,18668,18669,4762,18619,
0,0,0,0,0,0,0,0,
9760,9876,10081,10241,10385,10528,10649,10760,
10873,10984,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 184 */
18686,18687,18688,18691,18693,18695,18696,18697,
18698,18699,18700,18701,18702,18703,18704,18705,
18706,18707,18708,18709,18710,18711,18712,18713,
18714,18715,18716,18717,18718,18719,18720,18721,
18722,18723,18724,18725,18726,18727,18728,18729,
18730,18731,18732,18733,18734,18735,18736,18737,
18738,18739,18740,18742,18744,18745,0,0,
18746,18747,18748,18749,9413,9457,9496,18750,
9382,4763,4764,4765,4766,4767,4768,4769,
4770,4771,4772,4773,4774,4775,4776,4777,
4778,4779,4780,4781,4782,4783,4784,4785,
18689,18690,18692,18694,18741,18743,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 185 */
18751,18752,18753,18754,18755,18756,18757,18758,
18759,18760,18761,18762,18763,18764,18765,18766,
18767,18768,18769,18770,18771,18772,18773,18774,
18775,18776,18777,18778,18779,18780,18781,18782,
18783,18784,18785,18786,18787,18788,18789,18790,
18791,18792,18793,18794,18795,18796,18797,18798,
18799,18800,18801,18802,18803,18804,18805,18806,
18807,18808,18809,18810,18811,9458,9497,18812,
9414,4786,4787,4788,18813,0,0,0,
0,0,0,0,0,0,0,0,
9761,9877,10082,10242,10386,10529,10650,10761,
10874,10985,0,0,0,0,0,0,
4789,4790,4791,4792,4793,4794,4795,4796,
4797,4798,4799,4800,4801,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 186 */
18814,18815,18816,18817,18818,18819,18820,18821,
18822,18823,18827,18828,18830,18831,18832,18833,
18834,18835,18836,18837,18838,18839,18840,18841,
18842,18843,18844,18845,18846,18847,18848,18849,
18850,18851,18852,18853,18854,18855,18856,18825,
18824,18826,18857,9459,9498,18858,18859,18860,
18861,18862,18863,18864,18865,18866,18867,9383,
18829,4802,0,0,0,0,0,0,
9762,9878,10083,10243,10387,10530,10651,10762,
10875,10986,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 187 */
19042,19043,19044,19045,19046,19047,19048,19049,
19050,19052,19053,19054,19055,19056,19057,19058,
19059,19060,19061,19062,19063,19064,19065,19066,
19067,19068,19051,0,0,19088,19089,19090,
19076,19077,19078,19079,19080,19081,19082,19083,
19084,19085,19086,19087,0,0,0,0,
9763,9879,10084,10244,10388,10531,10652,10763,
10876,10987,4803,4804,4805,4806,4807,4808,
19069,19070,19071,19072,19073,19074,19075,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 188 */
18986,18987,18988,18989,18990,18991,18992,18993,
18994,18995,18996,18997,18998,18999,19000,19001,
19002,19003,19004,19005,19006,19007,19008,19009,
19010,19011,19012,19013,19014,19015,19016,19017,
19018,19019,19020,19021,19022,19023,19024,19025,
19026,19027,19028,19029,19030,19031,19032,19033,
19034,19035,19036,19037,19038,19039,19040,9460,
9499,19041,9384,4809,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 189 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
26549,26551,26553,26555,26557,26559,26561,26563,
26565,26567,26569,26571,26573,26575,26577,26579,
26581,26583,26585,26587,26589,26591,26593,26595,
26597,26599,26601,26603,26605,26607,26609,26611,
26548,26550,26552,26554,26556,26558,26560,26562,
26564,26566,26568,26570,26572,26574,26576,26578,
26580,26582,26584,26586,26588,26590,26592,26594,
26596,26598,26600,26602,26604,26606,26608,26610,
9764,9880,10085,10245,10389,10532,10653,10764,
10877,10988,4810,4811,4812,4813,4814,4815,
4816,4817,4818,0,0,0,0,0,
0,0,0,0,0,0,0,26547,
/* Block: 190 */
18868,18869,18870,18871,18872,18873,18874,0,
0,18875,0,0,18876,18877,18878,18879,
18880,18882,18883,18884,0,18885,18886,0,
18887,18888,18889,18890,18891,18892,18893,18894,
18895,18896,18897,18898,18899,18900,18902,18904,
18906,18907,18908,18909,18910,18911,18912,18913,
18914,18915,18916,18917,18918,18919,0,18920,
18921,0,0,9461,9415,18922,18923,18881,
18901,18903,18905,9385,4819,4820,4821,0,
0,0,0,0,0,0,0,0,
9765,9881,10086,10246,10390,10533,10654,10765,
10878,10989,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 191 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
18924,18925,18926,18927,18928,18929,18930,18931,
0,0,18932,18933,18934,18935,18936,18937,
18938,18939,18940,18941,18942,18943,18944,18945,
18946,18947,18948,18949,18950,18951,18952,18953,
18954,18955,18956,18957,18958,18959,18960,18961,
18962,18963,18964,18965,18966,18967,18968,18969,
18970,18973,18974,18975,18976,18977,18978,18979,
0,0,18980,18982,18983,18984,9462,9500,
18985,18971,4822,18972,18981,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 192 */
19787,19788,19789,19790,19791,19792,19793,19794,
19795,19796,19797,19742,19744,19745,19746,19747,
19748,19749,19750,19751,19752,19753,19754,19755,
19756,19757,19758,19759,19760,19761,19762,19763,
19764,19765,19766,19767,19768,19769,19770,19771,
19772,19773,19774,19776,19779,19781,19783,19784,
19785,19786,19743,9386,19798,9416,9417,9418,
9463,9501,19777,19775,19778,19780,19782,4823,
4824,4825,4826,4827,4828,4829,4830,19799,
0,0,0,0,0,0,0,0,
19800,19801,19802,19803,19806,19808,19807,19809,
19810,19804,19805,19811,19812,19815,19817,19818,
19819,19821,19822,19823,19824,19825,19826,19827,
19828,19829,19830,19831,19833,19834,19835,19836,
19838,19840,19841,19842,19843,19845,19846,19847,
19848,19849,19850,19852,19853,19856,19859,19860,
/* Block: 193 */
19863,19864,19867,19814,19868,19869,19854,19857,
19861,19865,19813,19816,19820,19832,19837,19839,
19844,19855,19858,19862,19866,19851,9464,9502,
9521,19870,4831,4832,4833,19871,4834,4835,
4836,4837,4838,0,0,0,0,0,
0,0,0,0,0,0,0,0,
22257,22258,22259,22260,22261,22262,22263,22264,
22265,22266,22267,22268,22269,22270,22271,22272,
26619,26620,26621,26622,26623,26624,26625,26626,
26627,26628,26629,26630,26631,26632,26633,26634,
26635,26636,26637,26638,26639,26612,26613,26614,
26615,26616,26617,26618,26640,26641,26647,26642,
26643,26644,26645,26646,26648,26654,26652,26666,
26655,26653,26667,26662,26660,26663,26661,26649,
26668,26651,26650,26658,26656,26664,26659,26657,
26665,0,0,0,0,0,0,0,
/* Block: 194 */
4839,4840,4841,4842,4843,4844,4845,4846,
4847,4848,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 195 */
19373,19374,19375,19376,19377,19378,19379,19380,
19381,0,19382,19383,19384,19385,19386,19387,
19388,19389,19390,19391,19392,19393,19394,19395,
19396,19397,19398,19399,19400,19401,19402,19403,
19404,19405,19406,19407,19408,19409,19410,19411,
19412,19413,19414,19415,19416,19417,19418,19420,
19421,19422,19423,19424,19425,19426,19427,0,
19428,19429,19430,19431,9419,9465,9503,19432,
19419,4849,4850,4851,4852,4853,0,0,
0,0,0,0,0,0,0,0,
9766,9882,10087,10247,10391,10534,10655,10766,
10879,10990,9883,10088,10248,10392,10535,10656,
10767,10880,10991,4854,4855,4856,4857,4858,
4859,4860,4861,4862,4863,0,0,0,
4864,4865,19872,19874,19876,19878,19880,19882,
19884,19886,19888,19890,19892,19894,19896,19898,
/* Block: 196 */
19900,19902,19904,19906,19908,19910,19912,19914,
19916,19917,19919,19921,19923,19925,19927,19929,
0,0,19873,19875,19877,19879,19881,19883,
19885,19887,19889,19891,19893,19895,19897,19899,
19901,19903,19905,19907,19909,19911,19913,19915,
0,19918,19920,19922,19924,19926,19928,19930,
19931,19932,19933,19934,19935,9466,9420,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 197 */
19091,19092,19093,19094,19095,19096,19097,0,
19098,19099,0,19100,19101,19102,19103,19104,
19105,19106,19107,19108,19109,19110,19111,19112,
19113,19114,19115,19116,19117,19118,19119,19120,
19121,19122,19123,19124,19125,19126,19127,19130,
19131,19132,19133,19134,19135,19136,19137,19138,
19139,19140,19141,19142,19143,19144,19145,0,
0,0,19146,0,19147,19148,0,19149,
9467,9504,9387,9421,19150,19151,19128,19129,
0,0,0,0,0,0,0,0,
9767,9884,10089,10249,10393,10536,10657,10768,
10881,10992,0,0,0,0,0,0,
19153,19154,19155,19156,19157,19158,0,19159,
19160,0,19161,19162,19163,19164,19165,19166,
19167,19168,19169,19170,19171,19172,19173,19174,
19175,19176,19177,19178,19179,19180,19181,19182,
/* Block: 198 */
19183,19184,19185,19186,19187,19188,19189,19190,
19191,19192,19193,19194,19195,19196,19197,0,
19198,19199,0,19200,19201,9468,9505,19202,
19152,0,0,0,0,0,0,0,
9768,9885,10090,10250,10394,10537,10658,10769,
10882,10993,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 199 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
20208,20209,20210,20211,20212,20213,20214,20215,
20216,20217,20218,20219,20220,20221,20222,20223,
20224,20225,20226,20227,20228,20229,20230,4866,
4867,0,0,0,0,0,0,0,
/* Block: 200 */
9422,9469,21118,9506,21078,21079,21080,21081,
21082,21083,21084,21085,21086,21087,21088,21089,
21090,0,21091,21092,21093,21094,21095,21096,
21097,21098,21099,21100,21101,21102,21103,21104,
21105,21106,21107,21108,21109,21110,21111,21112,
21113,21114,21115,21116,21117,21119,21120,21121,
21122,21123,21124,21125,21126,21127,21128,21129,
21130,21131,21132,0,0,0,21133,21134,
21135,21136,21137,4868,4869,4870,4871,4872,
4873,4874,4875,4876,4877,4878,4879,4880,
9769,9886,10091,10251,10395,10538,10659,10770,
10883,10994,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 201 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
26387,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
4881,4882,4883,4884,4885,4886,4887,4888,
4889,4890,4891,4892,4893,4894,4895,4896,
4897,4898,4899,4900,4901,4902,4903,4904,
4905,4906,4907,4908,4909,9672,9673,9674,
9675,4910,4911,4912,4913,4914,4915,4916,
4917,4918,4919,4920,4921,4922,4923,4924,
4925,4926,0,0,0,0,0,0,
0,0,0,0,0,0,0,4927,
/* Block: 202 */
28913,28914,28915,28916,28917,28918,28919,28920,
28921,28922,28923,28924,28925,28926,28927,28928,
28929,28930,28931,28932,28933,28934,28935,28936,
28937,28938,28939,28940,28941,28942,28943,28944,
28945,28946,28947,28948,28949,28950,28951,28952,
28953,28954,28955,28956,28957,28958,28959,28960,
28961,28962,28963,28964,28965,28966,28967,28968,
28969,28970,28971,28972,28973,28974,28975,28976,
28977,28978,28979,28980,28981,28982,28983,28984,
28985,28986,28987,28988,28989,28990,28991,28992,
28993,28994,28995,28996,28997,28998,28999,29000,
29001,29002,29003,29004,29005,29006,29007,29008,
29009,29010,29011,29012,29013,29014,29015,29016,
29017,29018,29019,29020,29021,29022,29023,29024,
29025,29026,29027,29028,29029,29030,29031,29032,
29033,29034,29035,29036,29037,29038,29039,29040,
/* Block: 203 */
29041,29042,29043,29044,29045,29046,29047,29048,
29049,29050,29051,29052,29053,29054,29055,29056,
29057,29058,29059,29060,29061,29062,29063,29064,
29065,29066,29067,29068,29069,29070,29071,29072,
29073,29074,29075,29076,29077,29078,29079,29080,
29081,29082,29083,29084,29085,29086,29087,29088,
29089,29090,29091,29092,29093,29094,29095,29096,
29097,29098,29099,29100,29101,29102,29103,29104,
29105,29106,29107,29108,29109,29110,29111,29112,
29113,29114,29115,29116,29117,29118,29119,29120,
29121,29122,29123,29124,29125,29126,29127,29128,
29129,29130,29131,29132,29133,29134,29135,29136,
29137,29138,29139,29140,29141,29142,29143,29144,
29145,29146,29147,29148,29149,29150,29151,29152,
29153,29154,29155,29156,29157,29158,29159,29160,
29161,29162,29163,29164,29165,29166,29167,29168,
/* Block: 204 */
29169,29170,29171,29172,29173,29174,29175,29176,
29177,29178,29179,29180,29181,29182,29183,29184,
29185,29186,29187,29188,29189,29190,29191,29192,
29193,29194,29195,29196,29197,29198,29199,29200,
29201,29202,29203,29204,29205,29206,29207,29208,
29209,29210,29211,29212,29213,29214,29215,29216,
29217,29218,29219,29220,29221,29222,29223,29224,
29225,29226,29227,29228,29229,29230,29231,29232,
29233,29234,29235,29236,29237,29238,29239,29240,
29241,29242,29243,29244,29245,29246,29247,29248,
29249,29250,29251,29252,29253,29254,29255,29256,
29257,29258,29259,29260,29261,29262,29263,29264,
29265,29266,29267,29268,29269,29270,29271,29272,
29273,29274,29275,29276,29277,29278,29279,29280,
29281,29282,29283,29284,29285,29286,29287,29288,
29289,29290,29291,29292,29293,29294,29295,29296,
/* Block: 205 */
29297,29298,29299,29300,29301,29302,29303,29304,
29305,29306,29307,29308,29309,29310,29311,29312,
29313,29314,29315,29316,29317,29318,29319,29320,
29321,29322,29323,29324,29325,29326,29327,29328,
29329,29330,29331,29332,29333,29334,29335,29336,
29337,29338,29339,29340,29341,29342,29343,29344,
29345,29346,29347,29348,29349,29350,29351,29352,
29353,29354,29355,29356,29357,29358,29359,29360,
29361,29362,29363,29364,29365,29366,29367,29368,
29369,29370,29371,29372,29373,29374,29375,29376,
29377,29378,29379,29380,29381,29382,29383,29384,
29385,29386,29387,29388,29389,29390,29391,29392,
29393,29394,29395,29396,29397,29398,29399,29400,
29401,29402,29403,29404,29405,29406,29407,29408,
29409,29410,29411,29412,29413,29414,29415,29416,
29417,29418,29419,29420,29421,29422,29423,29424,
/* Block: 206 */
29425,29426,29427,29428,29429,29430,29431,29432,
29433,29434,29435,29436,29437,29438,29439,29440,
29441,29442,29443,29444,29445,29446,29447,29448,
29449,29450,29451,29452,29453,29454,29455,29456,
29457,29458,29459,29460,29461,29462,29463,29464,
29465,29466,29467,29468,29469,29470,29471,29472,
29473,29474,29475,29476,29477,29478,29479,29480,
29481,29482,29483,29484,29485,29486,29487,29488,
29489,29490,29491,29492,29493,29494,29495,29496,
29497,29498,29499,29500,29501,29502,29503,29504,
29505,29506,29507,29508,29509,29510,29511,29512,
29513,29514,29515,29516,29517,29518,29519,29520,
29521,29522,29523,29526,29527,29528,29529,29530,
29531,29532,29533,29534,29535,29536,29537,29538,
29539,29540,29541,29542,29543,29544,29545,29546,
29547,29548,29549,29550,29551,29552,29553,29554,
/* Block: 207 */
29555,29556,29557,29558,29559,29560,29561,29562,
29563,29564,29565,29566,29567,29568,29569,29570,
29571,29572,29573,29574,29575,29576,29577,29578,
29579,29580,29581,29582,29583,29584,29585,29586,
29587,29588,29589,29590,29591,29592,29593,29594,
29595,29596,29597,29598,29599,29600,29601,29602,
29603,29604,29605,29606,29607,29608,29609,29610,
29611,29612,29613,29614,29615,29616,29617,29618,
29619,29620,29621,29622,29623,29624,29625,29626,
29627,29628,29629,29630,29631,29632,29633,29634,
29635,29636,29637,29638,29524,29525,29639,29640,
29641,29642,29643,29644,29645,29646,29647,29648,
29649,29650,29651,29652,29653,29654,29655,29656,
29657,29658,29659,29660,29661,29662,29663,29664,
29665,29666,29667,29668,29669,29670,29671,29672,
29673,29674,29675,29676,29677,29678,29679,29680,
/* Block: 208 */
29681,29682,29683,29684,29685,29686,29687,29688,
29689,29690,29691,29692,29693,29694,29695,29696,
29697,29698,29699,29700,29701,29702,29703,29704,
29705,29706,29707,29708,29709,29710,29711,29712,
29713,29714,29715,29716,29717,29718,29719,29720,
29721,29722,29723,29724,29725,29726,29727,29728,
29729,29730,29731,29732,29733,29734,29735,29736,
29737,29738,29739,29740,29741,29742,29743,29744,
29745,29746,29747,29748,29749,29750,29751,29752,
29753,29754,29755,29756,29757,29758,29759,29760,
29761,29762,29763,29764,29765,29766,29767,29768,
29769,29770,29771,29772,29773,29774,29775,29776,
29777,29778,29779,29780,29781,29782,29783,29784,
29785,29786,29787,29788,29789,29790,29791,29792,
29793,29794,29795,29796,29797,29798,29799,29800,
29801,29802,29803,29804,29805,29806,29807,29808,
/* Block: 209 */
29809,29810,29811,29812,29813,29814,29815,29816,
29817,29818,29819,29820,29821,29822,29823,29824,
29825,29826,29827,29828,29829,29830,29831,29832,
29833,29834,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 210 */
10092,10252,10396,10539,10660,10771,10884,10995,
10253,10397,10540,10661,10772,10885,10996,10398,
10541,10662,10773,10886,10997,9887,10093,10254,
10399,10542,10663,10774,10887,10998,9888,10094,
10255,10400,10543,10095,10256,10257,10401,10544,
10664,10775,10888,10999,9889,10096,10258,10259,
10402,10545,4928,4929,9890,10097,10260,10261,
10403,10546,10262,10263,10404,10405,10406,10407,
10665,10776,10777,10778,10889,10890,11000,11001,
11002,11003,10098,10264,10408,10547,10666,9891,
10099,10265,10409,10410,10548,10549,10100,10266,
9892,10101,4930,4931,4932,4933,4934,4935,
4936,4937,4938,4939,4940,4941,4942,4943,
4944,10411,10550,10667,10779,10891,11004,0,
4945,4946,4947,4948,4949,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 211 */
29835,29836,29837,29838,29839,29840,29841,29842,
29843,29844,29845,29846,29847,29848,29849,29850,
29851,29852,29853,29854,29855,29856,29857,29858,
29859,29860,29861,29862,29863,29864,29865,29866,
29867,29868,29869,29870,29871,29872,29873,29874,
29875,29876,29877,29878,29879,29880,29881,29882,
29883,29884,29885,29886,29887,29888,29889,29890,
29891,29892,29893,29894,29895,29896,29897,29898,
29899,29900,29901,29902,29903,29904,29905,29906,
29907,29908,29909,29910,29911,29912,29913,29914,
29915,29916,29917,29918,29919,29920,29921,29922,
29923,29924,29925,29926,29927,29928,29929,29930,
29931,29932,29933,29934,29935,29936,29937,29938,
29939,29940,29941,29942,29943,29944,29945,29946,
29947,29948,29949,29950,29951,29952,29953,29954,
29955,29956,29957,29958,29959,29960,29961,29962,
/* Block: 212 */
29963,29964,29965,29966,29967,29968,29969,29970,
29971,29972,29973,29974,29975,29976,29977,29978,
29979,29980,29981,29982,29983,29984,29985,29986,
29987,29988,29989,29990,29991,29992,29993,29994,
29995,29996,29997,29998,29999,30000,30001,30002,
30003,30004,30005,30006,30007,30008,30009,30010,
30011,30012,30013,30014,30015,30016,30017,30018,
30019,30020,30021,30022,30023,30024,30025,30026,
30027,30028,30029,30030,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 213 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
28279,28280,28281,28282,28283,28284,28285,28286,
28287,28288,28289,28290,28291,28292,28293,28294,
28295,28296,28297,28298,28299,28300,28301,28302,
28303,28304,28305,28306,28307,28308,28309,28310,
28311,28312,28313,28314,28315,28316,28317,28318,
28319,28320,28321,28322,28323,28324,28325,28326,
28327,28328,28329,28330,28331,28332,28333,28334,
28335,28336,28337,28338,28339,28340,28341,28342,
28343,28344,28345,28346,28347,28348,28349,28350,
28351,28352,28353,28354,28355,28356,28357,28358,
28359,28360,28361,28362,28363,28364,28365,28366,
28367,28368,28369,28370,28371,28372,28373,28374,
28375,4950,4951,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 214 */
30031,30032,30033,30034,30035,30036,30037,30038,
30039,30040,30041,30042,30043,30044,30045,30046,
30047,30048,30049,30050,30051,30052,30053,30054,
30055,30056,30057,30058,30059,30060,30061,30062,
30063,30064,30065,30066,30067,30068,30069,30070,
30071,30072,30073,30074,30075,30076,30077,30078,
30079,30080,30081,30082,30083,30084,30085,30086,
30087,30088,30089,30090,30091,30092,30093,30094,
30095,30096,30097,30098,30099,30100,30101,30102,
30103,30104,30105,30106,30107,30108,30109,30110,
30111,30112,30113,30114,30115,30116,30117,30118,
30119,30120,30121,30122,30123,30124,30125,30126,
30127,30128,30129,30130,30131,30132,30133,30134,
30135,30136,30137,30138,30139,30140,30141,30142,
30143,30144,30145,30146,30147,30148,30149,30150,
30151,30152,30153,30154,30155,30156,30157,30158,
/* Block: 215 */
30159,30160,30161,30162,30163,30164,30165,30166,
30167,30168,30169,30170,30171,30172,30173,30174,
30175,30176,30177,30178,30179,30180,30181,30182,
30183,30184,30185,30186,30187,30188,30189,30190,
30191,30192,30193,30194,30195,30196,30197,30198,
30199,30200,30201,30202,30203,30204,30205,30206,
30207,30208,30209,30210,30211,30212,30213,30214,
30215,30216,30217,30218,30219,30220,30221,30222,
30223,30224,30225,30226,30227,30228,30229,30230,
30231,30232,30233,30234,30235,30236,30237,30238,
30239,30240,30241,30242,30243,30244,30245,30246,
30247,30248,30249,30250,30251,30252,30253,30254,
30255,30256,30257,30258,30259,30260,30261,30262,
30263,30264,30265,30266,30267,30268,30269,30270,
30271,30272,30273,30274,30275,30276,30277,30278,
30279,30280,30281,30282,30283,30284,30285,30286,
/* Block: 216 */
30287,30288,30289,30290,30291,30292,30293,30294,
30295,30296,30297,30298,30299,30300,30301,30302,
30303,30304,30305,30306,30307,30308,30309,30310,
30311,30312,30313,30314,30315,30316,30317,30318,
30319,30320,30321,30322,30323,30324,30325,30326,
30327,30328,30329,30330,30331,30332,30333,30334,
30335,30336,30337,30338,30339,30340,30341,30342,
30343,30344,30345,30346,30347,30348,30349,30350,
30351,30352,30353,30354,30355,30356,30357,30358,
30359,30360,30361,30362,30363,30364,30365,30366,
30367,30368,30369,30370,30371,30372,30373,30374,
30375,30376,30377,30378,30379,30380,30381,30382,
30383,30384,30385,30386,30387,30388,30389,30390,
30391,30392,30393,30394,30395,30396,30397,30398,
30399,30400,30401,30402,30403,30404,30405,30406,
30407,30408,30409,30410,30411,30412,30413,30414,
/* Block: 217 */
30415,30416,30417,30418,30419,30420,30421,30422,
30423,30424,30425,30426,30427,30428,30429,30430,
30431,30432,30433,30434,30435,30436,30437,30438,
30439,30440,30441,30442,30443,30444,30445,30446,
30447,30448,30449,30450,30451,30452,30453,30454,
30455,30456,30457,30458,30459,30460,30461,30462,
30463,30464,30465,30466,30467,30468,30469,30470,
30471,30472,30473,30474,30475,30476,30477,30478,
30479,30480,30481,30482,30483,30484,30485,30486,
30487,30488,30489,30490,30491,30492,30493,30494,
30495,30496,30497,30498,30499,30500,30501,30502,
30503,30504,30505,30506,30507,30508,30509,30510,
30511,30512,30513,30514,30515,30516,30517,30518,
30519,30520,30521,30522,30523,30524,30525,30526,
30527,30528,30529,30530,30531,30532,30533,30534,
30535,30536,30537,30538,30539,30540,30541,30542,
/* Block: 218 */
30543,30544,30545,30546,30547,30548,30549,30550,
30551,30552,30553,30554,30555,30556,30557,30558,
30559,30560,30561,30562,30563,30564,30565,30566,
30567,30568,30569,30570,30571,30572,30573,30574,
30575,30576,30577,30578,30579,30580,30581,30582,
30583,30584,30585,30586,30587,30588,30589,30590,
30591,30592,30593,30594,30595,30596,30597,30598,
30599,30600,30601,30602,30603,30604,30605,30606,
30607,30608,30609,30610,30611,30612,30613,30614,
30615,30616,30617,30618,30619,30620,30621,30622,
30623,30624,30625,30626,30627,30628,30629,30630,
30631,30632,30633,30634,30635,30636,30637,30638,
30639,30640,30641,30642,30643,30644,30645,30646,
30647,30648,30649,30650,30651,30652,30653,30654,
30655,30656,30657,30658,30659,30660,30661,30662,
30663,30664,30665,30666,30667,30668,30669,30670,
/* Block: 219 */
30671,30672,30673,30674,30675,30676,30677,30678,
30679,30680,30681,30682,30683,30684,30685,30686,
30687,30688,30689,30690,30691,30692,30693,30694,
30695,30696,30697,30698,30699,30700,30701,30702,
30703,30704,30705,30706,30707,30708,30709,30710,
30711,30712,30713,30714,30715,30716,30717,30718,
30719,30720,30721,30722,30723,30724,30725,30726,
30727,30728,30729,30730,30731,30732,30733,30734,
30735,30736,30737,30738,30739,30740,30741,30742,
30743,30744,30745,30746,30747,30748,30749,30750,
30751,30752,30753,30754,30755,30756,30757,30758,
30759,30760,30761,30762,30763,30764,30765,30766,
30767,30768,30769,30770,30771,30772,30773,30774,
30775,30776,30777,30778,30779,30780,30781,30782,
30783,30784,30785,30786,30787,30788,30789,30790,
30791,30792,30793,30794,30795,30796,30797,30798,
/* Block: 220 */
30799,30800,30801,30802,30803,30804,30805,30806,
30807,30808,30809,30810,30811,30812,30813,30814,
30815,30816,30817,30818,30819,30820,30821,30822,
30823,30824,30825,30826,30827,30828,30829,30830,
30831,30832,30833,30834,30835,30836,30837,30838,
30839,30840,30841,30842,30843,30844,30845,30846,
30847,30848,30849,30850,30851,30852,30853,30854,
30855,30856,30857,30858,30859,30860,30861,30862,
30863,30864,30865,30866,30867,30868,30869,30870,
30871,30872,30873,30874,30875,30876,30877,30878,
30879,30880,30881,30882,30883,30884,30885,30886,
30887,30888,30889,30890,30891,30892,30893,30894,
30895,30896,30897,30898,30899,30900,30901,30902,
30903,30904,30905,30906,30907,30908,30909,30910,
30911,30912,30913,30914,30915,30916,30917,30918,
30919,30920,30921,30922,30923,30924,30925,30926,
/* Block: 221 */
30927,30928,30929,30930,30931,30932,30933,30934,
30935,30936,30937,30938,30939,30940,30941,30942,
30943,30944,30945,30946,30947,30948,30949,30950,
30951,30952,30953,30954,30955,30956,30957,30958,
30959,30960,30961,30962,30963,30964,30965,30966,
30967,30968,30969,30970,30971,30972,30973,30974,
30975,30976,30977,30978,30979,30980,30981,30982,
30983,30984,30985,30986,30987,30988,30989,30990,
30991,30992,30993,30994,30995,30996,30997,30998,
30999,31000,31001,31002,31003,31004,31005,31006,
31007,31008,31009,31010,31011,31012,31013,31014,
31015,31016,31017,31018,31019,31020,31021,31022,
31023,31024,31025,31026,31027,31028,31029,31030,
31031,31032,31033,31034,31035,31036,31037,31038,
31039,31040,31041,31042,31043,31044,31045,31046,
31047,31048,31049,31050,31051,31052,31053,31054,
/* Block: 222 */
31055,31056,31057,31058,31059,31060,31061,31062,
31063,31064,31065,31066,31067,31068,31069,31070,
31071,31072,31073,31074,31075,31076,31077,31078,
31079,31080,31081,31082,31083,31084,31085,31086,
31087,31088,31089,31090,31091,31092,31093,31094,
31095,31096,31097,31098,31099,31100,31101,31102,
108,109,110,111,112,113,114,115,
116,117,118,119,120,121,122,123,
4952,31103,31104,31105,31106,31107,31108,4953,
4954,4955,4956,4957,4958,4959,4960,4961,
4962,4963,4964,4965,4966,4967,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 223 */
31167,31168,31169,31170,31171,31172,31173,31174,
31175,31176,31177,31178,31179,31180,31181,31182,
31183,31184,31185,31186,31187,31188,31189,31190,
31191,31192,31193,31194,31195,31196,31197,31198,
31199,31200,31201,31202,31203,31204,31205,31206,
31207,31208,31209,31210,31211,31212,31213,31214,
31215,31216,31217,31218,31219,31220,31221,31222,
31223,31224,31225,31226,31227,31228,31229,31230,
31231,31232,31233,31234,31235,31236,31237,31238,
31239,31240,31241,31242,31243,31244,31245,31246,
31247,31248,31249,31250,31251,31252,31253,31254,
31255,31256,31257,31258,31259,31260,31261,31262,
31263,31264,31265,31266,31267,31268,31269,31270,
31271,31272,31273,31274,31275,31276,31277,31278,
31279,31280,31281,31282,31283,31284,31285,31286,
31287,31288,31289,31290,31291,31292,31293,31294,
/* Block: 224 */
31295,31296,31297,31298,31299,31300,31301,31302,
31303,31304,31305,31306,31307,31308,31309,31310,
31311,31312,31313,31314,31315,31316,31317,31318,
31319,31320,31321,31322,31323,31324,31325,31326,
31327,31328,31329,31330,31331,31332,31333,31334,
31335,31336,31337,31338,31339,31340,31341,31342,
31343,31344,31345,31346,31347,31348,31349,31350,
31351,31352,31353,31354,31355,31356,31357,31358,
31359,31360,31361,31362,31363,31364,31365,31366,
31367,31368,31369,31370,31371,31372,31373,31374,
31375,31376,31377,31378,31379,31380,31381,31382,
31383,31384,31385,31386,31387,31388,31389,31390,
31391,31392,31393,31394,31395,31396,31397,31398,
31399,31400,31401,31402,31403,31404,31405,31406,
31407,31408,31409,31410,31411,31412,31413,31414,
31415,31416,31417,31418,31419,31420,31421,31422,
/* Block: 225 */
31423,31424,31425,31426,31427,31428,31429,31430,
31431,31432,31433,31434,31435,31436,31437,31438,
31439,31440,31441,31442,31443,31444,31445,31446,
31447,31448,31449,31450,31451,31452,31453,31454,
31455,31456,31457,31458,31459,31460,31461,31462,
31463,31464,31465,31466,31467,31468,31469,31470,
31471,31472,31473,31474,31475,31476,31477,31478,
31479,31480,31481,31482,31483,31484,31485,31486,
31487,31488,31489,31490,31491,31492,31493,31494,
31495,31496,31497,31498,31499,31500,31501,31502,
31503,31504,31505,31506,31507,31508,31509,31510,
31511,31512,31513,31514,31515,31516,31517,31518,
31519,31520,31521,31522,31523,31524,31525,31526,
31527,31528,31529,31530,31531,31532,31533,31534,
31535,31536,31537,31538,31539,31540,31541,31542,
31543,31544,31545,31546,31547,31548,31549,31550,
/* Block: 226 */
31551,31552,31553,31554,31555,31556,31557,31558,
31559,31560,31561,31562,31563,31564,31565,31566,
31567,31568,31569,31570,31571,31572,31573,31574,
31575,31576,31577,31578,31579,31580,31581,31582,
31583,31584,31585,31586,31587,31588,31589,31590,
31591,31592,31593,31594,31595,31596,31597,31598,
31599,31600,31601,31602,31603,31604,31605,31606,
31607,31608,31609,31610,31611,31612,31613,31614,
31615,31616,31617,31618,31619,31620,31621,31622,
31623,31624,31625,31626,31627,31628,31629,31630,
31631,31632,31633,31634,31635,31636,31637,31638,
31639,31640,31641,31642,31643,31644,31645,31646,
31647,31648,31649,31650,31651,31652,31653,31654,
31655,31656,31657,31658,31659,31660,31661,31662,
31663,31664,31665,31666,31667,31668,31669,31670,
31671,31672,31673,31674,31675,31676,31677,31678,
/* Block: 227 */
31679,31680,31681,31682,31683,31684,31685,31686,
31687,31688,31689,31690,31691,31692,31693,31694,
31695,31696,31697,31698,31699,31700,31701,31702,
31703,31704,31705,31706,31707,31708,31709,31710,
31711,31712,31713,31714,31715,31716,31717,31718,
31719,31720,31721,31722,31723,31724,31725,31726,
31727,31728,31729,31730,31731,31732,31733,31734,
31735,31736,31737,31738,31739,31740,31741,31742,
31743,31744,31745,31746,31747,31748,31749,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 228 */
22927,22928,22929,22930,22931,22932,22933,22934,
22935,22936,22937,22938,22939,22940,22941,22942,
22943,22944,22945,22946,22947,22948,22949,22950,
22951,22952,22953,22954,22955,22956,22957,22958,
22959,22960,22961,22962,22963,22964,22965,22966,
22967,22968,22969,22970,22971,22972,22973,22974,
22975,22976,22977,22978,22979,22980,22981,22982,
22983,22984,22985,22986,22987,22988,22989,22990,
22991,22992,22993,22994,22995,22996,22997,22998,
22999,23000,23001,23002,23003,23004,23005,23006,
23007,23008,23009,23010,23011,23012,23013,23014,
23015,23016,23017,23018,23019,23020,23021,23022,
23023,23024,23025,23026,23027,23028,23029,23030,
23031,23032,23033,23034,23035,23036,23037,23038,
23039,23040,23041,23042,23043,23044,23045,23046,
23047,23048,23049,23050,23051,23052,23053,23054,
/* Block: 229 */
23055,23056,23057,23058,23059,23060,23061,23062,
23063,23064,23065,23066,23067,23068,23069,23070,
23071,23072,23073,23074,23075,23076,23077,23078,
23079,23080,23081,23082,23083,23084,23085,23086,
23087,23088,23089,23090,23091,23092,23093,23094,
23095,23096,23097,23098,23099,23100,23101,23102,
23103,23104,23105,23106,23107,23108,23109,23110,
23111,23112,23113,23114,23115,23116,23117,23118,
23119,23120,23121,23122,23123,23124,23125,23126,
23127,23128,23129,23130,23131,23132,23133,23134,
23135,23136,23137,23138,23139,23140,23141,23142,
23143,23144,23145,23146,23147,23148,23149,23150,
23151,23152,23153,23154,23155,23156,23157,23158,
23159,23160,23161,23162,23163,23164,23165,23166,
23167,23168,23169,23170,23171,23172,23173,23174,
23175,23176,23177,23178,23179,23180,23181,23182,
/* Block: 230 */
23183,23184,23185,23186,23187,23188,23189,23190,
23191,23192,23193,23194,23195,23196,23197,23198,
23199,23200,23201,23202,23203,23204,23205,23206,
23207,23208,23209,23210,23211,23212,23213,23214,
23215,23216,23217,23218,23219,23220,23221,23222,
23223,23224,23225,23226,23227,23228,23229,23230,
23231,23232,23233,23234,23235,23236,23237,23238,
23239,23240,23241,23242,23243,23244,23245,23246,
23247,23248,23249,23250,23251,23252,23253,23254,
23255,23256,23257,23258,23259,23260,23261,23262,
23263,23264,23265,23266,23267,23268,23269,23270,
23271,23272,23273,23274,23275,23276,23277,23278,
23279,23280,23281,23282,23283,23284,23285,23286,
23287,23288,23289,23290,23291,23292,23293,23294,
23295,23296,23297,23298,23299,23300,23301,23302,
23303,23304,23305,23306,23307,23308,23309,23310,
/* Block: 231 */
23311,23312,23313,23314,23315,23316,23317,23318,
23319,23320,23321,23322,23323,23324,23325,23326,
23327,23328,23329,23330,23331,23332,23333,23334,
23335,23336,23337,23338,23339,23340,23341,23342,
23343,23344,23345,23346,23347,23348,23349,23350,
23351,23352,23353,23354,23355,23356,23357,23358,
23359,23360,23361,23362,23363,23364,23365,23366,
23367,23368,23369,23370,23371,23372,23373,23374,
23375,23376,23377,23378,23379,23380,23381,23382,
23383,23384,23385,23386,23387,23388,23389,23390,
23391,23392,23393,23394,23395,23396,23397,23398,
23399,23400,23401,23402,23403,23404,23405,23406,
23407,23408,23409,23410,23411,23412,23413,23414,
23415,23416,23417,23418,23419,23420,23421,23422,
23423,23424,23425,23426,23427,23428,23429,23430,
23431,23432,23433,23434,23435,23436,23437,23438,
/* Block: 232 */
23439,23440,23441,23442,23443,23444,23445,23446,
23447,23448,23449,23450,23451,23452,23453,23454,
23455,23456,23457,23458,23459,23460,23461,23462,
23463,23464,23465,23466,23467,23468,23469,23470,
23471,23472,23473,23474,23475,23476,23477,23478,
23479,23480,23481,23482,23483,23484,23485,23486,
23487,23488,23489,23490,23491,23492,23493,23494,
23495,0,0,0,0,0,0,0,
27562,27563,27564,27565,27566,27567,27568,27569,
27570,27571,27572,27573,27574,27575,27576,27577,
27578,27579,27580,27581,27582,27583,27584,27585,
27586,27587,27588,27589,27590,27591,27592,0,
9770,9893,10102,10267,10412,10551,10668,10780,
10892,11005,0,0,0,0,4968,4969,
27593,27594,27595,27596,27597,27598,27599,27600,
27601,27602,27603,27604,27605,27606,27607,27608,
/* Block: 233 */
27609,27610,27611,27612,27613,27614,27615,27616,
27617,27618,27619,27620,27621,27622,27623,27624,
27625,27626,27627,27628,27629,27630,27631,27632,
27633,27634,27635,27636,27637,27638,27639,27640,
27641,27642,27643,27644,27645,27646,27647,27648,
27649,27650,27651,27652,27653,27654,27655,27656,
27657,27658,27659,27660,27661,27662,27663,27664,
27665,27666,27667,27668,27669,27670,27671,0,
9771,9894,10103,10268,10413,10552,10669,10781,
10893,11006,0,0,0,0,0,0,
23496,23497,23498,23499,23500,23501,23502,23503,
23504,23505,23506,23507,23508,23509,23510,23511,
23512,23513,23514,23515,23516,23517,23518,23519,
23520,23521,23522,23523,23524,23525,0,0,
9347,9348,9349,9350,9351,4970,0,0,
0,0,0,0,0,0,0,0,
/* Block: 234 */
26669,26670,26671,26672,26673,26674,26675,26676,
26677,26678,26679,26680,26681,26682,26683,26684,
26685,26686,26687,26688,26689,26690,26691,26692,
26693,26694,26695,26696,26697,26698,26699,26700,
26701,26702,26703,26704,26705,26706,26707,26708,
26709,26710,26711,26712,26713,26714,26715,26716,
9558,9560,9562,9564,9566,9568,9570,4971,
4972,4973,4974,4975,4976,4977,4978,4979,
26717,26718,9632,9633,4980,4981,0,0,
0,0,0,0,0,0,0,0,
9772,9895,10104,10269,10414,10553,10670,10782,
10894,11007,0,4982,4983,4984,4985,4986,
4987,4988,0,26719,26720,26721,26722,26723,
26724,26725,26726,26727,26728,26729,26730,26731,
26732,26733,26734,26735,26736,26737,26738,26739,
0,0,0,0,0,26740,26741,26742,
/* Block: 235 */
26743,26744,26745,26746,26747,26748,26749,26750,
26751,26752,26753,26754,26755,26756,26757,26758,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 236 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
23724,23726,23728,23730,23732,23734,23736,23738,
23740,23742,23744,23746,23748,23750,23752,23754,
23756,23758,23760,23762,23764,23766,23768,23770,
23772,23774,23776,23778,23780,23782,23784,23786,
23723,23725,23727,23729,23731,23733,23735,23737,
23739,23741,23743,23745,23747,23749,23751,23753,
23755,23757,23759,23761,23763,23765,23767,23769,
23771,23773,23775,23777,23779,23781,23783,23785,
/* Block: 237 */
9773,9896,10105,10270,10415,10554,10671,10783,
10895,11008,4989,4990,4991,4992,4993,4994,
4995,4996,4997,4998,9929,10136,10301,4999,
5000,5001,5002,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 238 */
26398,26399,26400,26401,26403,26405,26404,26406,
26407,26408,26409,26410,26411,26412,26414,26415,
26417,26419,26420,26418,26421,26422,26423,26424,
26425,26426,26427,26428,26429,26430,26431,26432,
26433,26434,26435,26436,26438,26437,26439,26440,
26441,26442,26443,26444,26445,26446,26447,26448,
26449,26450,26451,26453,26455,26456,26457,26458,
26459,26460,26462,26463,26464,26465,26467,26466,
26468,26469,26470,26471,26472,26402,26454,26452,
26413,26461,26416,0,0,0,0,26477,
26473,26474,26475,26476,26478,26479,26480,26481,
26482,26484,26485,26486,26487,26489,26490,26491,
26492,26494,26495,26496,26497,26498,26500,26501,
26502,26503,26504,26505,26506,26507,26510,26511,
26512,26513,26514,26516,26517,26520,26521,26522,
26523,26524,26525,26526,26527,26528,26529,26508,
/* Block: 239 */
26515,26483,26519,26488,26493,26518,26499,26509,
0,0,0,0,0,0,0,26530,
26531,26532,26533,26534,26535,26536,26537,26538,
26539,26540,26541,26542,26543,26544,26545,26546,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
9638,9639,5003,9640,5004,0,0,0,
0,0,0,0,0,0,0,0,
9586,9587,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 240 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
5005,5006,5007,5008,0,5009,5010,5011,
5012,5013,5014,5015,0,5016,5017,0,
/* Block: 241 */
24451,24838,24825,24826,24827,24828,24829,24830,
24831,24832,24833,24834,24835,24836,24837,24839,
24840,24841,24842,24843,24844,24845,24846,24847,
24848,24849,24850,24851,24852,24853,24854,24855,
24856,24857,24858,24859,24860,24861,24862,24863,
24864,24865,24866,24867,24868,24869,24870,24871,
24872,24873,24874,24875,24876,24877,24878,24879,
24880,24881,24882,24883,24884,24885,24886,24887,
24888,24889,24890,24891,24892,24893,24894,24895,
24896,24897,24898,24899,24900,24901,24902,24903,
24904,24905,24906,24907,24908,24909,24910,24911,
24912,24913,24914,24915,24916,24917,24918,24919,
24920,24921,24922,24923,24924,24925,24926,24927,
24928,24929,24930,24931,24932,24933,24934,24935,
24936,24937,24938,24939,24940,24941,24942,24943,
24944,24945,24946,24947,24948,24949,24950,24951,
/* Block: 242 */
24952,24953,24954,24955,24956,24957,24958,24959,
24960,24961,24962,24963,24964,24965,24966,24967,
24968,24969,24970,24971,24972,24973,24974,24975,
24976,24977,24978,24979,24980,24981,24982,24983,
24984,24985,24986,24987,24988,24989,24990,24991,
24992,24993,24994,24995,24996,24997,24998,24999,
25000,25001,25002,25003,25004,25005,25006,25007,
25008,25009,25010,25011,25012,25013,25014,25015,
25016,25017,25018,25019,25020,25021,25022,25023,
25024,25025,25026,25027,25028,25029,25030,25031,
25032,25033,25034,25035,25036,25037,25038,25039,
25040,25041,25042,25043,25044,25045,25046,25047,
25048,25049,25050,25051,25052,25053,25054,25055,
25056,25057,25058,25059,25060,25061,25062,25063,
25064,25065,25066,25067,25068,25069,25070,25071,
25072,25073,25074,25075,25076,25077,25078,25079,
/* Block: 243 */
25080,25081,25082,25083,25084,25085,25086,25087,
25088,25089,25090,25091,25092,25093,25094,25095,
25096,25097,25098,25099,25100,25101,25102,25103,
25104,25105,25106,25107,25108,25109,25110,24806,
24743,24752,24807,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,24517,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
24800,24808,24814,0,0,24519,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,24802,24810,24816,24822,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 244 */
27206,27207,27208,27209,27210,27211,27212,27213,
27214,27215,27216,27217,27218,27219,27220,27221,
27222,27223,27224,27225,27226,27227,27228,27229,
27230,27231,27232,27233,27234,27235,27236,27237,
27238,27239,27240,27241,27242,27243,27244,27245,
27246,27247,27248,27249,27250,27251,27252,27253,
27254,27255,27256,27257,27258,27259,27260,27261,
27262,27263,27264,27265,27266,27267,27268,27269,
27270,27271,27272,27273,27274,27275,27276,27277,
27278,27279,27280,27281,27282,27283,27284,27285,
27286,27287,27288,27289,27290,27291,27292,27293,
27294,27295,27296,27297,27298,27299,27300,27301,
27302,27303,27304,27305,27306,27307,27308,27309,
27310,27311,27312,0,0,0,0,0,
27313,27314,27315,27316,27317,27318,27319,27320,
27321,27322,27323,27324,27325,0,0,0,
/* Block: 245 */
27326,27327,27328,27329,27330,27331,27332,27333,
27334,0,0,0,0,0,0,0,
27335,27336,27337,27338,27339,27340,27341,27342,
27343,27344,0,0,5018,9077,9160,5019,
124,125,126,127,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 246 */
5020,5021,5022,5023,5024,5025,5026,5027,
5028,5029,5030,5031,5032,5033,5034,5035,
5036,5037,5038,5039,5040,5041,5042,5043,
5044,5045,5046,5047,5048,5049,5050,5051,
5052,5053,5054,5055,5056,5057,5058,5059,
5060,5061,5062,5063,5064,5065,0,0,
5066,5067,5068,5069,5070,5071,5072,5073,
5074,5075,5076,5077,5078,5079,5080,5081,
5082,5083,5084,5085,5086,5087,5088,0,
0,0,0,0,0,0,0,0,
5089,5090,5091,5092,5093,5094,5095,5096,
5097,5098,5099,5100,5101,5102,5103,5104,
5105,5106,5107,5108,5109,5110,5111,5112,
5113,5114,5115,5116,5117,5118,5119,5120,
5121,5122,5123,5124,5125,5126,5127,5128,
5129,5130,5131,5132,5133,5134,5135,5136,
/* Block: 247 */
5137,5138,5139,5140,5141,5142,5143,5144,
5145,5146,5147,5148,5149,5150,5151,5152,
5153,5154,5155,5156,5157,5158,5159,5160,
5161,5162,5163,5164,5165,5166,5167,5168,
5169,5170,5171,5172,5173,5174,5175,5176,
5177,5178,5179,5180,5181,5182,5183,5184,
5185,5186,5187,5188,5189,5190,5191,5192,
5193,5194,5195,5196,5197,5198,5199,5200,
5201,5202,5203,5204,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 248 */
5205,5206,5207,5208,5209,5210,5211,5212,
5213,5214,5215,5216,5217,5218,5219,5220,
5221,5222,5223,5224,5225,5226,5227,5228,
5229,5230,5231,5232,5233,5234,5235,5236,
5237,5238,5239,5240,5241,5242,5243,5244,
5245,5246,5247,5248,5249,5250,5251,5252,
5253,5254,5255,5256,5257,5258,5259,5260,
5261,5262,5263,5264,5265,5266,5267,5268,
5269,5270,5271,5272,5273,5274,5275,5276,
5277,5278,5279,5280,5281,5282,5283,5284,
5285,5286,5287,5288,5289,5290,5291,5292,
5293,5294,5295,5296,5297,5298,5299,5300,
5301,5302,5303,5304,5305,5306,5307,5308,
5309,5310,5311,5312,5313,5314,5315,5316,
5317,5318,5319,5320,5321,5322,5323,5324,
5325,5326,5327,5328,5329,5330,5331,5332,
/* Block: 249 */
5333,5334,5335,5336,5337,5338,5339,5340,
5341,5342,5343,5344,5345,5346,5347,5348,
5349,5350,5351,5352,5353,5354,5355,5356,
5357,5358,5359,5360,5361,5362,5363,5364,
5365,5366,5367,5368,5369,5370,5371,5372,
5373,5374,5375,5376,5377,5378,5379,5380,
5381,5382,5383,5384,5385,5386,5387,5388,
5389,5390,5391,5392,5393,5394,5395,5396,
5397,5398,5399,5400,5401,5402,5403,5404,
5405,5406,5407,5408,5409,5410,5411,5412,
5413,5414,5415,5416,5417,5418,5419,5420,
5421,5422,5423,5424,5425,5426,5427,5428,
5429,5430,5431,5432,5433,5434,5435,5436,
5437,5438,5439,5440,5441,5442,5443,5444,
5445,5446,5447,5448,5449,5450,0,0,
0,0,0,0,0,0,0,0,
/* Block: 250 */
5451,5452,5453,5454,5455,5456,5457,5458,
5459,5460,5461,5462,5463,5464,5465,5466,
5467,5468,5469,5470,5471,5472,5473,5474,
5475,5476,5477,5478,5479,5480,5481,5482,
5483,5484,5485,5486,5487,5488,5489,0,
0,5490,5491,5492,5493,5494,5495,5496,
5497,5498,5499,5500,5501,5502,5503,5504,
5505,5506,5507,5508,5509,5510,5511,5512,
5513,5514,5515,5516,5517,5518,5519,5520,
5521,5522,5523,5524,5525,5526,5527,5528,
5529,5530,5531,5532,5533,5534,5535,5536,
5537,5538,5539,5540,5541,5542,5543,5544,
5545,5546,5547,5548,5549,5550,5551,5552,
5553,5554,5555,5556,5557,5558,5559,5560,
5561,5562,5563,128,129,130,131,132,
133,134,135,5564,5565,5566,5567,5568,
/* Block: 251 */
5569,5570,5571,5572,5573,5574,5575,5576,
5577,5578,5579,5580,5581,5582,5583,5584,
5585,5586,5587,5588,5589,5590,5591,5592,
5593,5594,5595,5596,5597,5598,5599,5600,
5601,5602,5603,5604,5605,5606,5607,5608,
5609,5610,5611,5612,5613,5614,5615,5616,
5617,5618,5619,5620,5621,5622,5623,5624,
5625,5626,5627,5628,5629,5630,5631,5632,
5633,5634,5635,5636,5637,5638,5639,5640,
5641,5642,5643,5644,5645,5646,5647,5648,
5649,5650,5651,5652,5653,5654,5655,5656,
5657,5658,5659,5660,5661,5662,5663,5664,
5665,5666,5667,5668,5669,5670,5671,5672,
5673,5674,5675,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 252 */
5676,5677,5678,5679,5680,5681,5682,5683,
5684,5685,5686,5687,5688,5689,5690,5691,
5692,5693,5694,5695,5696,5697,5698,5699,
5700,5701,5702,5703,5704,5705,5706,5707,
5708,5709,5710,5711,5712,5713,5714,5715,
5716,5717,5718,5719,5720,5721,5722,5723,
5724,5725,5726,5727,5728,5729,5730,5731,
5732,5733,5734,5735,5736,5737,5738,5739,
5740,5741,5742,5743,5744,5745,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 253 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
9774,9897,10106,10271,10416,10555,10672,10784,
10896,11009,5746,5747,5748,5749,5750,5751,
5752,5753,5754,5755,0,0,0,0,
0,0,0,0,0,0,0,0,
9775,9898,10107,10272,10417,10556,10673,10785,
10897,11010,5756,5757,5758,5759,5760,5761,
5762,5763,5764,5765,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 254 */
5766,5767,5768,5769,5770,5771,5772,5773,
5774,5775,5776,5777,5778,5779,5780,5781,
5782,5783,5784,5785,5786,5787,5788,5789,
5790,5791,5792,5793,5794,5795,5796,5797,
5798,5799,5800,5801,5802,5803,5804,5805,
5806,5807,5808,5809,5810,5811,5812,5813,
5814,5815,5816,5817,5818,5819,5820,5821,
5822,5823,5824,5825,5826,5827,5828,5829,
5830,5831,5832,5833,5834,5835,5836,5837,
5838,5839,5840,5841,5842,5843,5844,5845,
5846,5847,5848,5849,5850,5851,5852,0,
0,0,0,0,0,0,0,0,
9899,10108,10273,10418,10557,10674,10786,10898,
11011,5853,5854,5855,5856,5857,5858,5859,
5860,5861,9900,10109,10274,10419,10558,9901,
10559,0,0,0,0,0,0,0,
/* Block: 255 */
11063,11226,11296,11381,11489,11621,11686,11780,
11874,11980,12037,12126,12249,12333,12431,12600,
12677,12730,12845,12955,13051,13197,13269,13336,
13392,13463,11046,11208,11275,11362,11472,11602,
11670,11761,11854,11963,12019,12107,12230,12315,
12415,12582,12659,12710,12827,12938,13034,13179,
13252,13318,13375,13444,11064,11227,11297,11382,
11490,11622,11687,11781,11875,11981,12038,12127,
12250,12334,12432,12601,12678,12731,12846,12956,
13052,13198,13270,13337,13393,13464,11047,11209,
11276,11363,11473,11603,11671,0,11855,11964,
12020,12108,12231,12316,12416,12583,12660,12711,
12828,12939,13035,13180,13253,13319,13376,13445,
11065,11228,11298,11383,11491,11623,11688,11782,
11876,11982,12039,12128,12251,12335,12433,12602,
12679,12732,12847,12957,13053,13199,13271,13338,
/* Block: 256 */
13394,13465,11048,11210,11277,11364,11474,11604,
11672,11762,11856,11965,12021,12109,12232,12317,
12417,12584,12661,12712,12829,12940,13036,13181,
13254,13320,13377,13446,11066,0,11299,11384,
0,0,11689,0,0,11983,12040,0,
0,12336,12434,12603,12680,0,12848,12958,
13054,13200,13272,13339,13395,13466,11049,11211,
11278,11365,0,11605,0,11763,11857,11966,
12022,12110,12233,12318,0,12585,12662,12713,
12830,12941,13037,13182,13255,13321,13378,13447,
11067,11229,11300,11385,11492,11624,11690,11783,
11877,11984,12041,12129,12252,12337,12435,12604,
12681,12733,12849,12959,13055,13201,13273,13340,
13396,13467,11050,11212,11279,11366,11475,11606,
11673,11764,11858,11967,12023,12111,12234,12319,
12418,12586,12663,12714,12831,12942,13038,13183,
/* Block: 257 */
13256,13322,13379,13448,11068,11230,0,11386,
11493,11625,11691,0,0,11985,12042,12130,
12253,12338,12436,12605,12682,0,12850,12960,
13056,13202,13274,13341,13397,0,11051,11213,
11280,11367,11476,11607,11674,11765,11859,11968,
12024,12112,12235,12320,12419,12587,12664,12715,
12832,12943,13039,13184,13257,13323,13380,13449,
11069,11231,0,11387,11494,11626,11692,0,
11878,11986,12043,12131,12254,0,12437,0,
0,0,12851,12961,13057,13203,13275,13342,
13398,0,11052,11214,11281,11368,11477,11608,
11675,11766,11860,11969,12025,12113,12236,12321,
12420,12588,12665,12716,12833,12944,13040,13185,
13258,13324,13381,13450,11070,11232,11301,11388,
11495,11627,11693,11784,11879,11987,12044,12132,
12255,12339,12438,12606,12683,12734,12852,12962,
/* Block: 258 */
13058,13204,13276,13343,13399,13468,11053,11215,
11282,11369,11478,11609,11676,11767,11861,11970,
12026,12114,12237,12322,12421,12589,12666,12717,
12834,12945,13041,13186,13259,13325,13382,13451,
11071,11233,11302,11389,11496,11628,11694,11785,
11880,11988,12045,12133,12256,12340,12439,12607,
12684,12735,12853,12963,13059,13205,13277,13344,
13400,13469,11054,11216,11283,11370,11479,11610,
11677,11768,11862,11971,12027,12115,12238,12323,
12422,12590,12667,12718,12835,12946,13042,13187,
13260,13326,13383,13452,11072,11234,11303,11390,
11497,11629,11695,11786,11881,11989,12046,12134,
12257,12341,12440,12608,12685,12736,12854,12964,
13060,13206,13278,13345,13401,13470,11055,11217,
11284,11371,11480,11611,11678,11769,11863,11972,
12028,12116,12239,12324,12423,12591,12668,12719,
/* Block: 259 */
12836,12947,13043,13188,13261,13327,13384,13453,
11073,11235,11304,11391,11498,11630,11696,11787,
11882,11990,12047,12135,12258,12342,12441,12609,
12686,12737,12855,12965,13061,13207,13279,13346,
13402,13471,11056,11218,11285,11372,11481,11612,
11679,11770,11864,11973,12029,12117,12240,12325,
12424,12592,12669,12720,12837,12948,13044,13189,
13262,13328,13385,13454,11074,11236,11305,11392,
11499,11631,11697,11788,11883,11991,12048,12136,
12259,12343,12442,12610,12687,12738,12856,12966,
13062,13208,13280,13347,13403,13472,11057,11219,
11286,11373,11482,11613,11680,11771,11865,11974,
12030,12118,12241,12326,12425,12593,12670,12721,
12838,12949,13045,13190,13263,13329,13386,13455,
11075,11237,11306,11393,11500,11632,11698,11789,
11884,11992,12049,12137,12260,12344,12443,12611,
/* Block: 260 */
12688,12739,12857,12967,13063,13209,13281,13348,
13404,13473,11058,11220,11287,11374,11483,11614,
11681,11772,11866,11975,12031,12119,12242,12327,
12426,12594,12671,12722,12839,12950,13046,13191,
13264,13330,13387,13456,11938,12004,0,0,
13609,13670,13686,13701,13720,13758,13772,13835,
13855,13908,13922,13936,13956,13968,13980,14018,
14043,13836,14068,14087,14100,14149,14163,14177,
14191,5862,13603,13664,13679,13695,13709,13752,
13766,13823,13849,13897,13916,13930,13950,13962,
13974,14006,14032,14056,14057,14081,14093,14138,
14157,14171,14184,5863,13710,13824,13898,14139,
14033,14007,13610,13671,13687,13702,13721,13759,
13773,13837,13856,13909,13923,13937,13957,13969,
13981,14019,14044,13838,14069,14088,14101,14150,
14164,14178,14192,5864,13604,13665,13680,13696,
/* Block: 261 */
13711,13753,13767,13825,13850,13899,13917,13931,
13951,13963,13975,14008,14034,14058,14059,14082,
14094,14140,14158,14172,14185,5865,13712,13826,
13900,14141,14035,14009,13611,13672,13688,13703,
13722,13760,13774,13839,13857,13910,13924,13938,
13958,13970,13982,14020,14045,13840,14070,14089,
14102,14151,14165,14179,14193,5866,13605,13666,
13681,13697,13713,13754,13768,13827,13851,13901,
13918,13932,13952,13964,13976,14010,14036,14060,
14061,14083,14095,14142,14159,14173,14186,5867,
13714,13828,13902,14143,14037,14011,13612,13673,
13689,13704,13723,13761,13775,13841,13858,13911,
13925,13939,13959,13971,13983,14021,14046,13842,
14071,14090,14103,14152,14166,14180,14194,5868,
13606,13667,13682,13698,13715,13755,13769,13829,
13852,13903,13919,13933,13953,13965,13977,14012,
/* Block: 262 */
14038,14062,14063,14084,14096,14144,14160,14174,
14187,5869,13716,13830,13904,14145,14039,14013,
13613,13674,13690,13705,13724,13762,13776,13843,
13859,13912,13926,13940,13960,13972,13984,14022,
14047,13844,14072,14091,14104,14153,14167,14181,
14195,5870,13607,13668,13683,13699,13717,13756,
13770,13831,13853,13905,13920,13934,13954,13966,
13978,14014,14040,14064,14065,14085,14097,14146,
14161,14175,14188,5871,13718,13832,13906,14147,
14041,14015,13746,13744,0,0,9784,9915,
10123,10288,10433,10573,10688,10800,10912,11025,
9785,9916,10124,10289,10434,10574,10689,10801,
10913,11026,9786,9917,10125,10290,10435,10575,
10690,10802,10914,11027,9787,9918,10126,10291,
10436,10576,10691,10803,10915,11028,9788,9919,
10127,10292,10437,10577,10692,10804,10916,11029,
/* Block: 263 */
5872,5873,5874,5875,5876,5877,5878,5879,
5880,5881,5882,5883,5884,5885,5886,5887,
5888,5889,5890,5891,5892,5893,5894,5895,
5896,5897,5898,5899,5900,5901,5902,5903,
5904,5905,5906,5907,5908,5909,5910,5911,
5912,5913,5914,5915,5916,5917,5918,5919,
5920,5921,5922,5923,5924,5925,5926,5927,
5928,5929,5930,5931,5932,5933,5934,5935,
5936,5937,5938,5939,5940,5941,5942,5943,
5944,5945,5946,5947,5948,5949,5950,5951,
5952,5953,5954,5955,5956,5957,5958,5959,
5960,5961,5962,5963,5964,5965,5966,5967,
5968,5969,5970,5971,5972,5973,5974,5975,
5976,5977,5978,5979,5980,5981,5982,5983,
5984,5985,5986,5987,5988,5989,5990,5991,
5992,5993,5994,5995,5996,5997,5998,5999,
/* Block: 264 */
6000,6001,6002,6003,6004,6005,6006,6007,
6008,6009,6010,6011,6012,6013,6014,6015,
6016,6017,6018,6019,6020,6021,6022,6023,
6024,6025,6026,6027,6028,6029,6030,6031,
6032,6033,6034,6035,6036,6037,6038,6039,
6040,6041,6042,6043,6044,6045,6046,6047,
6048,6049,6050,6051,6052,6053,6054,6055,
6056,6057,6058,6059,6060,6061,6062,6063,
6064,6065,6066,6067,6068,6069,6070,6071,
6072,6073,6074,6075,6076,6077,6078,6079,
6080,6081,6082,6083,6084,6085,6086,6087,
6088,6089,6090,6091,6092,6093,6094,6095,
6096,6097,6098,6099,6100,6101,6102,6103,
6104,6105,6106,6107,6108,6109,6110,6111,
6112,6113,6114,6115,6116,6117,6118,6119,
6120,6121,6122,6123,6124,6125,6126,6127,
/* Block: 265 */
6128,6129,6130,6131,6132,6133,6134,6135,
6136,6137,6138,6139,6140,6141,6142,6143,
6144,6145,6146,6147,6148,6149,6150,6151,
6152,6153,6154,6155,6156,6157,6158,6159,
6160,6161,6162,6163,6164,6165,6166,6167,
6168,6169,6170,6171,6172,6173,6174,6175,
6176,6177,6178,6179,6180,6181,6182,6183,
6184,6185,6186,6187,6188,6189,6190,6191,
6192,6193,6194,6195,6196,6197,6198,6199,
6200,6201,6202,6203,6204,6205,6206,6207,
6208,6209,6210,6211,6212,6213,6214,6215,
6216,6217,6218,6219,6220,6221,6222,6223,
6224,6225,6226,6227,6228,6229,6230,6231,
6232,6233,6234,6235,6236,6237,6238,6239,
6240,6241,6242,6243,6244,6245,6246,6247,
6248,6249,6250,6251,6252,6253,6254,6255,
/* Block: 266 */
6256,6257,6258,6259,6260,6261,6262,6263,
6264,6265,6266,6267,6268,6269,6270,6271,
6272,6273,6274,6275,6276,6277,6278,6279,
6280,6281,6282,6283,6284,6285,6286,6287,
6288,6289,6290,6291,6292,6293,6294,6295,
6296,6297,6298,6299,6300,6301,6302,6303,
6304,6305,6306,6307,6308,6309,6310,6311,
6312,6313,6314,6315,6316,6317,6318,6319,
6320,6321,6322,6323,6324,6325,6326,6327,
6328,6329,6330,6331,6332,6333,6334,6335,
6336,6337,6338,6339,6340,6341,6342,6343,
6344,6345,6346,6347,6348,6349,6350,6351,
6352,6353,6354,6355,6356,6357,6358,6359,
6360,6361,6362,6363,6364,6365,6366,6367,
6368,6369,6370,6371,6372,6373,6374,6375,
6376,6377,6378,6379,6380,6381,6382,6383,
/* Block: 267 */
6384,6385,6386,6387,6388,6389,6390,6391,
6392,6393,6394,6395,6396,6397,6398,6399,
6400,6401,6402,6403,6404,6405,6406,6407,
6408,6409,6410,6411,6412,6413,6414,6415,
6416,6417,6418,6419,6420,6421,6422,6423,
6424,6425,6426,6427,6428,6429,6430,6431,
6432,6433,6434,6435,6436,6437,6438,6439,
6440,6441,6442,6443,6444,6445,6446,6447,
6448,6449,6450,6451,6452,6453,6454,6455,
6456,6457,6458,6459,6460,6461,6462,6463,
6464,6465,6466,6467,6468,6469,6470,6471,
6472,6473,6474,6475,6476,6477,6478,6479,
6480,6481,6482,6483,6484,6485,6486,6487,
6488,6489,6490,6491,6492,6493,6494,6495,
6496,6497,6498,6499,6500,6501,6502,6503,
6504,6505,6506,6507,6508,6509,6510,6511,
/* Block: 268 */
6512,6513,6514,6515,6516,6517,6518,6519,
6520,6521,6522,6523,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,6524,6525,6526,6527,6528,
0,6529,6530,6531,6532,6533,6534,6535,
6536,6537,6538,6539,6540,6541,6542,6543,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 269 */
11652,11734,11748,12097,12199,12216,12223,12409,
12793,13024,13594,12932,12933,13029,13586,13597,
12100,12211,11444,12201,12408,12818,12808,13006,
13518,11445,11951,12549,13007,11347,12914,0,
0,0,0,0,0,11458,12208,12400,
12803,12913,13023,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 270 */
14860,14863,14866,14869,14872,14875,14878,0,
14883,14886,14889,14892,14895,14898,14901,14904,
14907,14910,14913,14916,14919,14922,14925,14928,
14931,0,0,14938,14941,14944,14947,14950,
14953,14956,0,14961,14964,0,14969,14972,
14975,14978,14981,0,0,0,0,0,
14371,14387,14393,14398,14417,14434,14448,14463,
14492,14523,14544,14566,14606,14618,14629,14638,
14651,14665,14690,14695,14723,14736,14762,14785,
14803,14809,14484,14379,14505,14516,14612,14677,
14858,14372,14388,14394,14399,14418,14435,14449,
14464,14493,14524,14545,14607,14619,14639,14666,
14691,14696,14724,14737,14763,14778,14786,14402,
14506,14477,14758,14645,14781,14680,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 271 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,14503,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 272 */
26759,26760,26761,26762,26763,26764,26765,26766,
26767,26768,26769,26770,26771,26772,26773,26774,
26775,26776,26777,26778,26779,26780,26781,26782,
26783,26784,26785,26786,26787,26788,26789,26790,
26791,26792,26793,26794,26795,26796,26797,26798,
26799,26800,26801,26802,26803,0,0,0,
9567,9559,9563,9565,9569,9571,9561,26804,
26805,26806,26807,26808,9634,9635,0,0,
9776,9902,10110,10275,10420,10560,10675,10787,
10899,11012,0,0,0,0,26809,6544,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 273 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
26810,26811,26812,26813,26814,26815,26816,26817,
26818,26819,26820,26821,26822,26823,26824,26825,
26826,26827,26828,26829,26830,26831,26832,26833,
26834,26835,26836,26837,26838,26839,9078,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
26840,26841,26842,26843,26844,26845,26846,26847,
26848,26849,26850,26851,26852,26853,26854,26855,
26856,26857,26858,26859,26860,26861,26862,26863,
26864,26865,26866,26867,26868,26869,26870,26871,
26872,26873,26874,26875,26876,26877,26878,26879,
26880,26881,26882,26883,9572,9573,9574,9575,
9777,9903,10111,10276,10421,10561,10676,10788,
10900,11013,0,0,0,0,0,9678,
/* Block: 274 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
26884,26885,26886,26887,26888,26889,26890,26891,
26892,26893,26894,26895,26896,26897,26898,26899,
26900,26901,26902,26903,26904,26905,26906,26907,
26908,26909,26910,26911,9576,9577,9578,9579,
9778,9904,10112,10277,10422,10562,10677,10789,
10901,11014,0,0,0,0,0,0,
/* Block: 275 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
17216,17218,17220,17222,17224,17226,17228,0,
16969,16971,16974,16976,0,16790,16792,0,
16846,16849,16851,16874,16876,16955,16958,16960,
17066,17069,17071,17151,17153,17165,17167,0,
/* Block: 276 */
23526,23527,23528,23529,23530,23531,23532,23533,
23534,23535,23536,23537,23538,23539,23540,23541,
23542,23543,23544,23545,23546,23547,23548,23549,
23550,23551,23552,23553,23554,23555,23556,23557,
23558,23559,23560,23561,23562,23563,23564,23565,
23566,23567,23568,23569,23570,23571,23572,23573,
23574,23575,23576,23577,23578,23579,23580,23581,
23582,23583,23584,23585,23586,23587,23588,23589,
23590,23591,23592,23593,23594,23595,23596,23597,
23598,23599,23600,23601,23602,23603,23604,23605,
23606,23607,23608,23609,23610,23611,23612,23613,
23614,23615,23616,23617,23618,23619,23620,23621,
23622,23623,23624,23625,23626,23627,23628,23629,
23630,23631,23632,23633,23634,23635,23636,23637,
23638,23639,23640,23641,23642,23643,23644,23645,
23646,23647,23648,23649,23650,23651,23652,23653,
/* Block: 277 */
23654,23655,23656,23657,23658,23659,23660,23661,
23662,23663,23664,23665,23666,23667,23668,23669,
23670,23671,23672,23673,23674,23675,23676,23677,
23678,23679,23680,23681,23682,23683,23684,23685,
23686,23687,23688,23689,23690,23691,23692,23693,
23694,23695,23696,23697,23698,23699,23700,23701,
23702,23703,23704,23705,23706,23707,23708,23709,
23710,23711,23712,23713,23714,23715,23716,23717,
23718,23719,23720,23721,23722,0,0,9905,
10113,10278,10423,10563,10678,10790,10902,11015,
6545,6546,6547,6548,6549,6550,6551,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 278 */
23788,23790,23792,23794,23796,23798,23800,23802,
23804,23806,23808,23810,23812,23814,23816,23818,
23820,23822,23824,23826,23828,23830,23832,23834,
23836,23838,23840,23842,23844,23846,23848,23850,
23852,23854,23787,23789,23791,23793,23795,23797,
23799,23801,23803,23805,23807,23809,23811,23813,
23815,23817,23819,23821,23823,23825,23827,23829,
23831,23833,23835,23837,23839,23841,23843,23845,
23847,23849,23851,23853,9352,9353,9354,9356,
9357,9358,9355,23855,0,0,0,0,
9779,9906,10114,10279,10424,10564,10679,10791,
10903,11016,0,0,0,0,6552,6553,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 279 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,9907,10115,10280,10425,10565,10680,10792,
10904,11017,6554,6555,6556,6557,6558,6559,
/* Block: 280 */
6560,6561,6562,6563,6564,6565,6566,6567,
6568,6569,6570,6571,6572,6573,6574,6575,
6576,6577,6578,6579,6580,6581,6582,6583,
6584,6585,6586,6587,6588,6589,6590,6591,
6592,6593,6594,9908,10116,10281,10426,10566,
10681,10793,10905,11018,6595,6596,6597,6598,
9704,9930,10137,6599,6600,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 281 */
0,9909,10117,10282,10427,10567,10682,10794,
10906,11019,6601,6602,6603,6604,6605,6606,
6607,6608,6609,6610,6611,6612,6613,6614,
6615,6616,6617,6618,6619,6620,6621,6622,
6623,6624,6625,6626,6627,6628,6629,6630,
6631,6632,6633,6634,6635,6636,6637,10138,
10302,10446,10586,10701,10813,10925,11038,6638,
6639,6640,6641,6642,6643,6644,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 282 */
15516,15528,15675,15778,0,16437,15821,15727,
16005,16479,16176,16250,16304,16342,15848,16043,
16098,15941,16146,15812,15889,15589,15632,15749,
15784,15972,16027,16069,15525,16383,16123,16143,
0,15529,15676,0,16401,0,0,15728,
0,16480,16177,16251,16305,16343,15849,16044,
16099,15942,16147,0,15890,15590,15633,15750,
0,15973,0,16070,0,0,0,0,
0,0,15677,0,0,0,0,15729,
0,16481,0,16252,0,16344,15850,16045,
0,15943,16148,0,15891,0,0,15751,
0,15974,0,16071,0,16384,0,16144,
0,15530,15678,0,16402,0,0,15730,
16006,16482,16178,0,16306,16345,15851,16046,
16100,15944,16149,0,15892,15591,15634,15752,
0,15975,16028,16072,15526,0,16124,0,
/* Block: 283 */
15517,15531,15679,15779,16403,16438,15822,15731,
16007,16483,0,16253,16307,16346,15852,16047,
16101,15945,16150,15813,15893,15592,15635,15753,
15785,15976,16029,16073,0,0,0,0,
0,15532,15680,15780,0,16439,15823,15732,
16008,16484,0,16254,16308,16347,15853,16048,
16102,15946,16151,15814,15894,15593,15636,15754,
15786,15977,16030,16074,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
6645,6646,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 284 */
6647,6648,6649,6650,6651,6652,6653,6654,
6655,6656,6657,6658,6659,6660,6661,6662,
6663,6664,6665,6666,6667,6668,6669,6670,
6671,6672,6673,6674,6675,6676,6677,6678,
6679,6680,6681,6682,6683,6684,6685,6686,
6687,6688,6689,6690,0,0,0,0,
6691,6692,6693,6694,6695,6696,6697,6698,
6699,6700,6701,6702,6703,6704,6705,6706,
6707,6708,6709,6710,6711,6712,6713,6714,
6715,6716,6717,6718,6719,6720,6721,6722,
6723,6724,6725,6726,6727,6728,6729,6730,
6731,6732,6733,6734,6735,6736,6737,6738,
6739,6740,6741,6742,6743,6744,6745,6746,
6747,6748,6749,6750,6751,6752,6753,6754,
6755,6756,6757,6758,6759,6760,6761,6762,
6763,6764,6765,6766,6767,6768,6769,6770,
/* Block: 285 */
6771,6772,6773,6774,6775,6776,6777,6778,
6779,6780,6781,6782,6783,6784,6785,6786,
6787,6788,6789,6790,0,0,0,0,
0,0,0,0,0,0,0,0,
6791,6792,6793,6794,6795,6796,6797,6798,
6799,6800,6801,6802,6803,6804,6805,0,
0,6806,6807,6808,6809,6810,6811,6812,
6813,6814,6815,6816,6817,6818,6819,6820,
0,6821,6822,6823,6824,6825,6826,6827,
6828,6829,6830,6831,6832,6833,6834,6835,
0,6836,6837,6838,6839,6840,6841,6842,
6843,6844,6845,6846,6847,6848,6849,6850,
6851,6852,6853,6854,6855,6856,6857,6858,
6859,6860,6861,6862,6863,6864,6865,6866,
6867,6868,6869,6870,6871,6872,0,0,
0,0,0,0,0,0,0,0,
/* Block: 286 */
9782,9783,9914,10122,10287,10432,10572,10687,
10799,10911,11024,9792,9793,6873,6874,6875,
11062,11224,11293,11379,11487,11619,11685,11776,
11871,11979,12036,12124,12247,12331,12430,12598,
12675,12726,12843,12954,13050,13196,13268,13335,
13391,13460,12844,11308,12741,11329,13306,6876,
11082,11242,11312,11399,11506,11637,11703,11795,
11890,11998,12055,12143,12266,12350,12450,12617,
12693,12746,12862,12973,13069,13215,13286,13353,
13408,13477,11824,12296,12894,12899,12632,13304,
11077,11239,11309,11395,11502,11634,11700,11791,
11886,11994,12051,12139,12262,12346,12445,12613,
12690,12742,12859,12969,13065,13211,13283,13350,
13406,13475,12279,12280,12290,6877,6878,6879,
11083,11243,11313,11400,11507,11638,11704,11796,
11891,11999,12056,12144,12267,12351,12451,12618,
/* Block: 287 */
12694,12747,12863,12974,13070,13216,13287,13354,
13409,13478,12619,11923,12626,12893,11152,13305,
11425,11332,11338,11653,11924,12373,12375,12532,
12897,13136,13229,10319,10172,10171,10459,10927,
10589,10815,10150,10703,9955,11397,11818,11819,
11821,12171,12895,13135,13228,6880,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,6881,6882,
6883,6884,6885,6886,6887,6888,6889,6890,
6891,6892,6893,6894,6895,6896,6897,6898,
6899,6900,6901,6902,6903,6904,6905,6906,
/* Block: 288 */
24697,24526,24533,0,0,0,0,0,
0,0,0,0,0,0,0,0,
32207,32060,31949,24596,31798,32033,32793,32039,
31802,32269,32426,32254,31887,32155,31855,32256,
31882,32617,32491,32826,32025,31965,32401,32212,
32223,31754,31762,32871,32111,31774,31957,32220,
32840,32210,32569,32586,31959,32392,32291,32287,
32496,31889,31988,32886,0,0,0,0,
32301,31759,31795,32065,32423,32209,32519,31903,
32247,0,0,0,0,0,0,0,
32156,31954,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
6907,6908,6909,6910,6911,6912,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 289 */
6913,6914,6915,6916,6917,6918,6919,6920,
6921,6922,6923,6924,6925,6926,6927,6928,
6929,6930,6931,6932,6933,6934,6935,6936,
6937,6938,6939,6940,6941,6942,6943,6944,
6945,6946,6947,6948,6949,6950,6951,6952,
6953,6954,6955,6956,6957,6958,6959,6960,
6961,6962,6963,6964,6965,6966,6967,6968,
6969,6970,6971,6972,6973,6974,6975,6976,
6977,6978,6979,6980,6981,6982,6983,6984,
6985,6986,6987,6988,6989,6990,6991,6992,
6993,6994,6995,6996,6997,6998,6999,7000,
7001,7002,7003,7004,7005,7006,7007,7008,
7009,7010,7011,7012,7013,7014,7015,7016,
7017,7018,7019,7020,7021,7022,7023,7024,
7025,7026,7027,7028,7029,7030,7031,7032,
7033,7034,7035,7036,7037,7038,7039,7040,
/* Block: 290 */
7041,7042,7043,7044,7045,7046,7047,7048,
7049,7050,7051,7052,7053,7054,7055,7056,
7057,7058,7059,7060,7061,7062,7063,7064,
7065,7066,7067,7068,7069,7070,7071,7072,
7073,7074,7075,7076,7077,7078,7079,7080,
7081,7082,7083,7084,7085,7086,7087,7088,
7089,7090,7091,7092,7093,7094,7095,7096,
7097,7098,7099,7100,7101,7102,7103,7104,
7105,7106,7107,7108,7109,7110,7111,7112,
7113,7114,7115,7116,7117,7118,7119,7120,
7121,7122,7123,7124,7125,7126,7127,7128,
7129,7130,7131,7132,7133,7134,7135,7136,
7137,7138,7139,7140,7141,7142,7143,7144,
7145,7146,7147,7148,7149,7150,7151,7152,
7153,7154,7155,7156,7157,7158,7159,7160,
7161,7162,7163,7164,7165,7166,7167,7168,
/* Block: 291 */
7169,7170,7171,7172,7173,7174,7175,7176,
7177,7178,7179,7180,7181,7182,7183,7184,
7185,7186,7187,7188,7189,7190,7191,7192,
7193,7194,7195,7196,7197,7198,7199,7200,
7201,7202,7203,7204,7205,7206,7207,7208,
7209,7210,7211,7212,7213,7214,7215,7216,
7217,7218,7219,7220,7221,7222,7223,7224,
7225,7226,7227,7228,7229,7230,7231,7232,
7233,7234,7235,7236,7237,7238,7239,7240,
7241,7242,7243,7244,7245,7246,7247,7248,
7249,7250,7251,7252,7253,7254,7255,7256,
7257,7258,7259,7260,7261,7262,7263,7264,
7265,7266,7267,7268,7269,7270,7271,7272,
7273,7274,7275,7276,7277,7278,7279,7280,
7281,7282,7283,7284,7285,7286,7287,7288,
7289,7290,7291,7292,7293,7294,7295,7296,
/* Block: 292 */
7297,7298,7299,7300,7301,7302,7303,7304,
7305,7306,7307,7308,7309,7310,7311,7312,
7313,7314,7315,7316,7317,7318,7319,7320,
7321,7322,7323,7324,7325,7326,7327,7328,
7329,7330,7331,7332,7333,7334,7335,7336,
7337,7338,7339,7340,7341,7342,7343,7344,
7345,7346,7347,7348,7349,7350,7351,7352,
7353,7354,7355,7356,7357,7358,7359,7360,
7361,7362,7363,7364,7365,7366,7367,7368,
7369,7370,7371,7372,7373,7374,7375,7376,
7377,7378,7379,7380,7381,7382,7383,7384,
7385,7386,7387,7388,7389,7390,7391,7392,
7393,7394,7395,7396,7397,7398,7399,7400,
7401,7402,7403,7404,7405,7406,7407,7408,
7409,7410,7411,7412,7413,7414,7415,7416,
7417,7418,7419,7420,7421,7422,7423,7424,
/* Block: 293 */
7425,7426,7427,7428,7429,7430,7431,7432,
7433,7434,7435,7436,7437,7438,7439,7440,
7441,7442,7443,7444,7445,7446,7447,7448,
7449,7450,7451,7452,7453,7454,7455,7456,
7457,7458,7459,7460,7461,7462,7463,7464,
7465,7466,7467,7468,7469,7470,7471,7472,
7473,7474,7475,7476,7477,7478,7479,7480,
7481,7482,7483,7484,7485,7486,7487,7488,
7489,7490,7491,7492,7493,7494,7495,7496,
7497,7498,7499,7500,7501,7502,7503,7504,
7505,7506,7507,7508,7509,7510,7511,7512,
7513,7514,7515,7516,7517,7518,7519,7520,
7521,7522,7523,7524,7525,7526,7527,7528,
7529,7530,7531,7532,7533,7534,7535,7536,
7537,7538,7539,7540,7541,7542,7543,7544,
7545,7546,7547,7548,7549,7550,7551,7552,
/* Block: 294 */
7553,7554,7555,7556,7557,7558,7559,7560,
7561,7562,7563,7564,7565,7566,7567,7568,
7569,7570,7571,7572,7573,7574,7575,7576,
7577,7578,7579,7580,7581,7582,7583,7584,
7585,7586,7587,7588,7589,7590,7591,7592,
7593,7594,7595,7596,7597,7598,7599,7600,
7601,7602,7603,7604,7605,7606,7607,7608,
7609,7610,7611,7612,7613,7614,7615,7616,
7617,7618,7619,7620,7621,7622,7623,7624,
7625,7626,7627,7628,7629,7630,7631,7632,
7633,7634,7635,7636,7637,7638,7639,7640,
7641,7642,7643,7644,7645,7646,7647,7648,
7649,7650,7651,7652,7653,7654,7655,7656,
7657,7658,7659,7660,7661,7662,7663,7664,
7665,7666,7667,7668,7669,7670,7671,7672,
7673,7674,7675,7676,7677,7678,7679,7680,
/* Block: 295 */
7681,7682,7683,7684,7685,7686,7687,7688,
7689,7690,7691,7692,7693,7694,7695,7696,
7697,7698,7699,7700,7701,7702,7703,7704,
7705,7706,7707,7708,7709,7710,7711,7712,
7713,7714,7715,7716,7717,7718,7719,7720,
7721,7722,7723,7724,7725,7726,7727,7728,
7729,7730,7731,7732,7733,7734,7735,7736,
7737,7738,7739,7740,7741,7742,7743,7744,
7745,7746,7747,7748,7749,7750,7751,7752,
7753,7754,7755,7756,7757,7758,7759,7760,
7761,7762,7763,7764,7765,7766,7767,7768,
7769,7770,7771,7772,7773,7774,7775,7776,
7777,7778,7779,7780,7781,7782,7783,7784,
7785,7786,7787,7788,7789,7790,7791,7792,
7793,7794,7795,7796,7797,7798,7799,7800,
7801,7802,7803,7804,7805,7806,7807,7808,
/* Block: 296 */
7809,7810,7811,7812,7813,7814,7815,7816,
7817,7818,7819,7820,7821,7822,7823,7824,
7825,7826,7827,7828,7829,7830,7831,7832,
7833,7834,7835,7836,7837,7838,7839,7840,
7841,7842,7843,7844,7845,7846,7847,7848,
7849,7850,7851,7852,7853,7854,7855,7856,
7857,7858,7859,7860,7861,7862,7863,7864,
7865,7866,7867,7868,7869,7870,7871,7872,
7873,7874,7875,7876,7877,7878,7879,7880,
7881,7882,7883,7884,7885,7886,7887,7888,
7889,7890,7891,7892,7893,7894,7895,7896,
0,0,0,0,7897,7898,7899,7900,
7901,7902,7903,7904,7905,7906,7907,7908,
7909,7910,7911,7912,7913,0,0,0,
7914,7915,7916,7917,7918,7919,7920,7921,
7922,7923,7924,7925,7926,0,0,0,
/* Block: 297 */
7927,7928,7929,7930,7931,7932,7933,7934,
7935,7936,7937,7938,7939,7940,7941,7942,
7943,7944,7945,7946,7947,7948,7949,7950,
7951,7952,7953,7954,7955,7956,7957,7958,
7959,7960,7961,7962,7963,7964,7965,7966,
7967,7968,7969,7970,7971,7972,7973,7974,
7975,7976,7977,7978,7979,7980,7981,7982,
7983,7984,7985,7986,7987,7988,7989,7990,
7991,7992,7993,7994,7995,7996,7997,7998,
7999,8000,8001,8002,8003,8004,8005,8006,
8007,8008,8009,8010,8011,8012,8013,8014,
8015,8016,8017,8018,8019,8020,8021,8022,
8023,8024,8025,8026,8027,8028,8029,8030,
8031,8032,8033,8034,8035,8036,8037,8038,
8039,8040,8041,8042,8043,8044,8045,0,
0,0,0,8046,8047,8048,8049,8050,
/* Block: 298 */
8051,8052,8053,8054,8055,8056,8057,8058,
8059,8060,8061,8062,8063,8064,8065,8066,
8067,8068,8069,8070,8071,8072,8073,8074,
8075,8076,8077,8078,8079,8080,8081,8082,
8083,8084,8085,8086,8087,8088,8089,8090,
8091,8092,8093,8094,8095,8096,8097,8098,
8099,8100,8101,8102,8103,8104,8105,8106,
8107,8108,8109,8110,8111,8112,8113,8114,
8115,8116,8117,8118,8119,8120,8121,8122,
8123,8124,8125,8126,8127,8128,8129,8130,
8131,8132,8133,8134,8135,8136,8137,8138,
8139,8140,0,0,0,0,0,0,
8141,8142,8143,8144,8145,8146,8147,8148,
8149,8150,8151,8152,0,0,0,0,
8153,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 299 */
8154,8155,8156,8157,8158,8159,8160,8161,
8162,8163,8164,8165,0,0,0,0,
8166,8167,8168,8169,8170,8171,8172,8173,
8174,8175,8176,8177,8178,8179,8180,8181,
8182,8183,8184,8185,8186,8187,8188,8189,
8190,8191,8192,8193,8194,8195,8196,8197,
8198,8199,8200,8201,8202,8203,8204,8205,
8206,8207,8208,8209,8210,8211,8212,8213,
8214,8215,8216,8217,8218,8219,8220,8221,
0,0,0,0,0,0,0,0,
8222,8223,8224,8225,8226,8227,8228,8229,
8230,8231,0,0,0,0,0,0,
8232,8233,8234,8235,8236,8237,8238,8239,
8240,8241,8242,8243,8244,8245,8246,8247,
8248,8249,8250,8251,8252,8253,8254,8255,
8256,8257,8258,8259,8260,8261,8262,8263,
/* Block: 300 */
8264,8265,8266,8267,8268,8269,8270,8271,
0,0,0,0,0,0,0,0,
8272,8273,8274,8275,8276,8277,8278,8279,
8280,8281,8282,8283,8284,8285,8286,8287,
8288,8289,8290,8291,8292,8293,8294,8295,
8296,8297,8298,8299,8300,8301,0,0,
8302,8303,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 301 */
8304,8305,8306,8307,8308,8309,8310,8311,
8312,8313,8314,8315,8316,8317,8318,8319,
8320,8321,8322,8323,8324,8325,8326,8327,
8328,8329,8330,8331,8332,8333,8334,8335,
8336,8337,8338,8339,8340,8341,8342,8343,
8344,8345,8346,8347,8348,8349,8350,8351,
8352,8353,8354,8355,8356,8357,8358,8359,
8360,8361,8362,8363,8364,8365,8366,8367,
8368,8369,8370,8371,8372,8373,8374,8375,
8376,8377,8378,8379,8380,8381,8382,8383,
8384,8385,8386,8387,8388,8389,8390,8391,
8392,8393,8394,8395,8396,8397,8398,8399,
8400,8401,8402,8403,8404,8405,8406,8407,
8408,8409,8410,8411,8412,8413,8414,8415,
8416,8417,8418,8419,8420,8421,8422,8423,
8424,8425,8426,8427,8428,8429,8430,8431,
/* Block: 302 */
8432,8433,8434,8435,8436,8437,8438,8439,
8440,8441,8442,8443,8444,8445,8446,8447,
8448,8449,8450,8451,8452,8453,8454,8455,
8456,8457,8458,8459,8460,8461,8462,8463,
8464,8465,8466,8467,8468,8469,8470,8471,
8472,8473,8474,8475,8476,8477,8478,8479,
8480,8481,8482,8483,8484,8485,8486,8487,
8488,8489,8490,8491,8492,8493,8494,8495,
8496,8497,8498,8499,8500,8501,8502,8503,
8504,8505,8506,8507,8508,8509,8510,8511,
8512,8513,8514,8515,8516,8517,8518,8519,
8520,8521,8522,8523,8524,8525,8526,8527,
8528,8529,8530,8531,8532,8533,8534,8535,
8536,8537,8538,8539,8540,8541,8542,8543,
8544,8545,8546,8547,8548,8549,8550,8551,
8552,8553,8554,8555,8556,8557,8558,8559,
/* Block: 303 */
8560,8561,8562,8563,8564,8565,8566,8567,
8568,8569,8570,8571,8572,8573,8574,8575,
8576,8577,8578,8579,8580,8581,8582,8583,
8584,8585,8586,8587,8588,8589,8590,8591,
8592,8593,8594,8595,8596,8597,8598,8599,
8600,8601,8602,8603,8604,8605,8606,8607,
8608,8609,8610,8611,8612,8613,8614,8615,
8616,8617,8618,8619,8620,8621,8622,8623,
8624,8625,8626,8627,8628,8629,8630,8631,
8632,8633,8634,8635,8636,8637,8638,8639,
8640,8641,8642,8643,0,0,0,0,
0,0,0,0,0,0,0,0,
8644,8645,8646,8647,8648,8649,8650,8651,
8652,8653,8654,8655,8656,8657,0,0,
8658,8659,8660,8661,8662,8663,8664,8665,
8666,8667,8668,8669,8670,0,0,0,
/* Block: 304 */
8671,8672,8673,8674,8675,8676,8677,8678,
8679,0,0,0,0,0,0,0,
8680,8681,8682,8683,8684,8685,8686,8687,
8688,8689,8690,8691,8692,8693,8694,8695,
8696,8697,8698,8699,8700,8701,8702,8703,
8704,8705,8706,8707,8708,8709,8710,8711,
8712,8713,8714,8715,8716,8717,8718,8719,
8720,8721,8722,8723,8724,8725,0,8726,
8727,8728,8729,8730,8731,8732,0,0,
0,0,0,0,0,0,8733,8734,
8735,8736,8737,8738,8739,8740,8741,8742,
8743,8744,8745,8746,0,0,0,0,
8747,8748,8749,8750,8751,8752,8753,8754,
8755,0,0,0,0,0,0,0,
8756,8757,8758,8759,8760,8761,8762,8763,
8764,0,0,0,0,0,0,0,
/* Block: 305 */
8765,8766,8767,8768,8769,8770,8771,8772,
8773,8774,8775,8776,8777,8778,8779,8780,
8781,8782,8783,8784,8785,8786,8787,8788,
8789,8790,8791,8792,8793,8794,8795,8796,
8797,8798,8799,8800,8801,8802,8803,8804,
8805,8806,8807,8808,8809,8810,8811,8812,
8813,8814,8815,8816,8817,8818,8819,8820,
8821,8822,8823,8824,8825,8826,8827,8828,
8829,8830,8831,8832,8833,8834,8835,8836,
8837,8838,8839,8840,8841,8842,8843,8844,
8845,8846,8847,8848,8849,8850,8851,8852,
8853,8854,8855,8856,8857,8858,8859,8860,
8861,8862,8863,8864,8865,8866,8867,8868,
8869,8870,8871,8872,8873,8874,8875,8876,
8877,8878,8879,8880,8881,8882,8883,8884,
8885,8886,8887,8888,8889,8890,8891,8892,
/* Block: 306 */
8893,8894,8895,8896,8897,8898,8899,8900,
8901,8902,8903,8904,8905,8906,8907,8908,
8909,8910,8911,0,8912,8913,8914,8915,
8916,8917,8918,8919,8920,8921,8922,8923,
8924,8925,8926,8927,8928,8929,8930,8931,
8932,8933,8934,8935,8936,8937,8938,8939,
8940,8941,8942,8943,8944,8945,8946,8947,
8948,8949,8950,8951,8952,8953,8954,8955,
8956,8957,8958,8959,8960,8961,8962,8963,
8964,8965,8966,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
9789,9920,10128,10293,10438,10578,10693,10805,
10917,11030,0,0,0,0,0,0,
/* Block: 307 */
31780,31778,31782,33147,31816,31821,31822,31824,
31826,31827,31831,31828,33077,33151,31837,31838,
31839,31850,33148,33078,31841,31854,33150,31859,
31861,31808,31863,31865,33247,31873,31878,33080,
31885,31886,31888,31890,33081,31899,31901,31906,
31910,31911,31912,31915,31926,31928,31931,31937,
31939,31940,31941,31942,33154,32418,31948,31950,
33155,31953,31955,31958,31970,31964,31967,31968,
31971,31973,31974,31976,31978,31979,31980,31983,
31986,31987,31990,32002,31993,32003,31994,31996,
31880,32024,32009,32010,32011,32008,32013,32012,
32019,33156,32026,32027,32029,32032,32035,32044,
33157,33158,32049,32050,32051,32048,32053,33082,
33083,32055,32057,32058,33159,32067,32068,32071,
32073,33160,32075,32076,32148,32080,33084,32088,
32093,32097,32096,33162,32099,33163,32102,32101,
/* Block: 308 */
32103,32107,32108,33085,32114,32116,32117,32118,
33086,33164,33087,32127,32128,32129,32132,33257,
32138,33166,33167,32687,32143,32144,33088,33174,
33217,32150,32152,33089,32157,32163,32164,32166,
32170,33091,33090,32172,33168,32173,32178,32179,
32182,32180,32185,32188,32192,32190,32191,32193,
32196,32198,32201,32202,32211,32213,32217,32222,
33171,32221,32218,32224,32226,32231,33172,32233,
32230,32228,33092,32235,32237,32239,32236,33093,
32245,32248,33173,32262,32282,32271,33096,32276,
33095,33094,31856,31857,32283,32277,32673,33124,
32294,32296,32297,32305,32303,33178,33097,32310,
32307,32316,32319,33180,32320,32312,32322,33099,
32323,32324,32325,32330,33181,32332,33100,32335,
33182,32336,33101,32339,32344,32349,32350,33183,
33161,33184,32363,33185,32366,32368,32364,32371,
/* Block: 309 */
32375,32382,32378,32379,32383,32384,33186,32374,
32390,32391,33102,32397,32395,33187,32388,32405,
33188,33189,32406,32412,32411,32409,33103,32413,
32420,32419,32422,33149,32427,33190,32431,33192,
32436,32442,32447,33193,32454,32455,33194,33195,
32464,32469,33104,32471,33105,33106,32477,32478,
32481,32482,32485,33107,32492,33196,32499,33197,
32503,33165,32508,33198,33199,33200,33108,33109,
32527,33202,33201,33203,33204,32529,32530,32531,
32534,33112,32535,33113,33114,33206,32540,32543,
32547,33115,33207,32561,33208,33209,32573,32579,
33116,32582,32583,32584,33210,33211,33212,32591,
33117,33213,32598,32599,33118,33214,32606,33119,
32610,32608,32613,33216,32619,33120,32622,32626,
32630,33121,33218,33219,33122,33220,32642,33221,
32648,32652,32658,33222,33223,32663,33224,32665,
/* Block: 310 */
33175,33123,32674,32675,33125,32676,32054,33225,
33226,33176,33177,32688,32689,32860,33126,32704,
32703,32705,31895,32706,32707,32708,32711,33227,
32710,32712,32717,32718,32713,32719,32724,32730,
32716,32721,32722,32723,33228,33230,33229,33127,
32732,32733,32735,33234,32736,33231,33128,33129,
33232,33233,33130,32745,32747,32748,32749,32752,
32751,32754,32753,32758,32755,32756,32759,33131,
32761,32762,33132,32767,32768,33235,32773,32774,
33133,32777,33079,33236,33237,33134,33135,32795,
32803,32815,32820,33238,32827,32828,32836,32841,
33240,33152,32845,32844,32847,33153,32851,32855,
33241,33242,32878,32881,32883,33243,32884,32899,
32902,32903,32901,32906,32907,33244,32914,33136,
32916,33245,33137,32933,32104,32941,33246,33248,
33138,33139,32953,33249,33140,33250,32962,32963,
/* Block: 311 */
32965,33251,32978,33141,32982,32987,32989,32991,
33142,33252,32999,33007,33011,33143,33144,33012,
33253,33145,33254,33255,33256,33025,33146,33032,
33035,33037,33039,33041,33043,33258,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 312 */
0,136,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
137,138,139,140,141,142,143,144,
145,146,147,148,149,150,151,152,
153,154,155,156,157,158,159,160,
161,162,163,164,165,166,167,168,
169,170,171,172,173,174,175,176,
177,178,179,180,181,182,183,184,
185,186,187,188,189,190,191,192,
193,194,195,196,197,198,199,200,
201,202,203,204,205,206,207,208,
209,210,211,212,213,214,215,216,
217,218,219,220,221,222,223,224,
225,226,227,228,229,230,231,232,
/* Block: 313 */
233,234,235,236,237,238,239,240,
241,242,243,244,245,246,247,248,
249,250,251,252,253,254,255,256,
257,258,259,260,261,262,263,264,
265,266,267,268,269,270,271,272,
273,274,275,276,277,278,279,280,
281,282,283,284,285,286,287,288,
289,290,291,292,293,294,295,296,
297,298,299,300,301,302,303,304,
305,306,307,308,309,310,311,312,
313,314,315,316,317,318,319,320,
321,322,323,324,325,326,327,328,
329,330,331,332,333,334,335,336,
337,338,339,340,341,342,343,344,
345,346,347,348,349,350,351,352,
353,354,355,356,357,358,359,360,
/* Block: 314 */
361,362,363,364,365,366,367,368,
369,370,371,372,373,374,375,376,
377,378,379,380,381,382,383,384,
385,386,387,388,389,390,391,392,
393,394,395,396,397,398,399,400,
401,402,403,404,405,406,407,408,
409,410,411,412,413,414,415,416,
417,418,419,420,421,422,423,424,
425,426,427,428,429,430,431,432,
433,434,435,436,437,438,439,440,
441,442,443,444,445,446,447,448,
449,450,451,452,453,454,455,456,
457,458,459,460,461,462,463,464,
465,466,467,468,469,470,471,472,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0};

#endif // UNI_ALGO_DISABLE_COLLATE

uaix_const_data uaix_data_array(unsigned char, stage1_case_prop, 8704) = {
0,1,2,3,4,5,6,7,
8,9,10,11,12,13,14,15,
16,17,18,19,20,21,22,23,
24,25,26,27,28,29,30,31,
32,33,34,34,34,34,35,36,
34,34,34,34,34,34,37,38,
39,40,41,34,42,43,44,45,
46,47,48,49,50,51,52,53,
54,55,56,57,34,34,34,34,
34,58,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
59,60,61,62,63,34,34,34,
64,65,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
66,34,34,34,34,34,34,34,
34,67,34,34,68,69,70,71,
72,73,74,75,76,77,78,79,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,80,81,
34,34,34,34,82,83,84,85,
34,34,34,86,34,87,88,34,
89,90,91,92,34,34,34,93,
34,34,34,34,94,95,34,34,
34,96,97,34,34,98,99,100,
101,102,103,104,105,106,107,34,
108,109,34,110,111,112,113,34,
114,115,116,117,118,119,34,34,
120,121,122,123,34,124,125,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
126,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,127,128,34,
34,34,34,34,129,34,130,131,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,132,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,133,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,134,34,
34,34,135,136,137,34,34,34,
138,139,140,141,142,143,144,145,
34,34,34,34,146,147,34,34,
34,34,34,34,34,34,148,34,
149,150,151,34,34,152,34,34,
34,153,34,34,34,34,34,34,
34,154,155,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,156,157,34,34,34,158,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
159,34,160,161,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34};

uaix_const_data uaix_data_array(unsigned char, stage2_case_prop, 20736) = {
/* Block: 0 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,2,
0,0,0,0,0,0,2,0,
0,0,0,0,0,0,0,0,
0,0,2,0,0,0,0,0,
0,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,9,0,0,0,2,0,
2,5,5,5,5,5,5,5,
5,21,21,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,0,0,0,0,0,
/* Block: 1 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
2,0,5,0,0,2,0,2,
0,0,0,0,2,5,0,2,
2,0,5,0,0,0,0,0,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,0,
9,9,9,9,9,9,9,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,0,
5,5,5,5,5,5,5,5,
/* Block: 2 */
9,5,9,5,9,5,9,5,
9,5,9,5,9,5,9,5,
9,5,9,5,9,5,9,5,
9,5,9,5,9,5,9,5,
9,5,9,5,9,5,9,5,
9,5,9,5,9,5,9,21,
9,5,9,5,9,5,9,5,
5,9,5,9,5,9,5,9,
5,9,5,9,5,9,5,9,
5,5,9,5,9,5,9,5,
9,5,9,5,9,5,9,5,
9,5,9,5,9,5,9,5,
9,5,9,5,9,5,9,5,
9,5,9,5,9,5,9,5,
9,5,9,5,9,5,9,5,
9,9,5,9,5,9,5,5,
/* Block: 3 */
5,9,9,5,9,5,9,9,
5,9,9,9,5,5,9,9,
9,9,5,9,9,5,9,9,
9,5,5,5,9,9,5,9,
9,5,9,5,9,5,9,9,
5,9,5,5,9,5,9,9,
5,9,9,9,5,9,5,9,
9,5,5,0,9,5,5,5,
0,0,0,0,9,1,5,9,
1,5,9,1,5,9,5,9,
5,9,5,9,5,9,5,9,
5,9,5,9,5,5,9,5,
9,5,9,5,9,5,9,5,
9,5,9,5,9,5,9,5,
5,9,1,5,9,5,9,9,
9,5,9,5,9,5,9,5,
/* Block: 4 */
9,5,9,5,9,5,9,5,
9,5,9,5,9,5,9,5,
9,5,9,5,9,5,9,5,
9,5,9,5,9,5,9,5,
9,5,9,5,9,5,9,5,
9,5,9,5,9,5,9,5,
9,5,9,5,5,5,5,5,
5,5,9,9,5,9,9,5,
5,9,5,9,9,9,9,5,
9,21,9,5,9,5,9,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
21,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
/* Block: 5 */
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,0,5,5,5,
5,5,5,5,5,21,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
7,7,23,7,7,7,7,7,
7,2,2,2,2,2,2,2,
7,7,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
7,7,7,7,7,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
/* Block: 6 */
98,98,98,98,98,98,98,98,
98,98,98,98,98,98,98,98,
98,98,98,98,98,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,98,98,98,
98,98,98,98,98,39,98,34,
34,34,98,98,98,34,34,2,
98,98,98,34,34,34,34,98,
34,34,34,98,34,34,34,34,
34,34,34,98,98,98,98,98,
98,98,98,98,98,98,98,98,
9,5,9,5,2,2,9,5,
0,0,7,5,5,5,0,9,
/* Block: 7 */
0,0,0,0,2,2,9,2,
9,9,9,0,9,0,9,9,
5,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,0,9,9,9,9,9,
9,9,9,9,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,9,
5,5,9,9,9,5,5,5,
9,5,9,5,9,5,9,5,
9,5,9,5,9,5,9,5,
9,5,9,5,9,5,9,5,
5,5,5,21,9,5,0,9,
5,9,9,5,5,9,9,9,
/* Block: 8 */
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,21,5,
21,5,5,5,5,5,5,5,
9,5,9,5,9,5,9,5,
9,5,9,5,9,5,9,5,
9,5,9,5,9,5,9,5,
9,5,9,5,9,5,9,5,
/* Block: 9 */
9,5,0,98,98,98,98,98,
2,2,9,5,9,5,9,5,
9,5,9,5,9,5,9,5,
9,5,9,5,9,5,9,5,
9,5,9,5,9,5,9,5,
9,5,9,5,9,5,9,5,
9,5,9,5,9,5,9,5,
9,5,9,5,9,5,9,5,
9,9,5,9,5,9,5,9,
5,9,5,9,5,9,5,5,
9,5,9,5,9,5,9,5,
9,5,9,5,9,5,9,5,
9,5,9,5,9,5,9,5,
9,5,9,5,9,5,9,5,
9,5,9,5,9,5,9,5,
9,5,9,5,9,5,9,5,
/* Block: 10 */
9,5,9,5,9,5,9,5,
9,5,9,5,9,5,9,5,
9,5,9,5,9,5,9,5,
9,5,9,5,9,5,9,5,
9,5,9,5,9,5,9,5,
9,5,9,5,9,5,9,5,
0,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,0,
0,2,0,0,0,0,0,2,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
/* Block: 11 */
5,5,5,5,5,5,5,5,
5,0,0,0,0,0,0,0,
0,34,98,98,98,98,34,98,
98,98,34,34,98,98,98,98,
98,98,34,34,34,34,34,34,
98,98,34,98,98,34,34,98,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,0,34,
0,34,34,0,98,34,0,34,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,2,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 12 */
2,2,2,2,2,2,0,0,
0,0,0,0,0,0,0,0,
98,98,98,98,98,98,98,98,
34,34,34,0,2,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
2,0,0,0,0,0,0,0,
0,0,0,34,34,34,34,34,
34,34,34,98,98,34,34,98,
98,98,98,98,34,98,98,34,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
34,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 13 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,98,98,
98,98,98,98,98,2,0,98,
98,98,98,34,98,2,2,98,
98,0,34,98,98,34,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 14 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,2,
0,34,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
98,34,98,98,34,98,98,34,
34,34,98,34,34,98,34,98,
98,98,34,98,34,98,34,98,
34,98,98,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 15 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,2,2,
2,2,2,2,2,2,2,2,
2,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,98,98,98,98,98,
98,98,34,98,2,2,0,0,
0,0,2,0,0,34,0,0,
/* Block: 16 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,98,98,
98,98,2,98,98,98,98,98,
98,98,98,98,2,98,98,98,
2,98,98,98,98,98,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,34,34,34,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 17 */
0,0,0,0,0,0,0,0,
2,0,0,0,0,0,0,0,
2,2,0,0,0,0,0,0,
98,34,34,34,98,98,98,98,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,2,98,98,98,98,98,34,
34,34,34,34,98,98,98,98,
98,98,98,98,98,98,98,98,
98,98,2,34,98,98,34,98,
98,34,98,98,98,34,34,34,
34,34,34,98,98,98,34,98,
98,34,34,98,98,98,98,98,
/* Block: 18 */
2,2,2,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,2,0,34,0,0,0,
0,2,2,2,2,2,2,2,
2,0,0,0,0,34,0,0,
0,98,34,98,98,2,2,2,
0,0,0,0,0,0,0,0,
0,0,2,2,0,0,0,0,
0,0,0,0,0,0,0,0,
0,2,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 19 */
0,2,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,34,0,0,0,
0,2,2,2,2,0,0,0,
0,0,0,0,0,34,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,2,2,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,98,0,
/* Block: 20 */
0,2,2,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,34,0,0,0,
0,2,2,0,0,0,0,2,
2,0,0,2,2,34,0,0,
0,2,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
2,2,0,0,0,2,0,0,
0,0,0,0,0,0,0,0,
/* Block: 21 */
0,2,2,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,34,0,0,0,
0,2,2,2,2,2,0,2,
2,0,0,0,0,34,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,2,2,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,2,2,2,2,2,2,
/* Block: 22 */
0,2,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,34,0,0,2,
0,2,2,2,2,0,0,0,
0,0,0,0,0,34,0,0,
0,0,0,0,0,2,2,0,
0,0,0,0,0,0,0,0,
0,0,2,2,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 23 */
0,0,2,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
2,0,0,0,0,0,0,0,
0,0,0,0,0,34,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 24 */
2,0,0,0,2,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,34,0,2,2,
2,0,0,0,0,0,2,2,
2,0,2,2,2,34,0,0,
0,0,0,0,0,34,34,0,
0,0,0,0,0,0,0,0,
0,0,2,2,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 25 */
0,2,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,34,0,0,2,
0,0,0,0,0,0,2,0,
0,0,0,0,2,34,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,2,2,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 26 */
2,2,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,34,34,0,0,0,
0,2,2,2,2,0,0,0,
0,0,0,0,0,34,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,2,2,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 27 */
0,2,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,34,0,0,0,0,0,
0,0,2,2,2,0,2,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 28 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,2,0,0,2,2,2,2,
34,34,34,0,0,0,0,0,
0,0,0,0,0,0,2,2,
34,34,34,34,2,2,2,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 29 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,2,0,0,2,2,2,2,
34,34,34,2,2,0,0,0,
0,0,0,0,0,0,2,0,
34,34,34,34,2,2,2,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 30 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
34,34,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,34,0,34,
0,34,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,34,34,2,34,2,2,2,
2,2,34,34,34,34,2,0,
/* Block: 31 */
34,2,98,98,34,0,98,98,
0,0,0,0,0,2,2,2,
2,2,2,2,2,2,2,2,
0,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,0,0,0,
0,0,0,0,0,0,34,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 32 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,2,2,2,
2,0,2,2,2,2,2,34,
0,34,34,0,0,2,2,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
2,2,0,0,0,0,2,2,
2,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,2,2,2,2,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 33 */
0,0,2,0,0,2,2,0,
0,0,0,0,0,34,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,2,0,0,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,0,9,
0,0,0,0,0,9,0,0,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,0,7,5,5,5,
/* Block: 34 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 35 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,98,98,98,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 36 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,0,0,
5,5,5,5,5,5,0,0,
/* Block: 37 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,2,2,34,32,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,2,2,32,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,2,2,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,2,2,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 38 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,2,2,0,2,
2,2,2,2,2,2,0,0,
0,0,0,0,0,0,2,0,
0,2,2,2,2,2,2,2,
2,2,34,2,0,0,0,2,
0,0,0,0,0,98,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 39 */
0,0,0,0,0,0,0,0,
0,0,0,2,2,2,2,2,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,2,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 40 */
0,0,0,0,0,2,2,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,34,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 41 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
2,2,2,0,0,0,0,2,
2,0,0,0,0,0,0,0,
0,0,2,0,0,0,0,0,
0,34,98,34,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 42 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,98,
34,0,0,2,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,2,0,
2,2,2,2,2,2,2,0,
34,0,2,0,0,2,2,2,
2,2,2,2,2,0,0,0,
0,0,0,2,2,98,98,98,
98,98,98,98,98,0,0,34,
/* Block: 43 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,2,
0,0,0,0,0,0,0,0,
98,98,98,98,98,34,34,34,
34,34,34,98,98,34,2,34,
34,98,98,34,34,98,98,98,
98,98,34,98,98,98,98,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 44 */
2,2,2,2,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,34,0,2,2,
2,2,2,0,2,0,0,0,
0,0,2,0,32,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,98,34,98,98,98,
98,98,98,98,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 45 */
2,2,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,2,2,2,2,0,0,
2,2,32,34,2,2,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,34,0,
2,2,0,0,0,2,0,2,
2,2,32,32,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 46 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,2,2,2,2,
2,2,2,2,0,0,2,34,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
2,2,2,2,2,2,0,0,
/* Block: 47 */
5,5,5,5,5,5,5,5,
5,0,0,0,0,0,0,0,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,9,0,0,9,9,9,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
98,98,98,0,34,34,34,34,
34,34,98,98,34,34,34,34,
98,0,34,34,34,34,34,34,
34,0,0,0,0,34,0,0,
0,0,0,0,98,0,0,0,
98,98,0,0,0,0,0,0,
/* Block: 48 */
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,23,7,7,7,7,7,
7,7,7,5,5,5,5,5,
5,5,5,5,5,5,5,5,
7,5,5,5,5,5,5,5,
/* Block: 49 */
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,21,5,
5,5,5,7,7,7,7,7,
7,7,7,7,23,7,7,7,
23,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
98,98,34,98,98,98,98,98,
98,98,34,98,98,34,34,34,
34,98,98,98,98,98,98,98,
98,98,98,98,98,98,98,98,
98,98,98,98,98,98,98,98,
98,98,98,98,98,98,98,98,
98,98,98,98,98,98,34,34,
34,34,34,98,34,34,98,34,
/* Block: 50 */
9,5,9,5,9,5,9,5,
9,5,9,5,9,5,9,5,
9,5,9,5,9,5,9,5,
9,5,9,5,9,5,9,5,
9,5,9,5,9,5,9,5,
9,5,9,5,9,21,9,5,
9,5,9,5,9,5,9,5,
9,5,9,5,9,5,9,5,
9,5,9,5,9,5,9,5,
9,5,9,5,9,5,9,5,
9,5,9,5,9,5,9,5,
9,5,9,5,9,5,9,5,
9,5,9,5,9,5,9,5,
9,5,9,5,9,5,9,5,
9,5,9,5,9,5,9,5,
9,5,9,5,9,5,9,5,
/* Block: 51 */
9,5,9,5,9,5,9,5,
9,5,9,5,9,5,9,5,
9,5,9,5,9,5,5,5,
5,5,5,5,5,5,9,5,
9,5,9,5,9,5,9,5,
9,5,9,5,9,5,9,5,
9,5,9,5,9,5,9,5,
9,5,9,5,9,5,9,5,
9,5,9,5,9,5,9,5,
9,5,9,21,9,5,9,5,
9,5,9,5,9,5,9,5,
9,5,9,5,9,5,9,5,
9,5,9,5,9,5,9,5,
9,5,9,5,9,5,9,5,
9,5,9,5,9,5,9,5,
9,5,9,5,9,5,9,5,
/* Block: 52 */
5,5,5,5,5,5,5,5,
9,9,9,9,9,9,9,9,
5,5,5,5,5,5,0,0,
9,9,9,9,9,9,0,0,
5,5,5,5,5,5,5,5,
9,9,9,9,9,9,9,9,
5,5,5,5,5,5,5,5,
9,9,9,9,9,9,9,9,
5,5,5,5,5,5,0,0,
9,9,9,9,9,9,0,0,
5,5,5,5,5,5,5,5,
0,9,0,9,0,9,0,9,
5,5,5,5,5,5,5,5,
9,9,9,9,9,9,9,9,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,0,0,
/* Block: 53 */
5,5,5,5,5,5,5,5,
1,1,1,1,1,1,1,1,
5,5,5,5,5,5,5,5,
1,1,1,1,1,1,1,1,
5,5,5,5,5,5,5,5,
1,1,1,1,1,1,1,1,
5,5,5,5,5,0,5,5,
9,9,9,9,1,2,5,2,
2,2,5,5,5,0,5,5,
9,9,9,9,1,2,2,2,
5,5,5,5,0,0,5,5,
9,9,9,9,0,2,2,2,
5,5,5,5,5,5,5,5,
9,9,9,9,9,2,2,2,
0,0,5,5,5,0,5,5,
9,9,9,9,1,2,2,0,
/* Block: 54 */
0,0,0,0,0,0,0,0,
0,0,0,2,2,2,2,2,
0,0,0,0,0,0,0,0,
2,2,0,0,0,0,0,0,
0,0,0,0,2,0,0,2,
0,0,2,2,2,2,2,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
2,2,2,2,2,0,2,2,
2,2,2,2,2,2,2,2,
0,23,0,0,0,0,0,0,
0,0,0,0,0,0,0,7,
/* Block: 55 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
7,7,7,7,7,7,7,7,
7,7,7,7,7,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
98,98,34,34,98,98,98,98,
34,34,34,98,98,2,2,2,
2,98,2,2,2,34,34,98,
34,98,34,34,34,34,34,34,
98,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 56 */
0,0,9,0,0,0,0,9,
0,0,5,9,9,9,5,5,
9,9,9,5,0,9,0,0,
0,9,9,9,9,9,0,0,
0,0,0,0,9,0,9,0,
9,0,9,9,9,9,0,5,
9,9,9,9,5,0,0,0,
0,5,0,0,5,5,9,9,
0,0,0,0,0,9,5,5,
21,21,0,0,0,0,5,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
/* Block: 57 */
0,0,0,9,5,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 58 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,9,9,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 59 */
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
9,5,9,9,9,5,5,9,
5,9,5,9,5,9,9,9,
9,5,9,5,5,9,5,5,
5,5,5,5,23,7,9,9,
/* Block: 60 */
9,5,9,5,9,5,9,5,
9,5,9,5,9,5,9,5,
9,5,9,5,9,5,9,5,
9,5,9,5,9,5,9,5,
9,5,9,5,9,5,9,5,
9,5,9,5,9,5,9,5,
9,5,9,5,9,5,9,5,
9,5,9,5,9,5,9,5,
9,5,9,5,9,5,9,5,
9,5,9,5,9,5,9,5,
9,5,9,5,9,5,9,5,
9,5,9,5,9,5,9,5,
9,5,9,5,5,0,0,0,
0,0,0,9,5,9,5,98,
98,98,9,5,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 61 */
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,0,5,
0,0,0,0,0,5,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,2,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,34,
/* Block: 62 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
98,98,98,98,98,98,98,98,
98,98,98,98,98,98,98,98,
98,98,98,98,98,98,98,98,
98,98,98,98,98,98,98,98,
/* Block: 63 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,2,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 64 */
0,0,0,0,0,2,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,34,34,34,34,32,32,
0,2,2,2,2,2,0,0,
0,0,0,2,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 65 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,34,34,2,2,2,2,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,2,2,2,0,
/* Block: 66 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,2,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 67 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
2,2,2,2,2,2,0,0,
/* Block: 68 */
0,0,0,0,0,0,0,0,
0,0,0,0,2,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
9,5,9,5,9,5,9,5,
9,5,9,5,9,5,9,5,
9,5,9,5,9,5,9,5,
9,5,9,5,9,5,9,5,
9,5,9,5,9,5,9,5,
9,5,9,5,9,5,0,98,
2,2,2,0,98,98,98,98,
98,98,98,98,98,98,0,2,
/* Block: 69 */
9,5,9,5,9,5,9,5,
9,5,9,5,9,5,9,5,
9,5,9,5,9,5,9,5,
9,5,9,5,7,7,98,98,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
98,98,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 70 */
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,9,5,9,5,9,5,
9,5,9,5,9,5,9,5,
5,5,9,5,9,5,9,5,
9,5,9,5,9,5,9,5,
9,5,9,5,9,5,9,5,
9,5,9,5,9,5,9,5,
9,5,9,5,9,5,9,5,
9,5,9,5,9,5,9,5,
9,5,9,5,9,5,9,5,
9,5,9,5,9,5,9,5,
7,5,5,5,5,5,5,5,
5,9,5,9,5,9,9,5,
/* Block: 71 */
9,5,9,5,9,5,9,5,
2,2,2,9,5,9,5,0,
9,5,9,5,5,5,9,5,
9,5,9,5,9,5,9,5,
9,5,9,5,9,5,9,5,
9,5,9,9,9,9,9,5,
9,9,9,9,9,5,9,5,
9,5,9,5,9,5,9,5,
9,5,9,5,9,9,9,9,
5,9,5,0,0,0,0,0,
9,5,0,5,0,5,9,5,
9,5,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,7,7,7,9,5,0,
7,7,5,0,0,0,0,0,
/* Block: 72 */
0,0,2,0,0,0,34,0,
0,0,0,2,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,2,2,0,
0,0,0,0,34,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 73 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,34,2,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
98,98,98,98,98,98,98,98,
98,98,98,98,98,98,98,98,
98,98,0,0,0,0,0,0,
0,0,0,0,0,0,0,2,
/* Block: 74 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,2,2,
2,2,2,34,34,34,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,2,
2,2,2,2,2,2,2,2,
2,2,0,32,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 75 */
2,2,2,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,34,0,0,2,2,
2,2,0,0,2,2,0,0,
32,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,2,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,2,2,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 76 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,2,2,2,2,2,2,0,
0,2,2,0,0,2,2,0,
0,0,0,0,0,0,0,0,
0,0,0,2,0,0,0,0,
0,0,0,0,2,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
2,0,0,0,0,0,0,0,
0,0,0,0,2,0,0,0,
/* Block: 77 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
98,0,98,98,34,0,0,98,
98,0,0,0,0,0,98,98,
0,98,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,2,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,2,2,0,0,
0,0,0,2,2,0,34,0,
0,0,0,0,0,0,0,0,
/* Block: 78 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,2,7,7,7,7,
5,5,5,5,5,5,5,5,
5,7,2,2,0,0,0,0,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
/* Block: 79 */
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,2,0,0,
2,0,0,0,0,34,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 80 */
5,5,5,5,5,5,5,0,
0,0,0,0,0,0,0,0,
0,0,0,5,5,5,5,5,
0,0,0,0,0,0,34,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 81 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 82 */
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
0,0,0,2,0,0,0,0,
0,0,0,0,0,0,0,0,
98,98,98,98,98,98,98,34,
34,34,34,34,34,34,98,98,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,2,0,0,2,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 83 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,2,
/* Block: 84 */
0,0,0,0,0,0,0,2,
0,0,0,0,0,0,2,0,
0,0,0,0,0,0,0,0,
0,0,2,0,0,0,0,0,
0,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,9,0,0,0,2,0,
2,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
2,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 85 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,2,2,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,2,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,2,2,2,0,0,0,0,
/* Block: 86 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,34,0,0,
/* Block: 87 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
34,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 88 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,98,98,
98,98,98,0,0,0,0,0,
/* Block: 89 */
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 90 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,9,9,0,0,0,0,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,0,0,0,0,
/* Block: 91 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
9,9,9,9,9,9,9,9,
9,9,9,0,9,9,9,9,
/* Block: 92 */
9,9,9,9,9,9,9,9,
9,9,9,0,9,9,9,9,
9,9,9,0,9,9,0,5,
5,5,5,5,5,5,5,5,
5,5,0,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,0,5,5,5,5,5,
5,5,0,5,5,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 93 */
7,2,2,7,7,7,0,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,0,7,7,7,7,7,7,
7,7,7,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 94 */
0,2,2,2,0,2,2,0,
0,0,0,0,2,34,2,98,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
98,34,34,0,0,0,0,34,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 95 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,98,34,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 96 */
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,9,0,0,0,0,0,
0,0,0,0,0,0,0,0,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 97 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,98,98,98,98,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 98 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,98,98,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,34,34,34,
/* Block: 99 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,34,34,
98,98,98,34,98,34,34,34,
34,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 100 */
0,0,98,34,98,34,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 101 */
0,2,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,34,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
34,0,0,2,2,0,0,0,
0,0,0,0,0,0,0,34,
/* Block: 102 */
2,2,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,2,2,2,2,0,
0,34,34,0,0,2,0,0,
0,0,2,0,0,0,0,0,
0,0,0,0,0,2,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 103 */
98,98,98,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,2,
2,2,2,2,0,2,2,2,
2,2,2,34,34,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,34,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 104 */
2,2,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,2,2,
2,2,2,2,2,2,2,0,
32,0,0,0,0,0,0,0,
0,2,34,2,2,0,0,2,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 105 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,2,
2,2,0,0,2,32,34,2,
0,0,0,0,0,0,2,0,
0,2,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 106 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,2,
0,0,0,2,2,2,2,2,
2,34,34,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 107 */
2,2,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,34,34,0,0,0,
2,0,0,0,0,0,0,0,
0,0,0,0,0,32,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,98,98,
98,98,98,98,98,0,0,0,
98,98,98,98,98,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 108 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
2,2,2,2,2,2,2,2,
0,0,34,2,2,0,34,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,98,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 109 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,2,2,2,2,2,
2,0,2,0,0,0,0,2,
2,0,34,34,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 110 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,2,2,2,2,0,0,
0,0,0,0,2,2,0,34,
34,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,2,2,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 111 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,2,2,2,2,2,
2,2,2,0,0,2,0,34,
2,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 112 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,2,0,2,0,0,
2,2,2,2,2,2,32,34,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 113 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,2,2,2,
0,0,2,2,2,2,0,2,
2,2,2,34,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 114 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,2,
2,2,2,2,2,2,2,2,
0,34,34,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 115 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 116 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,2,2,32,34,0,
0,0,0,34,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 117 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,2,2,2,2,
0,0,2,2,0,0,0,0,
34,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 118 */
0,2,2,2,2,2,2,2,
2,2,2,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,2,34,2,2,2,
2,0,0,2,2,2,2,0,
0,0,0,0,0,0,0,34,
0,0,0,0,0,0,0,0,
0,2,2,2,2,2,2,0,
0,2,2,2,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 119 */
0,0,0,0,0,0,0,0,
0,0,2,2,2,2,2,2,
2,2,2,2,2,2,2,0,
2,34,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 120 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
2,2,2,2,2,2,2,0,
2,2,2,2,2,2,0,34,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 121 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
0,0,2,2,2,2,2,2,
2,0,2,2,0,2,2,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 122 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,2,2,2,2,2,2,0,
0,0,2,0,2,2,0,2,
2,2,34,2,34,34,0,2,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 123 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
2,2,0,0,0,2,0,34,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 124 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,2,2,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 125 */
2,2,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,2,2,
2,2,2,0,0,0,0,0,
2,32,34,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 126 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,0,0,0,0,0,0,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 127 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
34,34,34,34,34,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 128 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
98,98,98,98,98,98,98,0,
0,0,0,0,0,0,0,0,
2,2,2,2,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 129 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
/* Block: 130 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,2,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 131 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
2,2,0,2,2,0,0,0,
0,0,0,0,0,0,0,0,
32,32,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 132 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
2,2,2,2,0,2,2,2,
2,2,2,2,0,2,2,0,
/* Block: 133 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,2,34,0,
2,2,2,2,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 134 */
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,0,0,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 135 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,32,32,34,
34,34,0,0,0,32,32,32,
32,32,32,2,2,2,2,2,
2,2,2,34,34,34,34,34,
/* Block: 136 */
34,34,34,0,0,98,98,98,
98,98,34,34,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,98,98,98,98,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 137 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,98,98,98,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 138 */
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,5,5,5,5,5,5,
5,5,21,21,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,5,5,
5,5,5,5,5,0,21,21,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
/* Block: 139 */
9,9,5,5,5,5,5,5,
5,5,21,21,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,9,0,9,9,
0,0,9,0,0,9,9,0,
0,9,9,9,9,0,9,9,
9,9,9,9,9,9,5,5,
5,5,0,5,0,5,21,21,
5,5,5,5,0,5,5,5,
5,5,5,5,5,5,5,5,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,5,5,5,5,5,5,
5,5,21,21,5,5,5,5,
5,5,5,5,5,5,5,5,
/* Block: 140 */
5,5,5,5,9,9,0,9,
9,9,9,0,0,9,9,9,
9,9,9,9,9,0,9,9,
9,9,9,9,9,0,5,5,
5,5,5,5,5,5,21,21,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
9,9,0,9,9,9,9,0,
9,9,9,9,9,0,9,0,
0,0,9,9,9,9,9,9,
9,0,5,5,5,5,5,5,
5,5,21,21,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
/* Block: 141 */
9,9,9,9,9,9,5,5,
5,5,5,5,5,5,21,21,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,5,5,5,5,5,5,
5,5,21,21,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,5,5,
5,5,5,5,5,5,21,21,
5,5,5,5,5,5,5,5,
/* Block: 142 */
5,5,5,5,5,5,5,5,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,5,5,5,5,5,5,
5,5,21,21,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,5,5,
5,5,5,5,5,5,21,21,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
/* Block: 143 */
9,9,9,9,9,9,9,9,
9,9,5,5,5,5,5,5,
5,5,21,21,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,0,0,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,0,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,0,5,5,5,5,
5,5,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,9,0,5,5,5,5,
/* Block: 144 */
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,0,5,5,
5,5,5,5,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,9,9,9,0,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,0,
5,5,5,5,5,5,9,9,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,0,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
/* Block: 145 */
5,5,5,5,5,5,5,5,
5,0,5,5,5,5,5,5,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,0,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,0,5,5,5,5,
5,5,9,5,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 146 */
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,0,
0,0,0,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,0,0,0,
0,0,0,0,0,2,0,0,
0,0,0,0,0,0,0,0,
/* Block: 147 */
0,0,0,0,2,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,2,2,2,2,2,
0,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 148 */
5,5,5,5,5,5,5,5,
5,5,0,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,21,5,5,5,5,0,
0,0,0,0,0,5,5,5,
5,5,5,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 149 */
98,98,98,98,98,98,98,0,
98,98,98,98,98,98,98,98,
98,98,98,98,98,98,98,98,
98,0,0,98,98,98,98,98,
98,98,0,98,98,0,98,98,
98,98,98,0,0,0,0,0,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,23,23,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
23,7,7,7,7,7,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 150 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,98,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 151 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
98,98,98,98,98,98,98,2,
2,2,2,2,2,2,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 152 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,98,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,98,98,98,98,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 153 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,2,34,34,34,98,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 154 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
34,34,34,34,34,34,34,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 155 */
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,98,98,98,98,
98,98,34,2,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 156 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,0,0,0,0,0,0,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,0,0,0,0,0,0,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
/* Block: 157 */
9,9,9,9,9,9,9,9,
9,9,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 158 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,2,2,2,2,2,
/* Block: 159 */
0,2,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
/* Block: 160 */
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
/* Block: 161 */
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0};

#ifndef UNI_ALGO_DISABLE_FULL_CASE

uaix_const_data uaix_data_array(unsigned char, stage1_special_upper, 512) = {
0,1,2,3,0,0,0,4,
0,0,0,5,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,6,7,8,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,9,0,
0,0,0,0,0,0,0,0};

uaix_const_data uaix_data_array(unsigned char, stage2_special_upper, 1280) = {
/* Block: 0 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 1 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,1,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 2 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,15,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 3 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
18,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 4 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
16,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
17,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 5 */
0,0,0,0,0,0,0,9,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 6 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,19,20,
21,22,23,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 7 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
24,0,25,0,26,0,27,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 8 */
40,41,42,43,44,45,46,47,
48,49,50,51,52,53,54,55,
56,57,58,59,60,61,62,63,
64,65,66,67,68,69,70,71,
72,73,74,75,76,77,78,79,
80,81,82,83,84,85,86,87,
0,0,94,88,95,0,28,100,
0,0,0,0,89,0,0,0,
0,0,96,90,97,0,29,101,
0,0,0,0,91,0,0,0,
0,0,30,31,0,0,32,33,
0,0,0,0,0,0,0,0,
0,0,34,35,36,0,37,38,
0,0,0,0,0,0,0,0,
0,0,98,92,99,0,39,102,
0,0,0,0,93,0,0,0,
/* Block: 9 */
2,3,4,5,6,7,8,0,
0,0,0,0,0,0,0,0,
0,0,0,10,11,12,13,14,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0};

uaix_const_data uaix_data_array2(unsigned short, stage3_special_upper, 103, 4) = {
uaix_array_brace_ellison(unsigned short, 4)
{0,0,0,0},
{2,83,83,0},
{2,70,70,0},
{2,70,73,0},
{2,70,76,0},
{3,70,70,73},
{3,70,70,76},
{2,83,84,0},
{2,83,84,0},
{2,1333,1362,0},
{2,1348,1350,0},
{2,1348,1333,0},
{2,1348,1339,0},
{2,1358,1350,0},
{2,1348,1341,0},
{2,700,78,0},
{3,921,776,769},
{3,933,776,769},
{2,74,780,0},
{2,72,817,0},
{2,84,776,0},
{2,87,778,0},
{2,89,778,0},
{2,65,702,0},
{2,933,787,0},
{3,933,787,768},
{3,933,787,769},
{3,933,787,834},
{2,913,834,0},
{2,919,834,0},
{3,921,776,768},
{3,921,776,769},
{2,921,834,0},
{3,921,776,834},
{3,933,776,768},
{3,933,776,769},
{2,929,787,0},
{2,933,834,0},
{3,933,776,834},
{2,937,834,0},
{2,7944,921,0},
{2,7945,921,0},
{2,7946,921,0},
{2,7947,921,0},
{2,7948,921,0},
{2,7949,921,0},
{2,7950,921,0},
{2,7951,921,0},
{2,7944,921,0},
{2,7945,921,0},
{2,7946,921,0},
{2,7947,921,0},
{2,7948,921,0},
{2,7949,921,0},
{2,7950,921,0},
{2,7951,921,0},
{2,7976,921,0},
{2,7977,921,0},
{2,7978,921,0},
{2,7979,921,0},
{2,7980,921,0},
{2,7981,921,0},
{2,7982,921,0},
{2,7983,921,0},
{2,7976,921,0},
{2,7977,921,0},
{2,7978,921,0},
{2,7979,921,0},
{2,7980,921,0},
{2,7981,921,0},
{2,7982,921,0},
{2,7983,921,0},
{2,8040,921,0},
{2,8041,921,0},
{2,8042,921,0},
{2,8043,921,0},
{2,8044,921,0},
{2,8045,921,0},
{2,8046,921,0},
{2,8047,921,0},
{2,8040,921,0},
{2,8041,921,0},
{2,8042,921,0},
{2,8043,921,0},
{2,8044,921,0},
{2,8045,921,0},
{2,8046,921,0},
{2,8047,921,0},
{2,913,921,0},
{2,913,921,0},
{2,919,921,0},
{2,919,921,0},
{2,937,921,0},
{2,937,921,0},
{2,8122,921,0},
{2,902,921,0},
{2,8138,921,0},
{2,905,921,0},
{2,8186,921,0},
{2,911,921,0},
{3,913,834,921},
{3,919,834,921},
{3,937,834,921}};

uaix_const_data uaix_data_array(unsigned char, stage1_special_fold, 512) = {
0,1,2,3,0,0,0,4,
0,0,0,5,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,6,7,8,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,9,0,
0,0,0,0,0,0,0,0};

uaix_const_data uaix_data_array(unsigned char, stage2_special_fold, 1280) = {
/* Block: 0 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 1 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,1,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 2 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
2,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,3,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 3 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
4,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 4 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
5,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
6,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 5 */
0,0,0,0,0,0,0,7,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 6 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,8,9,
10,11,12,0,0,0,13,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 7 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
14,0,15,0,16,0,17,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 8 */
18,19,20,21,22,23,24,25,
26,27,28,29,30,31,32,33,
34,35,36,37,38,39,40,41,
42,43,44,45,46,47,48,49,
50,51,52,53,54,55,56,57,
58,59,60,61,62,63,64,65,
0,0,66,67,68,0,69,70,
0,0,0,0,71,0,0,0,
0,0,72,73,74,0,75,76,
0,0,0,0,77,0,0,0,
0,0,78,79,0,0,80,81,
0,0,0,0,0,0,0,0,
0,0,82,83,84,0,85,86,
0,0,0,0,0,0,0,0,
0,0,87,88,89,0,90,91,
0,0,0,0,92,0,0,0,
/* Block: 9 */
93,94,95,96,97,98,99,0,
0,0,0,0,0,0,0,0,
0,0,0,100,101,102,103,104,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0};

uaix_const_data uaix_data_array2(unsigned short, stage3_special_fold, 105, 4) = {
uaix_array_brace_ellison(unsigned short, 4)
{0,0,0,0},
{2,115,115,0},
{2,105,775,0},
{2,700,110,0},
{2,106,780,0},
{3,953,776,769},
{3,965,776,769},
{2,1381,1410,0},
{2,104,817,0},
{2,116,776,0},
{2,119,778,0},
{2,121,778,0},
{2,97,702,0},
{2,115,115,0},
{2,965,787,0},
{3,965,787,768},
{3,965,787,769},
{3,965,787,834},
{2,7936,953,0},
{2,7937,953,0},
{2,7938,953,0},
{2,7939,953,0},
{2,7940,953,0},
{2,7941,953,0},
{2,7942,953,0},
{2,7943,953,0},
{2,7936,953,0},
{2,7937,953,0},
{2,7938,953,0},
{2,7939,953,0},
{2,7940,953,0},
{2,7941,953,0},
{2,7942,953,0},
{2,7943,953,0},
{2,7968,953,0},
{2,7969,953,0},
{2,7970,953,0},
{2,7971,953,0},
{2,7972,953,0},
{2,7973,953,0},
{2,7974,953,0},
{2,7975,953,0},
{2,7968,953,0},
{2,7969,953,0},
{2,7970,953,0},
{2,7971,953,0},
{2,7972,953,0},
{2,7973,953,0},
{2,7974,953,0},
{2,7975,953,0},
{2,8032,953,0},
{2,8033,953,0},
{2,8034,953,0},
{2,8035,953,0},
{2,8036,953,0},
{2,8037,953,0},
{2,8038,953,0},
{2,8039,953,0},
{2,8032,953,0},
{2,8033,953,0},
{2,8034,953,0},
{2,8035,953,0},
{2,8036,953,0},
{2,8037,953,0},
{2,8038,953,0},
{2,8039,953,0},
{2,8048,953,0},
{2,945,953,0},
{2,940,953,0},
{2,945,834,0},
{3,945,834,953},
{2,945,953,0},
{2,8052,953,0},
{2,951,953,0},
{2,942,953,0},
{2,951,834,0},
{3,951,834,953},
{2,951,953,0},
{3,953,776,768},
{3,953,776,769},
{2,953,834,0},
{3,953,776,834},
{3,965,776,768},
{3,965,776,769},
{2,961,787,0},
{2,965,834,0},
{3,965,776,834},
{2,8060,953,0},
{2,969,953,0},
{2,974,953,0},
{2,969,834,0},
{3,969,834,953},
{2,969,953,0},
{2,102,102,0},
{2,102,105,0},
{2,102,108,0},
{3,102,102,105},
{3,102,102,108},
{2,115,116,0},
{2,115,116,0},
{2,1396,1398,0},
{2,1396,1381,0},
{2,1396,1387,0},
{2,1406,1398,0},
{2,1396,1389,0}};

#ifndef UNI_ALGO_DISABLE_SEGMENT_WORD

uaix_const_data uaix_data_array(unsigned char, stage1_special_title, 512) = {
0,1,2,3,0,0,0,4,
0,0,0,5,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,6,7,8,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,9,0,
0,0,0,0,0,0,0,0};

uaix_const_data uaix_data_array(unsigned char, stage2_special_title, 1280) = {
/* Block: 0 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 1 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,1,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 2 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,15,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 3 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
18,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 4 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
16,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
17,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 5 */
0,0,0,0,0,0,0,9,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 6 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,19,20,
21,22,23,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 7 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
24,0,25,0,26,0,27,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 8 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,40,0,41,0,28,46,
0,0,0,0,0,0,0,0,
0,0,42,0,43,0,29,47,
0,0,0,0,0,0,0,0,
0,0,30,31,0,0,32,33,
0,0,0,0,0,0,0,0,
0,0,34,35,36,0,37,38,
0,0,0,0,0,0,0,0,
0,0,44,0,45,0,39,48,
0,0,0,0,0,0,0,0,
/* Block: 9 */
2,3,4,5,6,7,8,0,
0,0,0,0,0,0,0,0,
0,0,0,10,11,12,13,14,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0};

uaix_const_data uaix_data_array2(unsigned short, stage3_special_title, 49, 4) = {
uaix_array_brace_ellison(unsigned short, 4)
{0,0,0,0},
{2,83,115,0},
{2,70,102,0},
{2,70,105,0},
{2,70,108,0},
{3,70,102,105},
{3,70,102,108},
{2,83,116,0},
{2,83,116,0},
{2,1333,1410,0},
{2,1348,1398,0},
{2,1348,1381,0},
{2,1348,1387,0},
{2,1358,1398,0},
{2,1348,1389,0},
{2,700,78,0},
{3,921,776,769},
{3,933,776,769},
{2,74,780,0},
{2,72,817,0},
{2,84,776,0},
{2,87,778,0},
{2,89,778,0},
{2,65,702,0},
{2,933,787,0},
{3,933,787,768},
{3,933,787,769},
{3,933,787,834},
{2,913,834,0},
{2,919,834,0},
{3,921,776,768},
{3,921,776,769},
{2,921,834,0},
{3,921,776,834},
{3,933,776,768},
{3,933,776,769},
{2,929,787,0},
{2,933,834,0},
{3,933,776,834},
{2,937,834,0},
{2,8122,837,0},
{2,902,837,0},
{2,8138,837,0},
{2,905,837,0},
{2,8186,837,0},
{2,911,837,0},
{3,913,834,837},
{3,919,834,837},
{3,937,834,837}};

#endif // UNI_ALGO_DISABLE_SEGMENT_WORD

// This is handled in place
#if 0

uaix_const_data uaix_data_array(unsigned char, stage1_special_lower, 512) = {
0,0,1,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0};

uaix_const_data uaix_data_array(unsigned char, stage2_special_lower, 256) = {
/* Block: 0 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 1 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
1,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0};

uaix_const_data uaix_data_array(unsigned short, stage3_special_lower, 2, 4) = {
uaix_array_brace_ellison(unsigned short, 4)
{0,0,0,0},
{2,105,775,0}};

#endif // 0

#endif // UNI_ALGO_DISABLE_FULL_CASE

UNI_ALGO_IMPL_NAMESPACE_END

// AMALGAMATION: uni_algo/impl/data/data_norm.h

// GENERATED. DO NOT EDIT.

// Unicode 15.1.0

UNI_ALGO_IMPL_NAMESPACE_BEGIN

uaix_const_data uaix_data_array(unsigned char, stage1_ccc_qc, 8704) = {
0,1,2,3,4,5,6,7,
8,9,0,10,11,12,13,14,
15,16,17,18,19,20,21,22,
23,24,25,26,27,28,29,30,
31,32,33,34,0,0,35,0,
0,0,0,0,0,0,36,37,
0,38,39,0,40,41,42,43,
44,45,46,47,48,49,50,51,
52,53,54,55,56,57,58,0,
59,60,0,0,0,0,0,0,
0,0,0,0,61,62,0,0,
63,64,65,66,0,67,68,69,
70,71,72,73,74,68,75,68,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,76,77,78,79,
80,81,82,83,0,84,85,86,
87,87,87,87,87,87,87,87,
87,87,87,87,87,87,87,87,
87,87,87,87,87,87,87,87,
87,87,87,87,87,87,87,87,
87,87,87,87,87,87,87,87,
87,87,87,87,87,87,87,87,
87,87,87,87,87,87,87,87,
87,87,87,87,87,87,87,87,
87,87,87,87,87,87,87,87,
87,87,87,87,87,87,87,87,
87,87,87,87,87,87,87,88,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,89,89,90,91,92,93,
94,95,96,97,98,99,100,101,
0,0,0,102,0,103,104,0,
0,0,0,0,0,0,0,105,
0,0,0,0,106,107,0,0,
0,0,108,0,0,109,110,111,
112,113,114,115,116,117,118,0,
119,120,0,121,122,123,124,0,
125,0,126,127,128,129,0,0,
122,0,130,131,0,0,132,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,133,134,0,
0,0,0,0,0,0,0,135,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,136,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,137,138,139,0,0,0,
140,141,142,68,68,143,68,144,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
145,146,134,0,0,147,0,0,
0,148,0,0,0,0,0,0,
0,149,150,0,0,0,0,0,
0,0,0,0,151,152,0,0,
0,0,153,154,155,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,156,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
89,89,89,89,157,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0};

uaix_const_data uaix_data_array(unsigned short, stage2_ccc_qc, 20224) = {
/* Block: 0 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 1 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
3072,0,0,0,0,0,0,0,
7168,0,3072,0,0,0,0,7168,
0,0,3072,3072,7168,3072,0,0,
7168,3072,3072,0,3072,3072,3072,0,
6656,6656,6656,6656,6656,6656,0,6656,
6656,6656,6656,6656,6656,6656,6656,6656,
0,6656,6656,6656,6656,6656,6656,0,
0,6656,6656,6656,6656,6656,0,0,
6656,6656,6656,6656,6656,6656,0,6656,
6656,6656,6656,6656,6656,6656,6656,6656,
0,6656,6656,6656,6656,6656,6656,0,
0,6656,6656,6656,6656,6656,0,6656,
/* Block: 2 */
6656,6656,6656,6656,6656,6656,6656,6656,
6656,6656,6656,6656,6656,6656,6656,6656,
0,0,6656,6656,6656,6656,6656,6656,
6656,6656,6656,6656,6656,6656,6656,6656,
6656,6656,6656,6656,6656,6656,0,0,
6656,6656,6656,6656,6656,6656,6656,6656,
6656,0,3072,3072,6656,6656,6656,6656,
0,6656,6656,6656,6656,6656,6656,3072,
3072,0,0,6656,6656,6656,6656,6656,
6656,3072,0,0,6656,6656,6656,6656,
6656,6656,0,0,6656,6656,6656,6656,
6656,6656,6656,6656,6656,6656,6656,6656,
6656,6656,6656,6656,6656,6656,0,0,
6656,6656,6656,6656,6656,6656,6656,6656,
6656,6656,6656,6656,6656,6656,6656,6656,
6656,6656,6656,6656,6656,6656,6656,3072,
/* Block: 3 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
6656,6656,0,0,0,0,0,0,
0,0,0,0,0,0,0,6656,
6656,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,7168,7168,7168,3072,
3072,3072,3072,3072,3072,6656,6656,6656,
6656,6656,6656,6656,6656,10752,10752,10752,
10752,10752,10752,10752,10752,0,10752,10752,
10752,10752,6656,6656,0,0,6656,6656,
6656,6656,6656,6656,10752,10752,6656,6656,
6656,3072,3072,3072,6656,6656,0,0,
6656,6656,10752,10752,6656,6656,6656,6656,
/* Block: 4 */
6656,6656,6656,6656,6656,6656,6656,6656,
6656,6656,6656,6656,6656,6656,6656,6656,
6656,6656,6656,6656,6656,6656,6656,6656,
6656,6656,6656,6656,0,0,6656,6656,
0,0,0,0,0,0,6656,6656,
6656,6656,10752,10752,10752,10752,6656,6656,
10752,10752,6656,6656,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 5 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
7168,7168,7168,7168,7168,7168,0,0,
3072,3072,3072,3072,3072,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 6 */
17894,17894,17894,17894,17894,16614,17894,17894,
17894,17894,17894,17894,17894,16614,16614,17894,
16614,17894,16614,17894,17894,16616,16604,16604,
16604,16604,16616,17880,16604,16604,16604,16604,
16604,16586,16586,17884,17884,17884,17884,17866,
17866,16604,16604,16604,16604,17884,17884,16604,
17884,17884,16604,16604,16385,16385,16385,16385,
17665,16604,16604,16604,16604,16614,16614,16614,
20454,20454,17894,20454,36838,17904,16614,16604,
16604,16604,16614,16614,16614,16604,16604,0,
16614,16614,16614,16604,16604,16604,16604,16614,
16616,16604,16604,16614,16617,16618,16618,16617,
16618,16618,16617,16614,16614,16614,16614,16614,
16614,16614,16614,16614,16614,16614,16614,16614,
0,0,0,0,3840,0,0,0,
0,0,7168,0,0,0,3840,0,
/* Block: 7 */
0,0,0,0,7168,11776,6656,3840,
6656,6656,6656,0,6656,0,6656,6656,
10752,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,6656,6656,6656,6656,6656,6656,
10752,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,6656,6656,6656,6656,6656,0,
3072,3072,3072,7680,7680,3072,3072,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
3072,3072,3072,0,3072,3072,0,0,
0,3072,0,0,0,0,0,0,
/* Block: 8 */
6656,6656,0,6656,0,0,0,6656,
0,0,0,0,6656,6656,6656,0,
0,0,0,0,0,0,0,0,
0,6656,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,6656,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
6656,6656,0,6656,0,0,0,6656,
0,0,0,0,6656,6656,6656,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,6656,6656,
0,0,0,0,0,0,0,0,
/* Block: 9 */
0,0,0,16614,16614,16614,16614,16614,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,6656,6656,0,0,0,0,0,
0,0,0,0,0,0,0,0,
6656,6656,6656,6656,0,0,6656,6656,
0,0,6656,6656,6656,6656,6656,6656,
0,0,6656,6656,6656,6656,6656,6656,
0,0,6656,6656,6656,6656,6656,6656,
6656,6656,6656,6656,6656,6656,0,0,
6656,6656,0,0,0,0,0,0,
/* Block: 10 */
0,0,0,0,0,0,0,3072,
0,0,0,0,0,0,0,0,
0,16604,16614,16614,16614,16614,16604,16614,
16614,16614,16606,16604,16614,16614,16614,16614,
16614,16614,16604,16604,16604,16604,16604,16604,
16614,16614,16604,16614,16614,16606,16612,16614,
16394,16395,16396,16397,16398,16399,16400,16401,
16402,16403,16403,16404,16405,16406,0,16407,
0,16408,16409,0,16614,16604,0,16402,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 11 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
16614,16614,16614,16614,16614,16614,16614,16614,
16414,16415,16416,0,0,0,0,0,
0,0,6656,6656,6656,6656,6656,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,16411,16412,16413,16414,16415,
16416,16417,16418,17894,17894,17884,16604,16614,
16614,16614,16614,16614,16604,16614,16614,16604,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
16419,0,0,0,0,3072,3072,3072,
3072,0,0,0,0,0,0,0,
/* Block: 12 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
6656,0,6656,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,6656,0,0,16614,16614,
16614,16614,16614,16614,16614,0,0,16614,
16614,16614,16614,16604,16614,0,0,16614,
16614,0,16604,16614,16614,16604,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 13 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,16420,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
16614,16604,16614,16614,16604,16614,16614,16604,
16604,16604,16614,16604,16604,16614,16604,16614,
16614,16614,16604,16614,16604,16614,16604,16614,
16604,16614,16614,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 14 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,16614,16614,16614,16614,16614,
16614,16614,16604,16614,0,0,0,0,
0,0,0,0,0,16604,0,0,
/* Block: 15 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,16614,16614,
16614,16614,0,16614,16614,16614,16614,16614,
16614,16614,16614,16614,0,16614,16614,16614,
0,16614,16614,16614,16614,16614,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,16604,16604,16604,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 16 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
16614,16604,16604,16604,16614,16614,16614,16614,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,16614,16614,16614,16614,16614,16604,
16604,16604,16604,16604,16614,16614,16614,16614,
16614,16614,16614,16614,16614,16614,16614,16614,
16614,16614,0,16604,16614,16614,16604,16614,
16614,16604,16614,16614,16614,16604,16604,16604,
16411,16412,16413,16614,16614,16614,16604,16614,
16614,16604,16604,16614,16614,16614,16614,16614,
/* Block: 17 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,6656,0,0,0,0,0,0,
0,6656,0,0,6656,0,0,0,
0,0,0,0,17671,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,16393,0,0,
0,16614,16604,16614,16614,0,0,0,
7936,7936,7936,7936,7936,7936,7936,7936,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 18 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,16391,0,1280,0,
0,0,0,0,0,0,0,0,
0,0,0,2560,2560,16393,0,0,
0,0,0,0,0,0,0,1280,
0,0,0,0,7936,7936,0,7936,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,16614,0,
/* Block: 19 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,7936,0,0,7936,0,
0,0,0,0,16391,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,16393,0,0,
0,0,0,0,0,0,0,0,
0,7936,7936,7936,0,0,7936,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 20 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,16391,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,16393,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 21 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,16391,0,1280,0,
0,0,0,0,0,0,0,0,
2560,0,0,2560,2560,16393,0,0,
0,0,0,0,0,0,1280,1280,
0,0,0,0,7936,7936,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 22 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,2560,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,1280,0,
0,0,0,0,0,0,0,0,
0,0,2560,2560,2560,16393,0,0,
0,0,0,0,0,0,0,1280,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 23 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,16391,0,0,0,
0,0,0,0,0,0,0,0,
6656,0,0,0,0,16393,0,0,
0,0,0,0,0,16468,17755,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 24 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,16391,0,0,0,
2560,0,1280,0,0,0,0,2560,
2560,0,2560,2560,0,16393,0,0,
0,0,0,0,0,1280,1280,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 25 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,16393,16393,0,1280,0,
0,0,0,0,0,0,0,0,
0,0,2560,2560,2560,16393,0,0,
0,0,0,0,0,0,0,1280,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 26 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,17673,0,0,0,0,1280,
0,0,0,0,0,0,0,0,
0,0,6656,0,2560,6656,2560,1280,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 27 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,3072,0,0,0,0,
16487,16487,16393,0,0,0,0,0,
0,0,0,0,0,0,0,0,
16491,16491,16491,16491,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 28 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,3072,0,0,0,0,
16502,16502,16393,0,0,0,0,0,
0,0,0,0,0,0,0,0,
16506,16506,16506,16506,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,3072,3072,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 29 */
0,0,0,0,0,0,0,0,
0,0,0,0,3072,0,0,0,
0,0,0,0,0,0,0,0,
16604,16604,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,16604,0,16604,
0,16600,0,0,0,0,0,0,
0,0,0,3840,0,0,0,0,
0,0,0,0,0,3840,0,0,
0,0,3840,0,0,0,0,3840,
0,0,0,0,3840,0,0,0,
0,0,0,0,0,0,0,0,
0,3840,0,0,0,0,0,0,
0,16513,16514,36608,16516,36608,7936,11264,
7936,11264,16514,16514,16514,16514,0,0,
/* Block: 30 */
16514,36608,16614,16614,16393,0,16614,16614,
0,0,0,0,0,0,0,0,
0,0,0,3840,0,0,0,0,
0,0,0,0,0,3840,0,0,
0,0,3840,0,0,0,0,3840,
0,0,0,0,3840,0,0,0,
0,0,0,0,0,0,0,0,
0,3840,0,0,0,0,0,0,
0,0,0,0,0,0,16604,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 31 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,2560,0,
0,0,0,0,0,0,1280,0,
0,0,0,0,0,0,0,16391,
0,16393,16393,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 32 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,16604,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,3072,0,0,0,
/* Block: 33 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,1280,1280,1280,1280,1280,1280,1280,
1280,1280,1280,1280,1280,1280,1280,1280,
1280,1280,1280,1280,1280,1280,0,0,
0,0,0,0,0,0,0,0,
/* Block: 34 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
1280,1280,1280,1280,1280,1280,1280,1280,
1280,1280,1280,1280,1280,1280,1280,1280,
1280,1280,1280,1280,1280,1280,1280,1280,
1280,1280,1280,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 35 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,16614,16614,16614,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 36 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,16393,16393,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,16393,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 37 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,16393,0,0,0,0,0,
0,0,0,0,0,16614,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 38 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,16612,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 39 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,16606,16614,16604,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 40 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,16614,
16604,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
16393,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,16614,16614,16614,
16614,16614,16614,16614,16614,0,0,16604,
/* Block: 41 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
16614,16614,16614,16614,16614,16604,16604,16604,
16604,16604,16604,16614,16614,16604,0,16604,
16604,16614,16614,16604,16604,16614,16614,16614,
16614,16614,16604,16614,16614,16614,16614,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 42 */
0,0,0,0,0,0,2560,0,
2560,0,2560,0,2560,0,2560,0,
0,0,2560,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,16391,1280,0,0,
0,0,0,2560,0,2560,0,0,
2560,2560,0,2560,16393,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,16614,16604,16614,16614,16614,
16614,16614,16614,16614,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 43 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,16393,16393,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,16391,0,
0,0,0,0,0,0,0,0,
0,0,16393,16393,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 44 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,16391,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 45 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
16614,16614,16614,0,16385,16604,16604,16604,
16604,16604,16614,16614,16604,16604,16604,16604,
16614,0,16385,16385,16385,16385,16385,16385,
16385,0,0,0,0,16604,0,0,
0,0,0,0,16614,0,0,0,
16614,16614,0,0,0,0,0,0,
/* Block: 46 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,3072,3072,3072,0,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,0,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,0,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,0,0,0,0,0,
0,0,0,0,0,0,0,0,
3072,0,0,0,0,0,0,0,
/* Block: 47 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
16614,16614,16604,16614,16614,16614,16614,16614,
16614,16614,16604,16614,16614,16618,16598,16604,
16586,16614,16614,16614,16614,16614,16614,16614,
16614,16614,16614,16614,16614,16614,16614,16614,
16614,16614,16614,16614,16614,16614,16614,16614,
16614,16614,16614,16614,16614,16614,16614,16614,
16614,16614,16614,16614,16614,16614,16616,16612,
16612,16604,16602,16614,16617,16604,16614,16604,
/* Block: 48 */
6656,6656,6656,6656,6656,6656,6656,6656,
10752,10752,6656,6656,6656,6656,6656,6656,
6656,6656,6656,6656,10752,10752,10752,10752,
6656,6656,6656,6656,10752,10752,6656,6656,
6656,6656,6656,6656,6656,6656,6656,6656,
6656,6656,6656,6656,6656,6656,10752,10752,
6656,6656,6656,6656,6656,6656,6656,6656,
10752,10752,6656,6656,6656,6656,6656,6656,
6656,6656,6656,6656,6656,6656,6656,6656,
6656,6656,6656,6656,10752,10752,10752,10752,
10752,10752,10752,10752,6656,6656,6656,6656,
6656,6656,6656,6656,10752,10752,6656,6656,
6656,6656,6656,6656,10752,10752,10752,10752,
10752,10752,6656,6656,6656,6656,6656,6656,
6656,6656,6656,6656,6656,6656,6656,6656,
10752,10752,10752,10752,6656,6656,6656,6656,
/* Block: 49 */
6656,6656,6656,6656,6656,6656,6656,6656,
6656,6656,6656,6656,6656,6656,6656,6656,
6656,6656,6656,6656,6656,6656,6656,6656,
6656,6656,3072,7680,0,0,0,0,
6656,6656,6656,6656,10752,10752,10752,10752,
10752,10752,10752,10752,10752,10752,10752,10752,
10752,10752,10752,10752,10752,10752,10752,10752,
6656,6656,6656,6656,6656,6656,10752,10752,
10752,10752,10752,10752,10752,10752,10752,10752,
6656,6656,6656,6656,6656,6656,6656,6656,
10752,10752,10752,10752,10752,10752,10752,10752,
10752,10752,10752,10752,10752,10752,10752,10752,
10752,10752,10752,10752,6656,6656,6656,6656,
10752,10752,10752,10752,10752,10752,10752,10752,
10752,10752,6656,6656,6656,6656,6656,6656,
6656,6656,0,0,0,0,0,0,
/* Block: 50 */
6656,6656,10752,10752,10752,10752,10752,10752,
6656,6656,10752,10752,10752,10752,10752,10752,
6656,6656,10752,10752,10752,10752,0,0,
6656,6656,10752,10752,10752,10752,0,0,
6656,6656,10752,10752,10752,10752,10752,10752,
6656,6656,10752,10752,10752,10752,10752,10752,
6656,6656,10752,10752,10752,10752,10752,10752,
6656,6656,10752,10752,10752,10752,10752,10752,
6656,6656,10752,10752,10752,10752,0,0,
6656,6656,10752,10752,10752,10752,0,0,
6656,6656,10752,10752,10752,10752,10752,10752,
0,6656,0,10752,0,10752,0,10752,
6656,6656,10752,10752,10752,10752,10752,10752,
6656,6656,10752,10752,10752,10752,10752,10752,
6656,7936,6656,7936,6656,7936,6656,7936,
6656,7936,6656,7936,6656,7936,0,0,
/* Block: 51 */
10752,10752,14848,14848,14848,14848,14848,14848,
10752,10752,14848,14848,14848,14848,14848,14848,
10752,10752,14848,14848,14848,14848,14848,14848,
10752,10752,14848,14848,14848,14848,14848,14848,
10752,10752,14848,14848,14848,14848,14848,14848,
10752,10752,14848,14848,14848,14848,14848,14848,
6656,6656,10752,6656,10752,0,6656,10752,
6656,6656,6656,7936,6656,7168,3840,7168,
7168,11776,10752,6656,10752,0,6656,10752,
6656,7936,6656,7936,6656,11776,11776,11776,
6656,6656,10752,12032,0,0,6656,10752,
6656,6656,6656,7936,0,11776,11776,11776,
6656,6656,10752,12032,6656,6656,6656,10752,
6656,6656,6656,7936,6656,11776,12032,3840,
0,0,10752,6656,10752,0,6656,10752,
6656,7936,6656,7936,6656,7936,7168,0,
/* Block: 52 */
3840,3840,3072,3072,3072,3072,3072,3072,
3072,3072,3072,0,0,0,0,0,
0,3072,0,0,0,0,0,7168,
0,0,0,0,0,0,0,0,
0,0,0,0,3072,3072,3072,0,
0,0,0,0,0,0,0,3072,
0,0,0,3072,3072,0,3072,3072,
0,0,0,0,3072,0,7168,0,
0,0,0,0,0,0,0,3072,
3072,3072,0,0,0,0,0,0,
0,0,0,0,0,0,0,3072,
0,0,0,0,0,0,0,3072,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
3072,3072,0,0,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
/* Block: 53 */
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,0,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,0,0,0,
0,0,0,0,0,0,0,0,
3072,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
16614,16614,16385,16385,16614,16614,16614,16614,
16385,16385,16385,16614,16614,0,0,0,
0,16614,0,0,0,16385,16385,16614,
16604,16614,16385,16385,16604,16604,16604,16604,
16614,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 54 */
3072,3072,3072,3072,0,3072,3072,3072,
0,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,0,3072,3072,0,
0,3072,3072,3072,3072,3072,0,0,
3072,3072,3072,0,3072,0,3840,0,
3072,0,3840,7936,3072,3072,0,3072,
3072,3072,0,3072,3072,3072,3072,3072,
3072,3072,0,3072,3072,3072,3072,3072,
3072,0,0,0,0,3072,3072,3072,
3072,3072,0,0,0,0,0,0,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
/* Block: 55 */
0,0,0,0,0,0,0,0,
0,3072,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,6656,6656,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,6656,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,6656,6656,6656,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 56 */
0,0,0,0,6656,0,0,0,
0,6656,0,0,6656,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,6656,0,6656,0,
0,0,0,0,3072,3072,0,3072,
3072,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,6656,0,0,6656,0,0,6656,
0,6656,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
6656,0,6656,0,0,0,0,0,
0,0,0,0,0,6656,6656,6656,
6656,6656,0,0,6656,6656,0,0,
6656,6656,0,0,0,0,0,0,
/* Block: 57 */
6656,6656,0,0,6656,6656,0,0,
6656,6656,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,6656,6656,6656,6656,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
6656,6656,6656,6656,0,0,0,0,
0,0,6656,6656,6656,6656,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 58 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,3840,3840,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 59 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
/* Block: 60 */
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 61 */
0,0,0,0,0,0,0,0,
0,0,0,0,3072,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,3072,3072,3072,0,
0,0,0,0,0,0,0,0,
/* Block: 62 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,7936,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 63 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,3072,3072,0,0,
/* Block: 64 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,16614,
16614,16614,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 65 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,3072,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,16393,
/* Block: 66 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
16614,16614,16614,16614,16614,16614,16614,16614,
16614,16614,16614,16614,16614,16614,16614,16614,
16614,16614,16614,16614,16614,16614,16614,16614,
16614,16614,16614,16614,16614,16614,16614,16614,
/* Block: 67 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,3072,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,3072,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 68 */
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
/* Block: 69 */
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 70 */
3072,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,16602,16612,16616,16606,16608,16608,
0,0,0,0,0,0,3072,0,
3072,3072,3072,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,6656,0,6656,0,
6656,0,6656,0,6656,0,6656,0,
6656,0,6656,0,6656,0,6656,0,
6656,0,6656,0,0,6656,0,6656,
0,6656,0,0,0,0,0,0,
6656,6656,0,6656,6656,0,6656,6656,
0,6656,6656,0,6656,6656,0,0,
/* Block: 71 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,6656,0,0,0,
0,17672,17672,7168,7168,0,6656,3072,
0,0,0,0,0,0,0,0,
0,0,0,0,6656,0,6656,0,
6656,0,6656,0,6656,0,6656,0,
6656,0,6656,0,6656,0,6656,0,
6656,0,6656,0,0,6656,0,6656,
0,6656,0,0,0,0,0,0,
6656,6656,0,6656,6656,0,6656,6656,
0,6656,6656,0,6656,6656,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,6656,0,0,6656,
6656,6656,6656,0,0,0,6656,3072,
/* Block: 72 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
/* Block: 73 */
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,0,
0,0,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 74 */
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,0,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
0,0,0,0,0,0,0,0,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,0,
/* Block: 75 */
3072,3072,3072,3072,7168,3072,3072,7168,
3072,3072,3072,3072,3072,3072,3072,3072,
7168,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,7168,3072,
3072,7168,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,7168,3072,3072,3072,3072,3072,
3072,3072,3072,7168,3072,3072,3072,3072,
7168,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,7168,3072,3072,7168,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
/* Block: 76 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,16614,
0,0,0,0,16614,16614,16614,16614,
16614,16614,16614,16614,16614,16614,0,0,
/* Block: 77 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,3072,3072,16614,16614,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
16614,16614,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 78 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
3072,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 79 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,3072,3072,3072,0,0,0,
3072,3072,0,0,0,0,0,0,
/* Block: 80 */
0,0,0,0,0,0,16393,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,16393,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 81 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,16393,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
16614,16614,16614,16614,16614,16614,16614,16614,
16614,16614,16614,16614,16614,16614,16614,16614,
16614,16614,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 82 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,16604,16604,16604,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,16393,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 83 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,16391,0,0,0,0,
0,0,0,0,0,0,0,0,
16393,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 84 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
16614,0,16614,16614,16604,0,0,16614,
16614,0,0,0,0,0,16614,16614,
0,16614,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,16393,0,
0,0,0,0,0,0,0,0,
/* Block: 85 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,3072,3072,3072,3072,
0,0,0,0,0,0,0,0,
0,3072,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 86 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,16393,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 87 */
2560,2560,2560,2560,2560,2560,2560,2560,
2560,2560,2560,2560,2560,2560,2560,2560,
2560,2560,2560,2560,2560,2560,2560,2560,
2560,2560,2560,2560,2560,2560,2560,2560,
2560,2560,2560,2560,2560,2560,2560,2560,
2560,2560,2560,2560,2560,2560,2560,2560,
2560,2560,2560,2560,2560,2560,2560,2560,
2560,2560,2560,2560,2560,2560,2560,2560,
2560,2560,2560,2560,2560,2560,2560,2560,
2560,2560,2560,2560,2560,2560,2560,2560,
2560,2560,2560,2560,2560,2560,2560,2560,
2560,2560,2560,2560,2560,2560,2560,2560,
2560,2560,2560,2560,2560,2560,2560,2560,
2560,2560,2560,2560,2560,2560,2560,2560,
2560,2560,2560,2560,2560,2560,2560,2560,
2560,2560,2560,2560,2560,2560,2560,2560,
/* Block: 88 */
2560,2560,2560,2560,2560,2560,2560,2560,
2560,2560,2560,2560,2560,2560,2560,2560,
2560,2560,2560,2560,2560,2560,2560,2560,
2560,2560,2560,2560,2560,2560,2560,2560,
2560,2560,2560,2560,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 89 */
3840,3840,3840,3840,3840,3840,3840,3840,
3840,3840,3840,3840,3840,3840,3840,3840,
3840,3840,3840,3840,3840,3840,3840,3840,
3840,3840,3840,3840,3840,3840,3840,3840,
3840,3840,3840,3840,3840,3840,3840,3840,
3840,3840,3840,3840,3840,3840,3840,3840,
3840,3840,3840,3840,3840,3840,3840,3840,
3840,3840,3840,3840,3840,3840,3840,3840,
3840,3840,3840,3840,3840,3840,3840,3840,
3840,3840,3840,3840,3840,3840,3840,3840,
3840,3840,3840,3840,3840,3840,3840,3840,
3840,3840,3840,3840,3840,3840,3840,3840,
3840,3840,3840,3840,3840,3840,3840,3840,
3840,3840,3840,3840,3840,3840,3840,3840,
3840,3840,3840,3840,3840,3840,3840,3840,
3840,3840,3840,3840,3840,3840,3840,3840,
/* Block: 90 */
3840,3840,3840,3840,3840,3840,3840,3840,
3840,3840,3840,3840,3840,3840,0,0,
3840,0,3840,0,0,3840,3840,3840,
3840,3840,3840,3840,3840,3840,3840,0,
3840,0,3840,0,0,3840,3840,0,
0,0,3840,3840,3840,3840,3840,3840,
3840,3840,3840,3840,3840,3840,3840,3840,
3840,3840,3840,3840,3840,3840,3840,3840,
3840,3840,3840,3840,3840,3840,3840,3840,
3840,3840,3840,3840,3840,3840,3840,3840,
3840,3840,3840,3840,3840,3840,3840,3840,
3840,3840,3840,3840,3840,3840,3840,3840,
3840,3840,3840,3840,3840,3840,3840,3840,
3840,3840,3840,3840,3840,3840,0,0,
3840,3840,3840,3840,3840,3840,3840,3840,
3840,3840,3840,3840,3840,3840,3840,3840,
/* Block: 91 */
3840,3840,3840,3840,3840,3840,3840,3840,
3840,3840,3840,3840,3840,3840,3840,3840,
3840,3840,3840,3840,3840,3840,3840,3840,
3840,3840,3840,3840,3840,3840,3840,3840,
3840,3840,3840,3840,3840,3840,3840,3840,
3840,3840,3840,3840,3840,3840,3840,3840,
3840,3840,3840,3840,3840,3840,3840,3840,
3840,3840,3840,3840,3840,3840,3840,3840,
3840,3840,3840,3840,3840,3840,3840,3840,
3840,3840,3840,3840,3840,3840,3840,3840,
3840,3840,3840,3840,3840,3840,3840,3840,
3840,3840,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 92 */
3072,3072,3072,3072,3072,3072,3072,0,
0,0,0,0,0,0,0,0,
0,0,0,3072,3072,3072,3072,3072,
0,0,0,0,0,7936,16410,7936,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,7936,7936,12032,12032,7936,7936,
7936,7936,7936,7936,7936,7936,7936,0,
7936,7936,7936,7936,7936,0,7936,0,
7936,7936,0,7936,7936,0,7936,7936,
7936,7936,7936,7936,7936,7936,7936,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
/* Block: 93 */
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,7168,7168,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
7168,7168,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
/* Block: 94 */
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,7168,7168,7168,11264,11264,
11264,11264,11264,11264,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
/* Block: 95 */
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
7168,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,7168,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,11264,11264,11264,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
/* Block: 96 */
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,7168,7168,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
/* Block: 97 */
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
0,0,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,0,0,0,
/* Block: 98 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,0,0,0,0,0,0,
16614,16614,16614,16614,16614,16614,16614,16604,
16604,16604,16604,16604,16604,16604,16614,16614,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,0,0,3072,
3072,7168,7168,7168,7168,3072,3072,3072,
3072,3072,3072,0,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,0,
3072,3072,3072,3072,0,0,0,0,
7168,7168,7168,0,7168,0,7168,7168,
7168,7168,7168,7168,7168,7168,7168,7168,
/* Block: 99 */
3072,7168,7168,7168,7168,7168,7168,7168,
7168,7168,7168,7168,7168,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,7168,7168,7168,
7168,7168,7168,3072,3072,0,0,0,
/* Block: 100 */
0,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
/* Block: 101 */
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,19456,19456,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,0,
0,0,3072,3072,3072,3072,3072,3072,
0,0,3072,3072,3072,3072,3072,3072,
0,0,3072,3072,3072,3072,3072,3072,
0,0,3072,3072,3072,0,0,0,
3072,3072,3072,7168,3072,3072,3072,0,
3072,3072,3072,3072,3072,3072,3072,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 102 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,16604,0,0,
/* Block: 103 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
16604,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 104 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,16614,16614,
16614,16614,16614,0,0,0,0,0,
/* Block: 105 */
0,3072,3072,3072,3072,3072,0,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,0,3072,3072,3072,3072,3072,3072,
3072,3072,3072,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 106 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,16604,0,16614,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
16614,16385,16604,0,0,0,0,16393,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 107 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,16614,16604,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 108 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,16614,16614,16614,16614,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 109 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,16614,16614,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,16604,16604,16604,
/* Block: 110 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,16604,16604,
16614,16614,16614,16604,16614,16604,16604,16604,
16604,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 111 */
0,0,16614,16604,16614,16604,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 112 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,16393,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
16393,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,16393,
/* Block: 113 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,6656,0,6656,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,6656,0,0,0,0,
0,0,0,0,0,0,0,0,
0,16393,17671,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 114 */
16614,16614,16614,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,1280,
0,0,0,0,0,0,2560,2560,
0,0,0,16393,16393,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,16391,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 115 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
16393,0,0,0,0,0,0,0,
0,0,16391,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 116 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,16393,16391,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 117 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,16391,16393,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 118 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,16391,16391,0,1280,0,
0,0,0,0,0,0,0,0,
0,0,0,2560,2560,16393,0,0,
0,0,0,0,0,0,0,1280,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,16614,16614,
16614,16614,16614,16614,16614,0,0,0,
16614,16614,16614,16614,16614,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 119 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,16393,0,0,0,16391,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,16614,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 120 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
1280,0,0,0,0,0,0,0,
0,0,1280,2560,2560,1280,2560,0,
0,0,16393,16391,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 121 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,1280,
0,0,0,0,0,0,0,0,
0,0,2560,2560,0,0,0,16393,
16391,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 122 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,16393,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 123 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,16393,16391,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 124 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,16393,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 125 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,16393,16391,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 126 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
1280,0,0,0,0,0,0,0,
2560,0,0,0,0,16393,16393,0,
0,0,0,16391,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 127 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
16393,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 128 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,16393,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,16393,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 129 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,16393,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 130 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,16391,0,16393,16393,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 131 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,16393,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 132 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,16393,16393,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 133 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
16385,16385,16385,16385,16385,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 134 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
16614,16614,16614,16614,16614,16614,16614,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 135 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
16390,16390,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 136 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,16385,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 137 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,7936,7936,
12032,12032,12032,12032,12032,16600,16600,16385,
16385,16385,0,0,0,16610,16600,16600,
16600,16600,16600,0,0,0,0,0,
0,0,0,16604,16604,16604,16604,16604,
/* Block: 138 */
16604,16604,16604,0,0,16614,16614,16614,
16614,16614,16604,16604,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,16614,16614,16614,16614,0,0,
0,0,0,0,0,0,0,0,
0,0,0,7936,7936,12032,12032,12032,
12032,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 139 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,16614,16614,16614,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 140 */
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,0,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
/* Block: 141 */
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,0,3072,3072,
0,0,3072,0,0,3072,3072,0,
0,3072,3072,3072,3072,0,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,0,3072,0,3072,3072,3072,
3072,3072,3072,3072,0,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
/* Block: 142 */
3072,3072,3072,3072,3072,3072,0,3072,
3072,3072,3072,0,0,3072,3072,3072,
3072,3072,3072,3072,3072,0,3072,3072,
3072,3072,3072,3072,3072,0,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,0,3072,3072,3072,3072,0,
3072,3072,3072,3072,3072,0,3072,0,
0,0,3072,3072,3072,3072,3072,3072,
3072,0,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
/* Block: 143 */
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,0,0,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
/* Block: 144 */
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,0,0,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
/* Block: 145 */
16614,16614,16614,16614,16614,16614,16614,0,
16614,16614,16614,16614,16614,16614,16614,16614,
16614,16614,16614,16614,16614,16614,16614,16614,
16614,0,0,16614,16614,16614,16614,16614,
16614,16614,0,16614,16614,0,16614,16614,
16614,16614,16614,0,0,0,0,0,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 146 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,16614,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 147 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,16614,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,16614,16614,16614,16614,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 148 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,16616,16616,16604,16614,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 149 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
16604,16604,16604,16604,16604,16604,16604,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 150 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,16614,16614,16614,16614,
16614,16614,16391,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 151 */
3072,3072,3072,3072,0,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
0,3072,3072,0,3072,0,0,3072,
0,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,0,3072,3072,3072,3072,
0,3072,0,3072,0,0,0,0,
0,0,3072,0,0,0,0,3072,
0,3072,0,3072,0,3072,3072,3072,
0,3072,3072,0,3072,0,0,3072,
0,3072,0,3072,0,3072,0,3072,
0,3072,3072,0,3072,0,0,3072,
3072,3072,3072,0,3072,3072,3072,3072,
3072,3072,3072,0,3072,3072,3072,3072,
0,3072,3072,3072,3072,0,3072,0,
/* Block: 152 */
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,0,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,0,0,0,0,
0,3072,3072,3072,0,3072,3072,3072,
3072,3072,0,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 153 */
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,0,0,0,0,0,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,0,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,3072,3072,3072,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 154 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
3072,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 155 */
3072,3072,3072,0,0,0,0,0,
0,0,0,0,0,0,0,0,
3072,3072,3072,7168,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,3072,3072,0,0,0,0,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,0,0,0,0,0,0,0,
3072,3072,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 156 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
3072,3072,3072,3072,3072,3072,3072,3072,
3072,3072,0,0,0,0,0,0,
/* Block: 157 */
3840,3840,3840,3840,3840,3840,3840,3840,
3840,3840,3840,3840,3840,3840,3840,3840,
3840,3840,3840,3840,3840,3840,3840,3840,
3840,3840,3840,3840,3840,3840,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0};

uaix_const_data uaix_data_array(unsigned char, stage1_decomp_nfd, 8704) = {
0,1,2,3,4,0,5,6,
7,8,0,0,9,10,0,0,
0,0,11,12,13,0,14,15,
16,17,18,19,0,0,20,21,
22,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,23,0,
0,0,0,0,24,25,26,27,
28,0,29,30,31,32,33,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,34,0,0,
0,0,0,0,0,0,0,0,
35,36,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,37,38,39,40,41,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,42,43,0,0,0,44,0,
0,45,0,46,0,0,0,0,
0,0,47,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,48,49,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
50,51,52,53,54,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0};

uaix_const_data uaix_data_array(unsigned short, stage2_decomp_nfd, 7040) = {
/* Block: 0 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 1 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
1,4,7,10,13,16,0,19,
22,25,28,31,34,37,40,43,
0,46,49,52,55,58,61,0,
0,64,67,70,73,76,0,0,
79,82,85,88,91,94,0,97,
100,103,106,109,112,115,118,121,
0,124,127,130,133,136,139,0,
0,142,145,148,151,154,0,157,
/* Block: 2 */
160,163,166,169,172,175,178,181,
184,187,190,193,196,199,202,205,
0,0,208,211,214,217,220,223,
226,229,232,235,238,241,244,247,
250,253,256,259,262,265,0,0,
268,271,274,277,280,283,286,289,
292,0,0,0,295,298,301,304,
0,307,310,313,316,319,322,0,
0,0,0,325,328,331,334,337,
340,0,0,0,343,346,349,352,
355,358,0,0,361,364,367,370,
373,376,379,382,385,388,391,394,
397,400,403,406,409,412,0,0,
415,418,421,424,427,430,433,436,
439,442,445,448,451,454,457,460,
463,466,469,472,475,478,481,0,
/* Block: 3 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
484,487,0,0,0,0,0,0,
0,0,0,0,0,0,0,490,
493,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,496,499,502,
505,508,511,514,517,520,524,528,
532,536,540,544,548,0,552,556,
560,564,568,571,0,0,574,577,
580,583,586,589,592,596,600,603,
606,0,0,0,609,612,0,0,
615,618,621,625,629,632,635,638,
/* Block: 4 */
641,644,647,650,653,656,659,662,
665,668,671,674,677,680,683,686,
689,692,695,698,701,704,707,710,
713,716,719,722,0,0,725,728,
0,0,0,0,0,0,731,734,
737,740,743,747,751,755,759,762,
765,769,773,776,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 5 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
779,781,0,783,785,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,788,0,0,0,
0,0,0,0,0,0,790,0,
/* Block: 6 */
0,0,0,0,0,792,795,798,
800,803,806,0,809,0,812,815,
818,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,822,825,828,831,834,837,
840,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,844,847,850,853,856,0,
0,0,0,859,862,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 7 */
865,868,0,871,0,0,0,874,
0,0,0,0,877,880,883,0,
0,0,0,0,0,0,0,0,
0,886,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,889,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
892,895,0,898,0,0,0,901,
0,0,0,0,904,907,910,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,913,916,
0,0,0,0,0,0,0,0,
/* Block: 8 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,919,922,0,0,0,0,0,
0,0,0,0,0,0,0,0,
925,928,931,934,0,0,937,940,
0,0,943,946,949,952,955,958,
0,0,961,964,967,970,973,976,
0,0,979,982,985,988,991,994,
997,1000,1003,1006,1009,1012,0,0,
1015,1018,0,0,0,0,0,0,
/* Block: 9 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,1021,1024,1027,1030,1033,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 10 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
1036,0,1039,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,1042,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 11 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,1045,0,0,0,0,0,0,
0,1048,0,0,1051,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
1054,1057,1060,1063,1066,1069,1072,1075,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 12 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,1078,1081,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,1084,1087,0,1090,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 13 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,1093,0,0,1096,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,1099,1102,1105,0,0,1108,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 14 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
1111,0,0,1114,1117,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,1120,1123,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 15 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,1126,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,1129,1132,1135,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 16 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
1138,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 17 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
1141,0,0,0,0,0,0,1144,
1147,0,1150,1153,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 18 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,1157,1160,1163,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 19 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,1166,0,1169,1172,1176,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 20 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,1179,0,0,0,0,
0,0,0,0,0,1182,0,0,
0,0,1185,0,0,0,0,1188,
0,0,0,0,1191,0,0,0,
0,0,0,0,0,0,0,0,
0,1194,0,0,0,0,0,0,
0,0,0,1197,0,1200,1203,0,
1206,0,0,0,0,0,0,0,
/* Block: 21 */
0,1209,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,1212,0,0,0,0,
0,0,0,0,0,1215,0,0,
0,0,1218,0,0,0,0,1221,
0,0,0,0,1224,0,0,0,
0,0,0,0,0,0,0,0,
0,1227,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 22 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,1230,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 23 */
0,0,0,0,0,0,1233,0,
1236,0,1239,0,1242,0,1245,0,
0,0,1248,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,1251,0,1254,0,0,
1257,1260,0,1263,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 24 */
1266,1269,1272,1275,1278,1281,1284,1287,
1290,1294,1298,1301,1304,1307,1310,1313,
1316,1319,1322,1325,1328,1332,1336,1340,
1344,1347,1350,1353,1356,1360,1364,1367,
1370,1373,1376,1379,1382,1385,1388,1391,
1394,1397,1400,1403,1406,1409,1412,1416,
1420,1423,1426,1429,1432,1435,1438,1441,
1444,1448,1452,1455,1458,1461,1464,1467,
1470,1473,1476,1479,1482,1485,1488,1491,
1494,1497,1500,1503,1506,1510,1514,1518,
1522,1526,1530,1534,1538,1541,1544,1547,
1550,1553,1556,1559,1562,1566,1570,1573,
1576,1579,1582,1585,1588,1592,1596,1600,
1604,1608,1612,1615,1618,1621,1624,1627,
1630,1633,1636,1639,1642,1645,1648,1651,
1654,1658,1662,1666,1670,1673,1676,1679,
/* Block: 25 */
1682,1685,1688,1691,1694,1697,1700,1703,
1706,1709,1712,1715,1718,1721,1724,1727,
1730,1733,1736,1739,1742,1745,1748,1751,
1754,1757,0,1760,0,0,0,0,
1763,1766,1769,1772,1775,1779,1783,1787,
1791,1795,1799,1803,1807,1811,1815,1819,
1823,1827,1831,1835,1839,1843,1847,1851,
1855,1858,1861,1864,1867,1870,1873,1877,
1881,1885,1889,1893,1897,1901,1905,1909,
1913,1916,1919,1922,1925,1928,1931,1934,
1937,1941,1945,1949,1953,1957,1961,1965,
1969,1973,1977,1981,1985,1989,1993,1997,
2001,2005,2009,2013,2017,2020,2023,2026,
2029,2033,2037,2041,2045,2049,2053,2057,
2061,2065,2069,2072,2075,2078,2081,2084,
2087,2090,0,0,0,0,0,0,
/* Block: 26 */
2093,2096,2099,2103,2107,2111,2115,2119,
2123,2126,2129,2133,2137,2141,2145,2149,
2153,2156,2159,2163,2167,2171,0,0,
2175,2178,2181,2185,2189,2193,0,0,
2197,2200,2203,2207,2211,2215,2219,2223,
2227,2230,2233,2237,2241,2245,2249,2253,
2257,2260,2263,2267,2271,2275,2279,2283,
2287,2290,2293,2297,2301,2305,2309,2313,
2317,2320,2323,2327,2331,2335,0,0,
2339,2342,2345,2349,2353,2357,0,0,
2361,2364,2367,2371,2375,2379,2383,2387,
0,2391,0,2394,0,2398,0,2402,
2406,2409,2412,2416,2420,2424,2428,2432,
2436,2439,2442,2446,2450,2454,2458,2462,
2466,2469,2472,2475,2478,2481,2484,2487,
2490,2493,2496,2499,2502,2505,0,0,
/* Block: 27 */
2508,2512,2516,2521,2526,2531,2536,2541,
2546,2550,2554,2559,2564,2569,2574,2579,
2584,2588,2592,2597,2602,2607,2612,2617,
2622,2626,2630,2635,2640,2645,2650,2655,
2660,2664,2668,2673,2678,2683,2688,2693,
2698,2702,2706,2711,2716,2721,2726,2731,
2736,2739,2742,2746,2749,0,2753,2756,
2760,2763,2766,2769,2772,0,2775,0,
0,2777,2780,2784,2787,0,2791,2794,
2798,2801,2804,2807,2810,2813,2816,2819,
2822,2825,2828,2832,0,0,2836,2839,
2843,2846,2849,2852,0,2855,2858,2861,
2864,2867,2870,2874,2878,2881,2884,2887,
2891,2894,2897,2900,2903,2906,2909,2912,
0,0,2914,2918,2921,0,2925,2928,
2932,2935,2938,2941,2944,2947,0,0,
/* Block: 28 */
2949,2951,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 29 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,2953,0,
0,0,2955,2957,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 30 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,2960,2963,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,2966,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,2969,2972,2975,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 31 */
0,0,0,0,2978,0,0,0,
0,2981,0,0,2984,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,2987,0,2990,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,2993,0,0,2996,0,0,2999,
0,3002,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
3005,0,3008,0,0,0,0,0,
0,0,0,0,0,3011,3014,3017,
3020,3023,0,0,3026,3029,0,0,
3032,3035,0,0,0,0,0,0,
/* Block: 32 */
3038,3041,0,0,3044,3047,0,0,
3050,3053,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,3056,3059,3062,3065,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
3068,3071,3074,3077,0,0,0,0,
0,0,3080,3083,3086,3089,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 33 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,3092,3094,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 34 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,3096,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 35 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,3099,0,3102,0,
3105,0,3108,0,3111,0,3114,0,
3117,0,3120,0,3123,0,3126,0,
3129,0,3132,0,0,3135,0,3138,
0,3141,0,0,0,0,0,0,
3144,3147,0,3150,3153,0,3156,3159,
0,3162,3165,0,3168,3171,0,0,
/* Block: 36 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,3174,0,0,0,
0,0,0,0,0,0,3177,0,
0,0,0,0,0,0,0,0,
0,0,0,0,3180,0,3183,0,
3186,0,3189,0,3192,0,3195,0,
3198,0,3201,0,3204,0,3207,0,
3210,0,3213,0,0,3216,0,3219,
0,3222,0,0,0,0,0,0,
3225,3228,0,3231,3234,0,3237,3240,
0,3243,3246,0,3249,3252,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,3255,0,0,3258,
3261,3264,3267,0,0,0,3270,0,
/* Block: 37 */
3273,3275,3277,3279,3281,3283,3285,3287,
3289,3291,3293,3295,3297,3299,3301,3303,
3305,3307,3309,3311,3313,3315,3317,3319,
3321,3323,3325,3327,3329,3331,3333,3335,
3337,3339,3341,3343,3345,3347,3349,3351,
3353,3355,3357,3359,3361,3363,3365,3367,
3369,3371,3373,3375,3377,3379,3381,3383,
3385,3387,3389,3391,3393,3395,3397,3399,
3401,3403,3405,3407,3409,3411,3413,3415,
3417,3419,3421,3423,3425,3427,3429,3431,
3433,3435,3437,3439,3441,3443,3445,3447,
3449,3451,3453,3455,3457,3459,3461,3463,
3465,3467,3469,3471,3473,3475,3477,3479,
3481,3483,3485,3487,3489,3491,3493,3495,
3497,3499,3501,3503,3505,3507,3509,3511,
3513,3515,3517,3519,3521,3523,3525,3527,
/* Block: 38 */
3529,3531,3533,3535,3537,3539,3541,3543,
3545,3547,3549,3551,3553,3555,3557,3559,
3561,3563,3565,3567,3569,3571,3573,3575,
3577,3579,3581,3583,3585,3587,3589,3591,
3593,3595,3597,3599,3601,3603,3605,3607,
3609,3611,3613,3615,3617,3619,3621,3623,
3625,3627,3629,3631,3633,3635,3637,3639,
3641,3643,3645,3647,3649,3651,3653,3655,
3657,3659,3661,3663,3665,3667,3669,3671,
3673,3675,3677,3679,3681,3683,3685,3687,
3689,3691,3693,3695,3697,3699,3701,3703,
3705,3707,3709,3711,3713,3715,3717,3719,
3721,3723,3725,3727,3729,3731,3733,3735,
3737,3739,3741,3743,3745,3747,3749,3751,
3753,3755,3757,3759,3761,3763,3765,3767,
3769,3771,3773,3775,3777,3779,3781,3783,
/* Block: 39 */
3785,3787,3789,3791,3793,3795,3797,3799,
3801,3803,3805,3807,3809,3811,0,0,
3813,0,3815,0,0,3817,3819,3821,
3823,3825,3827,3829,3831,3833,3835,0,
3837,0,3839,0,0,3841,3843,0,
0,0,3845,3847,3849,3851,3853,3855,
3857,3859,3861,3863,3865,3867,3869,3871,
3873,3875,3877,3879,3881,3883,3885,3887,
3889,3891,3893,3895,3897,3899,3901,3903,
3905,3907,3909,3911,3913,3915,3917,3919,
3921,3923,3925,3927,3929,3931,3933,3935,
3937,3939,3941,3943,3945,3947,3949,3951,
3953,3955,3957,3959,3961,3963,3965,3967,
3969,3971,3973,3975,3977,3979,0,0,
3981,3983,3985,3987,3989,3991,3993,3995,
3997,3999,4001,4003,4005,4007,4009,4011,
/* Block: 40 */
4013,4015,4017,4019,4021,4023,4025,4027,
4029,4031,4033,4035,4037,4039,4041,4043,
4045,4047,4049,4051,4053,4055,4057,4059,
4061,4063,4065,4067,4069,4071,4073,4075,
4077,4079,4081,4083,4085,4087,4089,4091,
4093,4095,4097,4099,4101,4103,4105,4107,
4109,4111,4113,4115,4117,4119,4121,4123,
4125,4127,4129,4131,4133,4135,4137,4139,
4141,4143,4145,4147,4149,4151,4153,4155,
4157,4159,4161,4163,4165,4167,4169,4171,
4173,4175,4177,4179,4181,4183,4185,4187,
4189,4191,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 41 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,4193,0,4196,
0,0,0,0,0,0,0,0,
0,0,4199,4202,4205,4209,4213,4216,
4219,4222,4225,4228,4231,4234,4237,0,
4240,4243,4246,4249,4252,0,4255,0,
4258,4261,0,4264,4267,0,4270,4273,
4276,4279,4282,4285,4288,4291,4294,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 42 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,4297,0,4300,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,4303,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 43 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,4306,4309,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 44 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,4312,4315,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 45 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,4318,4321,0,4324,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 46 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,4327,4330,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 47 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
4333,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 48 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,4336,4339,
4342,4346,4350,4354,4358,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 49 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,4362,4365,4368,4372,4376,
4380,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 50 */
4384,4386,4388,4390,4392,4394,4396,4398,
4400,4402,4404,4406,4408,4410,4412,4414,
4416,4418,4420,4422,4424,4426,4428,4430,
4432,4434,4436,4438,4440,4442,4444,4446,
4448,4450,4452,4454,4456,4458,4460,4462,
4464,4466,4468,4470,4472,4474,4476,4478,
4480,4482,4484,4486,4488,4490,4492,4494,
4496,4498,4500,4502,4504,4506,4508,4510,
4512,4514,4516,4518,4520,4522,4524,4526,
4528,4530,4532,4534,4536,4538,4540,4542,
4544,4546,4548,4550,4552,4554,4556,4558,
4560,4562,4564,4566,4568,4570,4572,4574,
4576,4578,4580,4582,4584,4586,4588,4590,
4592,4594,4596,4598,4600,4602,4604,4606,
4608,4610,4612,4614,4616,4618,4620,4622,
4624,4626,4628,4630,4632,4634,4636,4638,
/* Block: 51 */
4640,4642,4644,4646,4648,4650,4652,4654,
4656,4658,4660,4662,4664,4666,4668,4670,
4672,4674,4676,4678,4680,4682,4684,4686,
4688,4690,4692,4694,4696,4698,4700,4702,
4704,4706,4708,4710,4712,4714,4716,4718,
4720,4722,4724,4726,4728,4730,4732,4734,
4736,4738,4740,4742,4744,4746,4748,4750,
4752,4754,4756,4758,4760,4762,4764,4766,
4768,4770,4772,4774,4776,4778,4780,4782,
4784,4786,4788,4790,4792,4794,4796,4798,
4800,4802,4804,4806,4808,4810,4812,4814,
4816,4818,4820,4822,4824,4826,4828,4830,
4832,4834,4836,4838,4840,4842,4844,4846,
4848,4850,4852,4854,4856,4858,4860,4862,
4864,4866,4868,4870,4872,4874,4876,4878,
4880,4882,4884,4886,4888,4890,4892,4894,
/* Block: 52 */
4896,4898,4900,4902,4904,4906,4908,4910,
4912,4914,4916,4918,4920,4922,4924,4926,
4928,4930,4932,4934,4936,4938,4940,4942,
4944,4946,4948,4950,4952,4954,4956,4958,
4960,4962,4964,4966,4968,4970,4972,4974,
4976,4978,4980,4982,4984,4986,4988,4990,
4992,4994,4996,4998,5000,5002,5004,5006,
5008,5010,5012,5014,5016,5018,5020,5022,
5024,5026,5028,5030,5032,5034,5036,5038,
5040,5042,5044,5046,5048,5050,5052,5054,
5056,5058,5060,5062,5064,5066,5068,5070,
5072,5074,5076,5078,5080,5082,5084,5086,
5088,5090,5092,5094,5096,5098,5100,5102,
5104,5106,5108,5110,5112,5114,5116,5118,
5120,5122,5124,5126,5128,5130,5132,5134,
5136,5138,5140,5142,5144,5146,5148,5150,
/* Block: 53 */
5152,5154,5156,5158,5160,5162,5164,5166,
5168,5170,5172,5174,5176,5178,5180,5182,
5184,5186,5188,5190,5192,5194,5196,5198,
5200,5202,5204,5206,5208,5210,5212,5214,
5216,5218,5220,5222,5224,5226,5228,5230,
5232,5234,5236,5238,5240,5242,5244,5246,
5248,5250,5252,5254,5256,5258,5260,5262,
5264,5266,5268,5270,5272,5274,5276,5278,
5280,5282,5284,5286,5288,5290,5292,5294,
5296,5298,5300,5302,5304,5306,5308,5310,
5312,5314,5316,5318,5320,5322,5324,5326,
5328,5330,5332,5334,5336,5338,5340,5342,
5344,5346,5348,5350,5352,5354,5356,5358,
5360,5362,5364,5366,5368,5370,5372,5374,
5376,5378,5380,5382,5384,5386,5388,5390,
5392,5394,5396,5398,5400,5402,5404,5406,
/* Block: 54 */
5408,5410,5412,5414,5416,5418,5420,5422,
5424,5426,5428,5430,5432,5434,5436,5438,
5440,5442,5444,5446,5448,5450,5452,5454,
5456,5458,5460,5462,5464,5466,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0};

uaix_const_data uaix_data_array(type_codept, stage3_decomp_nfd, 5468) = {
0,2,65,768,2,65,769,2,
65,770,2,65,771,2,65,776,
2,65,778,2,67,807,2,69,
768,2,69,769,2,69,770,2,
69,776,2,73,768,2,73,769,
2,73,770,2,73,776,2,78,
771,2,79,768,2,79,769,2,
79,770,2,79,771,2,79,776,
2,85,768,2,85,769,2,85,
770,2,85,776,2,89,769,2,
97,768,2,97,769,2,97,770,
2,97,771,2,97,776,2,97,
778,2,99,807,2,101,768,2,
101,769,2,101,770,2,101,776,
2,105,768,2,105,769,2,105,
770,2,105,776,2,110,771,2,
111,768,2,111,769,2,111,770,
2,111,771,2,111,776,2,117,
768,2,117,769,2,117,770,2,
117,776,2,121,769,2,121,776,
2,65,772,2,97,772,2,65,
774,2,97,774,2,65,808,2,
97,808,2,67,769,2,99,769,
2,67,770,2,99,770,2,67,
775,2,99,775,2,67,780,2,
99,780,2,68,780,2,100,780,
2,69,772,2,101,772,2,69,
774,2,101,774,2,69,775,2,
101,775,2,69,808,2,101,808,
2,69,780,2,101,780,2,71,
770,2,103,770,2,71,774,2,
103,774,2,71,775,2,103,775,
2,71,807,2,103,807,2,72,
770,2,104,770,2,73,771,2,
105,771,2,73,772,2,105,772,
2,73,774,2,105,774,2,73,
808,2,105,808,2,73,775,2,
74,770,2,106,770,2,75,807,
2,107,807,2,76,769,2,108,
769,2,76,807,2,108,807,2,
76,780,2,108,780,2,78,769,
2,110,769,2,78,807,2,110,
807,2,78,780,2,110,780,2,
79,772,2,111,772,2,79,774,
2,111,774,2,79,779,2,111,
779,2,82,769,2,114,769,2,
82,807,2,114,807,2,82,780,
2,114,780,2,83,769,2,115,
769,2,83,770,2,115,770,2,
83,807,2,115,807,2,83,780,
2,115,780,2,84,807,2,116,
807,2,84,780,2,116,780,2,
85,771,2,117,771,2,85,772,
2,117,772,2,85,774,2,117,
774,2,85,778,2,117,778,2,
85,779,2,117,779,2,85,808,
2,117,808,2,87,770,2,119,
770,2,89,770,2,121,770,2,
89,776,2,90,769,2,122,769,
2,90,775,2,122,775,2,90,
780,2,122,780,2,79,795,2,
111,795,2,85,795,2,117,795,
2,65,780,2,97,780,2,73,
780,2,105,780,2,79,780,2,
111,780,2,85,780,2,117,780,
3,85,776,772,3,117,776,772,
3,85,776,769,3,117,776,769,
3,85,776,780,3,117,776,780,
3,85,776,768,3,117,776,768,
3,65,776,772,3,97,776,772,
3,65,775,772,3,97,775,772,
2,198,772,2,230,772,2,71,
780,2,103,780,2,75,780,2,
107,780,2,79,808,2,111,808,
3,79,808,772,3,111,808,772,
2,439,780,2,658,780,2,106,
780,2,71,769,2,103,769,2,
78,768,2,110,768,3,65,778,
769,3,97,778,769,2,198,769,
2,230,769,2,216,769,2,248,
769,2,65,783,2,97,783,2,
65,785,2,97,785,2,69,783,
2,101,783,2,69,785,2,101,
785,2,73,783,2,105,783,2,
73,785,2,105,785,2,79,783,
2,111,783,2,79,785,2,111,
785,2,82,783,2,114,783,2,
82,785,2,114,785,2,85,783,
2,117,783,2,85,785,2,117,
785,2,83,806,2,115,806,2,
84,806,2,116,806,2,72,780,
2,104,780,2,65,775,2,97,
775,2,69,807,2,101,807,3,
79,776,772,3,111,776,772,3,
79,771,772,3,111,771,772,2,
79,775,2,111,775,3,79,775,
772,3,111,775,772,2,89,772,
2,121,772,1,768,1,769,1,
787,2,776,769,1,697,1,59,
2,168,769,2,913,769,1,183,
2,917,769,2,919,769,2,921,
769,2,927,769,2,933,769,2,
937,769,3,953,776,769,2,921,
776,2,933,776,2,945,769,2,
949,769,2,951,769,2,953,769,
3,965,776,769,2,953,776,2,
965,776,2,959,769,2,965,769,
2,969,769,2,978,769,2,978,
776,2,1045,768,2,1045,776,2,
1043,769,2,1030,776,2,1050,769,
2,1048,768,2,1059,774,2,1048,
774,2,1080,774,2,1077,768,2,
1077,776,2,1075,769,2,1110,776,
2,1082,769,2,1080,768,2,1091,
774,2,1140,783,2,1141,783,2,
1046,774,2,1078,774,2,1040,774,
2,1072,774,2,1040,776,2,1072,
776,2,1045,774,2,1077,774,2,
1240,776,2,1241,776,2,1046,776,
2,1078,776,2,1047,776,2,1079,
776,2,1048,772,2,1080,772,2,
1048,776,2,1080,776,2,1054,776,
2,1086,776,2,1256,776,2,1257,
776,2,1069,776,2,1101,776,2,
1059,772,2,1091,772,2,1059,776,
2,1091,776,2,1059,779,2,1091,
779,2,1063,776,2,1095,776,2,
1067,776,2,1099,776,2,1575,1619,
2,1575,1620,2,1608,1620,2,1575,
1621,2,1610,1620,2,1749,1620,2,
1729,1620,2,1746,1620,2,2344,2364,
2,2352,2364,2,2355,2364,2,2325,
2364,2,2326,2364,2,2327,2364,2,
2332,2364,2,2337,2364,2,2338,2364,
2,2347,2364,2,2351,2364,2,2503,
2494,2,2503,2519,2,2465,2492,2,
2466,2492,2,2479,2492,2,2610,2620,
2,2616,2620,2,2582,2620,2,2583,
2620,2,2588,2620,2,2603,2620,2,
2887,2902,2,2887,2878,2,2887,2903,
2,2849,2876,2,2850,2876,2,2962,
3031,2,3014,3006,2,3015,3006,2,
3014,3031,2,3142,3158,2,3263,3285,
2,3270,3285,2,3270,3286,2,3270,
3266,3,3270,3266,3285,2,3398,3390,
2,3399,3390,2,3398,3415,2,3545,
3530,2,3545,3535,3,3545,3535,3530,
2,3545,3551,2,3906,4023,2,3916,
4023,2,3921,4023,2,3926,4023,2,
3931,4023,2,3904,4021,2,3953,3954,
2,3953,3956,2,4018,3968,2,4019,
3968,2,3953,3968,2,3986,4023,2,
3996,4023,2,4001,4023,2,4006,4023,
2,4011,4023,2,3984,4021,2,4133,
4142,2,6917,6965,2,6919,6965,2,
6921,6965,2,6923,6965,2,6925,6965,
2,6929,6965,2,6970,6965,2,6972,
6965,2,6974,6965,2,6975,6965,2,
6978,6965,2,65,805,2,97,805,
2,66,775,2,98,775,2,66,
803,2,98,803,2,66,817,2,
98,817,3,67,807,769,3,99,
807,769,2,68,775,2,100,775,
2,68,803,2,100,803,2,68,
817,2,100,817,2,68,807,2,
100,807,2,68,813,2,100,813,
3,69,772,768,3,101,772,768,
3,69,772,769,3,101,772,769,
2,69,813,2,101,813,2,69,
816,2,101,816,3,69,807,774,
3,101,807,774,2,70,775,2,
102,775,2,71,772,2,103,772,
2,72,775,2,104,775,2,72,
803,2,104,803,2,72,776,2,
104,776,2,72,807,2,104,807,
2,72,814,2,104,814,2,73,
816,2,105,816,3,73,776,769,
3,105,776,769,2,75,769,2,
107,769,2,75,803,2,107,803,
2,75,817,2,107,817,2,76,
803,2,108,803,3,76,803,772,
3,108,803,772,2,76,817,2,
108,817,2,76,813,2,108,813,
2,77,769,2,109,769,2,77,
775,2,109,775,2,77,803,2,
109,803,2,78,775,2,110,775,
2,78,803,2,110,803,2,78,
817,2,110,817,2,78,813,2,
110,813,3,79,771,769,3,111,
771,769,3,79,771,776,3,111,
771,776,3,79,772,768,3,111,
772,768,3,79,772,769,3,111,
772,769,2,80,769,2,112,769,
2,80,775,2,112,775,2,82,
775,2,114,775,2,82,803,2,
114,803,3,82,803,772,3,114,
803,772,2,82,817,2,114,817,
2,83,775,2,115,775,2,83,
803,2,115,803,3,83,769,775,
3,115,769,775,3,83,780,775,
3,115,780,775,3,83,803,775,
3,115,803,775,2,84,775,2,
116,775,2,84,803,2,116,803,
2,84,817,2,116,817,2,84,
813,2,116,813,2,85,804,2,
117,804,2,85,816,2,117,816,
2,85,813,2,117,813,3,85,
771,769,3,117,771,769,3,85,
772,776,3,117,772,776,2,86,
771,2,118,771,2,86,803,2,
118,803,2,87,768,2,119,768,
2,87,769,2,119,769,2,87,
776,2,119,776,2,87,775,2,
119,775,2,87,803,2,119,803,
2,88,775,2,120,775,2,88,
776,2,120,776,2,89,775,2,
121,775,2,90,770,2,122,770,
2,90,803,2,122,803,2,90,
817,2,122,817,2,104,817,2,
116,776,2,119,778,2,121,778,
2,383,775,2,65,803,2,97,
803,2,65,777,2,97,777,3,
65,770,769,3,97,770,769,3,
65,770,768,3,97,770,768,3,
65,770,777,3,97,770,777,3,
65,770,771,3,97,770,771,3,
65,803,770,3,97,803,770,3,
65,774,769,3,97,774,769,3,
65,774,768,3,97,774,768,3,
65,774,777,3,97,774,777,3,
65,774,771,3,97,774,771,3,
65,803,774,3,97,803,774,2,
69,803,2,101,803,2,69,777,
2,101,777,2,69,771,2,101,
771,3,69,770,769,3,101,770,
769,3,69,770,768,3,101,770,
768,3,69,770,777,3,101,770,
777,3,69,770,771,3,101,770,
771,3,69,803,770,3,101,803,
770,2,73,777,2,105,777,2,
73,803,2,105,803,2,79,803,
2,111,803,2,79,777,2,111,
777,3,79,770,769,3,111,770,
769,3,79,770,768,3,111,770,
768,3,79,770,777,3,111,770,
777,3,79,770,771,3,111,770,
771,3,79,803,770,3,111,803,
770,3,79,795,769,3,111,795,
769,3,79,795,768,3,111,795,
768,3,79,795,777,3,111,795,
777,3,79,795,771,3,111,795,
771,3,79,795,803,3,111,795,
803,2,85,803,2,117,803,2,
85,777,2,117,777,3,85,795,
769,3,117,795,769,3,85,795,
768,3,117,795,768,3,85,795,
777,3,117,795,777,3,85,795,
771,3,117,795,771,3,85,795,
803,3,117,795,803,2,89,768,
2,121,768,2,89,803,2,121,
803,2,89,777,2,121,777,2,
89,771,2,121,771,2,945,787,
2,945,788,3,945,787,768,3,
945,788,768,3,945,787,769,3,
945,788,769,3,945,787,834,3,
945,788,834,2,913,787,2,913,
788,3,913,787,768,3,913,788,
768,3,913,787,769,3,913,788,
769,3,913,787,834,3,913,788,
834,2,949,787,2,949,788,3,
949,787,768,3,949,788,768,3,
949,787,769,3,949,788,769,2,
917,787,2,917,788,3,917,787,
768,3,917,788,768,3,917,787,
769,3,917,788,769,2,951,787,
2,951,788,3,951,787,768,3,
951,788,768,3,951,787,769,3,
951,788,769,3,951,787,834,3,
951,788,834,2,919,787,2,919,
788,3,919,787,768,3,919,788,
768,3,919,787,769,3,919,788,
769,3,919,787,834,3,919,788,
834,2,953,787,2,953,788,3,
953,787,768,3,953,788,768,3,
953,787,769,3,953,788,769,3,
953,787,834,3,953,788,834,2,
921,787,2,921,788,3,921,787,
768,3,921,788,768,3,921,787,
769,3,921,788,769,3,921,787,
834,3,921,788,834,2,959,787,
2,959,788,3,959,787,768,3,
959,788,768,3,959,787,769,3,
959,788,769,2,927,787,2,927,
788,3,927,787,768,3,927,788,
768,3,927,787,769,3,927,788,
769,2,965,787,2,965,788,3,
965,787,768,3,965,788,768,3,
965,787,769,3,965,788,769,3,
965,787,834,3,965,788,834,2,
933,788,3,933,788,768,3,933,
788,769,3,933,788,834,2,969,
787,2,969,788,3,969,787,768,
3,969,788,768,3,969,787,769,
3,969,788,769,3,969,787,834,
3,969,788,834,2,937,787,2,
937,788,3,937,787,768,3,937,
788,768,3,937,787,769,3,937,
788,769,3,937,787,834,3,937,
788,834,2,945,768,2,945,769,
2,949,768,2,949,769,2,951,
768,2,951,769,2,953,768,2,
953,769,2,959,768,2,959,769,
2,965,768,2,965,769,2,969,
768,2,969,769,3,945,787,837,
3,945,788,837,4,945,787,768,
837,4,945,788,768,837,4,945,
787,769,837,4,945,788,769,837,
4,945,787,834,837,4,945,788,
834,837,3,913,787,837,3,913,
788,837,4,913,787,768,837,4,
913,788,768,837,4,913,787,769,
837,4,913,788,769,837,4,913,
787,834,837,4,913,788,834,837,
3,951,787,837,3,951,788,837,
4,951,787,768,837,4,951,788,
768,837,4,951,787,769,837,4,
951,788,769,837,4,951,787,834,
837,4,951,788,834,837,3,919,
787,837,3,919,788,837,4,919,
787,768,837,4,919,788,768,837,
4,919,787,769,837,4,919,788,
769,837,4,919,787,834,837,4,
919,788,834,837,3,969,787,837,
3,969,788,837,4,969,787,768,
837,4,969,788,768,837,4,969,
787,769,837,4,969,788,769,837,
4,969,787,834,837,4,969,788,
834,837,3,937,787,837,3,937,
788,837,4,937,787,768,837,4,
937,788,768,837,4,937,787,769,
837,4,937,788,769,837,4,937,
787,834,837,4,937,788,834,837,
2,945,774,2,945,772,3,945,
768,837,2,945,837,3,945,769,
837,2,945,834,3,945,834,837,
2,913,774,2,913,772,2,913,
768,2,913,769,2,913,837,1,
953,2,168,834,3,951,768,837,
2,951,837,3,951,769,837,2,
951,834,3,951,834,837,2,917,
768,2,917,769,2,919,768,2,
919,769,2,919,837,2,8127,768,
2,8127,769,2,8127,834,2,953,
774,2,953,772,3,953,776,768,
3,953,776,769,2,953,834,3,
953,776,834,2,921,774,2,921,
772,2,921,768,2,921,769,2,
8190,768,2,8190,769,2,8190,834,
2,965,774,2,965,772,3,965,
776,768,3,965,776,769,2,961,
787,2,961,788,2,965,834,3,
965,776,834,2,933,774,2,933,
772,2,933,768,2,933,769,2,
929,788,2,168,768,2,168,769,
1,96,3,969,768,837,2,969,
837,3,969,769,837,2,969,834,
3,969,834,837,2,927,768,2,
927,769,2,937,768,2,937,769,
2,937,837,1,180,1,8194,1,
8195,1,937,1,75,2,65,778,
2,8592,824,2,8594,824,2,8596,
824,2,8656,824,2,8660,824,2,
8658,824,2,8707,824,2,8712,824,
2,8715,824,2,8739,824,2,8741,
824,2,8764,824,2,8771,824,2,
8773,824,2,8776,824,2,61,824,
2,8801,824,2,8781,824,2,60,
824,2,62,824,2,8804,824,2,
8805,824,2,8818,824,2,8819,824,
2,8822,824,2,8823,824,2,8826,
824,2,8827,824,2,8834,824,2,
8835,824,2,8838,824,2,8839,824,
2,8866,824,2,8872,824,2,8873,
824,2,8875,824,2,8828,824,2,
8829,824,2,8849,824,2,8850,824,
2,8882,824,2,8883,824,2,8884,
824,2,8885,824,1,12296,1,12297,
2,10973,824,2,12363,12441,2,12365,
12441,2,12367,12441,2,12369,12441,2,
12371,12441,2,12373,12441,2,12375,12441,
2,12377,12441,2,12379,12441,2,12381,
12441,2,12383,12441,2,12385,12441,2,
12388,12441,2,12390,12441,2,12392,12441,
2,12399,12441,2,12399,12442,2,12402,
12441,2,12402,12442,2,12405,12441,2,
12405,12442,2,12408,12441,2,12408,12442,
2,12411,12441,2,12411,12442,2,12358,
12441,2,12445,12441,2,12459,12441,2,
12461,12441,2,12463,12441,2,12465,12441,
2,12467,12441,2,12469,12441,2,12471,
12441,2,12473,12441,2,12475,12441,2,
12477,12441,2,12479,12441,2,12481,12441,
2,12484,12441,2,12486,12441,2,12488,
12441,2,12495,12441,2,12495,12442,2,
12498,12441,2,12498,12442,2,12501,12441,
2,12501,12442,2,12504,12441,2,12504,
12442,2,12507,12441,2,12507,12442,2,
12454,12441,2,12527,12441,2,12528,12441,
2,12529,12441,2,12530,12441,2,12541,
12441,1,35912,1,26356,1,36554,1,
36040,1,28369,1,20018,1,21477,1,
40860,1,40860,1,22865,1,37329,1,
21895,1,22856,1,25078,1,30313,1,
32645,1,34367,1,34746,1,35064,1,
37007,1,27138,1,27931,1,28889,1,
29662,1,33853,1,37226,1,39409,1,
20098,1,21365,1,27396,1,29211,1,
34349,1,40478,1,23888,1,28651,1,
34253,1,35172,1,25289,1,33240,1,
34847,1,24266,1,26391,1,28010,1,
29436,1,37070,1,20358,1,20919,1,
21214,1,25796,1,27347,1,29200,1,
30439,1,32769,1,34310,1,34396,1,
36335,1,38706,1,39791,1,40442,1,
30860,1,31103,1,32160,1,33737,1,
37636,1,40575,1,35542,1,22751,1,
24324,1,31840,1,32894,1,29282,1,
30922,1,36034,1,38647,1,22744,1,
23650,1,27155,1,28122,1,28431,1,
32047,1,32311,1,38475,1,21202,1,
32907,1,20956,1,20940,1,31260,1,
32190,1,33777,1,38517,1,35712,1,
25295,1,27138,1,35582,1,20025,1,
23527,1,24594,1,29575,1,30064,1,
21271,1,30971,1,20415,1,24489,1,
19981,1,27852,1,25976,1,32034,1,
21443,1,22622,1,30465,1,33865,1,
35498,1,27578,1,36784,1,27784,1,
25342,1,33509,1,25504,1,30053,1,
20142,1,20841,1,20937,1,26753,1,
31975,1,33391,1,35538,1,37327,1,
21237,1,21570,1,22899,1,24300,1,
26053,1,28670,1,31018,1,38317,1,
39530,1,40599,1,40654,1,21147,1,
26310,1,27511,1,36706,1,24180,1,
24976,1,25088,1,25754,1,28451,1,
29001,1,29833,1,31178,1,32244,1,
32879,1,36646,1,34030,1,36899,1,
37706,1,21015,1,21155,1,21693,1,
28872,1,35010,1,35498,1,24265,1,
24565,1,25467,1,27566,1,31806,1,
29557,1,20196,1,22265,1,23527,1,
23994,1,24604,1,29618,1,29801,1,
32666,1,32838,1,37428,1,38646,1,
38728,1,38936,1,20363,1,31150,1,
37300,1,38584,1,24801,1,20102,1,
20698,1,23534,1,23615,1,26009,1,
27138,1,29134,1,30274,1,34044,1,
36988,1,40845,1,26248,1,38446,1,
21129,1,26491,1,26611,1,27969,1,
28316,1,29705,1,30041,1,30827,1,
32016,1,39006,1,20845,1,25134,1,
38520,1,20523,1,23833,1,28138,1,
36650,1,24459,1,24900,1,26647,1,
29575,1,38534,1,21033,1,21519,1,
23653,1,26131,1,26446,1,26792,1,
27877,1,29702,1,30178,1,32633,1,
35023,1,35041,1,37324,1,38626,1,
21311,1,28346,1,21533,1,29136,1,
29848,1,34298,1,38563,1,40023,1,
40607,1,26519,1,28107,1,33256,1,
31435,1,31520,1,31890,1,29376,1,
28825,1,35672,1,20160,1,33590,1,
21050,1,20999,1,24230,1,25299,1,
31958,1,23429,1,27934,1,26292,1,
36667,1,34892,1,38477,1,35211,1,
24275,1,20800,1,21952,1,22618,1,
26228,1,20958,1,29482,1,30410,1,
31036,1,31070,1,31077,1,31119,1,
38742,1,31934,1,32701,1,34322,1,
35576,1,36920,1,37117,1,39151,1,
39164,1,39208,1,40372,1,37086,1,
38583,1,20398,1,20711,1,20813,1,
21193,1,21220,1,21329,1,21917,1,
22022,1,22120,1,22592,1,22696,1,
23652,1,23662,1,24724,1,24936,1,
24974,1,25074,1,25935,1,26082,1,
26257,1,26757,1,28023,1,28186,1,
28450,1,29038,1,29227,1,29730,1,
30865,1,31038,1,31049,1,31048,1,
31056,1,31062,1,31069,1,31117,1,
31118,1,31296,1,31361,1,31680,1,
32244,1,32265,1,32321,1,32626,1,
32773,1,33261,1,33401,1,33401,1,
33879,1,35088,1,35222,1,35585,1,
35641,1,36051,1,36104,1,36790,1,
36920,1,38627,1,38911,1,38971,1,
24693,1,148206,1,33304,1,20006,1,
20917,1,20840,1,20352,1,20805,1,
20864,1,21191,1,21242,1,21917,1,
21845,1,21913,1,21986,1,22618,1,
22707,1,22852,1,22868,1,23138,1,
23336,1,24274,1,24281,1,24425,1,
24493,1,24792,1,24910,1,24840,1,
24974,1,24928,1,25074,1,25140,1,
25540,1,25628,1,25682,1,25942,1,
26228,1,26391,1,26395,1,26454,1,
27513,1,27578,1,27969,1,28379,1,
28363,1,28450,1,28702,1,29038,1,
30631,1,29237,1,29359,1,29482,1,
29809,1,29958,1,30011,1,30237,1,
30239,1,30410,1,30427,1,30452,1,
30538,1,30528,1,30924,1,31409,1,
31680,1,31867,1,32091,1,32244,1,
32574,1,32773,1,33618,1,33775,1,
34681,1,35137,1,35206,1,35222,1,
35519,1,35576,1,35531,1,35585,1,
35582,1,35565,1,35641,1,35722,1,
36104,1,36664,1,36978,1,37273,1,
37494,1,38524,1,38627,1,38742,1,
38875,1,38911,1,38923,1,38971,1,
39698,1,40860,1,141386,1,141380,1,
144341,1,15261,1,16408,1,16441,1,
152137,1,154832,1,163539,1,40771,1,
40846,2,1497,1460,2,1522,1463,2,
1513,1473,2,1513,1474,3,1513,1468,
1473,3,1513,1468,1474,2,1488,1463,
2,1488,1464,2,1488,1468,2,1489,
1468,2,1490,1468,2,1491,1468,2,
1492,1468,2,1493,1468,2,1494,1468,
2,1496,1468,2,1497,1468,2,1498,
1468,2,1499,1468,2,1500,1468,2,
1502,1468,2,1504,1468,2,1505,1468,
2,1507,1468,2,1508,1468,2,1510,
1468,2,1511,1468,2,1512,1468,2,
1513,1468,2,1514,1468,2,1493,1465,
2,1489,1471,2,1499,1471,2,1508,
1471,2,69785,69818,2,69787,69818,2,
69797,69818,2,69937,69927,2,69938,69927,
2,70471,70462,2,70471,70487,2,70841,
70842,2,70841,70832,2,70841,70845,2,
71096,71087,2,71097,71087,2,71989,71984,
2,119127,119141,2,119128,119141,3,119128,
119141,119150,3,119128,119141,119151,3,119128,
119141,119152,3,119128,119141,119153,3,119128,
119141,119154,2,119225,119141,2,119226,119141,
3,119225,119141,119150,3,119226,119141,119150,
3,119225,119141,119151,3,119226,119141,119151,
1,20029,1,20024,1,20033,1,131362,
1,20320,1,20398,1,20411,1,20482,
1,20602,1,20633,1,20711,1,20687,
1,13470,1,132666,1,20813,1,20820,
1,20836,1,20855,1,132380,1,13497,
1,20839,1,20877,1,132427,1,20887,
1,20900,1,20172,1,20908,1,20917,
1,168415,1,20981,1,20995,1,13535,
1,21051,1,21062,1,21106,1,21111,
1,13589,1,21191,1,21193,1,21220,
1,21242,1,21253,1,21254,1,21271,
1,21321,1,21329,1,21338,1,21363,
1,21373,1,21375,1,21375,1,21375,
1,133676,1,28784,1,21450,1,21471,
1,133987,1,21483,1,21489,1,21510,
1,21662,1,21560,1,21576,1,21608,
1,21666,1,21750,1,21776,1,21843,
1,21859,1,21892,1,21892,1,21913,
1,21931,1,21939,1,21954,1,22294,
1,22022,1,22295,1,22097,1,22132,
1,20999,1,22766,1,22478,1,22516,
1,22541,1,22411,1,22578,1,22577,
1,22700,1,136420,1,22770,1,22775,
1,22790,1,22810,1,22818,1,22882,
1,136872,1,136938,1,23020,1,23067,
1,23079,1,23000,1,23142,1,14062,
1,14076,1,23304,1,23358,1,23358,
1,137672,1,23491,1,23512,1,23527,
1,23539,1,138008,1,23551,1,23558,
1,24403,1,23586,1,14209,1,23648,
1,23662,1,23744,1,23693,1,138724,
1,23875,1,138726,1,23918,1,23915,
1,23932,1,24033,1,24034,1,14383,
1,24061,1,24104,1,24125,1,24169,
1,14434,1,139651,1,14460,1,24240,
1,24243,1,24246,1,24266,1,172946,
1,24318,1,140081,1,140081,1,33281,
1,24354,1,24354,1,14535,1,144056,
1,156122,1,24418,1,24427,1,14563,
1,24474,1,24525,1,24535,1,24569,
1,24705,1,14650,1,14620,1,24724,
1,141012,1,24775,1,24904,1,24908,
1,24910,1,24908,1,24954,1,24974,
1,25010,1,24996,1,25007,1,25054,
1,25074,1,25078,1,25104,1,25115,
1,25181,1,25265,1,25300,1,25424,
1,142092,1,25405,1,25340,1,25448,
1,25475,1,25572,1,142321,1,25634,
1,25541,1,25513,1,14894,1,25705,
1,25726,1,25757,1,25719,1,14956,
1,25935,1,25964,1,143370,1,26083,
1,26360,1,26185,1,15129,1,26257,
1,15112,1,15076,1,20882,1,20885,
1,26368,1,26268,1,32941,1,17369,
1,26391,1,26395,1,26401,1,26462,
1,26451,1,144323,1,15177,1,26618,
1,26501,1,26706,1,26757,1,144493,
1,26766,1,26655,1,26900,1,15261,
1,26946,1,27043,1,27114,1,27304,
1,145059,1,27355,1,15384,1,27425,
1,145575,1,27476,1,15438,1,27506,
1,27551,1,27578,1,27579,1,146061,
1,138507,1,146170,1,27726,1,146620,
1,27839,1,27853,1,27751,1,27926,
1,27966,1,28023,1,27969,1,28009,
1,28024,1,28037,1,146718,1,27956,
1,28207,1,28270,1,15667,1,28363,
1,28359,1,147153,1,28153,1,28526,
1,147294,1,147342,1,28614,1,28729,
1,28702,1,28699,1,15766,1,28746,
1,28797,1,28791,1,28845,1,132389,
1,28997,1,148067,1,29084,1,148395,
1,29224,1,29237,1,29264,1,149000,
1,29312,1,29333,1,149301,1,149524,
1,29562,1,29579,1,16044,1,29605,
1,16056,1,16056,1,29767,1,29788,
1,29809,1,29829,1,29898,1,16155,
1,29988,1,150582,1,30014,1,150674,
1,30064,1,139679,1,30224,1,151457,
1,151480,1,151620,1,16380,1,16392,
1,30452,1,151795,1,151794,1,151833,
1,151859,1,30494,1,30495,1,30495,
1,30538,1,16441,1,30603,1,16454,
1,16534,1,152605,1,30798,1,30860,
1,30924,1,16611,1,153126,1,31062,
1,153242,1,153285,1,31119,1,31211,
1,16687,1,31296,1,31306,1,31311,
1,153980,1,154279,1,154279,1,31470,
1,16898,1,154539,1,31686,1,31689,
1,16935,1,154752,1,31954,1,17056,
1,31976,1,31971,1,32000,1,155526,
1,32099,1,17153,1,32199,1,32258,
1,32325,1,17204,1,156200,1,156231,
1,17241,1,156377,1,32634,1,156478,
1,32661,1,32762,1,32773,1,156890,
1,156963,1,32864,1,157096,1,32880,
1,144223,1,17365,1,32946,1,33027,
1,17419,1,33086,1,23221,1,157607,
1,157621,1,144275,1,144284,1,33281,
1,33284,1,36766,1,17515,1,33425,
1,33419,1,33437,1,21171,1,33457,
1,33459,1,33469,1,33510,1,158524,
1,33509,1,33565,1,33635,1,33709,
1,33571,1,33725,1,33767,1,33879,
1,33619,1,33738,1,33740,1,33756,
1,158774,1,159083,1,158933,1,17707,
1,34033,1,34035,1,34070,1,160714,
1,34148,1,159532,1,17757,1,17761,
1,159665,1,159954,1,17771,1,34384,
1,34396,1,34407,1,34409,1,34473,
1,34440,1,34574,1,34530,1,34681,
1,34600,1,34667,1,34694,1,17879,
1,34785,1,34817,1,17913,1,34912,
1,34915,1,161383,1,35031,1,35038,
1,17973,1,35066,1,13499,1,161966,
1,162150,1,18110,1,18119,1,35488,
1,35565,1,35722,1,35925,1,162984,
1,36011,1,36033,1,36123,1,36215,
1,163631,1,133124,1,36299,1,36284,
1,36336,1,133342,1,36564,1,36664,
1,165330,1,165357,1,37012,1,37105,
1,37137,1,165678,1,37147,1,37432,
1,37591,1,37592,1,37500,1,37881,
1,37909,1,166906,1,38283,1,18837,
1,38327,1,167287,1,18918,1,38595,
1,23986,1,38691,1,168261,1,168474,
1,19054,1,19062,1,38880,1,168970,
1,19122,1,169110,1,38923,1,38923,
1,38953,1,169398,1,39138,1,19251,
1,39209,1,39335,1,39362,1,39422,
1,19406,1,170800,1,39698,1,40000,
1,40189,1,19662,1,19693,1,40295,
1,172238,1,19704,1,172293,1,172558,
1,172689,1,40635,1,19798,1,40697,
1,40702,1,40709,1,40719,1,40726,
1,40763,1,173568};

#ifndef UNI_ALGO_DISABLE_NFKC_NFKD

uaix_const_data uaix_data_array(unsigned char, stage1_decomp_nfkd, 8704) = {
0,1,2,3,4,5,6,7,
8,9,0,10,11,12,0,0,
0,0,13,14,15,0,16,17,
18,19,20,21,22,23,24,25,
26,27,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,28,0,
0,0,29,30,31,32,33,34,
35,36,37,38,39,40,41,0,
42,43,0,0,0,0,0,0,
0,0,0,0,44,45,0,0,
46,0,47,0,0,48,49,50,
51,52,53,54,55,56,57,58,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,59,60,61,
0,0,0,0,0,0,62,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,63,64,65,66,67,68,
69,70,71,72,73,74,75,76,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,77,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,78,79,0,0,0,80,0,
0,81,0,82,0,0,0,0,
0,0,83,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,84,85,0,0,0,0,
86,87,88,89,90,91,92,93,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
94,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,95,96,0,0,
0,0,97,98,99,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,100,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
101,102,103,104,105,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0};

uaix_const_data uaix_data_array(unsigned short, stage2_decomp_nfkd, 13568) = {
/* Block: 0 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 1 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
1,0,0,0,0,0,0,0,
3,0,6,0,0,0,0,8,
0,0,11,13,15,18,0,0,
20,23,25,0,27,31,35,0,
39,42,45,48,51,54,0,57,
60,63,66,69,72,75,78,81,
0,84,87,90,93,96,99,0,
0,102,105,108,111,114,0,0,
117,120,123,126,129,132,0,135,
138,141,144,147,150,153,156,159,
0,162,165,168,171,174,177,0,
0,180,183,186,189,192,0,195,
/* Block: 2 */
198,201,204,207,210,213,216,219,
222,225,228,231,234,237,240,243,
0,0,246,249,252,255,258,261,
264,267,270,273,276,279,282,285,
288,291,294,297,300,303,0,0,
306,309,312,315,318,321,324,327,
330,0,333,336,339,342,345,348,
0,351,354,357,360,363,366,369,
372,0,0,375,378,381,384,387,
390,393,0,0,396,399,402,405,
408,411,0,0,414,417,420,423,
426,429,432,435,438,441,444,447,
450,453,456,459,462,465,0,0,
468,471,474,477,480,483,486,489,
492,495,498,501,504,507,510,513,
516,519,522,525,528,531,534,537,
/* Block: 3 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
539,542,0,0,0,0,0,0,
0,0,0,0,0,0,0,545,
548,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,551,555,559,563,
566,569,572,575,578,581,584,587,
590,593,596,599,602,605,609,613,
617,621,625,629,633,0,637,641,
645,649,653,656,0,0,659,662,
665,668,671,674,677,681,685,688,
691,694,697,700,703,706,0,0,
709,712,715,719,723,726,729,732,
/* Block: 4 */
735,738,741,744,747,750,753,756,
759,762,765,768,771,774,777,780,
783,786,789,792,795,798,801,804,
807,810,813,816,0,0,819,822,
0,0,0,0,0,0,825,828,
831,834,837,841,845,849,853,856,
859,863,867,870,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 5 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
873,875,877,879,881,883,885,887,
889,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
891,894,897,900,903,906,0,0,
909,911,913,915,917,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 6 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
919,921,0,923,925,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,928,0,0,0,
0,0,930,0,0,0,933,0,
/* Block: 7 */
0,0,0,0,935,938,942,945,
947,950,953,0,956,0,959,962,
965,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,969,972,975,978,981,984,
987,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,991,994,997,1000,1003,0,
1006,1008,1010,1012,1015,1018,1020,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
1022,1024,1026,0,1028,1030,0,0,
0,1032,0,0,0,0,0,0,
/* Block: 8 */
1034,1037,0,1040,0,0,0,1043,
0,0,0,0,1046,1049,1052,0,
0,0,0,0,0,0,0,0,
0,1055,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,1058,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
1061,1064,0,1067,0,0,0,1070,
0,0,0,0,1073,1076,1079,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,1082,1085,
0,0,0,0,0,0,0,0,
/* Block: 9 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,1088,1091,0,0,0,0,0,
0,0,0,0,0,0,0,0,
1094,1097,1100,1103,0,0,1106,1109,
0,0,1112,1115,1118,1121,1124,1127,
0,0,1130,1133,1136,1139,1142,1145,
0,0,1148,1151,1154,1157,1160,1163,
1166,1169,1172,1175,1178,1181,0,0,
1184,1187,0,0,0,0,0,0,
/* Block: 10 */
0,0,0,0,0,0,0,1190,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 11 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,1193,1196,1199,1202,1205,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,1208,1211,1214,
1217,0,0,0,0,0,0,0,
/* Block: 12 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
1220,0,1223,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,1226,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 13 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,1229,0,0,0,0,0,0,
0,1232,0,0,1235,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
1238,1241,1244,1247,1250,1253,1256,1259,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 14 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,1262,1265,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,1268,1271,0,1274,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 15 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,1277,0,0,1280,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,1283,1286,1289,0,0,1292,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 16 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
1295,0,0,1298,1301,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,1304,1307,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 17 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,1310,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,1313,1316,1319,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 18 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
1322,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 19 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
1325,0,0,0,0,0,0,1328,
1331,0,1334,1337,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 20 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,1341,1344,1347,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 21 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,1350,0,1353,1356,1360,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 22 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,1363,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 23 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,1366,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,1369,1372,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 24 */
0,0,0,0,0,0,0,0,
0,0,0,0,1375,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,1377,0,0,0,0,
0,0,0,0,0,1380,0,0,
0,0,1383,0,0,0,0,1386,
0,0,0,0,1389,0,0,0,
0,0,0,0,0,0,0,0,
0,1392,0,0,0,0,0,0,
0,0,0,1395,0,1398,1401,1404,
1408,1411,0,0,0,0,0,0,
/* Block: 25 */
0,1415,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,1418,0,0,0,0,
0,0,0,0,0,1421,0,0,
0,0,1424,0,0,0,0,1427,
0,0,0,0,1430,0,0,0,
0,0,0,0,0,0,0,0,
0,1433,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 26 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,1436,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 27 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,1439,0,0,0,
/* Block: 28 */
0,0,0,0,0,0,1441,0,
1444,0,1447,0,1450,0,1453,0,
0,0,1456,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,1459,0,1462,0,0,
1465,1468,0,1471,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 29 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,1474,1476,1478,0,
1480,1482,1484,1486,1488,1490,1492,1494,
1496,1498,1500,0,1502,1504,1506,1508,
1510,1512,1514,1516,1518,1520,1522,1524,
1526,1528,1530,1532,1534,1536,0,1538,
1540,1542,1544,1546,1548,1550,1552,1554,
1556,1558,1560,1562,1564,1566,1568,1570,
1572,1574,1576,1578,1580,1582,1584,1586,
1588,1590,1592,0,0,0,0,0,
0,0,0,0,0,0,0,0,
1594,0,0,0,0,0,0,0,
/* Block: 30 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,1596,1598,1600,1602,1604,
1606,1608,1610,1612,1614,1616,1618,1620,
1622,1624,1626,1628,1630,1632,1634,1636,
1638,1640,1642,1644,1646,1648,1650,1652,
1654,1656,1658,1660,1662,1664,1666,1668,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 31 */
1670,1673,1676,1679,1682,1685,1688,1691,
1694,1698,1702,1705,1708,1711,1714,1717,
1720,1723,1726,1729,1732,1736,1740,1744,
1748,1751,1754,1757,1760,1764,1768,1771,
1774,1777,1780,1783,1786,1789,1792,1795,
1798,1801,1804,1807,1810,1813,1816,1820,
1824,1827,1830,1833,1836,1839,1842,1845,
1848,1852,1856,1859,1862,1865,1868,1871,
1874,1877,1880,1883,1886,1889,1892,1895,
1898,1901,1904,1907,1910,1914,1918,1922,
1926,1930,1934,1938,1942,1945,1948,1951,
1954,1957,1960,1963,1966,1970,1974,1977,
1980,1983,1986,1989,1992,1996,2000,2004,
2008,2012,2016,2019,2022,2025,2028,2031,
2034,2037,2040,2043,2046,2049,2052,2055,
2058,2062,2066,2070,2074,2077,2080,2083,
/* Block: 32 */
2086,2089,2092,2095,2098,2101,2104,2107,
2110,2113,2116,2119,2122,2125,2128,2131,
2134,2137,2140,2143,2146,2149,2152,2155,
2158,2161,2164,2167,0,0,0,0,
2170,2173,2176,2179,2182,2186,2190,2194,
2198,2202,2206,2210,2214,2218,2222,2226,
2230,2234,2238,2242,2246,2250,2254,2258,
2262,2265,2268,2271,2274,2277,2280,2284,
2288,2292,2296,2300,2304,2308,2312,2316,
2320,2323,2326,2329,2332,2335,2338,2341,
2344,2348,2352,2356,2360,2364,2368,2372,
2376,2380,2384,2388,2392,2396,2400,2404,
2408,2412,2416,2420,2424,2427,2430,2433,
2436,2440,2444,2448,2452,2456,2460,2464,
2468,2472,2476,2479,2482,2485,2488,2491,
2494,2497,0,0,0,0,0,0,
/* Block: 33 */
2500,2503,2506,2510,2514,2518,2522,2526,
2530,2533,2536,2540,2544,2548,2552,2556,
2560,2563,2566,2570,2574,2578,0,0,
2582,2585,2588,2592,2596,2600,0,0,
2604,2607,2610,2614,2618,2622,2626,2630,
2634,2637,2640,2644,2648,2652,2656,2660,
2664,2667,2670,2674,2678,2682,2686,2690,
2694,2697,2700,2704,2708,2712,2716,2720,
2724,2727,2730,2734,2738,2742,0,0,
2746,2749,2752,2756,2760,2764,0,0,
2768,2771,2774,2778,2782,2786,2790,2794,
0,2798,0,2801,0,2805,0,2809,
2813,2816,2819,2823,2827,2831,2835,2839,
2843,2846,2849,2853,2857,2861,2865,2869,
2873,2876,2879,2882,2885,2888,2891,2894,
2897,2900,2903,2906,2909,2912,0,0,
/* Block: 34 */
2915,2919,2923,2928,2933,2938,2943,2948,
2953,2957,2961,2966,2971,2976,2981,2986,
2991,2995,2999,3004,3009,3014,3019,3024,
3029,3033,3037,3042,3047,3052,3057,3062,
3067,3071,3075,3080,3085,3090,3095,3100,
3105,3109,3113,3118,3123,3128,3133,3138,
3143,3146,3149,3153,3156,0,3160,3163,
3167,3170,3173,3176,3179,3182,3185,3187,
3190,3193,3197,3201,3204,0,3208,3211,
3215,3218,3221,3224,3227,3230,3234,3238,
3242,3245,3248,3252,0,0,3256,3259,
3263,3266,3269,3272,0,3275,3279,3283,
3287,3290,3293,3297,3301,3304,3307,3310,
3314,3317,3320,3323,3326,3329,3333,3337,
0,0,3339,3343,3346,0,3350,3353,
3357,3360,3363,3366,3369,3372,3375,0,
/* Block: 35 */
3378,3380,3382,3384,3386,3388,3390,3392,
3394,3396,3398,0,0,0,0,0,
0,3400,0,0,0,0,0,3402,
0,0,0,0,0,0,0,0,
0,0,0,0,3405,3407,3410,0,
0,0,0,0,0,0,0,3414,
0,0,0,3416,3419,0,3423,3426,
0,0,0,0,3430,0,3433,0,
0,0,0,0,0,0,0,3436,
3439,3442,0,0,0,0,0,0,
0,0,0,0,0,0,0,3445,
0,0,0,0,0,0,0,3450,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
3452,3454,0,0,3456,3458,3460,3462,
3464,3466,3468,3470,3472,3474,3476,3478,
/* Block: 36 */
3480,3482,3484,3486,3488,3490,3492,3494,
3496,3498,3500,3502,3504,3506,3508,0,
3510,3512,3514,3516,3518,3520,3522,3524,
3526,3528,3530,3532,3534,0,0,0,
0,0,0,0,0,0,0,0,
3536,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 37 */
3539,3543,3547,3549,0,3552,3556,3560,
0,3562,3565,3567,3569,3571,3573,3575,
3577,3579,3581,3583,0,3585,3587,0,
0,3590,3592,3594,3596,3598,0,0,
3600,3603,3607,0,3610,0,3612,0,
3614,0,3616,3618,3621,3623,0,3625,
3627,3629,0,3631,3633,3635,3637,3639,
3641,3643,0,3645,3649,3651,3653,3655,
3657,0,0,0,0,3659,3661,3663,
3665,3667,0,0,0,0,0,0,
3669,3673,3677,3682,3686,3690,3694,3698,
3702,3706,3710,3714,3718,3722,3726,3730,
3733,3735,3738,3742,3745,3747,3750,3754,
3759,3762,3764,3767,3771,3773,3775,3777,
3779,3781,3784,3788,3791,3793,3796,3800,
3805,3808,3810,3813,3817,3819,3821,3823,
/* Block: 38 */
0,0,0,0,0,0,0,0,
0,3825,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,3829,3832,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,3835,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,3838,3841,3844,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 39 */
0,0,0,0,3847,0,0,0,
0,3850,0,0,3853,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,3856,0,3859,0,
0,0,0,0,3862,3865,0,3869,
3872,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,3876,0,0,3879,0,0,3882,
0,3885,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
3888,0,3891,0,0,0,0,0,
0,0,0,0,0,3894,3897,3900,
3903,3906,0,0,3909,3912,0,0,
3915,3918,0,0,0,0,0,0,
/* Block: 40 */
3921,3924,0,0,3927,3930,0,0,
3933,3936,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,3939,3942,3945,3948,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
3951,3954,3957,3960,0,0,0,0,
0,0,3963,3966,3969,3972,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 41 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,3975,3977,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 42 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
3979,3981,3983,3985,3987,3989,3991,3993,
3995,3997,4000,4003,4006,4009,4012,4015,
4018,4021,4024,4027,4030,4034,4038,4042,
4046,4050,4054,4058,4062,4066,4071,4076,
/* Block: 43 */
4081,4086,4091,4096,4101,4106,4111,4116,
4121,4124,4127,4130,4133,4136,4139,4142,
4145,4148,4152,4156,4160,4164,4168,4172,
4176,4180,4184,4188,4192,4196,4200,4204,
4208,4212,4216,4220,4224,4228,4232,4236,
4240,4244,4248,4252,4256,4260,4264,4268,
4272,4276,4280,4284,4288,4292,4296,4298,
4300,4302,4304,4306,4308,4310,4312,4314,
4316,4318,4320,4322,4324,4326,4328,4330,
4332,4334,4336,4338,4340,4342,4344,4346,
4348,4350,4352,4354,4356,4358,4360,4362,
4364,4366,4368,4370,4372,4374,4376,4378,
4380,4382,4384,4386,4388,4390,4392,4394,
4396,4398,4400,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 44 */
0,0,0,0,0,0,0,0,
0,0,0,0,4402,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,4407,4411,4414,0,
0,0,0,0,0,0,0,0,
/* Block: 45 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,4418,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 46 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,4421,4423,0,0,
/* Block: 47 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,4425,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 48 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,4427,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,4429,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 49 */
4431,4433,4435,4437,4439,4441,4443,4445,
4447,4449,4451,4453,4455,4457,4459,4461,
4463,4465,4467,4469,4471,4473,4475,4477,
4479,4481,4483,4485,4487,4489,4491,4493,
4495,4497,4499,4501,4503,4505,4507,4509,
4511,4513,4515,4517,4519,4521,4523,4525,
4527,4529,4531,4533,4535,4537,4539,4541,
4543,4545,4547,4549,4551,4553,4555,4557,
4559,4561,4563,4565,4567,4569,4571,4573,
4575,4577,4579,4581,4583,4585,4587,4589,
4591,4593,4595,4597,4599,4601,4603,4605,
4607,4609,4611,4613,4615,4617,4619,4621,
4623,4625,4627,4629,4631,4633,4635,4637,
4639,4641,4643,4645,4647,4649,4651,4653,
4655,4657,4659,4661,4663,4665,4667,4669,
4671,4673,4675,4677,4679,4681,4683,4685,
/* Block: 50 */
4687,4689,4691,4693,4695,4697,4699,4701,
4703,4705,4707,4709,4711,4713,4715,4717,
4719,4721,4723,4725,4727,4729,4731,4733,
4735,4737,4739,4741,4743,4745,4747,4749,
4751,4753,4755,4757,4759,4761,4763,4765,
4767,4769,4771,4773,4775,4777,4779,4781,
4783,4785,4787,4789,4791,4793,4795,4797,
4799,4801,4803,4805,4807,4809,4811,4813,
4815,4817,4819,4821,4823,4825,4827,4829,
4831,4833,4835,4837,4839,4841,4843,4845,
4847,4849,4851,4853,4855,4857,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 51 */
4859,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,4861,0,
4863,4865,4867,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,4869,0,4872,0,
4875,0,4878,0,4881,0,4884,0,
4887,0,4890,0,4893,0,4896,0,
4899,0,4902,0,0,4905,0,4908,
0,4911,0,0,0,0,0,0,
4914,4917,0,4920,4923,0,4926,4929,
0,4932,4935,0,4938,4941,0,0,
/* Block: 52 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,4944,0,0,0,
0,0,0,4947,4950,0,4953,4956,
0,0,0,0,0,0,0,0,
0,0,0,0,4959,0,4962,0,
4965,0,4968,0,4971,0,4974,0,
4977,0,4980,0,4983,0,4986,0,
4989,0,4992,0,0,4995,0,4998,
0,5001,0,0,0,0,0,0,
5004,5007,0,5010,5013,0,5016,5019,
0,5022,5025,0,5028,5031,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,5034,0,0,5037,
5040,5043,5046,0,0,0,5049,5052,
/* Block: 53 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,5055,5057,5059,5061,5063,5065,5067,
5069,5071,5073,5075,5077,5079,5081,5083,
5085,5087,5089,5091,5093,5095,5097,5099,
5101,5103,5105,5107,5109,5111,5113,5115,
5117,5119,5121,5123,5125,5127,5129,5131,
5133,5135,5137,5139,5141,5143,5145,5147,
5149,5151,5153,5155,5157,5159,5161,5163,
5165,5167,5169,5171,5173,5175,5177,5179,
5181,5183,5185,5187,5189,5191,5193,5195,
5197,5199,5201,5203,5205,5207,5209,5211,
/* Block: 54 */
5213,5215,5217,5219,5221,5223,5225,5227,
5229,5231,5233,5235,5237,5239,5241,0,
0,0,5243,5245,5247,5249,5251,5253,
5255,5257,5259,5261,5263,5265,5267,5269,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 55 */
5271,5275,5279,5283,5287,5291,5295,5299,
5303,5307,5311,5315,5319,5323,5327,5332,
5337,5342,5347,5352,5357,5362,5367,5372,
5377,5382,5387,5392,5397,5402,5410,0,
5417,5421,5425,5429,5433,5437,5441,5445,
5449,5453,5457,5461,5465,5469,5473,5477,
5481,5485,5489,5493,5497,5501,5505,5509,
5513,5517,5521,5525,5529,5533,5537,5541,
5545,5549,5553,5557,5561,5563,5565,5567,
0,0,0,0,0,0,0,0,
5569,5573,5576,5579,5582,5585,5588,5591,
5594,5597,5600,5603,5606,5609,5612,5615,
5618,5620,5622,5624,5626,5628,5630,5632,
5634,5636,5638,5640,5642,5644,5646,5649,
5652,5655,5658,5661,5664,5667,5670,5673,
5676,5679,5682,5685,5688,5694,5699,0,
/* Block: 56 */
5702,5704,5706,5708,5710,5712,5714,5716,
5718,5720,5722,5724,5726,5728,5730,5732,
5734,5736,5738,5740,5742,5744,5746,5748,
5750,5752,5754,5756,5758,5760,5762,5764,
5766,5768,5770,5772,5774,5776,5778,5780,
5782,5784,5786,5788,5790,5792,5794,5796,
5798,5800,5803,5806,5809,5812,5815,5818,
5821,5824,5827,5830,5833,5836,5839,5842,
5845,5848,5851,5854,5857,5860,5863,5866,
5869,5872,5876,5880,5884,5887,5891,5894,
5898,5900,5902,5904,5906,5908,5910,5912,
5914,5916,5918,5920,5922,5924,5926,5928,
5930,5932,5934,5936,5938,5940,5942,5944,
5946,5948,5950,5952,5954,5956,5958,5960,
5962,5964,5966,5968,5970,5972,5974,5976,
5978,5980,5982,5984,5986,5988,5990,5992,
/* Block: 57 */
5995,6001,6006,6012,6016,6022,6026,6030,
6037,6042,6046,6050,6054,6059,6064,6069,
6074,6079,6084,6089,6096,6099,6106,6113,
6119,6124,6131,6138,6143,6147,6151,6156,
6161,6167,6173,6177,6181,6186,6190,6194,
6197,6200,6204,6208,6215,6220,6226,6233,
6238,6242,6246,6253,6258,6265,6269,6275,
6279,6284,6288,6293,6299,6304,6310,6315,
6318,6324,6328,6332,6337,6341,6345,6349,
6355,6360,6363,6370,6374,6380,6385,6390,
6394,6398,6403,6406,6411,6417,6420,6427,
6431,6434,6437,6440,6443,6446,6449,6452,
6455,6458,6461,6465,6469,6473,6477,6481,
6485,6489,6493,6497,6501,6505,6509,6513,
6517,6521,6525,6528,6531,6535,6538,6541,
6544,6548,6552,6555,6558,6561,6564,6567,
/* Block: 58 */
6572,6575,6578,6581,6584,6587,6590,6593,
6596,6600,6605,6608,6611,6614,6617,6620,
6623,6626,6630,6634,6638,6642,6645,6648,
6651,6654,6657,6660,6663,6666,6669,6672,
6676,6680,6683,6687,6691,6695,6698,6702,
6706,6711,6714,6718,6722,6726,6730,6736,
6743,6746,6749,6752,6755,6758,6761,6764,
6767,6770,6773,6776,6779,6782,6785,6788,
6791,6794,6797,6802,6805,6808,6811,6816,
6820,6823,6826,6829,6832,6835,6838,6841,
6844,6847,6850,6854,6857,6860,6864,6868,
6871,6876,6880,6883,6886,6889,6892,6896,
6900,6903,6906,6909,6912,6915,6918,6921,
6924,6927,6931,6935,6939,6943,6947,6951,
6955,6959,6963,6967,6971,6975,6979,6983,
6987,6991,6995,6999,7003,7007,7011,7015,
/* Block: 59 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,7019,7021,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 60 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
7023,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 61 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,7025,7027,7029,0,0,0,
7031,7033,0,0,0,0,0,0,
/* Block: 62 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,7035,7037,7039,7041,
0,0,0,0,0,0,0,0,
0,7043,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 63 */
7045,7047,7049,7051,7053,7055,7057,7059,
7061,7063,7065,7067,7069,7071,7073,7075,
7077,7079,7081,7083,7085,7087,7089,7091,
7093,7095,7097,7099,7101,7103,7105,7107,
7109,7111,7113,7115,7117,7119,7121,7123,
7125,7127,7129,7131,7133,7135,7137,7139,
7141,7143,7145,7147,7149,7151,7153,7155,
7157,7159,7161,7163,7165,7167,7169,7171,
7173,7175,7177,7179,7181,7183,7185,7187,
7189,7191,7193,7195,7197,7199,7201,7203,
7205,7207,7209,7211,7213,7215,7217,7219,
7221,7223,7225,7227,7229,7231,7233,7235,
7237,7239,7241,7243,7245,7247,7249,7251,
7253,7255,7257,7259,7261,7263,7265,7267,
7269,7271,7273,7275,7277,7279,7281,7283,
7285,7287,7289,7291,7293,7295,7297,7299,
/* Block: 64 */
7301,7303,7305,7307,7309,7311,7313,7315,
7317,7319,7321,7323,7325,7327,7329,7331,
7333,7335,7337,7339,7341,7343,7345,7347,
7349,7351,7353,7355,7357,7359,7361,7363,
7365,7367,7369,7371,7373,7375,7377,7379,
7381,7383,7385,7387,7389,7391,7393,7395,
7397,7399,7401,7403,7405,7407,7409,7411,
7413,7415,7417,7419,7421,7423,7425,7427,
7429,7431,7433,7435,7437,7439,7441,7443,
7445,7447,7449,7451,7453,7455,7457,7459,
7461,7463,7465,7467,7469,7471,7473,7475,
7477,7479,7481,7483,7485,7487,7489,7491,
7493,7495,7497,7499,7501,7503,7505,7507,
7509,7511,7513,7515,7517,7519,7521,7523,
7525,7527,7529,7531,7533,7535,7537,7539,
7541,7543,7545,7547,7549,7551,7553,7555,
/* Block: 65 */
7557,7559,7561,7563,7565,7567,7569,7571,
7573,7575,7577,7579,7581,7583,0,0,
7585,0,7587,0,0,7589,7591,7593,
7595,7597,7599,7601,7603,7605,7607,0,
7609,0,7611,0,0,7613,7615,0,
0,0,7617,7619,7621,7623,7625,7627,
7629,7631,7633,7635,7637,7639,7641,7643,
7645,7647,7649,7651,7653,7655,7657,7659,
7661,7663,7665,7667,7669,7671,7673,7675,
7677,7679,7681,7683,7685,7687,7689,7691,
7693,7695,7697,7699,7701,7703,7705,7707,
7709,7711,7713,7715,7717,7719,7721,7723,
7725,7727,7729,7731,7733,7735,7737,7739,
7741,7743,7745,7747,7749,7751,0,0,
7753,7755,7757,7759,7761,7763,7765,7767,
7769,7771,7773,7775,7777,7779,7781,7783,
/* Block: 66 */
7785,7787,7789,7791,7793,7795,7797,7799,
7801,7803,7805,7807,7809,7811,7813,7815,
7817,7819,7821,7823,7825,7827,7829,7831,
7833,7835,7837,7839,7841,7843,7845,7847,
7849,7851,7853,7855,7857,7859,7861,7863,
7865,7867,7869,7871,7873,7875,7877,7879,
7881,7883,7885,7887,7889,7891,7893,7895,
7897,7899,7901,7903,7905,7907,7909,7911,
7913,7915,7917,7919,7921,7923,7925,7927,
7929,7931,7933,7935,7937,7939,7941,7943,
7945,7947,7949,7951,7953,7955,7957,7959,
7961,7963,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 67 */
7965,7968,7971,7974,7978,7982,7985,0,
0,0,0,0,0,0,0,0,
0,0,0,7988,7991,7994,7997,8000,
0,0,0,0,0,8003,0,8006,
8009,8011,8013,8015,8017,8019,8021,8023,
8025,8027,8029,8032,8035,8039,8043,8046,
8049,8052,8055,8058,8061,8064,8067,0,
8070,8073,8076,8079,8082,0,8085,0,
8088,8091,0,8094,8097,0,8100,8103,
8106,8109,8112,8115,8118,8121,8124,8127,
8130,8132,8134,8136,8138,8140,8142,8144,
8146,8148,8150,8152,8154,8156,8158,8160,
8162,8164,8166,8168,8170,8172,8174,8176,
8178,8180,8182,8184,8186,8188,8190,8192,
8194,8196,8198,8200,8202,8204,8206,8208,
8210,8212,8214,8216,8218,8220,8222,8224,
/* Block: 68 */
8226,8228,8230,8232,8234,8236,8238,8240,
8242,8244,8246,8248,8250,8252,8254,8256,
8258,8260,8262,8264,8266,8268,8270,8272,
8274,8276,8278,8280,8282,8284,8286,8288,
8290,8292,8294,8296,8298,8301,8304,8306,
8308,8310,8312,8314,8316,8318,8320,8322,
8324,8327,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,8330,8332,8334,8336,8338,
8340,8342,8344,8346,8348,8350,8353,8355,
8357,8359,8361,8363,8365,8367,8369,8371,
8373,8375,8377,8381,8385,8389,8393,8397,
8401,8405,8409,8413,8417,8421,8425,8429,
8433,8437,8441,8445,8449,8451,8453,8455,
/* Block: 69 */
8457,8461,8465,8469,8473,8477,8480,8483,
8486,8489,8492,8495,8498,8501,8504,8507,
8510,8513,8516,8519,8522,8525,8528,8531,
8534,8537,8540,8543,8546,8549,8552,8555,
8558,8561,8564,8567,8570,8573,8576,8579,
8582,8585,8588,8591,8594,8597,8600,8603,
8606,8609,8612,8615,8618,8621,8624,8627,
8630,8633,8636,8639,8642,8645,8648,8651,
8654,8657,8660,8663,8666,8669,8672,8675,
8678,8681,8684,8687,8690,8693,8696,8699,
8702,8705,8708,8711,8714,8717,8720,8723,
8726,8729,8732,8735,8738,8741,8744,8748,
8752,8756,8760,8764,8768,8772,8776,8780,
8784,8788,8792,8795,8798,8801,8804,8807,
8810,8813,8816,8819,8822,8825,8828,8831,
8834,8837,8840,8843,8846,8849,8852,8855,
/* Block: 70 */
8858,8861,8864,8867,8870,8873,8876,8879,
8882,8885,8888,8891,8894,8897,8900,8903,
8906,8909,8912,8915,8918,8921,8924,8927,
8931,8935,8939,8943,8947,8950,8953,8956,
8959,8962,8965,8968,8971,8974,8977,8980,
8983,8986,8989,8992,8995,8998,9001,9004,
9007,9010,9013,9016,9019,9022,9025,9028,
9031,9034,9037,9040,9043,9046,9049,9052,
9055,9058,9061,9064,9067,9070,9073,9076,
9079,9082,9085,9088,9091,9094,9097,9100,
9103,9106,9109,9112,9115,9118,9121,9124,
9127,9130,9133,9136,9139,9142,9145,9148,
9152,9156,9159,9162,9165,9168,9171,9174,
9177,9180,9183,9186,9189,9192,9195,9198,
9201,9204,9207,9211,9215,9219,9222,9225,
9228,9231,9234,9237,9240,9243,9246,9249,
/* Block: 71 */
9252,9255,9258,9261,9264,9267,9270,9273,
9276,9279,9282,9285,9288,9291,9294,9297,
9300,9303,9306,9309,9312,9315,9318,9321,
9324,9327,9330,9333,9336,9339,9342,9345,
9348,9351,9354,9357,9360,9363,9366,9369,
9372,9375,9378,9381,9384,9387,9390,9393,
9396,9399,9402,9405,9408,9411,9414,9417,
9420,9423,9426,9429,9432,9435,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
9438,9442,9446,9450,9454,9458,9462,9466,
9470,9474,9478,9482,9486,9490,9494,9498,
9502,9506,9510,9514,9518,9522,9526,9530,
9534,9538,9542,9546,9550,9554,9558,9562,
9566,9570,9574,9578,9582,9586,9590,9594,
9598,9602,9606,9610,9614,9618,9622,9626,
/* Block: 72 */
9630,9634,9638,9642,9646,9650,9654,9658,
9662,9666,9670,9674,9678,9682,9686,9690,
0,0,9694,9698,9702,9706,9710,9714,
9718,9722,9726,9730,9734,9738,9742,9746,
9750,9754,9758,9762,9766,9770,9774,9778,
9782,9786,9790,9794,9798,9802,9806,9810,
9814,9818,9822,9826,9830,9834,9838,9842,
9846,9850,9854,9858,9862,9866,9870,9874,
9878,9882,9886,9890,9894,9898,9902,9906,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
9910,9914,9918,9923,9928,9933,9938,9943,
9948,9953,9957,9976,9985,0,0,0,
/* Block: 73 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
9990,9992,9994,9996,9998,10000,10002,10004,
10006,10008,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
10012,10015,10017,10019,10021,10023,10025,10027,
10029,10031,10033,10035,10037,10039,10041,10043,
10045,10047,10049,10051,10053,0,0,10055,
10057,10059,10062,10065,10068,10071,10073,10075,
10077,10079,10081,0,10083,10085,10087,10089,
10091,10093,10095,10097,10099,10101,10103,10105,
10107,10109,10111,10113,10115,10117,10119,0,
10121,10123,10125,10127,0,0,0,0,
10129,10132,10135,0,10138,0,10141,10144,
10147,10150,10153,10156,10159,10162,10165,10168,
/* Block: 74 */
10171,10173,10176,10179,10182,10185,10188,10191,
10194,10197,10200,10203,10206,10209,10211,10213,
10215,10217,10219,10221,10223,10225,10227,10229,
10231,10233,10235,10237,10239,10241,10243,10245,
10247,10249,10251,10253,10255,10257,10259,10261,
10263,10265,10267,10269,10271,10273,10275,10277,
10279,10281,10283,10285,10287,10289,10291,10293,
10295,10297,10299,10301,10303,10305,10307,10309,
10311,10313,10315,10317,10319,10321,10323,10325,
10327,10329,10331,10333,10335,10337,10339,10341,
10343,10345,10347,10349,10351,10353,10355,10357,
10359,10361,10363,10365,10367,10369,10371,10373,
10375,10377,10379,10381,10383,10385,10387,10389,
10391,10393,10395,10397,10399,10401,10403,10405,
10407,10409,10411,10413,10415,10417,10421,10425,
10429,10433,10437,10441,10444,0,0,0,
/* Block: 75 */
0,10447,10449,10451,10453,10455,10457,10459,
10461,10463,10465,10467,10469,10471,10473,10475,
10477,10479,10481,10483,10485,10487,10489,10491,
10493,10495,10497,10499,10501,10503,10505,10507,
10509,10511,10513,10515,10517,10519,10521,10523,
10525,10527,10529,10531,10533,10535,10537,10539,
10541,10543,10545,10547,10549,10551,10553,10555,
10557,10559,10561,10563,10565,10567,10569,10571,
10573,10575,10577,10579,10581,10583,10585,10587,
10589,10591,10593,10595,10597,10599,10601,10603,
10605,10607,10609,10611,10613,10615,10617,10619,
10621,10623,10625,10627,10629,10631,10633,10635,
10637,10639,10641,10643,10645,10647,10649,10651,
10653,10655,10657,10659,10661,10663,10665,10667,
10669,10671,10673,10675,10677,10679,10681,10683,
10685,10687,10689,10691,10693,10695,10697,10699,
/* Block: 76 */
10701,10703,10705,10707,10709,10711,10713,10715,
10717,10719,10721,10723,10725,10727,10729,10731,
10733,10735,10737,10739,10741,10743,10745,10747,
10749,10751,10753,10755,10757,10759,10761,10763,
10765,10767,10769,10771,10773,10775,10777,10779,
10781,10783,10785,10787,10789,10791,10793,10795,
10797,10799,10801,10803,10805,10807,10809,10811,
10813,10815,10817,10819,10821,10823,10825,0,
0,0,10827,10829,10831,10833,10835,10837,
0,0,10839,10841,10843,10845,10847,10849,
0,0,10851,10853,10855,10857,10859,10861,
0,0,10863,10865,10867,0,0,0,
10869,10871,10873,10875,10878,10880,10882,0,
10884,10886,10888,10890,10892,10894,10896,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 77 */
0,10898,10900,10902,10904,10906,0,10908,
10910,10912,10914,10916,10918,10920,10922,10924,
10926,10928,10930,10932,10934,10936,10938,10940,
10942,10944,10946,10948,10950,10952,10954,10956,
10958,10960,10962,10964,10966,10968,10970,10972,
10974,10976,10978,10980,10982,10984,10986,10988,
10990,0,10992,10994,10996,10998,11000,11002,
11004,11006,11008,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 78 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,11010,0,11013,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,11016,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 79 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,11019,11022,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 80 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,11025,11028,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 81 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,11031,11034,0,11037,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 82 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,11040,11043,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 83 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
11046,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 84 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,11049,11052,
11055,11059,11063,11067,11071,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 85 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,11075,11078,11081,11085,11089,
11093,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 86 */
11097,11099,11101,11103,11105,11107,11109,11111,
11113,11115,11117,11119,11121,11123,11125,11127,
11129,11131,11133,11135,11137,11139,11141,11143,
11145,11147,11149,11151,11153,11155,11157,11159,
11161,11163,11165,11167,11169,11171,11173,11175,
11177,11179,11181,11183,11185,11187,11189,11191,
11193,11195,11197,11199,11201,11203,11205,11207,
11209,11211,11213,11215,11217,11219,11221,11223,
11225,11227,11229,11231,11233,11235,11237,11239,
11241,11243,11245,11247,11249,11251,11253,11255,
11257,11259,11261,11263,11265,0,11267,11269,
11271,11273,11275,11277,11279,11281,11283,11285,
11287,11289,11291,11293,11295,11297,11299,11301,
11303,11305,11307,11309,11311,11313,11315,11317,
11319,11321,11323,11325,11327,11329,11331,11333,
11335,11337,11339,11341,11343,11345,11347,11349,
/* Block: 87 */
11351,11353,11355,11357,11359,11361,11363,11365,
11367,11369,11371,11373,11375,11377,11379,11381,
11383,11385,11387,11389,11391,11393,11395,11397,
11399,11401,11403,11405,11407,0,11409,11411,
0,0,11413,0,0,11415,11417,0,
0,11419,11421,11423,11425,0,11427,11429,
11431,11433,11435,11437,11439,11441,11443,11445,
11447,11449,0,11451,0,11453,11455,11457,
11459,11461,11463,11465,0,11467,11469,11471,
11473,11475,11477,11479,11481,11483,11485,11487,
11489,11491,11493,11495,11497,11499,11501,11503,
11505,11507,11509,11511,11513,11515,11517,11519,
11521,11523,11525,11527,11529,11531,11533,11535,
11537,11539,11541,11543,11545,11547,11549,11551,
11553,11555,11557,11559,11561,11563,11565,11567,
11569,11571,11573,11575,11577,11579,11581,11583,
/* Block: 88 */
11585,11587,11589,11591,11593,11595,0,11597,
11599,11601,11603,0,0,11605,11607,11609,
11611,11613,11615,11617,11619,0,11621,11623,
11625,11627,11629,11631,11633,0,11635,11637,
11639,11641,11643,11645,11647,11649,11651,11653,
11655,11657,11659,11661,11663,11665,11667,11669,
11671,11673,11675,11677,11679,11681,11683,11685,
11687,11689,0,11691,11693,11695,11697,0,
11699,11701,11703,11705,11707,0,11709,0,
0,0,11711,11713,11715,11717,11719,11721,
11723,0,11725,11727,11729,11731,11733,11735,
11737,11739,11741,11743,11745,11747,11749,11751,
11753,11755,11757,11759,11761,11763,11765,11767,
11769,11771,11773,11775,11777,11779,11781,11783,
11785,11787,11789,11791,11793,11795,11797,11799,
11801,11803,11805,11807,11809,11811,11813,11815,
/* Block: 89 */
11817,11819,11821,11823,11825,11827,11829,11831,
11833,11835,11837,11839,11841,11843,11845,11847,
11849,11851,11853,11855,11857,11859,11861,11863,
11865,11867,11869,11871,11873,11875,11877,11879,
11881,11883,11885,11887,11889,11891,11893,11895,
11897,11899,11901,11903,11905,11907,11909,11911,
11913,11915,11917,11919,11921,11923,11925,11927,
11929,11931,11933,11935,11937,11939,11941,11943,
11945,11947,11949,11951,11953,11955,11957,11959,
11961,11963,11965,11967,11969,11971,11973,11975,
11977,11979,11981,11983,11985,11987,11989,11991,
11993,11995,11997,11999,12001,12003,12005,12007,
12009,12011,12013,12015,12017,12019,12021,12023,
12025,12027,12029,12031,12033,12035,12037,12039,
12041,12043,12045,12047,12049,12051,12053,12055,
12057,12059,12061,12063,12065,12067,12069,12071,
/* Block: 90 */
12073,12075,12077,12079,12081,12083,12085,12087,
12089,12091,12093,12095,12097,12099,12101,12103,
12105,12107,12109,12111,12113,12115,12117,12119,
12121,12123,12125,12127,12129,12131,12133,12135,
12137,12139,12141,12143,12145,12147,12149,12151,
12153,12155,12157,12159,12161,12163,12165,12167,
12169,12171,12173,12175,12177,12179,12181,12183,
12185,12187,12189,12191,12193,12195,12197,12199,
12201,12203,12205,12207,12209,12211,12213,12215,
12217,12219,12221,12223,12225,12227,12229,12231,
12233,12235,12237,12239,12241,12243,12245,12247,
12249,12251,12253,12255,12257,12259,12261,12263,
12265,12267,12269,12271,12273,12275,12277,12279,
12281,12283,12285,12287,12289,12291,12293,12295,
12297,12299,12301,12303,12305,12307,12309,12311,
12313,12315,12317,12319,12321,12323,12325,12327,
/* Block: 91 */
12329,12331,12333,12335,12337,12339,12341,12343,
12345,12347,12349,12351,12353,12355,12357,12359,
12361,12363,12365,12367,12369,12371,12373,12375,
12377,12379,12381,12383,12385,12387,12389,12391,
12393,12395,12397,12399,12401,12403,0,0,
12405,12407,12409,12411,12413,12415,12417,12419,
12421,12423,12425,12427,12429,12431,12433,12435,
12437,12439,12441,12443,12445,12447,12449,12451,
12453,12455,12457,12459,12461,12463,12465,12467,
12469,12471,12473,12475,12477,12479,12481,12483,
12485,12487,12489,12491,12493,12495,12497,12499,
12501,12503,12505,12507,12509,12511,12513,12515,
12517,12519,12521,12523,12525,12527,12529,12531,
12533,12535,12537,12539,12541,12543,12545,12547,
12549,12551,12553,12555,12557,12559,12561,12563,
12565,12567,12569,12571,12573,12575,12577,12579,
/* Block: 92 */
12581,12583,12585,12587,12589,12591,12593,12595,
12597,12599,12601,12603,12605,12607,12609,12611,
12613,12615,12617,12619,12621,12623,12625,12627,
12629,12631,12633,12635,12637,12639,12641,12643,
12645,12647,12649,12651,12653,12655,12657,12659,
12661,12663,12665,12667,12669,12671,12673,12675,
12677,12679,12681,12683,12685,12687,12689,12691,
12693,12695,12697,12699,12701,12703,12705,12707,
12709,12711,12713,12715,12717,12719,12721,12723,
12725,12727,12729,12731,12733,12735,12737,12739,
12741,12743,12745,12747,12749,12751,12753,12755,
12757,12759,12761,12763,12765,12767,12769,12771,
12773,12775,12777,12779,12781,12783,12785,12787,
12789,12791,12793,12795,12797,12799,12801,12803,
12805,12807,12809,12811,12813,12815,12817,12819,
12821,12823,12825,12827,12829,12831,12833,12835,
/* Block: 93 */
12837,12839,12841,12843,12845,12847,12849,12851,
12853,12855,12857,12859,12861,12863,12865,12867,
12869,12871,12873,12875,12877,12879,12881,12883,
12885,12887,12889,12891,12893,12895,12897,12899,
12901,12903,12905,12907,12909,12911,12913,12915,
12917,12919,12921,12923,12925,12927,12929,12931,
12933,12935,12937,12939,12941,12943,12945,12947,
12949,12951,12953,12955,12957,12959,12961,12963,
12965,12967,12969,12971,12973,12975,12977,12979,
12981,12983,12985,12987,0,0,12989,12991,
12993,12995,12997,12999,13001,13003,13005,13007,
13009,13011,13013,13015,13017,13019,13021,13023,
13025,13027,13029,13031,13033,13035,13037,13039,
13041,13043,13045,13047,13049,13051,13053,13055,
13057,13059,13061,13063,13065,13067,13069,13071,
13073,13075,13077,13079,13081,13083,13085,13087,
/* Block: 94 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
13089,13091,13093,13095,13097,13099,13101,13103,
13105,13107,13109,13111,13113,13115,13117,13119,
13121,13123,13125,13127,13129,13131,13133,13135,
13137,13139,13141,13143,13145,13147,13149,13151,
13153,13155,13157,13159,13161,13163,13165,13167,
13169,13171,13173,13175,13177,13179,13181,13183,
13185,13187,13189,13191,13193,13195,13197,13199,
13201,13203,13205,13207,13209,13211,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 95 */
13213,13215,13217,13219,0,13221,13223,13225,
13227,13229,13231,13233,13235,13237,13239,13241,
13243,13245,13247,13249,13251,13253,13255,13257,
13259,13261,13263,13265,13267,13269,13271,13273,
0,13275,13277,0,13279,0,0,13281,
0,13283,13285,13287,13289,13291,13293,13295,
13297,13299,13301,0,13303,13305,13307,13309,
0,13311,0,13313,0,0,0,0,
0,0,13315,0,0,0,0,13317,
0,13319,0,13321,0,13323,13325,13327,
0,13329,13331,0,13333,0,0,13335,
0,13337,0,13339,0,13341,0,13343,
0,13345,13347,0,13349,0,0,13351,
13353,13355,13357,0,13359,13361,13363,13365,
13367,13369,13371,0,13373,13375,13377,13379,
0,13381,13383,13385,13387,0,13389,0,
/* Block: 96 */
13391,13393,13395,13397,13399,13401,13403,13405,
13407,13409,0,13411,13413,13415,13417,13419,
13421,13423,13425,13427,13429,13431,13433,13435,
13437,13439,13441,13443,0,0,0,0,
0,13445,13447,13449,0,13451,13453,13455,
13457,13459,0,13461,13463,13465,13467,13469,
13471,13473,13475,13477,13479,13481,13483,13485,
13487,13489,13491,13493,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 97 */
13495,13498,13501,13504,13507,13510,13513,13516,
13519,13522,13525,0,0,0,0,0,
13528,13532,13536,13540,13544,13548,13552,13556,
13560,13564,13568,13572,13576,13580,13584,13588,
13592,13596,13600,13604,13608,13612,13616,13620,
13624,13628,13632,13636,13638,13640,13643,0,
13646,13648,13650,13652,13654,13656,13658,13660,
13662,13664,13666,13668,13670,13672,13674,13676,
13678,13680,13682,13684,13686,13688,13690,13692,
13694,13696,13698,13701,13704,13707,13710,13714,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,13717,13720,13723,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 98 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
13726,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 99 */
13729,13732,13735,0,0,0,0,0,
0,0,0,0,0,0,0,0,
13737,13739,13741,13743,13746,13748,13750,13752,
13754,13756,13758,13760,13762,13764,13766,13768,
13770,13772,13774,13776,13778,13780,13782,13784,
13786,13788,13790,13792,13794,13796,13798,13800,
13802,13804,13806,13808,13810,13812,13814,13816,
13818,13820,13822,13824,0,0,0,0,
13826,13830,13834,13838,13842,13846,13850,13854,
13858,0,0,0,0,0,0,0,
13862,13864,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 100 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
13866,13868,13870,13872,13874,13876,13878,13880,
13882,13884,0,0,0,0,0,0,
/* Block: 101 */
13886,13888,13890,13892,13894,13896,13898,13900,
13902,13904,13906,13908,13910,13912,13914,13916,
13918,13920,13922,13924,13926,13928,13930,13932,
13934,13936,13938,13940,13942,13944,13946,13948,
13950,13952,13954,13956,13958,13960,13962,13964,
13966,13968,13970,13972,13974,13976,13978,13980,
13982,13984,13986,13988,13990,13992,13994,13996,
13998,14000,14002,14004,14006,14008,14010,14012,
14014,14016,14018,14020,14022,14024,14026,14028,
14030,14032,14034,14036,14038,14040,14042,14044,
14046,14048,14050,14052,14054,14056,14058,14060,
14062,14064,14066,14068,14070,14072,14074,14076,
14078,14080,14082,14084,14086,14088,14090,14092,
14094,14096,14098,14100,14102,14104,14106,14108,
14110,14112,14114,14116,14118,14120,14122,14124,
14126,14128,14130,14132,14134,14136,14138,14140,
/* Block: 102 */
14142,14144,14146,14148,14150,14152,14154,14156,
14158,14160,14162,14164,14166,14168,14170,14172,
14174,14176,14178,14180,14182,14184,14186,14188,
14190,14192,14194,14196,14198,14200,14202,14204,
14206,14208,14210,14212,14214,14216,14218,14220,
14222,14224,14226,14228,14230,14232,14234,14236,
14238,14240,14242,14244,14246,14248,14250,14252,
14254,14256,14258,14260,14262,14264,14266,14268,
14270,14272,14274,14276,14278,14280,14282,14284,
14286,14288,14290,14292,14294,14296,14298,14300,
14302,14304,14306,14308,14310,14312,14314,14316,
14318,14320,14322,14324,14326,14328,14330,14332,
14334,14336,14338,14340,14342,14344,14346,14348,
14350,14352,14354,14356,14358,14360,14362,14364,
14366,14368,14370,14372,14374,14376,14378,14380,
14382,14384,14386,14388,14390,14392,14394,14396,
/* Block: 103 */
14398,14400,14402,14404,14406,14408,14410,14412,
14414,14416,14418,14420,14422,14424,14426,14428,
14430,14432,14434,14436,14438,14440,14442,14444,
14446,14448,14450,14452,14454,14456,14458,14460,
14462,14464,14466,14468,14470,14472,14474,14476,
14478,14480,14482,14484,14486,14488,14490,14492,
14494,14496,14498,14500,14502,14504,14506,14508,
14510,14512,14514,14516,14518,14520,14522,14524,
14526,14528,14530,14532,14534,14536,14538,14540,
14542,14544,14546,14548,14550,14552,14554,14556,
14558,14560,14562,14564,14566,14568,14570,14572,
14574,14576,14578,14580,14582,14584,14586,14588,
14590,14592,14594,14596,14598,14600,14602,14604,
14606,14608,14610,14612,14614,14616,14618,14620,
14622,14624,14626,14628,14630,14632,14634,14636,
14638,14640,14642,14644,14646,14648,14650,14652,
/* Block: 104 */
14654,14656,14658,14660,14662,14664,14666,14668,
14670,14672,14674,14676,14678,14680,14682,14684,
14686,14688,14690,14692,14694,14696,14698,14700,
14702,14704,14706,14708,14710,14712,14714,14716,
14718,14720,14722,14724,14726,14728,14730,14732,
14734,14736,14738,14740,14742,14744,14746,14748,
14750,14752,14754,14756,14758,14760,14762,14764,
14766,14768,14770,14772,14774,14776,14778,14780,
14782,14784,14786,14788,14790,14792,14794,14796,
14798,14800,14802,14804,14806,14808,14810,14812,
14814,14816,14818,14820,14822,14824,14826,14828,
14830,14832,14834,14836,14838,14840,14842,14844,
14846,14848,14850,14852,14854,14856,14858,14860,
14862,14864,14866,14868,14870,14872,14874,14876,
14878,14880,14882,14884,14886,14888,14890,14892,
14894,14896,14898,14900,14902,14904,14906,14908,
/* Block: 105 */
14910,14912,14914,14916,14918,14920,14922,14924,
14926,14928,14930,14932,14934,14936,14938,14940,
14942,14944,14946,14948,14950,14952,14954,14956,
14958,14960,14962,14964,14966,14968,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0};

uaix_const_data uaix_data_array(type_codept, stage3_decomp_nfkd, 14970) = {
0,1,32,2,32,776,1,97,
2,32,772,1,50,1,51,2,
32,769,1,956,2,32,807,1,
49,1,111,3,49,8260,52,3,
49,8260,50,3,51,8260,52,2,
65,768,2,65,769,2,65,770,
2,65,771,2,65,776,2,65,
778,2,67,807,2,69,768,2,
69,769,2,69,770,2,69,776,
2,73,768,2,73,769,2,73,
770,2,73,776,2,78,771,2,
79,768,2,79,769,2,79,770,
2,79,771,2,79,776,2,85,
768,2,85,769,2,85,770,2,
85,776,2,89,769,2,97,768,
2,97,769,2,97,770,2,97,
771,2,97,776,2,97,778,2,
99,807,2,101,768,2,101,769,
2,101,770,2,101,776,2,105,
768,2,105,769,2,105,770,2,
105,776,2,110,771,2,111,768,
2,111,769,2,111,770,2,111,
771,2,111,776,2,117,768,2,
117,769,2,117,770,2,117,776,
2,121,769,2,121,776,2,65,
772,2,97,772,2,65,774,2,
97,774,2,65,808,2,97,808,
2,67,769,2,99,769,2,67,
770,2,99,770,2,67,775,2,
99,775,2,67,780,2,99,780,
2,68,780,2,100,780,2,69,
772,2,101,772,2,69,774,2,
101,774,2,69,775,2,101,775,
2,69,808,2,101,808,2,69,
780,2,101,780,2,71,770,2,
103,770,2,71,774,2,103,774,
2,71,775,2,103,775,2,71,
807,2,103,807,2,72,770,2,
104,770,2,73,771,2,105,771,
2,73,772,2,105,772,2,73,
774,2,105,774,2,73,808,2,
105,808,2,73,775,2,73,74,
2,105,106,2,74,770,2,106,
770,2,75,807,2,107,807,2,
76,769,2,108,769,2,76,807,
2,108,807,2,76,780,2,108,
780,2,76,183,2,108,183,2,
78,769,2,110,769,2,78,807,
2,110,807,2,78,780,2,110,
780,2,700,110,2,79,772,2,
111,772,2,79,774,2,111,774,
2,79,779,2,111,779,2,82,
769,2,114,769,2,82,807,2,
114,807,2,82,780,2,114,780,
2,83,769,2,115,769,2,83,
770,2,115,770,2,83,807,2,
115,807,2,83,780,2,115,780,
2,84,807,2,116,807,2,84,
780,2,116,780,2,85,771,2,
117,771,2,85,772,2,117,772,
2,85,774,2,117,774,2,85,
778,2,117,778,2,85,779,2,
117,779,2,85,808,2,117,808,
2,87,770,2,119,770,2,89,
770,2,121,770,2,89,776,2,
90,769,2,122,769,2,90,775,
2,122,775,2,90,780,2,122,
780,1,115,2,79,795,2,111,
795,2,85,795,2,117,795,3,
68,90,780,3,68,122,780,3,
100,122,780,2,76,74,2,76,
106,2,108,106,2,78,74,2,
78,106,2,110,106,2,65,780,
2,97,780,2,73,780,2,105,
780,2,79,780,2,111,780,2,
85,780,2,117,780,3,85,776,
772,3,117,776,772,3,85,776,
769,3,117,776,769,3,85,776,
780,3,117,776,780,3,85,776,
768,3,117,776,768,3,65,776,
772,3,97,776,772,3,65,775,
772,3,97,775,772,2,198,772,
2,230,772,2,71,780,2,103,
780,2,75,780,2,107,780,2,
79,808,2,111,808,3,79,808,
772,3,111,808,772,2,439,780,
2,658,780,2,106,780,2,68,
90,2,68,122,2,100,122,2,
71,769,2,103,769,2,78,768,
2,110,768,3,65,778,769,3,
97,778,769,2,198,769,2,230,
769,2,216,769,2,248,769,2,
65,783,2,97,783,2,65,785,
2,97,785,2,69,783,2,101,
783,2,69,785,2,101,785,2,
73,783,2,105,783,2,73,785,
2,105,785,2,79,783,2,111,
783,2,79,785,2,111,785,2,
82,783,2,114,783,2,82,785,
2,114,785,2,85,783,2,117,
783,2,85,785,2,117,785,2,
83,806,2,115,806,2,84,806,
2,116,806,2,72,780,2,104,
780,2,65,775,2,97,775,2,
69,807,2,101,807,3,79,776,
772,3,111,776,772,3,79,771,
772,3,111,771,772,2,79,775,
2,111,775,3,79,775,772,3,
111,775,772,2,89,772,2,121,
772,1,104,1,614,1,106,1,
114,1,633,1,635,1,641,1,
119,1,121,2,32,774,2,32,
775,2,32,778,2,32,808,2,
32,771,2,32,779,1,611,1,
108,1,115,1,120,1,661,1,
768,1,769,1,787,2,776,769,
1,697,2,32,837,1,59,2,
32,769,3,32,776,769,2,913,
769,1,183,2,917,769,2,919,
769,2,921,769,2,927,769,2,
933,769,2,937,769,3,953,776,
769,2,921,776,2,933,776,2,
945,769,2,949,769,2,951,769,
2,953,769,3,965,776,769,2,
953,776,2,965,776,2,959,769,
2,965,769,2,969,769,1,946,
1,952,1,933,2,933,769,2,
933,776,1,966,1,960,1,954,
1,961,1,962,1,920,1,949,
1,931,2,1045,768,2,1045,776,
2,1043,769,2,1030,776,2,1050,
769,2,1048,768,2,1059,774,2,
1048,774,2,1080,774,2,1077,768,
2,1077,776,2,1075,769,2,1110,
776,2,1082,769,2,1080,768,2,
1091,774,2,1140,783,2,1141,783,
2,1046,774,2,1078,774,2,1040,
774,2,1072,774,2,1040,776,2,
1072,776,2,1045,774,2,1077,774,
2,1240,776,2,1241,776,2,1046,
776,2,1078,776,2,1047,776,2,
1079,776,2,1048,772,2,1080,772,
2,1048,776,2,1080,776,2,1054,
776,2,1086,776,2,1256,776,2,
1257,776,2,1069,776,2,1101,776,
2,1059,772,2,1091,772,2,1059,
776,2,1091,776,2,1059,779,2,
1091,779,2,1063,776,2,1095,776,
2,1067,776,2,1099,776,2,1381,
1410,2,1575,1619,2,1575,1620,2,
1608,1620,2,1575,1621,2,1610,1620,
2,1575,1652,2,1608,1652,2,1735,
1652,2,1610,1652,2,1749,1620,2,
1729,1620,2,1746,1620,2,2344,2364,
2,2352,2364,2,2355,2364,2,2325,
2364,2,2326,2364,2,2327,2364,2,
2332,2364,2,2337,2364,2,2338,2364,
2,2347,2364,2,2351,2364,2,2503,
2494,2,2503,2519,2,2465,2492,2,
2466,2492,2,2479,2492,2,2610,2620,
2,2616,2620,2,2582,2620,2,2583,
2620,2,2588,2620,2,2603,2620,2,
2887,2902,2,2887,2878,2,2887,2903,
2,2849,2876,2,2850,2876,2,2962,
3031,2,3014,3006,2,3015,3006,2,
3014,3031,2,3142,3158,2,3263,3285,
2,3270,3285,2,3270,3286,2,3270,
3266,3,3270,3266,3285,2,3398,3390,
2,3399,3390,2,3398,3415,2,3545,
3530,2,3545,3535,3,3545,3535,3530,
2,3545,3551,2,3661,3634,2,3789,
3762,2,3755,3737,2,3755,3745,1,
3851,2,3906,4023,2,3916,4023,2,
3921,4023,2,3926,4023,2,3931,4023,
2,3904,4021,2,3953,3954,2,3953,
3956,2,4018,3968,3,4018,3953,3968,
2,4019,3968,3,4019,3953,3968,2,
3953,3968,2,3986,4023,2,3996,4023,
2,4001,4023,2,4006,4023,2,4011,
4023,2,3984,4021,2,4133,4142,1,
4316,2,6917,6965,2,6919,6965,2,
6921,6965,2,6923,6965,2,6925,6965,
2,6929,6965,2,6970,6965,2,6972,
6965,2,6974,6965,2,6975,6965,2,
6978,6965,1,65,1,198,1,66,
1,68,1,69,1,398,1,71,
1,72,1,73,1,74,1,75,
1,76,1,77,1,78,1,79,
1,546,1,80,1,82,1,84,
1,85,1,87,1,97,1,592,
1,593,1,7426,1,98,1,100,
1,101,1,601,1,603,1,604,
1,103,1,107,1,109,1,331,
1,111,1,596,1,7446,1,7447,
1,112,1,116,1,117,1,7453,
1,623,1,118,1,7461,1,946,
1,947,1,948,1,966,1,967,
1,105,1,114,1,117,1,118,
1,946,1,947,1,961,1,966,
1,967,1,1085,1,594,1,99,
1,597,1,240,1,604,1,102,
1,607,1,609,1,613,1,616,
1,617,1,618,1,7547,1,669,
1,621,1,7557,1,671,1,625,
1,624,1,626,1,627,1,628,
1,629,1,632,1,642,1,643,
1,427,1,649,1,650,1,7452,
1,651,1,652,1,122,1,656,
1,657,1,658,1,952,2,65,
805,2,97,805,2,66,775,2,
98,775,2,66,803,2,98,803,
2,66,817,2,98,817,3,67,
807,769,3,99,807,769,2,68,
775,2,100,775,2,68,803,2,
100,803,2,68,817,2,100,817,
2,68,807,2,100,807,2,68,
813,2,100,813,3,69,772,768,
3,101,772,768,3,69,772,769,
3,101,772,769,2,69,813,2,
101,813,2,69,816,2,101,816,
3,69,807,774,3,101,807,774,
2,70,775,2,102,775,2,71,
772,2,103,772,2,72,775,2,
104,775,2,72,803,2,104,803,
2,72,776,2,104,776,2,72,
807,2,104,807,2,72,814,2,
104,814,2,73,816,2,105,816,
3,73,776,769,3,105,776,769,
2,75,769,2,107,769,2,75,
803,2,107,803,2,75,817,2,
107,817,2,76,803,2,108,803,
3,76,803,772,3,108,803,772,
2,76,817,2,108,817,2,76,
813,2,108,813,2,77,769,2,
109,769,2,77,775,2,109,775,
2,77,803,2,109,803,2,78,
775,2,110,775,2,78,803,2,
110,803,2,78,817,2,110,817,
2,78,813,2,110,813,3,79,
771,769,3,111,771,769,3,79,
771,776,3,111,771,776,3,79,
772,768,3,111,772,768,3,79,
772,769,3,111,772,769,2,80,
769,2,112,769,2,80,775,2,
112,775,2,82,775,2,114,775,
2,82,803,2,114,803,3,82,
803,772,3,114,803,772,2,82,
817,2,114,817,2,83,775,2,
115,775,2,83,803,2,115,803,
3,83,769,775,3,115,769,775,
3,83,780,775,3,115,780,775,
3,83,803,775,3,115,803,775,
2,84,775,2,116,775,2,84,
803,2,116,803,2,84,817,2,
116,817,2,84,813,2,116,813,
2,85,804,2,117,804,2,85,
816,2,117,816,2,85,813,2,
117,813,3,85,771,769,3,117,
771,769,3,85,772,776,3,117,
772,776,2,86,771,2,118,771,
2,86,803,2,118,803,2,87,
768,2,119,768,2,87,769,2,
119,769,2,87,776,2,119,776,
2,87,775,2,119,775,2,87,
803,2,119,803,2,88,775,2,
120,775,2,88,776,2,120,776,
2,89,775,2,121,775,2,90,
770,2,122,770,2,90,803,2,
122,803,2,90,817,2,122,817,
2,104,817,2,116,776,2,119,
778,2,121,778,2,97,702,2,
115,775,2,65,803,2,97,803,
2,65,777,2,97,777,3,65,
770,769,3,97,770,769,3,65,
770,768,3,97,770,768,3,65,
770,777,3,97,770,777,3,65,
770,771,3,97,770,771,3,65,
803,770,3,97,803,770,3,65,
774,769,3,97,774,769,3,65,
774,768,3,97,774,768,3,65,
774,777,3,97,774,777,3,65,
774,771,3,97,774,771,3,65,
803,774,3,97,803,774,2,69,
803,2,101,803,2,69,777,2,
101,777,2,69,771,2,101,771,
3,69,770,769,3,101,770,769,
3,69,770,768,3,101,770,768,
3,69,770,777,3,101,770,777,
3,69,770,771,3,101,770,771,
3,69,803,770,3,101,803,770,
2,73,777,2,105,777,2,73,
803,2,105,803,2,79,803,2,
111,803,2,79,777,2,111,777,
3,79,770,769,3,111,770,769,
3,79,770,768,3,111,770,768,
3,79,770,777,3,111,770,777,
3,79,770,771,3,111,770,771,
3,79,803,770,3,111,803,770,
3,79,795,769,3,111,795,769,
3,79,795,768,3,111,795,768,
3,79,795,777,3,111,795,777,
3,79,795,771,3,111,795,771,
3,79,795,803,3,111,795,803,
2,85,803,2,117,803,2,85,
777,2,117,777,3,85,795,769,
3,117,795,769,3,85,795,768,
3,117,795,768,3,85,795,777,
3,117,795,777,3,85,795,771,
3,117,795,771,3,85,795,803,
3,117,795,803,2,89,768,2,
121,768,2,89,803,2,121,803,
2,89,777,2,121,777,2,89,
771,2,121,771,2,945,787,2,
945,788,3,945,787,768,3,945,
788,768,3,945,787,769,3,945,
788,769,3,945,787,834,3,945,
788,834,2,913,787,2,913,788,
3,913,787,768,3,913,788,768,
3,913,787,769,3,913,788,769,
3,913,787,834,3,913,788,834,
2,949,787,2,949,788,3,949,
787,768,3,949,788,768,3,949,
787,769,3,949,788,769,2,917,
787,2,917,788,3,917,787,768,
3,917,788,768,3,917,787,769,
3,917,788,769,2,951,787,2,
951,788,3,951,787,768,3,951,
788,768,3,951,787,769,3,951,
788,769,3,951,787,834,3,951,
788,834,2,919,787,2,919,788,
3,919,787,768,3,919,788,768,
3,919,787,769,3,919,788,769,
3,919,787,834,3,919,788,834,
2,953,787,2,953,788,3,953,
787,768,3,953,788,768,3,953,
787,769,3,953,788,769,3,953,
787,834,3,953,788,834,2,921,
787,2,921,788,3,921,787,768,
3,921,788,768,3,921,787,769,
3,921,788,769,3,921,787,834,
3,921,788,834,2,959,787,2,
959,788,3,959,787,768,3,959,
788,768,3,959,787,769,3,959,
788,769,2,927,787,2,927,788,
3,927,787,768,3,927,788,768,
3,927,787,769,3,927,788,769,
2,965,787,2,965,788,3,965,
787,768,3,965,788,768,3,965,
787,769,3,965,788,769,3,965,
787,834,3,965,788,834,2,933,
788,3,933,788,768,3,933,788,
769,3,933,788,834,2,969,787,
2,969,788,3,969,787,768,3,
969,788,768,3,969,787,769,3,
969,788,769,3,969,787,834,3,
969,788,834,2,937,787,2,937,
788,3,937,787,768,3,937,788,
768,3,937,787,769,3,937,788,
769,3,937,787,834,3,937,788,
834,2,945,768,2,945,769,2,
949,768,2,949,769,2,951,768,
2,951,769,2,953,768,2,953,
769,2,959,768,2,959,769,2,
965,768,2,965,769,2,969,768,
2,969,769,3,945,787,837,3,
945,788,837,4,945,787,768,837,
4,945,788,768,837,4,945,787,
769,837,4,945,788,769,837,4,
945,787,834,837,4,945,788,834,
837,3,913,787,837,3,913,788,
837,4,913,787,768,837,4,913,
788,768,837,4,913,787,769,837,
4,913,788,769,837,4,913,787,
834,837,4,913,788,834,837,3,
951,787,837,3,951,788,837,4,
951,787,768,837,4,951,788,768,
837,4,951,787,769,837,4,951,
788,769,837,4,951,787,834,837,
4,951,788,834,837,3,919,787,
837,3,919,788,837,4,919,787,
768,837,4,919,788,768,837,4,
919,787,769,837,4,919,788,769,
837,4,919,787,834,837,4,919,
788,834,837,3,969,787,837,3,
969,788,837,4,969,787,768,837,
4,969,788,768,837,4,969,787,
769,837,4,969,788,769,837,4,
969,787,834,837,4,969,788,834,
837,3,937,787,837,3,937,788,
837,4,937,787,768,837,4,937,
788,768,837,4,937,787,769,837,
4,937,788,769,837,4,937,787,
834,837,4,937,788,834,837,2,
945,774,2,945,772,3,945,768,
837,2,945,837,3,945,769,837,
2,945,834,3,945,834,837,2,
913,774,2,913,772,2,913,768,
2,913,769,2,913,837,2,32,
787,1,953,2,32,787,2,32,
834,3,32,776,834,3,951,768,
837,2,951,837,3,951,769,837,
2,951,834,3,951,834,837,2,
917,768,2,917,769,2,919,768,
2,919,769,2,919,837,3,32,
787,768,3,32,787,769,3,32,
787,834,2,953,774,2,953,772,
3,953,776,768,3,953,776,769,
2,953,834,3,953,776,834,2,
921,774,2,921,772,2,921,768,
2,921,769,3,32,788,768,3,
32,788,769,3,32,788,834,2,
965,774,2,965,772,3,965,776,
768,3,965,776,769,2,961,787,
2,961,788,2,965,834,3,965,
776,834,2,933,774,2,933,772,
2,933,768,2,933,769,2,929,
788,3,32,776,768,3,32,776,
769,1,96,3,969,768,837,2,
969,837,3,969,769,837,2,969,
834,3,969,834,837,2,927,768,
2,927,769,2,937,768,2,937,
769,2,937,837,2,32,769,2,
32,788,1,32,1,32,1,32,
1,32,1,32,1,32,1,32,
1,32,1,32,1,32,1,32,
1,8208,2,32,819,1,46,2,
46,46,3,46,46,46,1,32,
2,8242,8242,3,8242,8242,8242,2,
8245,8245,3,8245,8245,8245,2,33,
33,2,32,773,2,63,63,2,
63,33,2,33,63,4,8242,8242,
8242,8242,1,32,1,48,1,105,
1,52,1,53,1,54,1,55,
1,56,1,57,1,43,1,8722,
1,61,1,40,1,41,1,110,
1,48,1,49,1,50,1,51,
1,52,1,53,1,54,1,55,
1,56,1,57,1,43,1,8722,
1,61,1,40,1,41,1,97,
1,101,1,111,1,120,1,601,
1,104,1,107,1,108,1,109,
1,110,1,112,1,115,1,116,
2,82,115,3,97,47,99,3,
97,47,115,1,67,2,176,67,
3,99,47,111,3,99,47,117,
1,400,2,176,70,1,103,1,
72,1,72,1,72,1,104,1,
295,1,73,1,73,1,76,1,
108,1,78,2,78,111,1,80,
1,81,1,82,1,82,1,82,
2,83,77,3,84,69,76,2,
84,77,1,90,1,937,1,90,
1,75,2,65,778,1,66,1,
67,1,101,1,69,1,70,1,
77,1,111,1,1488,1,1489,1,
1490,1,1491,1,105,3,70,65,
88,1,960,1,947,1,915,1,
928,1,8721,1,68,1,100,1,
101,1,105,1,106,3,49,8260,
55,3,49,8260,57,4,49,8260,
49,48,3,49,8260,51,3,50,
8260,51,3,49,8260,53,3,50,
8260,53,3,51,8260,53,3,52,
8260,53,3,49,8260,54,3,53,
8260,54,3,49,8260,56,3,51,
8260,56,3,53,8260,56,3,55,
8260,56,2,49,8260,1,73,2,
73,73,3,73,73,73,2,73,
86,1,86,2,86,73,3,86,
73,73,4,86,73,73,73,2,
73,88,1,88,2,88,73,3,
88,73,73,1,76,1,67,1,
68,1,77,1,105,2,105,105,
3,105,105,105,2,105,118,1,
118,2,118,105,3,118,105,105,
4,118,105,105,105,2,105,120,
1,120,2,120,105,3,120,105,
105,1,108,1,99,1,100,1,
109,3,48,8260,51,2,8592,824,
2,8594,824,2,8596,824,2,8656,
824,2,8660,824,2,8658,824,2,
8707,824,2,8712,824,2,8715,824,
2,8739,824,2,8741,824,2,8747,
8747,3,8747,8747,8747,2,8750,8750,
3,8750,8750,8750,2,8764,824,2,
8771,824,2,8773,824,2,8776,824,
2,61,824,2,8801,824,2,8781,
824,2,60,824,2,62,824,2,
8804,824,2,8805,824,2,8818,824,
2,8819,824,2,8822,824,2,8823,
824,2,8826,824,2,8827,824,2,
8834,824,2,8835,824,2,8838,824,
2,8839,824,2,8866,824,2,8872,
824,2,8873,824,2,8875,824,2,
8828,824,2,8829,824,2,8849,824,
2,8850,824,2,8882,824,2,8883,
824,2,8884,824,2,8885,824,1,
12296,1,12297,1,49,1,50,1,
51,1,52,1,53,1,54,1,
55,1,56,1,57,2,49,48,
2,49,49,2,49,50,2,49,
51,2,49,52,2,49,53,2,
49,54,2,49,55,2,49,56,
2,49,57,2,50,48,3,40,
49,41,3,40,50,41,3,40,
51,41,3,40,52,41,3,40,
53,41,3,40,54,41,3,40,
55,41,3,40,56,41,3,40,
57,41,4,40,49,48,41,4,
40,49,49,41,4,40,49,50,
41,4,40,49,51,41,4,40,
49,52,41,4,40,49,53,41,
4,40,49,54,41,4,40,49,
55,41,4,40,49,56,41,4,
40,49,57,41,4,40,50,48,
41,2,49,46,2,50,46,2,
51,46,2,52,46,2,53,46,
2,54,46,2,55,46,2,56,
46,2,57,46,3,49,48,46,
3,49,49,46,3,49,50,46,
3,49,51,46,3,49,52,46,
3,49,53,46,3,49,54,46,
3,49,55,46,3,49,56,46,
3,49,57,46,3,50,48,46,
3,40,97,41,3,40,98,41,
3,40,99,41,3,40,100,41,
3,40,101,41,3,40,102,41,
3,40,103,41,3,40,104,41,
3,40,105,41,3,40,106,41,
3,40,107,41,3,40,108,41,
3,40,109,41,3,40,110,41,
3,40,111,41,3,40,112,41,
3,40,113,41,3,40,114,41,
3,40,115,41,3,40,116,41,
3,40,117,41,3,40,118,41,
3,40,119,41,3,40,120,41,
3,40,121,41,3,40,122,41,
1,65,1,66,1,67,1,68,
1,69,1,70,1,71,1,72,
1,73,1,74,1,75,1,76,
1,77,1,78,1,79,1,80,
1,81,1,82,1,83,1,84,
1,85,1,86,1,87,1,88,
1,89,1,90,1,97,1,98,
1,99,1,100,1,101,1,102,
1,103,1,104,1,105,1,106,
1,107,1,108,1,109,1,110,
1,111,1,112,1,113,1,114,
1,115,1,116,1,117,1,118,
1,119,1,120,1,121,1,122,
1,48,4,8747,8747,8747,8747,3,
58,58,61,2,61,61,3,61,
61,61,2,10973,824,1,106,1,
86,1,11617,1,27597,1,40863,1,
19968,1,20008,1,20022,1,20031,1,
20057,1,20101,1,20108,1,20128,1,
20154,1,20799,1,20837,1,20843,1,
20866,1,20886,1,20907,1,20960,1,
20981,1,20992,1,21147,1,21241,1,
21269,1,21274,1,21304,1,21313,1,
21340,1,21353,1,21378,1,21430,1,
21448,1,21475,1,22231,1,22303,1,
22763,1,22786,1,22794,1,22805,1,
22823,1,22899,1,23376,1,23424,1,
23544,1,23567,1,23586,1,23608,1,
23662,1,23665,1,24027,1,24037,1,
24049,1,24062,1,24178,1,24186,1,
24191,1,24308,1,24318,1,24331,1,
24339,1,24400,1,24417,1,24435,1,
24515,1,25096,1,25142,1,25163,1,
25903,1,25908,1,25991,1,26007,1,
26020,1,26041,1,26080,1,26085,1,
26352,1,26376,1,26408,1,27424,1,
27490,1,27513,1,27571,1,27595,1,
27604,1,27611,1,27663,1,27668,1,
27700,1,28779,1,29226,1,29238,1,
29243,1,29247,1,29255,1,29273,1,
29275,1,29356,1,29572,1,29577,1,
29916,1,29926,1,29976,1,29983,1,
29992,1,30000,1,30091,1,30098,1,
30326,1,30333,1,30382,1,30399,1,
30446,1,30683,1,30690,1,30707,1,
31034,1,31160,1,31166,1,31348,1,
31435,1,31481,1,31859,1,31992,1,
32566,1,32593,1,32650,1,32701,1,
32769,1,32780,1,32786,1,32819,1,
32895,1,32905,1,33251,1,33258,1,
33267,1,33276,1,33292,1,33307,1,
33311,1,33390,1,33394,1,33400,1,
34381,1,34411,1,34880,1,34892,1,
34915,1,35198,1,35211,1,35282,1,
35328,1,35895,1,35910,1,35925,1,
35960,1,35997,1,36196,1,36208,1,
36275,1,36523,1,36554,1,36763,1,
36784,1,36789,1,37009,1,37193,1,
37318,1,37324,1,37329,1,38263,1,
38272,1,38428,1,38582,1,38585,1,
38632,1,38737,1,38750,1,38754,1,
38761,1,38859,1,38893,1,38899,1,
38913,1,39080,1,39131,1,39135,1,
39318,1,39321,1,39340,1,39592,1,
39640,1,39647,1,39717,1,39727,1,
39730,1,39740,1,39770,1,40165,1,
40565,1,40575,1,40613,1,40635,1,
40643,1,40653,1,40657,1,40697,1,
40701,1,40718,1,40723,1,40736,1,
40763,1,40778,1,40786,1,40845,1,
40860,1,40864,1,32,1,12306,1,
21313,1,21316,1,21317,2,12363,12441,
2,12365,12441,2,12367,12441,2,12369,
12441,2,12371,12441,2,12373,12441,2,
12375,12441,2,12377,12441,2,12379,12441,
2,12381,12441,2,12383,12441,2,12385,
12441,2,12388,12441,2,12390,12441,2,
12392,12441,2,12399,12441,2,12399,12442,
2,12402,12441,2,12402,12442,2,12405,
12441,2,12405,12442,2,12408,12441,2,
12408,12442,2,12411,12441,2,12411,12442,
2,12358,12441,2,32,12441,2,32,
12442,2,12445,12441,2,12424,12426,2,
12459,12441,2,12461,12441,2,12463,12441,
2,12465,12441,2,12467,12441,2,12469,
12441,2,12471,12441,2,12473,12441,2,
12475,12441,2,12477,12441,2,12479,12441,
2,12481,12441,2,12484,12441,2,12486,
12441,2,12488,12441,2,12495,12441,2,
12495,12442,2,12498,12441,2,12498,12442,
2,12501,12441,2,12501,12442,2,12504,
12441,2,12504,12442,2,12507,12441,2,
12507,12442,2,12454,12441,2,12527,12441,
2,12528,12441,2,12529,12441,2,12530,
12441,2,12541,12441,2,12467,12488,1,
4352,1,4353,1,4522,1,4354,1,
4524,1,4525,1,4355,1,4356,1,
4357,1,4528,1,4529,1,4530,1,
4531,1,4532,1,4533,1,4378,1,
4358,1,4359,1,4360,1,4385,1,
4361,1,4362,1,4363,1,4364,1,
4365,1,4366,1,4367,1,4368,1,
4369,1,4370,1,4449,1,4450,1,
4451,1,4452,1,4453,1,4454,1,
4455,1,4456,1,4457,1,4458,1,
4459,1,4460,1,4461,1,4462,1,
4463,1,4464,1,4465,1,4466,1,
4467,1,4468,1,4469,1,4448,1,
4372,1,4373,1,4551,1,4552,1,
4556,1,4558,1,4563,1,4567,1,
4569,1,4380,1,4573,1,4575,1,
4381,1,4382,1,4384,1,4386,1,
4387,1,4391,1,4393,1,4395,1,
4396,1,4397,1,4398,1,4399,1,
4402,1,4406,1,4416,1,4423,1,
4428,1,4593,1,4594,1,4439,1,
4440,1,4441,1,4484,1,4485,1,
4488,1,4497,1,4498,1,4500,1,
4510,1,4513,1,19968,1,20108,1,
19977,1,22235,1,19978,1,20013,1,
19979,1,30002,1,20057,1,19993,1,
19969,1,22825,1,22320,1,20154,3,
40,4352,41,3,40,4354,41,3,
40,4355,41,3,40,4357,41,3,
40,4358,41,3,40,4359,41,3,
40,4361,41,3,40,4363,41,3,
40,4364,41,3,40,4366,41,3,
40,4367,41,3,40,4368,41,3,
40,4369,41,3,40,4370,41,4,
40,4352,4449,41,4,40,4354,4449,
41,4,40,4355,4449,41,4,40,
4357,4449,41,4,40,4358,4449,41,
4,40,4359,4449,41,4,40,4361,
4449,41,4,40,4363,4449,41,4,
40,4364,4449,41,4,40,4366,4449,
41,4,40,4367,4449,41,4,40,
4368,4449,41,4,40,4369,4449,41,
4,40,4370,4449,41,4,40,4364,
4462,41,7,40,4363,4457,4364,4453,
4523,41,6,40,4363,4457,4370,4462,
41,3,40,19968,41,3,40,20108,
41,3,40,19977,41,3,40,22235,
41,3,40,20116,41,3,40,20845,
41,3,40,19971,41,3,40,20843,
41,3,40,20061,41,3,40,21313,
41,3,40,26376,41,3,40,28779,
41,3,40,27700,41,3,40,26408,
41,3,40,37329,41,3,40,22303,
41,3,40,26085,41,3,40,26666,
41,3,40,26377,41,3,40,31038,
41,3,40,21517,41,3,40,29305,
41,3,40,36001,41,3,40,31069,
41,3,40,21172,41,3,40,20195,
41,3,40,21628,41,3,40,23398,
41,3,40,30435,41,3,40,20225,
41,3,40,36039,41,3,40,21332,
41,3,40,31085,41,3,40,20241,
41,3,40,33258,41,3,40,33267,
41,1,21839,1,24188,1,25991,1,
31631,3,80,84,69,2,50,49,
2,50,50,2,50,51,2,50,
52,2,50,53,2,50,54,2,
50,55,2,50,56,2,50,57,
2,51,48,2,51,49,2,51,
50,2,51,51,2,51,52,2,
51,53,1,4352,1,4354,1,4355,
1,4357,1,4358,1,4359,1,4361,
1,4363,1,4364,1,4366,1,4367,
1,4368,1,4369,1,4370,2,4352,
4449,2,4354,4449,2,4355,4449,2,
4357,4449,2,4358,4449,2,4359,4449,
2,4361,4449,2,4363,4449,2,4364,
4449,2,4366,4449,2,4367,4449,2,
4368,4449,2,4369,4449,2,4370,4449,
5,4366,4449,4535,4352,4457,4,4364,
4462,4363,4468,2,4363,4462,1,19968,
1,20108,1,19977,1,22235,1,20116,
1,20845,1,19971,1,20843,1,20061,
1,21313,1,26376,1,28779,1,27700,
1,26408,1,37329,1,22303,1,26085,
1,26666,1,26377,1,31038,1,21517,
1,29305,1,36001,1,31069,1,21172,
1,31192,1,30007,1,22899,1,36969,
1,20778,1,21360,1,27880,1,38917,
1,20241,1,20889,1,27491,1,19978,
1,20013,1,19979,1,24038,1,21491,
1,21307,1,23447,1,23398,1,30435,
1,20225,1,36039,1,21332,1,22812,
2,51,54,2,51,55,2,51,
56,2,51,57,2,52,48,2,
52,49,2,52,50,2,52,51,
2,52,52,2,52,53,2,52,
54,2,52,55,2,52,56,2,
52,57,2,53,48,2,49,26376,
2,50,26376,2,51,26376,2,52,
26376,2,53,26376,2,54,26376,2,
55,26376,2,56,26376,2,57,26376,
3,49,48,26376,3,49,49,26376,
3,49,50,26376,2,72,103,3,
101,114,103,2,101,86,3,76,
84,68,1,12450,1,12452,1,12454,
1,12456,1,12458,1,12459,1,12461,
1,12463,1,12465,1,12467,1,12469,
1,12471,1,12473,1,12475,1,12477,
1,12479,1,12481,1,12484,1,12486,
1,12488,1,12490,1,12491,1,12492,
1,12493,1,12494,1,12495,1,12498,
1,12501,1,12504,1,12507,1,12510,
1,12511,1,12512,1,12513,1,12514,
1,12516,1,12518,1,12520,1,12521,
1,12522,1,12523,1,12524,1,12525,
1,12527,1,12528,1,12529,1,12530,
2,20196,21644,5,12450,12495,12442,12540,
12488,4,12450,12523,12501,12449,5,12450,
12531,12504,12442,12450,3,12450,12540,12523,
5,12452,12491,12531,12463,12441,3,12452,
12531,12481,3,12454,12457,12531,6,12456,
12473,12463,12540,12488,12441,4,12456,12540,
12459,12540,3,12458,12531,12473,3,12458,
12540,12512,3,12459,12452,12522,4,12459,
12521,12483,12488,4,12459,12525,12522,12540,
4,12459,12441,12525,12531,4,12459,12441,
12531,12510,4,12461,12441,12459,12441,4,
12461,12441,12491,12540,4,12461,12517,12522,
12540,6,12461,12441,12523,12479,12441,12540,
2,12461,12525,6,12461,12525,12463,12441,
12521,12512,6,12461,12525,12513,12540,12488,
12523,5,12461,12525,12527,12483,12488,4,
12463,12441,12521,12512,6,12463,12441,12521,
12512,12488,12531,6,12463,12523,12475,12441,
12452,12525,4,12463,12525,12540,12493,3,
12465,12540,12473,3,12467,12523,12490,4,
12467,12540,12507,12442,4,12469,12452,12463,
12523,5,12469,12531,12481,12540,12512,5,
12471,12522,12531,12463,12441,3,12475,12531,
12481,3,12475,12531,12488,4,12479,12441,
12540,12473,3,12486,12441,12471,3,12488,
12441,12523,2,12488,12531,2,12490,12494,
3,12494,12483,12488,3,12495,12452,12484,
6,12495,12442,12540,12475,12531,12488,4,
12495,12442,12540,12484,5,12495,12441,12540,
12524,12523,6,12498,12442,12450,12473,12488,
12523,4,12498,12442,12463,12523,3,12498,
12442,12467,3,12498,12441,12523,6,12501,
12449,12521,12483,12488,12441,4,12501,12451,
12540,12488,6,12501,12441,12483,12471,12455,
12523,3,12501,12521,12531,5,12504,12463,
12479,12540,12523,3,12504,12442,12477,4,
12504,12442,12491,12498,3,12504,12523,12484,
4,12504,12442,12531,12473,5,12504,12442,
12540,12471,12441,4,12504,12441,12540,12479,
5,12507,12442,12452,12531,12488,4,12507,
12441,12523,12488,2,12507,12531,5,12507,
12442,12531,12488,12441,3,12507,12540,12523,
3,12507,12540,12531,4,12510,12452,12463,
12525,3,12510,12452,12523,3,12510,12483,
12495,3,12510,12523,12463,5,12510,12531,
12471,12519,12531,4,12511,12463,12525,12531,
2,12511,12522,6,12511,12522,12495,12441,
12540,12523,3,12513,12459,12441,5,12513,
12459,12441,12488,12531,4,12513,12540,12488,
12523,4,12516,12540,12488,12441,3,12516,
12540,12523,3,12518,12450,12531,4,12522,
12483,12488,12523,2,12522,12521,4,12523,
12498,12442,12540,5,12523,12540,12501,12441,
12523,2,12524,12512,6,12524,12531,12488,
12465,12441,12531,3,12527,12483,12488,2,
48,28857,2,49,28857,2,50,28857,
2,51,28857,2,52,28857,2,53,
28857,2,54,28857,2,55,28857,2,
56,28857,2,57,28857,3,49,48,
28857,3,49,49,28857,3,49,50,
28857,3,49,51,28857,3,49,52,
28857,3,49,53,28857,3,49,54,
28857,3,49,55,28857,3,49,56,
28857,3,49,57,28857,3,50,48,
28857,3,50,49,28857,3,50,50,
28857,3,50,51,28857,3,50,52,
28857,3,104,80,97,2,100,97,
2,65,85,3,98,97,114,2,
111,86,2,112,99,2,100,109,
3,100,109,50,3,100,109,51,
2,73,85,2,24179,25104,2,26157,
21644,2,22823,27491,2,26126,27835,4,
26666,24335,20250,31038,2,112,65,2,
110,65,2,956,65,2,109,65,
2,107,65,2,75,66,2,77,
66,2,71,66,3,99,97,108,
4,107,99,97,108,2,112,70,
2,110,70,2,956,70,2,956,
103,2,109,103,2,107,103,2,
72,122,3,107,72,122,3,77,
72,122,3,71,72,122,3,84,
72,122,2,956,108,2,109,108,
2,100,108,2,107,108,2,102,
109,2,110,109,2,956,109,2,
109,109,2,99,109,2,107,109,
3,109,109,50,3,99,109,50,
2,109,50,3,107,109,50,3,
109,109,51,3,99,109,51,2,
109,51,3,107,109,51,3,109,
8725,115,4,109,8725,115,50,2,
80,97,3,107,80,97,3,77,
80,97,3,71,80,97,3,114,
97,100,5,114,97,100,8725,115,
6,114,97,100,8725,115,50,2,
112,115,2,110,115,2,956,115,
2,109,115,2,112,86,2,110,
86,2,956,86,2,109,86,2,
107,86,2,77,86,2,112,87,
2,110,87,2,956,87,2,109,
87,2,107,87,2,77,87,2,
107,937,2,77,937,4,97,46,
109,46,2,66,113,2,99,99,
2,99,100,4,67,8725,107,103,
3,67,111,46,2,100,66,2,
71,121,2,104,97,2,72,80,
2,105,110,2,75,75,2,75,
77,2,107,116,2,108,109,2,
108,110,3,108,111,103,2,108,
120,2,109,98,3,109,105,108,
3,109,111,108,2,80,72,4,
112,46,109,46,3,80,80,77,
2,80,82,2,115,114,2,83,
118,2,87,98,3,86,8725,109,
3,65,8725,109,2,49,26085,2,
50,26085,2,51,26085,2,52,26085,
2,53,26085,2,54,26085,2,55,
26085,2,56,26085,2,57,26085,3,
49,48,26085,3,49,49,26085,3,
49,50,26085,3,49,51,26085,3,
49,52,26085,3,49,53,26085,3,
49,54,26085,3,49,55,26085,3,
49,56,26085,3,49,57,26085,3,
50,48,26085,3,50,49,26085,3,
50,50,26085,3,50,51,26085,3,
50,52,26085,3,50,53,26085,3,
50,54,26085,3,50,55,26085,3,
50,56,26085,3,50,57,26085,3,
51,48,26085,3,51,49,26085,3,
103,97,108,1,1098,1,1100,1,
42863,1,67,1,70,1,81,1,
294,1,339,1,42791,1,43831,1,
619,1,43858,1,653,1,35912,1,
26356,1,36554,1,36040,1,28369,1,
20018,1,21477,1,40860,1,40860,1,
22865,1,37329,1,21895,1,22856,1,
25078,1,30313,1,32645,1,34367,1,
34746,1,35064,1,37007,1,27138,1,
27931,1,28889,1,29662,1,33853,1,
37226,1,39409,1,20098,1,21365,1,
27396,1,29211,1,34349,1,40478,1,
23888,1,28651,1,34253,1,35172,1,
25289,1,33240,1,34847,1,24266,1,
26391,1,28010,1,29436,1,37070,1,
20358,1,20919,1,21214,1,25796,1,
27347,1,29200,1,30439,1,32769,1,
34310,1,34396,1,36335,1,38706,1,
39791,1,40442,1,30860,1,31103,1,
32160,1,33737,1,37636,1,40575,1,
35542,1,22751,1,24324,1,31840,1,
32894,1,29282,1,30922,1,36034,1,
38647,1,22744,1,23650,1,27155,1,
28122,1,28431,1,32047,1,32311,1,
38475,1,21202,1,32907,1,20956,1,
20940,1,31260,1,32190,1,33777,1,
38517,1,35712,1,25295,1,27138,1,
35582,1,20025,1,23527,1,24594,1,
29575,1,30064,1,21271,1,30971,1,
20415,1,24489,1,19981,1,27852,1,
25976,1,32034,1,21443,1,22622,1,
30465,1,33865,1,35498,1,27578,1,
36784,1,27784,1,25342,1,33509,1,
25504,1,30053,1,20142,1,20841,1,
20937,1,26753,1,31975,1,33391,1,
35538,1,37327,1,21237,1,21570,1,
22899,1,24300,1,26053,1,28670,1,
31018,1,38317,1,39530,1,40599,1,
40654,1,21147,1,26310,1,27511,1,
36706,1,24180,1,24976,1,25088,1,
25754,1,28451,1,29001,1,29833,1,
31178,1,32244,1,32879,1,36646,1,
34030,1,36899,1,37706,1,21015,1,
21155,1,21693,1,28872,1,35010,1,
35498,1,24265,1,24565,1,25467,1,
27566,1,31806,1,29557,1,20196,1,
22265,1,23527,1,23994,1,24604,1,
29618,1,29801,1,32666,1,32838,1,
37428,1,38646,1,38728,1,38936,1,
20363,1,31150,1,37300,1,38584,1,
24801,1,20102,1,20698,1,23534,1,
23615,1,26009,1,27138,1,29134,1,
30274,1,34044,1,36988,1,40845,1,
26248,1,38446,1,21129,1,26491,1,
26611,1,27969,1,28316,1,29705,1,
30041,1,30827,1,32016,1,39006,1,
20845,1,25134,1,38520,1,20523,1,
23833,1,28138,1,36650,1,24459,1,
24900,1,26647,1,29575,1,38534,1,
21033,1,21519,1,23653,1,26131,1,
26446,1,26792,1,27877,1,29702,1,
30178,1,32633,1,35023,1,35041,1,
37324,1,38626,1,21311,1,28346,1,
21533,1,29136,1,29848,1,34298,1,
38563,1,40023,1,40607,1,26519,1,
28107,1,33256,1,31435,1,31520,1,
31890,1,29376,1,28825,1,35672,1,
20160,1,33590,1,21050,1,20999,1,
24230,1,25299,1,31958,1,23429,1,
27934,1,26292,1,36667,1,34892,1,
38477,1,35211,1,24275,1,20800,1,
21952,1,22618,1,26228,1,20958,1,
29482,1,30410,1,31036,1,31070,1,
31077,1,31119,1,38742,1,31934,1,
32701,1,34322,1,35576,1,36920,1,
37117,1,39151,1,39164,1,39208,1,
40372,1,37086,1,38583,1,20398,1,
20711,1,20813,1,21193,1,21220,1,
21329,1,21917,1,22022,1,22120,1,
22592,1,22696,1,23652,1,23662,1,
24724,1,24936,1,24974,1,25074,1,
25935,1,26082,1,26257,1,26757,1,
28023,1,28186,1,28450,1,29038,1,
29227,1,29730,1,30865,1,31038,1,
31049,1,31048,1,31056,1,31062,1,
31069,1,31117,1,31118,1,31296,1,
31361,1,31680,1,32244,1,32265,1,
32321,1,32626,1,32773,1,33261,1,
33401,1,33401,1,33879,1,35088,1,
35222,1,35585,1,35641,1,36051,1,
36104,1,36790,1,36920,1,38627,1,
38911,1,38971,1,24693,1,148206,1,
33304,1,20006,1,20917,1,20840,1,
20352,1,20805,1,20864,1,21191,1,
21242,1,21917,1,21845,1,21913,1,
21986,1,22618,1,22707,1,22852,1,
22868,1,23138,1,23336,1,24274,1,
24281,1,24425,1,24493,1,24792,1,
24910,1,24840,1,24974,1,24928,1,
25074,1,25140,1,25540,1,25628,1,
25682,1,25942,1,26228,1,26391,1,
26395,1,26454,1,27513,1,27578,1,
27969,1,28379,1,28363,1,28450,1,
28702,1,29038,1,30631,1,29237,1,
29359,1,29482,1,29809,1,29958,1,
30011,1,30237,1,30239,1,30410,1,
30427,1,30452,1,30538,1,30528,1,
30924,1,31409,1,31680,1,31867,1,
32091,1,32244,1,32574,1,32773,1,
33618,1,33775,1,34681,1,35137,1,
35206,1,35222,1,35519,1,35576,1,
35531,1,35585,1,35582,1,35565,1,
35641,1,35722,1,36104,1,36664,1,
36978,1,37273,1,37494,1,38524,1,
38627,1,38742,1,38875,1,38911,1,
38923,1,38971,1,39698,1,40860,1,
141386,1,141380,1,144341,1,15261,1,
16408,1,16441,1,152137,1,154832,1,
163539,1,40771,1,40846,2,102,102,
2,102,105,2,102,108,3,102,
102,105,3,102,102,108,2,115,
116,2,115,116,2,1396,1398,2,
1396,1381,2,1396,1387,2,1406,1398,
2,1396,1389,2,1497,1460,2,1522,
1463,1,1506,1,1488,1,1491,1,
1492,1,1499,1,1500,1,1501,1,
1512,1,1514,1,43,2,1513,1473,
2,1513,1474,3,1513,1468,1473,3,
1513,1468,1474,2,1488,1463,2,1488,
1464,2,1488,1468,2,1489,1468,2,
1490,1468,2,1491,1468,2,1492,1468,
2,1493,1468,2,1494,1468,2,1496,
1468,2,1497,1468,2,1498,1468,2,
1499,1468,2,1500,1468,2,1502,1468,
2,1504,1468,2,1505,1468,2,1507,
1468,2,1508,1468,2,1510,1468,2,
1511,1468,2,1512,1468,2,1513,1468,
2,1514,1468,2,1493,1465,2,1489,
1471,2,1499,1471,2,1508,1471,2,
1488,1500,1,1649,1,1649,1,1659,
1,1659,1,1659,1,1659,1,1662,
1,1662,1,1662,1,1662,1,1664,
1,1664,1,1664,1,1664,1,1658,
1,1658,1,1658,1,1658,1,1663,
1,1663,1,1663,1,1663,1,1657,
1,1657,1,1657,1,1657,1,1700,
1,1700,1,1700,1,1700,1,1702,
1,1702,1,1702,1,1702,1,1668,
1,1668,1,1668,1,1668,1,1667,
1,1667,1,1667,1,1667,1,1670,
1,1670,1,1670,1,1670,1,1671,
1,1671,1,1671,1,1671,1,1677,
1,1677,1,1676,1,1676,1,1678,
1,1678,1,1672,1,1672,1,1688,
1,1688,1,1681,1,1681,1,1705,
1,1705,1,1705,1,1705,1,1711,
1,1711,1,1711,1,1711,1,1715,
1,1715,1,1715,1,1715,1,1713,
1,1713,1,1713,1,1713,1,1722,
1,1722,1,1723,1,1723,1,1723,
1,1723,2,1749,1620,2,1749,1620,
1,1729,1,1729,1,1729,1,1729,
1,1726,1,1726,1,1726,1,1726,
1,1746,1,1746,2,1746,1620,2,
1746,1620,1,1709,1,1709,1,1709,
1,1709,1,1735,1,1735,1,1734,
1,1734,1,1736,1,1736,2,1735,
1652,1,1739,1,1739,1,1733,1,
1733,1,1737,1,1737,1,1744,1,
1744,1,1744,1,1744,1,1609,1,
1609,3,1610,1620,1575,3,1610,1620,
1575,3,1610,1620,1749,3,1610,1620,
1749,3,1610,1620,1608,3,1610,1620,
1608,3,1610,1620,1735,3,1610,1620,
1735,3,1610,1620,1734,3,1610,1620,
1734,3,1610,1620,1736,3,1610,1620,
1736,3,1610,1620,1744,3,1610,1620,
1744,3,1610,1620,1744,3,1610,1620,
1609,3,1610,1620,1609,3,1610,1620,
1609,1,1740,1,1740,1,1740,1,
1740,3,1610,1620,1580,3,1610,1620,
1581,3,1610,1620,1605,3,1610,1620,
1609,3,1610,1620,1610,2,1576,1580,
2,1576,1581,2,1576,1582,2,1576,
1605,2,1576,1609,2,1576,1610,2,
1578,1580,2,1578,1581,2,1578,1582,
2,1578,1605,2,1578,1609,2,1578,
1610,2,1579,1580,2,1579,1605,2,
1579,1609,2,1579,1610,2,1580,1581,
2,1580,1605,2,1581,1580,2,1581,
1605,2,1582,1580,2,1582,1581,2,
1582,1605,2,1587,1580,2,1587,1581,
2,1587,1582,2,1587,1605,2,1589,
1581,2,1589,1605,2,1590,1580,2,
1590,1581,2,1590,1582,2,1590,1605,
2,1591,1581,2,1591,1605,2,1592,
1605,2,1593,1580,2,1593,1605,2,
1594,1580,2,1594,1605,2,1601,1580,
2,1601,1581,2,1601,1582,2,1601,
1605,2,1601,1609,2,1601,1610,2,
1602,1581,2,1602,1605,2,1602,1609,
2,1602,1610,2,1603,1575,2,1603,
1580,2,1603,1581,2,1603,1582,2,
1603,1604,2,1603,1605,2,1603,1609,
2,1603,1610,2,1604,1580,2,1604,
1581,2,1604,1582,2,1604,1605,2,
1604,1609,2,1604,1610,2,1605,1580,
2,1605,1581,2,1605,1582,2,1605,
1605,2,1605,1609,2,1605,1610,2,
1606,1580,2,1606,1581,2,1606,1582,
2,1606,1605,2,1606,1609,2,1606,
1610,2,1607,1580,2,1607,1605,2,
1607,1609,2,1607,1610,2,1610,1580,
2,1610,1581,2,1610,1582,2,1610,
1605,2,1610,1609,2,1610,1610,2,
1584,1648,2,1585,1648,2,1609,1648,
3,32,1612,1617,3,32,1613,1617,
3,32,1614,1617,3,32,1615,1617,
3,32,1616,1617,3,32,1617,1648,
3,1610,1620,1585,3,1610,1620,1586,
3,1610,1620,1605,3,1610,1620,1606,
3,1610,1620,1609,3,1610,1620,1610,
2,1576,1585,2,1576,1586,2,1576,
1605,2,1576,1606,2,1576,1609,2,
1576,1610,2,1578,1585,2,1578,1586,
2,1578,1605,2,1578,1606,2,1578,
1609,2,1578,1610,2,1579,1585,2,
1579,1586,2,1579,1605,2,1579,1606,
2,1579,1609,2,1579,1610,2,1601,
1609,2,1601,1610,2,1602,1609,2,
1602,1610,2,1603,1575,2,1603,1604,
2,1603,1605,2,1603,1609,2,1603,
1610,2,1604,1605,2,1604,1609,2,
1604,1610,2,1605,1575,2,1605,1605,
2,1606,1585,2,1606,1586,2,1606,
1605,2,1606,1606,2,1606,1609,2,
1606,1610,2,1609,1648,2,1610,1585,
2,1610,1586,2,1610,1605,2,1610,
1606,2,1610,1609,2,1610,1610,3,
1610,1620,1580,3,1610,1620,1581,3,
1610,1620,1582,3,1610,1620,1605,3,
1610,1620,1607,2,1576,1580,2,1576,
1581,2,1576,1582,2,1576,1605,2,
1576,1607,2,1578,1580,2,1578,1581,
2,1578,1582,2,1578,1605,2,1578,
1607,2,1579,1605,2,1580,1581,2,
1580,1605,2,1581,1580,2,1581,1605,
2,1582,1580,2,1582,1605,2,1587,
1580,2,1587,1581,2,1587,1582,2,
1587,1605,2,1589,1581,2,1589,1582,
2,1589,1605,2,1590,1580,2,1590,
1581,2,1590,1582,2,1590,1605,2,
1591,1581,2,1592,1605,2,1593,1580,
2,1593,1605,2,1594,1580,2,1594,
1605,2,1601,1580,2,1601,1581,2,
1601,1582,2,1601,1605,2,1602,1581,
2,1602,1605,2,1603,1580,2,1603,
1581,2,1603,1582,2,1603,1604,2,
1603,1605,2,1604,1580,2,1604,1581,
2,1604,1582,2,1604,1605,2,1604,
1607,2,1605,1580,2,1605,1581,2,
1605,1582,2,1605,1605,2,1606,1580,
2,1606,1581,2,1606,1582,2,1606,
1605,2,1606,1607,2,1607,1580,2,
1607,1605,2,1607,1648,2,1610,1580,
2,1610,1581,2,1610,1582,2,1610,
1605,2,1610,1607,3,1610,1620,1605,
3,1610,1620,1607,2,1576,1605,2,
1576,1607,2,1578,1605,2,1578,1607,
2,1579,1605,2,1579,1607,2,1587,
1605,2,1587,1607,2,1588,1605,2,
1588,1607,2,1603,1604,2,1603,1605,
2,1604,1605,2,1606,1605,2,1606,
1607,2,1610,1605,2,1610,1607,3,
1600,1614,1617,3,1600,1615,1617,3,
1600,1616,1617,2,1591,1609,2,1591,
1610,2,1593,1609,2,1593,1610,2,
1594,1609,2,1594,1610,2,1587,1609,
2,1587,1610,2,1588,1609,2,1588,
1610,2,1581,1609,2,1581,1610,2,
1580,1609,2,1580,1610,2,1582,1609,
2,1582,1610,2,1589,1609,2,1589,
1610,2,1590,1609,2,1590,1610,2,
1588,1580,2,1588,1581,2,1588,1582,
2,1588,1605,2,1588,1585,2,1587,
1585,2,1589,1585,2,1590,1585,2,
1591,1609,2,1591,1610,2,1593,1609,
2,1593,1610,2,1594,1609,2,1594,
1610,2,1587,1609,2,1587,1610,2,
1588,1609,2,1588,1610,2,1581,1609,
2,1581,1610,2,1580,1609,2,1580,
1610,2,1582,1609,2,1582,1610,2,
1589,1609,2,1589,1610,2,1590,1609,
2,1590,1610,2,1588,1580,2,1588,
1581,2,1588,1582,2,1588,1605,2,
1588,1585,2,1587,1585,2,1589,1585,
2,1590,1585,2,1588,1580,2,1588,
1581,2,1588,1582,2,1588,1605,2,
1587,1607,2,1588,1607,2,1591,1605,
2,1587,1580,2,1587,1581,2,1587,
1582,2,1588,1580,2,1588,1581,2,
1588,1582,2,1591,1605,2,1592,1605,
2,1575,1611,2,1575,1611,3,1578,
1580,1605,3,1578,1581,1580,3,1578,
1581,1580,3,1578,1581,1605,3,1578,
1582,1605,3,1578,1605,1580,3,1578,
1605,1581,3,1578,1605,1582,3,1580,
1605,1581,3,1580,1605,1581,3,1581,
1605,1610,3,1581,1605,1609,3,1587,
1581,1580,3,1587,1580,1581,3,1587,
1580,1609,3,1587,1605,1581,3,1587,
1605,1581,3,1587,1605,1580,3,1587,
1605,1605,3,1587,1605,1605,3,1589,
1581,1581,3,1589,1581,1581,3,1589,
1605,1605,3,1588,1581,1605,3,1588,
1581,1605,3,1588,1580,1610,3,1588,
1605,1582,3,1588,1605,1582,3,1588,
1605,1605,3,1588,1605,1605,3,1590,
1581,1609,3,1590,1582,1605,3,1590,
1582,1605,3,1591,1605,1581,3,1591,
1605,1581,3,1591,1605,1605,3,1591,
1605,1610,3,1593,1580,1605,3,1593,
1605,1605,3,1593,1605,1605,3,1593,
1605,1609,3,1594,1605,1605,3,1594,
1605,1610,3,1594,1605,1609,3,1601,
1582,1605,3,1601,1582,1605,3,1602,
1605,1581,3,1602,1605,1605,3,1604,
1581,1605,3,1604,1581,1610,3,1604,
1581,1609,3,1604,1580,1580,3,1604,
1580,1580,3,1604,1582,1605,3,1604,
1582,1605,3,1604,1605,1581,3,1604,
1605,1581,3,1605,1581,1580,3,1605,
1581,1605,3,1605,1581,1610,3,1605,
1580,1581,3,1605,1580,1605,3,1605,
1582,1580,3,1605,1582,1605,3,1605,
1580,1582,3,1607,1605,1580,3,1607,
1605,1605,3,1606,1581,1605,3,1606,
1581,1609,3,1606,1580,1605,3,1606,
1580,1605,3,1606,1580,1609,3,1606,
1605,1610,3,1606,1605,1609,3,1610,
1605,1605,3,1610,1605,1605,3,1576,
1582,1610,3,1578,1580,1610,3,1578,
1580,1609,3,1578,1582,1610,3,1578,
1582,1609,3,1578,1605,1610,3,1578,
1605,1609,3,1580,1605,1610,3,1580,
1581,1609,3,1580,1605,1609,3,1587,
1582,1609,3,1589,1581,1610,3,1588,
1581,1610,3,1590,1581,1610,3,1604,
1580,1610,3,1604,1605,1610,3,1610,
1581,1610,3,1610,1580,1610,3,1610,
1605,1610,3,1605,1605,1610,3,1602,
1605,1610,3,1606,1581,1610,3,1602,
1605,1581,3,1604,1581,1605,3,1593,
1605,1610,3,1603,1605,1610,3,1606,
1580,1581,3,1605,1582,1610,3,1604,
1580,1605,3,1603,1605,1605,3,1604,
1580,1605,3,1606,1580,1581,3,1580,
1581,1610,3,1581,1580,1610,3,1605,
1580,1610,3,1601,1605,1610,3,1576,
1581,1610,3,1603,1605,1605,3,1593,
1580,1605,3,1589,1605,1605,3,1587,
1582,1610,3,1606,1580,1610,3,1589,
1604,1746,3,1602,1604,1746,4,1575,
1604,1604,1607,4,1575,1603,1576,1585,
4,1605,1581,1605,1583,4,1589,1604,
1593,1605,4,1585,1587,1608,1604,4,
1593,1604,1610,1607,4,1608,1587,1604,
1605,3,1589,1604,1609,18,1589,1604,
1609,32,1575,1604,1604,1607,32,1593,
1604,1610,1607,32,1608,1587,1604,1605,
8,1580,1604,32,1580,1604,1575,1604,
1607,4,1585,1740,1575,1604,1,44,
1,12289,1,12290,1,58,1,59,
1,33,1,63,1,12310,1,12311,
3,46,46,46,2,46,46,1,
8212,1,8211,1,95,1,95,1,
40,1,41,1,123,1,125,1,
12308,1,12309,1,12304,1,12305,1,
12298,1,12299,1,12296,1,12297,1,
12300,1,12301,1,12302,1,12303,1,
91,1,93,2,32,773,2,32,
773,2,32,773,2,32,773,1,
95,1,95,1,95,1,44,1,
12289,1,46,1,59,1,58,1,
63,1,33,1,8212,1,40,1,
41,1,123,1,125,1,12308,1,
12309,1,35,1,38,1,42,1,
43,1,45,1,60,1,62,1,
61,1,92,1,36,1,37,1,
64,2,32,1611,2,1600,1611,2,
32,1612,2,32,1613,2,32,1614,
2,1600,1614,2,32,1615,2,1600,
1615,2,32,1616,2,1600,1616,2,
32,1617,2,1600,1617,2,32,1618,
2,1600,1618,1,1569,2,1575,1619,
2,1575,1619,2,1575,1620,2,1575,
1620,2,1608,1620,2,1608,1620,2,
1575,1621,2,1575,1621,2,1610,1620,
2,1610,1620,2,1610,1620,2,1610,
1620,1,1575,1,1575,1,1576,1,
1576,1,1576,1,1576,1,1577,1,
1577,1,1578,1,1578,1,1578,1,
1578,1,1579,1,1579,1,1579,1,
1579,1,1580,1,1580,1,1580,1,
1580,1,1581,1,1581,1,1581,1,
1581,1,1582,1,1582,1,1582,1,
1582,1,1583,1,1583,1,1584,1,
1584,1,1585,1,1585,1,1586,1,
1586,1,1587,1,1587,1,1587,1,
1587,1,1588,1,1588,1,1588,1,
1588,1,1589,1,1589,1,1589,1,
1589,1,1590,1,1590,1,1590,1,
1590,1,1591,1,1591,1,1591,1,
1591,1,1592,1,1592,1,1592,1,
1592,1,1593,1,1593,1,1593,1,
1593,1,1594,1,1594,1,1594,1,
1594,1,1601,1,1601,1,1601,1,
1601,1,1602,1,1602,1,1602,1,
1602,1,1603,1,1603,1,1603,1,
1603,1,1604,1,1604,1,1604,1,
1604,1,1605,1,1605,1,1605,1,
1605,1,1606,1,1606,1,1606,1,
1606,1,1607,1,1607,1,1607,1,
1607,1,1608,1,1608,1,1609,1,
1609,1,1610,1,1610,1,1610,1,
1610,3,1604,1575,1619,3,1604,1575,
1619,3,1604,1575,1620,3,1604,1575,
1620,3,1604,1575,1621,3,1604,1575,
1621,2,1604,1575,2,1604,1575,1,
33,1,34,1,35,1,36,1,
37,1,38,1,39,1,40,1,
41,1,42,1,43,1,44,1,
45,1,46,1,47,1,48,1,
49,1,50,1,51,1,52,1,
53,1,54,1,55,1,56,1,
57,1,58,1,59,1,60,1,
61,1,62,1,63,1,64,1,
65,1,66,1,67,1,68,1,
69,1,70,1,71,1,72,1,
73,1,74,1,75,1,76,1,
77,1,78,1,79,1,80,1,
81,1,82,1,83,1,84,1,
85,1,86,1,87,1,88,1,
89,1,90,1,91,1,92,1,
93,1,94,1,95,1,96,1,
97,1,98,1,99,1,100,1,
101,1,102,1,103,1,104,1,
105,1,106,1,107,1,108,1,
109,1,110,1,111,1,112,1,
113,1,114,1,115,1,116,1,
117,1,118,1,119,1,120,1,
121,1,122,1,123,1,124,1,
125,1,126,1,10629,1,10630,1,
12290,1,12300,1,12301,1,12289,1,
12539,1,12530,1,12449,1,12451,1,
12453,1,12455,1,12457,1,12515,1,
12517,1,12519,1,12483,1,12540,1,
12450,1,12452,1,12454,1,12456,1,
12458,1,12459,1,12461,1,12463,1,
12465,1,12467,1,12469,1,12471,1,
12473,1,12475,1,12477,1,12479,1,
12481,1,12484,1,12486,1,12488,1,
12490,1,12491,1,12492,1,12493,1,
12494,1,12495,1,12498,1,12501,1,
12504,1,12507,1,12510,1,12511,1,
12512,1,12513,1,12514,1,12516,1,
12518,1,12520,1,12521,1,12522,1,
12523,1,12524,1,12525,1,12527,1,
12531,1,12441,1,12442,1,4448,1,
4352,1,4353,1,4522,1,4354,1,
4524,1,4525,1,4355,1,4356,1,
4357,1,4528,1,4529,1,4530,1,
4531,1,4532,1,4533,1,4378,1,
4358,1,4359,1,4360,1,4385,1,
4361,1,4362,1,4363,1,4364,1,
4365,1,4366,1,4367,1,4368,1,
4369,1,4370,1,4449,1,4450,1,
4451,1,4452,1,4453,1,4454,1,
4455,1,4456,1,4457,1,4458,1,
4459,1,4460,1,4461,1,4462,1,
4463,1,4464,1,4465,1,4466,1,
4467,1,4468,1,4469,1,162,1,
163,1,172,2,32,772,1,166,
1,165,1,8361,1,9474,1,8592,
1,8593,1,8594,1,8595,1,9632,
1,9675,1,720,1,721,1,230,
1,665,1,595,1,675,1,43878,
1,677,1,676,1,598,1,599,
1,7569,1,600,1,606,1,681,
1,612,1,610,1,608,1,667,
1,295,1,668,1,615,1,644,
1,682,1,683,1,620,1,122628,
1,42894,1,622,1,122629,1,654,
1,122630,1,248,1,630,1,631,
1,113,1,634,1,122632,1,637,
1,638,1,640,1,680,1,678,
1,43879,1,679,1,648,1,11377,
1,655,1,673,1,674,1,664,
1,448,1,449,1,450,1,122634,
1,122654,2,69785,69818,2,69787,69818,
2,69797,69818,2,69937,69927,2,69938,
69927,2,70471,70462,2,70471,70487,2,
70841,70842,2,70841,70832,2,70841,70845,
2,71096,71087,2,71097,71087,2,71989,
71984,2,119127,119141,2,119128,119141,3,
119128,119141,119150,3,119128,119141,119151,3,
119128,119141,119152,3,119128,119141,119153,3,
119128,119141,119154,2,119225,119141,2,119226,
119141,3,119225,119141,119150,3,119226,119141,
119150,3,119225,119141,119151,3,119226,119141,
119151,1,65,1,66,1,67,1,
68,1,69,1,70,1,71,1,
72,1,73,1,74,1,75,1,
76,1,77,1,78,1,79,1,
80,1,81,1,82,1,83,1,
84,1,85,1,86,1,87,1,
88,1,89,1,90,1,97,1,
98,1,99,1,100,1,101,1,
102,1,103,1,104,1,105,1,
106,1,107,1,108,1,109,1,
110,1,111,1,112,1,113,1,
114,1,115,1,116,1,117,1,
118,1,119,1,120,1,121,1,
122,1,65,1,66,1,67,1,
68,1,69,1,70,1,71,1,
72,1,73,1,74,1,75,1,
76,1,77,1,78,1,79,1,
80,1,81,1,82,1,83,1,
84,1,85,1,86,1,87,1,
88,1,89,1,90,1,97,1,
98,1,99,1,100,1,101,1,
102,1,103,1,105,1,106,1,
107,1,108,1,109,1,110,1,
111,1,112,1,113,1,114,1,
115,1,116,1,117,1,118,1,
119,1,120,1,121,1,122,1,
65,1,66,1,67,1,68,1,
69,1,70,1,71,1,72,1,
73,1,74,1,75,1,76,1,
77,1,78,1,79,1,80,1,
81,1,82,1,83,1,84,1,
85,1,86,1,87,1,88,1,
89,1,90,1,97,1,98,1,
99,1,100,1,101,1,102,1,
103,1,104,1,105,1,106,1,
107,1,108,1,109,1,110,1,
111,1,112,1,113,1,114,1,
115,1,116,1,117,1,118,1,
119,1,120,1,121,1,122,1,
65,1,67,1,68,1,71,1,
74,1,75,1,78,1,79,1,
80,1,81,1,83,1,84,1,
85,1,86,1,87,1,88,1,
89,1,90,1,97,1,98,1,
99,1,100,1,102,1,104,1,
105,1,106,1,107,1,108,1,
109,1,110,1,112,1,113,1,
114,1,115,1,116,1,117,1,
118,1,119,1,120,1,121,1,
122,1,65,1,66,1,67,1,
68,1,69,1,70,1,71,1,
72,1,73,1,74,1,75,1,
76,1,77,1,78,1,79,1,
80,1,81,1,82,1,83,1,
84,1,85,1,86,1,87,1,
88,1,89,1,90,1,97,1,
98,1,99,1,100,1,101,1,
102,1,103,1,104,1,105,1,
106,1,107,1,108,1,109,1,
110,1,111,1,112,1,113,1,
114,1,115,1,116,1,117,1,
118,1,119,1,120,1,121,1,
122,1,65,1,66,1,68,1,
69,1,70,1,71,1,74,1,
75,1,76,1,77,1,78,1,
79,1,80,1,81,1,83,1,
84,1,85,1,86,1,87,1,
88,1,89,1,97,1,98,1,
99,1,100,1,101,1,102,1,
103,1,104,1,105,1,106,1,
107,1,108,1,109,1,110,1,
111,1,112,1,113,1,114,1,
115,1,116,1,117,1,118,1,
119,1,120,1,121,1,122,1,
65,1,66,1,68,1,69,1,
70,1,71,1,73,1,74,1,
75,1,76,1,77,1,79,1,
83,1,84,1,85,1,86,1,
87,1,88,1,89,1,97,1,
98,1,99,1,100,1,101,1,
102,1,103,1,104,1,105,1,
106,1,107,1,108,1,109,1,
110,1,111,1,112,1,113,1,
114,1,115,1,116,1,117,1,
118,1,119,1,120,1,121,1,
122,1,65,1,66,1,67,1,
68,1,69,1,70,1,71,1,
72,1,73,1,74,1,75,1,
76,1,77,1,78,1,79,1,
80,1,81,1,82,1,83,1,
84,1,85,1,86,1,87,1,
88,1,89,1,90,1,97,1,
98,1,99,1,100,1,101,1,
102,1,103,1,104,1,105,1,
106,1,107,1,108,1,109,1,
110,1,111,1,112,1,113,1,
114,1,115,1,116,1,117,1,
118,1,119,1,120,1,121,1,
122,1,65,1,66,1,67,1,
68,1,69,1,70,1,71,1,
72,1,73,1,74,1,75,1,
76,1,77,1,78,1,79,1,
80,1,81,1,82,1,83,1,
84,1,85,1,86,1,87,1,
88,1,89,1,90,1,97,1,
98,1,99,1,100,1,101,1,
102,1,103,1,104,1,105,1,
106,1,107,1,108,1,109,1,
110,1,111,1,112,1,113,1,
114,1,115,1,116,1,117,1,
118,1,119,1,120,1,121,1,
122,1,65,1,66,1,67,1,
68,1,69,1,70,1,71,1,
72,1,73,1,74,1,75,1,
76,1,77,1,78,1,79,1,
80,1,81,1,82,1,83,1,
84,1,85,1,86,1,87,1,
88,1,89,1,90,1,97,1,
98,1,99,1,100,1,101,1,
102,1,103,1,104,1,105,1,
106,1,107,1,108,1,109,1,
110,1,111,1,112,1,113,1,
114,1,115,1,116,1,117,1,
118,1,119,1,120,1,121,1,
122,1,65,1,66,1,67,1,
68,1,69,1,70,1,71,1,
72,1,73,1,74,1,75,1,
76,1,77,1,78,1,79,1,
80,1,81,1,82,1,83,1,
84,1,85,1,86,1,87,1,
88,1,89,1,90,1,97,1,
98,1,99,1,100,1,101,1,
102,1,103,1,104,1,105,1,
106,1,107,1,108,1,109,1,
110,1,111,1,112,1,113,1,
114,1,115,1,116,1,117,1,
118,1,119,1,120,1,121,1,
122,1,65,1,66,1,67,1,
68,1,69,1,70,1,71,1,
72,1,73,1,74,1,75,1,
76,1,77,1,78,1,79,1,
80,1,81,1,82,1,83,1,
84,1,85,1,86,1,87,1,
88,1,89,1,90,1,97,1,
98,1,99,1,100,1,101,1,
102,1,103,1,104,1,105,1,
106,1,107,1,108,1,109,1,
110,1,111,1,112,1,113,1,
114,1,115,1,116,1,117,1,
118,1,119,1,120,1,121,1,
122,1,65,1,66,1,67,1,
68,1,69,1,70,1,71,1,
72,1,73,1,74,1,75,1,
76,1,77,1,78,1,79,1,
80,1,81,1,82,1,83,1,
84,1,85,1,86,1,87,1,
88,1,89,1,90,1,97,1,
98,1,99,1,100,1,101,1,
102,1,103,1,104,1,105,1,
106,1,107,1,108,1,109,1,
110,1,111,1,112,1,113,1,
114,1,115,1,116,1,117,1,
118,1,119,1,120,1,121,1,
122,1,305,1,567,1,913,1,
914,1,915,1,916,1,917,1,
918,1,919,1,920,1,921,1,
922,1,923,1,924,1,925,1,
926,1,927,1,928,1,929,1,
920,1,931,1,932,1,933,1,
934,1,935,1,936,1,937,1,
8711,1,945,1,946,1,947,1,
948,1,949,1,950,1,951,1,
952,1,953,1,954,1,955,1,
956,1,957,1,958,1,959,1,
960,1,961,1,962,1,963,1,
964,1,965,1,966,1,967,1,
968,1,969,1,8706,1,949,1,
952,1,954,1,966,1,961,1,
960,1,913,1,914,1,915,1,
916,1,917,1,918,1,919,1,
920,1,921,1,922,1,923,1,
924,1,925,1,926,1,927,1,
928,1,929,1,920,1,931,1,
932,1,933,1,934,1,935,1,
936,1,937,1,8711,1,945,1,
946,1,947,1,948,1,949,1,
950,1,951,1,952,1,953,1,
954,1,955,1,956,1,957,1,
958,1,959,1,960,1,961,1,
962,1,963,1,964,1,965,1,
966,1,967,1,968,1,969,1,
8706,1,949,1,952,1,954,1,
966,1,961,1,960,1,913,1,
914,1,915,1,916,1,917,1,
918,1,919,1,920,1,921,1,
922,1,923,1,924,1,925,1,
926,1,927,1,928,1,929,1,
920,1,931,1,932,1,933,1,
934,1,935,1,936,1,937,1,
8711,1,945,1,946,1,947,1,
948,1,949,1,950,1,951,1,
952,1,953,1,954,1,955,1,
956,1,957,1,958,1,959,1,
960,1,961,1,962,1,963,1,
964,1,965,1,966,1,967,1,
968,1,969,1,8706,1,949,1,
952,1,954,1,966,1,961,1,
960,1,913,1,914,1,915,1,
916,1,917,1,918,1,919,1,
920,1,921,1,922,1,923,1,
924,1,925,1,926,1,927,1,
928,1,929,1,920,1,931,1,
932,1,933,1,934,1,935,1,
936,1,937,1,8711,1,945,1,
946,1,947,1,948,1,949,1,
950,1,951,1,952,1,953,1,
954,1,955,1,956,1,957,1,
958,1,959,1,960,1,961,1,
962,1,963,1,964,1,965,1,
966,1,967,1,968,1,969,1,
8706,1,949,1,952,1,954,1,
966,1,961,1,960,1,913,1,
914,1,915,1,916,1,917,1,
918,1,919,1,920,1,921,1,
922,1,923,1,924,1,925,1,
926,1,927,1,928,1,929,1,
920,1,931,1,932,1,933,1,
934,1,935,1,936,1,937,1,
8711,1,945,1,946,1,947,1,
948,1,949,1,950,1,951,1,
952,1,953,1,954,1,955,1,
956,1,957,1,958,1,959,1,
960,1,961,1,962,1,963,1,
964,1,965,1,966,1,967,1,
968,1,969,1,8706,1,949,1,
952,1,954,1,966,1,961,1,
960,1,988,1,989,1,48,1,
49,1,50,1,51,1,52,1,
53,1,54,1,55,1,56,1,
57,1,48,1,49,1,50,1,
51,1,52,1,53,1,54,1,
55,1,56,1,57,1,48,1,
49,1,50,1,51,1,52,1,
53,1,54,1,55,1,56,1,
57,1,48,1,49,1,50,1,
51,1,52,1,53,1,54,1,
55,1,56,1,57,1,48,1,
49,1,50,1,51,1,52,1,
53,1,54,1,55,1,56,1,
57,1,1072,1,1073,1,1074,1,
1075,1,1076,1,1077,1,1078,1,
1079,1,1080,1,1082,1,1083,1,
1084,1,1086,1,1087,1,1088,1,
1089,1,1090,1,1091,1,1092,1,
1093,1,1094,1,1095,1,1096,1,
1099,1,1101,1,1102,1,42633,1,
1241,1,1110,1,1112,1,1257,1,
1199,1,1231,1,1072,1,1073,1,
1074,1,1075,1,1076,1,1077,1,
1078,1,1079,1,1080,1,1082,1,
1083,1,1086,1,1087,1,1089,1,
1091,1,1092,1,1093,1,1094,1,
1095,1,1096,1,1098,1,1099,1,
1169,1,1110,1,1109,1,1119,1,
1195,1,42577,1,1201,1,1575,1,
1576,1,1580,1,1583,1,1608,1,
1586,1,1581,1,1591,1,1610,1,
1603,1,1604,1,1605,1,1606,1,
1587,1,1593,1,1601,1,1589,1,
1602,1,1585,1,1588,1,1578,1,
1579,1,1582,1,1584,1,1590,1,
1592,1,1594,1,1646,1,1722,1,
1697,1,1647,1,1576,1,1580,1,
1607,1,1581,1,1610,1,1603,1,
1604,1,1605,1,1606,1,1587,1,
1593,1,1601,1,1589,1,1602,1,
1588,1,1578,1,1579,1,1582,1,
1590,1,1594,1,1580,1,1581,1,
1610,1,1604,1,1606,1,1587,1,
1593,1,1589,1,1602,1,1588,1,
1582,1,1590,1,1594,1,1722,1,
1647,1,1576,1,1580,1,1607,1,
1581,1,1591,1,1610,1,1603,1,
1605,1,1606,1,1587,1,1593,1,
1601,1,1589,1,1602,1,1588,1,
1578,1,1579,1,1582,1,1590,1,
1592,1,1594,1,1646,1,1697,1,
1575,1,1576,1,1580,1,1583,1,
1607,1,1608,1,1586,1,1581,1,
1591,1,1610,1,1604,1,1605,1,
1606,1,1587,1,1593,1,1601,1,
1589,1,1602,1,1585,1,1588,1,
1578,1,1579,1,1582,1,1584,1,
1590,1,1592,1,1594,1,1576,1,
1580,1,1583,1,1608,1,1586,1,
1581,1,1591,1,1610,1,1604,1,
1605,1,1606,1,1587,1,1593,1,
1601,1,1589,1,1602,1,1585,1,
1588,1,1578,1,1579,1,1582,1,
1584,1,1590,1,1592,1,1594,2,
48,46,2,48,44,2,49,44,
2,50,44,2,51,44,2,52,
44,2,53,44,2,54,44,2,
55,44,2,56,44,2,57,44,
3,40,65,41,3,40,66,41,
3,40,67,41,3,40,68,41,
3,40,69,41,3,40,70,41,
3,40,71,41,3,40,72,41,
3,40,73,41,3,40,74,41,
3,40,75,41,3,40,76,41,
3,40,77,41,3,40,78,41,
3,40,79,41,3,40,80,41,
3,40,81,41,3,40,82,41,
3,40,83,41,3,40,84,41,
3,40,85,41,3,40,86,41,
3,40,87,41,3,40,88,41,
3,40,89,41,3,40,90,41,
3,12308,83,12309,1,67,1,82,
2,67,68,2,87,90,1,65,
1,66,1,67,1,68,1,69,
1,70,1,71,1,72,1,73,
1,74,1,75,1,76,1,77,
1,78,1,79,1,80,1,81,
1,82,1,83,1,84,1,85,
1,86,1,87,1,88,1,89,
1,90,2,72,86,2,77,86,
2,83,68,2,83,83,3,80,
80,86,2,87,67,2,77,67,
2,77,68,2,77,82,2,68,
74,2,12411,12363,2,12467,12467,1,
12469,1,25163,1,23383,1,21452,2,
12486,12441,1,20108,1,22810,1,35299,
1,22825,1,20132,1,26144,1,28961,
1,26009,1,21069,1,24460,1,20877,
1,26032,1,21021,1,32066,1,29983,
1,36009,1,22768,1,21561,1,28436,
1,25237,1,25429,1,19968,1,19977,
1,36938,1,24038,1,20013,1,21491,
1,25351,1,36208,1,25171,1,31105,
1,31354,1,21512,1,28288,1,26377,
1,26376,1,30003,1,21106,1,21942,
1,37197,3,12308,26412,12309,3,12308,
19977,12309,3,12308,20108,12309,3,12308,
23433,12309,3,12308,28857,12309,3,12308,
25171,12309,3,12308,30423,12309,3,12308,
21213,12309,3,12308,25943,12309,1,24471,
1,21487,1,48,1,49,1,50,
1,51,1,52,1,53,1,54,
1,55,1,56,1,57,1,20029,
1,20024,1,20033,1,131362,1,20320,
1,20398,1,20411,1,20482,1,20602,
1,20633,1,20711,1,20687,1,13470,
1,132666,1,20813,1,20820,1,20836,
1,20855,1,132380,1,13497,1,20839,
1,20877,1,132427,1,20887,1,20900,
1,20172,1,20908,1,20917,1,168415,
1,20981,1,20995,1,13535,1,21051,
1,21062,1,21106,1,21111,1,13589,
1,21191,1,21193,1,21220,1,21242,
1,21253,1,21254,1,21271,1,21321,
1,21329,1,21338,1,21363,1,21373,
1,21375,1,21375,1,21375,1,133676,
1,28784,1,21450,1,21471,1,133987,
1,21483,1,21489,1,21510,1,21662,
1,21560,1,21576,1,21608,1,21666,
1,21750,1,21776,1,21843,1,21859,
1,21892,1,21892,1,21913,1,21931,
1,21939,1,21954,1,22294,1,22022,
1,22295,1,22097,1,22132,1,20999,
1,22766,1,22478,1,22516,1,22541,
1,22411,1,22578,1,22577,1,22700,
1,136420,1,22770,1,22775,1,22790,
1,22810,1,22818,1,22882,1,136872,
1,136938,1,23020,1,23067,1,23079,
1,23000,1,23142,1,14062,1,14076,
1,23304,1,23358,1,23358,1,137672,
1,23491,1,23512,1,23527,1,23539,
1,138008,1,23551,1,23558,1,24403,
1,23586,1,14209,1,23648,1,23662,
1,23744,1,23693,1,138724,1,23875,
1,138726,1,23918,1,23915,1,23932,
1,24033,1,24034,1,14383,1,24061,
1,24104,1,24125,1,24169,1,14434,
1,139651,1,14460,1,24240,1,24243,
1,24246,1,24266,1,172946,1,24318,
1,140081,1,140081,1,33281,1,24354,
1,24354,1,14535,1,144056,1,156122,
1,24418,1,24427,1,14563,1,24474,
1,24525,1,24535,1,24569,1,24705,
1,14650,1,14620,1,24724,1,141012,
1,24775,1,24904,1,24908,1,24910,
1,24908,1,24954,1,24974,1,25010,
1,24996,1,25007,1,25054,1,25074,
1,25078,1,25104,1,25115,1,25181,
1,25265,1,25300,1,25424,1,142092,
1,25405,1,25340,1,25448,1,25475,
1,25572,1,142321,1,25634,1,25541,
1,25513,1,14894,1,25705,1,25726,
1,25757,1,25719,1,14956,1,25935,
1,25964,1,143370,1,26083,1,26360,
1,26185,1,15129,1,26257,1,15112,
1,15076,1,20882,1,20885,1,26368,
1,26268,1,32941,1,17369,1,26391,
1,26395,1,26401,1,26462,1,26451,
1,144323,1,15177,1,26618,1,26501,
1,26706,1,26757,1,144493,1,26766,
1,26655,1,26900,1,15261,1,26946,
1,27043,1,27114,1,27304,1,145059,
1,27355,1,15384,1,27425,1,145575,
1,27476,1,15438,1,27506,1,27551,
1,27578,1,27579,1,146061,1,138507,
1,146170,1,27726,1,146620,1,27839,
1,27853,1,27751,1,27926,1,27966,
1,28023,1,27969,1,28009,1,28024,
1,28037,1,146718,1,27956,1,28207,
1,28270,1,15667,1,28363,1,28359,
1,147153,1,28153,1,28526,1,147294,
1,147342,1,28614,1,28729,1,28702,
1,28699,1,15766,1,28746,1,28797,
1,28791,1,28845,1,132389,1,28997,
1,148067,1,29084,1,148395,1,29224,
1,29237,1,29264,1,149000,1,29312,
1,29333,1,149301,1,149524,1,29562,
1,29579,1,16044,1,29605,1,16056,
1,16056,1,29767,1,29788,1,29809,
1,29829,1,29898,1,16155,1,29988,
1,150582,1,30014,1,150674,1,30064,
1,139679,1,30224,1,151457,1,151480,
1,151620,1,16380,1,16392,1,30452,
1,151795,1,151794,1,151833,1,151859,
1,30494,1,30495,1,30495,1,30538,
1,16441,1,30603,1,16454,1,16534,
1,152605,1,30798,1,30860,1,30924,
1,16611,1,153126,1,31062,1,153242,
1,153285,1,31119,1,31211,1,16687,
1,31296,1,31306,1,31311,1,153980,
1,154279,1,154279,1,31470,1,16898,
1,154539,1,31686,1,31689,1,16935,
1,154752,1,31954,1,17056,1,31976,
1,31971,1,32000,1,155526,1,32099,
1,17153,1,32199,1,32258,1,32325,
1,17204,1,156200,1,156231,1,17241,
1,156377,1,32634,1,156478,1,32661,
1,32762,1,32773,1,156890,1,156963,
1,32864,1,157096,1,32880,1,144223,
1,17365,1,32946,1,33027,1,17419,
1,33086,1,23221,1,157607,1,157621,
1,144275,1,144284,1,33281,1,33284,
1,36766,1,17515,1,33425,1,33419,
1,33437,1,21171,1,33457,1,33459,
1,33469,1,33510,1,158524,1,33509,
1,33565,1,33635,1,33709,1,33571,
1,33725,1,33767,1,33879,1,33619,
1,33738,1,33740,1,33756,1,158774,
1,159083,1,158933,1,17707,1,34033,
1,34035,1,34070,1,160714,1,34148,
1,159532,1,17757,1,17761,1,159665,
1,159954,1,17771,1,34384,1,34396,
1,34407,1,34409,1,34473,1,34440,
1,34574,1,34530,1,34681,1,34600,
1,34667,1,34694,1,17879,1,34785,
1,34817,1,17913,1,34912,1,34915,
1,161383,1,35031,1,35038,1,17973,
1,35066,1,13499,1,161966,1,162150,
1,18110,1,18119,1,35488,1,35565,
1,35722,1,35925,1,162984,1,36011,
1,36033,1,36123,1,36215,1,163631,
1,133124,1,36299,1,36284,1,36336,
1,133342,1,36564,1,36664,1,165330,
1,165357,1,37012,1,37105,1,37137,
1,165678,1,37147,1,37432,1,37591,
1,37592,1,37500,1,37881,1,37909,
1,166906,1,38283,1,18837,1,38327,
1,167287,1,18918,1,38595,1,23986,
1,38691,1,168261,1,168474,1,19054,
1,19062,1,38880,1,168970,1,19122,
1,169110,1,38923,1,38923,1,38953,
1,169398,1,39138,1,19251,1,39209,
1,39335,1,39362,1,39422,1,19406,
1,170800,1,39698,1,40000,1,40189,
1,19662,1,19693,1,40295,1,172238,
1,19704,1,172293,1,172558,1,172689,
1,40635,1,19798,1,40697,1,40702,
1,40709,1,40719,1,40726,1,40763,
1,173568};

#endif // UNI_ALGO_DISABLE_NFKC_NFKD

uaix_const_data uaix_data_array(unsigned char, stage1_comp_cp1, 8704) = {
0,1,2,3,4,5,6,7,
8,9,6,6,10,11,6,6,
6,6,12,13,6,6,14,15,
16,17,18,19,6,6,6,6,
20,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,21,6,
6,6,6,6,22,23,24,25,
6,6,6,26,27,28,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
29,30,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,31,32,6,6,6,33,6,
6,34,6,35,6,6,6,6,
6,6,36,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6};

uaix_const_data uaix_data_array(unsigned short, stage2_comp_cp1, 4736) = {
/* Block: 0 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,5094,5085,5097,0,
0,1,2785,50,705,63,2873,783,
809,112,899,914,1000,2891,161,206,
2983,0,1088,1174,1258,255,3043,1338,
3123,304,1424,0,0,0,0,0,
0,353,2819,402,744,415,2876,796,
854,464,902,957,1044,2933,513,558,
2995,0,1131,1216,1297,607,3083,1381,
3132,656,1467,0,0,0,0,0,
/* Block: 1 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
1622,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,3144,0,1538,1580,1550,2853,
0,0,3358,0,0,0,0,2879,
0,0,0,0,3462,1598,1592,0,
1586,0,0,0,1510,0,0,0,
0,0,3193,0,1541,1583,1559,2856,
0,0,3407,0,0,0,0,2882,
0,0,0,0,3511,1607,1595,0,
1589,0,0,0,1524,0,0,0,
/* Block: 2 */
0,0,3260,3309,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,2859,2863,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,2975,2979,0,0,
0,0,0,0,0,0,0,0,
0,0,3013,3016,0,0,0,0,
3019,3022,0,0,0,0,0,0,
3031,3034,3037,3040,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,3141,
/* Block: 3 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
3566,3615,0,0,0,0,0,0,
0,0,0,0,0,0,0,3664,
3713,0,0,0,0,0,0,1574,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,1568,1571,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 4 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,1544,1547,
2867,2870,0,0,0,0,1616,1619,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 5 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,1577,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 6 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 7 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,1674,0,0,0,1727,0,1778,
0,1831,0,0,0,0,0,1882,
0,5028,0,0,0,1933,0,0,
0,1984,0,0,4905,0,4914,0,
0,2089,0,0,0,2142,0,2193,
0,2246,0,0,0,0,0,2402,
0,5024,0,0,0,2350,0,0,
0,2453,2037,2298,0,0,5034,0,
0,0,2506,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 8 */
0,0,0,0,0,0,2526,0,
0,0,0,0,0,0,0,0,
2616,0,0,2523,0,2512,2602,2636,
2532,0,2529,0,0,0,2642,0,
0,0,0,2543,0,0,0,2660,
0,0,0,2666,0,2654,0,0,
2623,0,0,2576,0,2565,2609,2639,
2554,0,2582,0,0,0,2645,0,
0,0,0,2585,0,0,0,2663,
0,0,0,2669,0,2657,0,0,
0,0,0,0,0,0,2579,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,2596,2599,0,0,
0,0,0,0,0,0,0,0,
/* Block: 9 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
2630,2633,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
2648,2651,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 10 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,2672,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
2677,0,2680,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 11 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,2686,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,2689,0,0,2683,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 12 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
2692,0,0,0,0,0,0,0,
2695,0,0,2698,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 13 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,2701,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 14 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,2705,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 15 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,2710,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,2713,2717,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 16 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,2720,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 17 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,2723,
0,0,0,0,0,0,2726,0,
0,0,2731,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 18 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,2734,2738,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 19 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,2741,0,0,2746,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 20 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,2749,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 21 */
0,0,0,0,0,2752,0,2755,
0,2758,0,2761,0,2764,0,0,
0,2767,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,2770,0,2773,0,2776,2779,
0,0,2782,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 22 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,2885,2888,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,3007,3010,0,0,0,0,
0,0,3025,3028,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 23 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
3242,3251,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
3456,3459,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,3560,3563,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 24 */
3762,3815,4794,4797,4800,4803,4806,4809,
3868,3921,4812,4815,4818,4821,4824,4827,
3974,3978,0,0,0,0,0,0,
3982,3986,0,0,0,0,0,0,
3990,4043,4830,4833,4836,4839,4842,4845,
4096,4149,4848,4851,4854,4857,4860,4863,
4202,4254,0,0,0,0,0,0,
4306,4358,0,0,0,0,0,0,
4410,4414,0,0,0,0,0,0,
4418,4422,0,0,0,0,0,0,
4426,4478,0,0,0,0,0,0,
0,4530,0,0,0,0,0,0,
4582,4635,4866,4869,4872,4875,4878,4881,
4688,4741,4884,4887,4890,4893,4896,4899,
4902,0,0,0,4911,0,0,0,
0,0,0,0,5031,0,0,0,
/* Block: 25 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,4908,0,
0,0,0,0,0,0,0,4920,
0,0,0,0,0,0,4917,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,5037,0,
0,0,0,0,0,0,4972,0,
/* Block: 26 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
5040,0,5043,0,5046,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
5049,0,5055,0,5052,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 27 */
0,0,0,5058,0,0,0,0,
5061,0,0,5064,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,5067,0,5070,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,5073,0,0,0,
0,0,0,5076,0,5079,0,0,
5082,0,0,0,0,5091,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,5088,0,0,5100,5103,0,0,
0,0,0,0,0,0,0,0,
0,0,5106,5109,0,0,5112,5115,
0,0,5118,5121,5148,5151,0,0,
/* Block: 28 */
0,0,5124,5127,0,0,5130,5133,
0,0,0,0,0,0,0,0,
0,5154,5157,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,5136,0,0,0,0,0,
5139,5142,0,5145,0,0,0,0,
0,0,5160,5163,5166,5169,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 29 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,5237,0,
0,0,0,5172,0,5175,0,5178,
0,5181,0,5184,0,5187,0,5190,
0,5193,0,5196,0,5199,0,5202,
0,5205,0,0,5208,0,5211,0,
5214,0,0,0,0,0,0,5217,
0,0,5221,0,0,5225,0,0,
5229,0,0,5233,0,0,0,0,
/* Block: 30 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,5240,0,0,
0,0,0,0,0,0,5308,0,
0,0,0,5243,0,5246,0,5249,
0,5252,0,5255,0,5258,0,5261,
0,5264,0,5267,0,5270,0,5273,
0,5276,0,0,5279,0,5282,0,
5285,0,0,0,0,0,0,5288,
0,0,5292,0,0,5296,0,0,
5300,0,0,5304,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,5311,
5314,5317,5320,0,0,0,0,0,
0,0,0,0,0,5323,0,0,
/* Block: 31 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,5326,0,5329,0,0,0,0,
0,0,0,0,0,5332,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 32 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,5335,5338,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 33 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,5341,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 34 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,5345,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 35 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
5350,5353,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 36 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,5356,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0};

uaix_const_data uaix_data_array(unsigned char, stage1_comp_cp2, 8704) = {
0,0,0,0,0,0,1,0,
0,0,0,0,2,0,0,0,
0,0,3,4,0,0,5,6,
7,8,9,10,0,0,0,0,
11,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,12,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,13,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,14,15,0,0,0,16,0,
0,17,0,18,0,0,0,0,
0,0,19,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0};

uaix_const_data uaix_data_array(unsigned char, stage2_comp_cp2, 2560) = {
/* Block: 0 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 1 */
1,2,3,4,8,0,9,11,
5,47,6,13,12,0,0,15,
0,16,0,48,49,0,0,0,
0,0,0,14,0,0,0,0,
0,0,0,41,46,40,17,7,
10,0,0,0,0,43,45,0,
44,42,0,0,0,0,0,0,
52,0,0,0,0,0,0,0,
0,0,50,0,0,51,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 2 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,18,19,20,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 3 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,21,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 4 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,22,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,23,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 5 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,25,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,24,26,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 6 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,28,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,27,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 7 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,29,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 8 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,32,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,30,31,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 9 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,33,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,34,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 10 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,35,0,0,0,0,36,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,37,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 11 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,38,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 12 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,39,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 13 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,53,54,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 14 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,55,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 15 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,56,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 16 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,57,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,58,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 17 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
60,0,0,0,0,0,0,0,
0,0,59,0,0,61,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 18 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,62,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 19 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
63,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0};

uaix_const_data uaix_data_array(type_codept, stage3_comp, 5359) = {
0,1,47,192,193,194,195,196,
197,0,256,258,260,550,461,0,
0,512,514,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,7680,7840,0,0,0,0,
0,7842,2,12,262,264,0,0,
0,199,0,0,0,266,268,1,
47,200,201,202,7868,203,0,552,
274,276,280,278,282,0,0,516,
518,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,7864,0,7704,7706,0,0,7866,
1,47,204,205,206,296,207,0,
0,298,300,302,304,463,0,0,
520,522,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,7882,0,0,7724,0,0,
7880,1,43,504,323,0,209,0,
0,325,0,0,0,7748,327,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,7750,7752,7754,1,47,
210,211,212,213,214,0,0,332,
334,490,558,465,336,416,524,526,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
7884,0,0,0,0,0,7886,1,
47,217,218,219,360,220,366,0,
362,364,370,0,467,368,431,532,
534,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,7908,0,7798,7796,0,7794,7910,
1,47,7922,221,374,7928,376,0,
0,562,0,0,7822,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,7924,0,0,0,0,0,
7926,1,47,224,225,226,227,228,
229,0,257,259,261,551,462,0,
0,513,515,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,7681,7841,0,0,0,0,
0,7843,2,12,263,265,0,0,
0,231,0,0,0,267,269,1,
47,232,233,234,7869,235,0,553,
275,277,281,279,283,0,0,517,
519,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,7865,0,7705,7707,0,0,7867,
1,47,236,237,238,297,239,0,
0,299,301,303,0,464,0,0,
521,523,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,7883,0,0,7725,0,0,
7881,1,43,505,324,0,241,0,
0,326,0,0,0,7749,328,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,7751,7753,7755,1,47,
242,243,244,245,246,0,0,333,
335,491,559,466,337,417,525,527,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
7885,0,0,0,0,0,7887,1,
47,249,250,251,361,252,367,0,
363,365,371,0,468,369,432,533,
535,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,7909,0,7799,7797,0,7795,7911,
1,47,7923,253,375,7929,255,7833,
0,563,0,0,7823,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,7925,0,0,0,0,0,
7927,7,43,7696,0,0,0,7690,
270,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,7692,7694,7698,
7,43,7697,0,0,0,7691,271,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,7693,7695,7699,2,
12,500,284,0,0,0,290,7712,
286,0,288,486,2,12,501,285,
0,0,0,291,7713,287,0,289,
487,3,45,292,0,7718,0,7720,
0,0,0,7714,542,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,7716,0,0,0,7722,3,45,
293,0,7719,0,7721,0,0,0,
7715,543,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,7717,7830,
0,0,7723,3,3,308,3,12,
309,0,0,0,0,0,0,0,
0,496,2,42,7728,0,0,0,
0,310,0,0,0,0,488,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,7730,7732,2,42,7729,
0,0,0,0,311,0,0,0,
0,489,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,7731,7733,
2,43,313,0,0,0,0,315,
0,0,0,0,317,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,7734,7738,7740,2,43,314,0,
0,0,0,316,0,0,0,0,
318,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,7735,7739,7741,
2,42,340,0,0,0,0,342,
0,0,0,7768,344,0,0,528,
530,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,7770,7774,2,42,341,0,0,
0,0,343,0,0,0,7769,345,
0,0,529,531,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,7771,7775,2,41,
346,348,0,0,0,350,0,0,
0,7776,352,0,0,0,0,536,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,7778,
2,41,347,349,0,0,0,351,
0,0,0,7777,353,0,0,0,
0,537,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,7779,7,43,354,0,0,0,
7786,356,0,0,0,0,538,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,7788,7790,
7792,5,43,7831,0,355,0,0,
0,7787,357,0,0,0,0,539,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,7789,
7791,7793,1,41,7808,7810,372,0,
7812,0,0,0,0,0,7814,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,7816,1,41,7809,
7811,373,0,7813,7832,0,0,0,
0,7815,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,7817,
2,42,377,7824,0,0,0,0,
0,0,0,379,381,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,7826,7828,2,42,378,7825,0,
0,0,0,0,0,0,380,382,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,7827,7829,1,12,
475,471,0,0,0,0,0,469,
0,0,0,473,1,12,476,472,
0,0,0,0,0,470,0,0,
0,474,8,8,478,8,8,479,
8,8,480,8,8,481,2,8,
508,0,0,0,0,0,482,2,
8,509,0,0,0,0,0,483,
8,8,492,8,8,493,12,12,
494,12,12,495,2,2,506,2,
2,507,2,2,510,2,2,511,
8,8,554,8,8,555,2,8,
7756,0,0,7758,0,0,556,2,
8,7757,0,0,7759,0,0,557,
8,8,560,8,8,561,1,50,
8173,901,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,8129,1,51,8122,902,0,0,
0,0,0,8121,8120,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,7944,7945,0,8124,1,
49,8136,904,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
7960,7961,1,51,8138,905,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,7976,7977,0,8140,1,
49,8154,906,0,0,938,0,0,
8153,8152,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
7992,7993,1,49,8184,908,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,8008,8009,1,49,8170,
910,0,0,939,0,0,8169,8168,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,8025,
1,51,8186,911,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,8040,8041,0,8188,1,50,8146,
912,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
8151,1,51,8048,940,0,0,0,
0,0,8113,8112,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,7936,7937,8118,8115,1,49,
8050,941,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,7952,
7953,1,51,8052,942,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,7968,7969,8134,8131,1,50,
8054,943,0,0,970,0,0,8145,
8144,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,7984,
7985,8150,1,50,8162,944,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,8167,1,50,
8058,973,0,0,971,0,0,8161,
8160,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,8016,
8017,8166,1,49,8056,972,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,8000,8001,1,51,8060,
974,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,8032,8033,
8182,8179,2,5,979,0,0,980,
1,9,1024,0,0,0,1025,0,
0,0,1238,2,2,1027,5,5,
1031,2,2,1036,1,9,1037,0,
0,0,1252,0,0,1250,1049,5,
13,1264,0,0,1262,1038,0,0,
0,1266,1,9,1117,0,0,0,
1253,0,0,1251,1081,1,9,1104,
0,0,0,1105,0,0,0,1239,
2,2,1107,5,5,1111,2,2,
1116,5,13,1265,0,0,1263,1118,
0,0,0,1267,15,15,1142,15,
15,1143,5,9,1244,0,0,0,
1217,5,9,1245,0,0,0,1218,
5,9,1234,0,0,0,1232,5,
9,1235,0,0,0,1233,5,5,
1242,5,5,1243,5,5,1246,5,
5,1247,5,5,1254,5,5,1255,
5,5,1258,5,5,1259,5,5,
1260,5,5,1261,5,5,1268,5,
5,1269,5,5,1272,5,5,1273,
18,20,1570,1571,1573,19,19,1572,
19,19,1574,19,19,1728,19,19,
1730,19,19,1747,21,21,2345,21,
21,2353,21,21,2356,22,23,2507,
2508,24,26,2888,2891,2892,27,27,
2964,27,28,3020,3018,28,28,3019,
29,29,3144,30,30,3264,30,32,
3271,3272,3274,30,30,3275,33,34,
3402,3404,33,33,3403,35,37,3546,
3548,3550,35,35,3549,38,38,4134,
39,39,6918,39,39,6920,39,39,
6922,39,39,6924,39,39,6926,39,
39,6930,39,39,6971,39,39,6973,
39,39,6976,39,39,6977,39,39,
6979,11,42,7682,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,7684,7686,11,42,7683,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,7685,7687,2,2,7688,
2,2,7689,1,2,7700,7702,1,
2,7701,7703,9,9,7708,9,9,
7709,11,11,7710,11,11,7711,2,
2,7726,2,2,7727,8,8,7736,
8,8,7737,2,41,7742,0,0,
0,0,0,0,0,0,7744,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,7746,2,41,7743,
0,0,0,0,0,0,0,0,
7745,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,7747,1,
2,7760,7762,1,2,7761,7763,2,
11,7764,0,0,0,0,0,0,
0,0,7766,2,11,7765,0,0,
0,0,0,0,0,0,7767,8,
8,7772,8,8,7773,11,11,7780,
11,11,7781,11,11,7782,11,11,
7783,11,11,7784,11,11,7785,2,
2,7800,2,2,7801,5,5,7802,
5,5,7803,4,41,7804,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,7806,4,41,7805,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,7807,5,11,7820,0,0,
0,0,0,7818,5,11,7821,0,
0,0,0,0,7819,11,11,7835,
1,47,7846,7844,0,7850,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
7848,1,47,7847,7845,0,7851,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,7849,3,9,7852,0,0,0,
0,0,7862,3,9,7853,0,0,
0,0,0,7863,1,47,7856,7854,
0,7860,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,7858,1,47,7857,
7855,0,7861,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,7859,1,47,
7872,7870,0,7876,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,7874,1,
47,7873,7871,0,7877,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,7875,
3,3,7878,3,3,7879,1,47,
7890,7888,0,7894,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,7892,1,
47,7891,7889,0,7895,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,7893,
3,3,7896,3,3,7897,1,47,
7900,7898,0,7904,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
7906,0,0,0,0,0,7902,1,
47,7901,7899,0,7905,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,7907,0,0,0,0,0,7903,
1,47,7914,7912,0,7918,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,7920,0,0,0,0,0,
7916,1,47,7915,7913,0,7919,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,7921,0,0,0,0,
0,7917,1,51,7938,7940,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,7942,8064,1,
51,7939,7941,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,7943,8065,1,51,7946,7948,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,7950,
8072,1,51,7947,7949,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,7951,8073,1,2,
7954,7956,1,2,7955,7957,1,2,
7962,7964,1,2,7963,7965,1,51,
7970,7972,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,7974,8080,1,51,7971,7973,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,7975,8081,
1,51,7978,7980,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,7982,8088,1,51,7979,
7981,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
7983,8089,1,50,7986,7988,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,7990,1,50,
7987,7989,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,7991,1,50,7994,7996,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,7998,1,50,
7995,7997,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,7999,1,2,8002,8004,1,2,
8003,8005,1,2,8010,8012,1,2,
8011,8013,1,50,8018,8020,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,8022,1,50,
8019,8021,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,8023,1,50,8027,8029,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,8031,1,51,
8034,8036,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,8038,8096,1,51,8035,8037,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,8039,8097,
1,51,8042,8044,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,8046,8104,1,51,8043,
8045,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
8047,8105,51,51,8066,51,51,8067,
51,51,8068,51,51,8069,51,51,
8070,51,51,8071,51,51,8074,51,
51,8075,51,51,8076,51,51,8077,
51,51,8078,51,51,8079,51,51,
8082,51,51,8083,51,51,8084,51,
51,8085,51,51,8086,51,51,8087,
51,51,8090,51,51,8091,51,51,
8092,51,51,8093,51,51,8094,51,
51,8095,51,51,8098,51,51,8099,
51,51,8100,51,51,8101,51,51,
8102,51,51,8103,51,51,8106,51,
51,8107,51,51,8108,51,51,8109,
51,51,8110,51,51,8111,51,51,
8114,51,51,8116,51,51,8119,51,
51,8130,51,51,8132,51,51,8135,
1,50,8141,8142,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,8143,1,50,8157,8158,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,8159,
48,49,8164,8165,49,49,8172,51,
51,8178,51,51,8180,51,51,8183,
52,52,8602,52,52,8603,52,52,
8622,52,52,8653,52,52,8654,52,
52,8655,52,52,8708,52,52,8713,
52,52,8716,52,52,8740,52,52,
8742,52,52,8769,52,52,8772,52,
52,8775,52,52,8777,52,52,8800,
52,52,8802,52,52,8813,52,52,
8814,52,52,8815,52,52,8816,52,
52,8817,52,52,8820,52,52,8821,
52,52,8824,52,52,8825,52,52,
8832,52,52,8833,52,52,8836,52,
52,8837,52,52,8840,52,52,8841,
52,52,8876,52,52,8877,52,52,
8878,52,52,8879,52,52,8928,52,
52,8929,52,52,8930,52,52,8931,
52,52,8938,52,52,8939,52,52,
8940,52,52,8941,53,53,12364,53,
53,12366,53,53,12368,53,53,12370,
53,53,12372,53,53,12374,53,53,
12376,53,53,12378,53,53,12380,53,
53,12382,53,53,12384,53,53,12386,
53,53,12389,53,53,12391,53,53,
12393,53,54,12400,12401,53,54,12403,
12404,53,54,12406,12407,53,54,12409,
12410,53,54,12412,12413,53,53,12436,
53,53,12446,53,53,12460,53,53,
12462,53,53,12464,53,53,12466,53,
53,12468,53,53,12470,53,53,12472,
53,53,12474,53,53,12476,53,53,
12478,53,53,12480,53,53,12482,53,
53,12485,53,53,12487,53,53,12489,
53,54,12496,12497,53,54,12499,12500,
53,54,12502,12503,53,54,12505,12506,
53,54,12508,12509,53,53,12532,53,
53,12535,53,53,12536,53,53,12537,
53,53,12538,53,53,12542,55,55,
69786,55,55,69788,55,55,69803,56,
56,69934,56,56,69935,57,58,70475,
70476,59,61,70843,70844,70846,62,62,
71098,62,62,71099,63,63,71992};

UNI_ALGO_IMPL_NAMESPACE_END

// AMALGAMATION: uni_algo/impl/data/data_prop.h

// GENERATED. DO NOT EDIT.

// Unicode 15.1.0

UNI_ALGO_IMPL_NAMESPACE_BEGIN

uaix_const_data uaix_data_array(unsigned char, stage1_prop, 8704) = {
0,1,2,3,4,5,6,7,
8,9,10,11,12,13,14,15,
16,17,18,19,20,21,22,23,
24,25,26,27,28,29,30,31,
32,33,34,34,35,36,37,38,
39,34,34,34,40,41,42,43,
44,45,46,47,48,49,50,51,
52,53,54,55,56,57,58,59,
60,61,62,63,64,64,65,66,
67,68,69,70,71,69,72,73,
69,69,64,74,64,64,75,76,
77,78,79,80,81,82,69,83,
84,85,86,87,88,89,69,69,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,90,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
91,34,34,34,34,34,34,34,
34,92,34,34,93,94,95,96,
97,98,99,100,101,102,103,104,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,105,
106,106,106,106,106,106,106,106,
106,106,106,106,106,106,106,106,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,34,34,108,109,110,111,
34,34,112,113,114,115,116,117,
118,119,120,121,122,123,124,125,
126,127,128,129,34,34,130,131,
132,133,134,135,136,137,138,139,
140,141,142,122,143,144,145,146,
147,148,149,150,151,152,153,122,
154,155,122,156,157,158,159,122,
160,161,162,163,164,165,166,122,
167,168,169,170,122,171,172,173,
34,34,34,34,34,34,34,174,
175,34,176,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,177,
34,34,34,34,34,34,34,34,
178,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
34,34,34,34,179,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
34,34,34,34,180,181,182,183,
122,122,122,122,184,185,186,187,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,188,
34,34,34,34,34,34,34,34,
34,189,190,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,191,
34,34,192,34,34,193,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
194,195,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,196,197,
69,198,199,200,201,202,203,122,
204,205,206,207,208,209,210,211,
69,69,69,69,212,213,122,122,
122,122,122,122,122,122,214,122,
215,216,217,122,122,218,122,122,
122,219,122,122,122,122,122,220,
34,221,222,122,122,122,122,122,
223,224,225,122,226,227,122,122,
228,229,230,231,232,122,69,233,
69,69,69,69,69,234,235,236,
237,238,69,69,239,240,69,241,
122,122,122,122,122,122,122,242,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,243,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,244,34,
245,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,246,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,247,
34,34,34,34,248,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
34,34,34,34,249,122,122,122,
122,122,122,122,122,122,122,242,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,250,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,251,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,242,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,242,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,242,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,242,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,242,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,242,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,242,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,242,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,242,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,242,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,242,
252,122,253,254,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,242,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,255,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,255};

uaix_const_data uaix_data_array(unsigned char, stage2_prop, 32768) = {
/* Block: 0 */
26,26,26,26,26,26,26,26,
26,90,90,90,90,90,26,26,
26,26,26,26,26,26,26,26,
26,26,26,26,26,26,26,26,
87,18,18,18,20,18,18,18,
14,15,18,19,18,13,18,18,
9,9,9,9,9,9,9,9,
9,9,18,18,19,19,19,18,
18,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,14,18,15,21,12,
21,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,14,19,15,19,26,
/* Block: 1 */
26,26,26,26,26,90,26,26,
26,26,26,26,26,26,26,26,
26,26,26,26,26,26,26,26,
26,26,26,26,26,26,26,26,
87,18,20,20,20,20,22,18,
21,22,37,16,19,27,22,21,
22,19,11,11,21,34,18,18,
21,11,37,17,11,11,11,18,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,19,
33,33,33,33,33,33,33,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,19,
34,34,34,34,34,34,34,34,
/* Block: 2 */
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
34,33,34,33,34,33,34,33,
34,33,34,33,34,33,34,33,
34,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
33,33,34,33,34,33,34,34,
/* Block: 3 */
34,33,33,34,33,34,33,33,
34,33,33,33,34,34,33,33,
33,33,34,33,33,34,33,33,
33,34,34,34,33,33,34,33,
33,34,33,34,33,34,33,33,
34,33,34,34,33,34,33,33,
34,33,33,33,34,33,34,33,
33,34,34,37,33,34,34,34,
37,37,37,37,33,35,34,33,
35,34,33,35,34,33,34,33,
34,33,34,33,34,33,34,33,
34,33,34,33,34,34,33,34,
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
34,33,35,34,33,34,33,33,
33,34,33,34,33,34,33,34,
/* Block: 4 */
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
33,34,33,34,34,34,34,34,
34,34,33,33,34,33,33,34,
34,33,34,33,33,33,33,34,
33,34,33,34,33,34,33,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
/* Block: 5 */
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,37,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,21,21,21,21,36,36,
36,36,36,36,36,36,36,36,
36,36,21,21,21,21,21,21,
21,21,21,21,21,21,21,21,
36,36,36,36,36,21,21,21,
21,21,21,21,36,21,36,21,
21,21,21,21,21,21,21,21,
21,21,21,21,21,21,21,21,
/* Block: 6 */
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,38,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
33,34,33,34,36,21,33,34,
0,0,36,34,34,34,18,33,
/* Block: 7 */
0,0,0,0,21,21,33,18,
33,33,33,0,33,0,33,33,
34,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,0,33,33,33,33,33,
33,33,33,33,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,33,
34,34,33,33,33,34,34,34,
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
34,34,34,34,33,34,19,33,
34,33,33,34,34,33,33,33,
/* Block: 8 */
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
/* Block: 9 */
33,34,22,6,6,6,6,6,
8,8,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
33,33,34,33,34,33,34,33,
34,33,34,33,34,33,34,34,
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
/* Block: 10 */
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
0,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,0,
0,36,18,18,18,18,18,18,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
/* Block: 11 */
34,34,34,34,34,34,34,34,
34,18,13,0,0,22,22,20,
0,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
38,38,38,38,38,38,38,38,
38,38,38,38,38,38,13,38,
18,38,38,18,38,38,18,38,
0,0,0,0,0,0,0,0,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,0,0,0,0,37,
37,37,37,18,18,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 12 */
27,27,27,27,27,27,19,19,
19,18,18,20,18,18,22,22,
38,38,38,38,38,38,38,38,
38,38,38,18,27,18,18,18,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
36,37,37,37,37,37,37,37,
37,37,37,38,38,38,38,38,
38,38,38,38,38,38,38,38,
6,38,38,38,38,38,38,38,
9,9,9,9,9,9,9,9,
9,9,18,18,18,18,37,37,
38,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
/* Block: 13 */
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,18,37,38,38,
38,38,38,38,38,27,22,6,
6,38,38,38,38,36,36,38,
38,22,6,6,6,38,37,37,
9,9,9,9,9,9,9,9,
9,9,37,37,37,22,22,37,
/* Block: 14 */
18,18,18,18,18,18,18,18,
18,18,18,18,18,18,0,27,
37,38,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
38,38,38,38,38,38,38,38,
38,38,38,38,38,38,38,38,
6,6,6,6,6,6,6,6,
6,6,6,0,0,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
/* Block: 15 */
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,38,38,
38,38,38,38,38,38,38,38,
38,37,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
9,9,9,9,9,9,9,9,
9,9,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,6,6,6,6,6,
6,6,6,6,36,36,22,18,
18,18,36,0,0,6,20,20,
/* Block: 16 */
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,38,38,
6,6,36,38,38,38,38,38,
38,38,38,38,36,38,38,38,
36,38,38,38,38,6,0,0,
18,18,18,18,18,18,18,18,
18,18,18,18,18,18,18,0,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,6,6,6,0,0,18,0,
37,37,37,37,37,37,37,37,
37,37,37,0,0,0,0,0,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
/* Block: 17 */
37,37,37,37,37,37,37,37,
21,37,37,37,37,37,37,0,
27,27,0,0,0,0,0,0,
6,6,6,6,6,6,6,6,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,36,6,6,6,6,6,6,
6,6,6,6,38,38,38,38,
38,38,38,38,38,38,38,38,
6,6,27,38,38,38,38,38,
38,38,6,6,6,6,6,6,
38,38,38,38,38,38,38,38,
38,38,38,38,38,38,38,38,
/* Block: 18 */
38,38,38,39,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,38,39,6,37,39,39,
39,38,38,38,38,38,38,38,
38,39,39,39,39,6,39,39,
37,6,6,6,6,38,38,38,
37,37,37,37,37,37,37,37,
37,37,38,38,18,18,9,9,
9,9,9,9,9,9,9,9,
18,36,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
/* Block: 19 */
37,38,39,39,0,37,37,37,
37,37,37,37,37,0,0,37,
37,0,0,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,0,37,37,37,37,37,37,
37,0,37,0,0,0,37,37,
37,37,0,0,6,37,39,39,
39,38,38,38,38,0,0,39,
39,0,0,39,39,6,37,0,
0,0,0,0,0,0,0,39,
0,0,0,0,37,37,0,37,
37,37,38,38,0,0,9,9,
9,9,9,9,9,9,9,9,
37,37,20,20,11,11,11,11,
11,11,22,20,37,18,6,0,
/* Block: 20 */
0,38,38,39,0,37,37,37,
37,37,37,0,0,0,0,37,
37,0,0,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,0,37,37,37,37,37,37,
37,0,37,37,0,37,37,0,
37,37,0,0,6,0,39,39,
39,38,38,0,0,0,0,38,
38,0,0,38,38,6,0,0,
0,38,0,0,0,0,0,0,
0,37,37,37,37,0,37,0,
0,0,0,0,0,0,9,9,
9,9,9,9,9,9,9,9,
38,38,37,37,37,38,18,0,
0,0,0,0,0,0,0,0,
/* Block: 21 */
0,38,38,39,0,37,37,37,
37,37,37,37,37,37,0,37,
37,37,0,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,0,37,37,37,37,37,37,
37,0,37,37,0,37,37,37,
37,37,0,0,6,37,39,39,
39,38,38,38,38,38,0,38,
38,39,0,39,39,6,0,0,
37,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
37,37,38,38,0,0,9,9,
9,9,9,9,9,9,9,9,
18,20,0,0,0,0,0,0,
0,37,38,38,38,6,6,6,
/* Block: 22 */
0,38,39,39,0,37,37,37,
37,37,37,37,37,0,0,37,
37,0,0,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,0,37,37,37,37,37,37,
37,0,37,37,0,37,37,37,
37,37,0,0,6,37,39,38,
39,38,38,38,38,0,0,39,
39,0,0,39,39,6,0,0,
0,0,0,0,0,6,38,39,
0,0,0,0,37,37,0,37,
37,37,38,38,0,0,9,9,
9,9,9,9,9,9,9,9,
22,37,11,11,11,11,11,11,
0,0,0,0,0,0,0,0,
/* Block: 23 */
0,0,38,37,0,37,37,37,
37,37,37,0,0,0,37,37,
37,0,37,37,37,37,0,0,
0,37,37,0,37,0,37,37,
0,0,0,37,37,0,0,0,
37,37,37,0,0,0,37,37,
37,37,37,37,37,37,37,37,
37,37,0,0,0,0,39,39,
38,39,39,0,0,0,39,39,
39,0,39,39,39,6,0,0,
37,0,0,0,0,0,0,39,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,9,9,
9,9,9,9,9,9,9,9,
11,11,11,22,22,22,22,22,
22,20,22,0,0,0,0,0,
/* Block: 24 */
38,39,39,39,38,37,37,37,
37,37,37,37,37,0,37,37,
37,0,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,0,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,0,0,6,37,38,38,
38,39,39,39,39,0,38,38,
38,0,38,38,38,6,0,0,
0,0,0,0,0,38,38,0,
37,37,37,0,0,37,0,0,
37,37,38,38,0,0,9,9,
9,9,9,9,9,9,9,9,
0,0,0,0,0,0,0,18,
11,11,11,11,11,11,11,22,
/* Block: 25 */
37,38,39,39,18,37,37,37,
37,37,37,37,37,0,37,37,
37,0,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,0,37,37,37,37,37,37,
37,37,37,37,0,37,37,37,
37,37,0,0,6,37,39,38,
39,39,39,39,39,0,38,39,
39,0,39,39,38,6,0,0,
0,0,0,0,0,39,39,0,
0,0,0,0,0,37,37,0,
37,37,38,38,0,0,9,9,
9,9,9,9,9,9,9,9,
0,37,37,39,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 26 */
38,38,39,39,37,37,37,37,
37,37,37,37,37,0,37,37,
37,0,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,6,6,37,39,39,
39,38,38,38,38,0,39,39,
39,0,39,39,39,6,37,22,
0,0,0,0,37,37,37,39,
11,11,11,11,11,11,11,37,
37,37,38,38,0,0,9,9,
9,9,9,9,9,9,9,9,
11,11,11,11,11,11,11,11,
11,22,37,37,37,37,37,37,
/* Block: 27 */
0,38,39,39,0,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,0,
0,0,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,0,37,37,37,37,37,
37,37,37,37,0,37,0,0,
37,37,37,37,37,37,37,0,
0,0,6,0,0,0,0,39,
39,39,38,38,38,0,38,0,
39,39,39,39,39,39,39,39,
0,0,0,0,0,0,9,9,
9,9,9,9,9,9,9,9,
0,0,39,39,18,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 28 */
0,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,38,37,37,38,38,38,38,
38,38,38,0,0,0,0,20,
37,37,37,37,37,37,36,6,
6,6,6,6,6,38,6,18,
9,9,9,9,9,9,9,9,
9,9,18,18,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 29 */
0,37,37,0,37,0,37,37,
37,37,37,0,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,0,37,0,37,
37,37,37,37,37,37,37,37,
37,38,37,37,38,38,38,38,
38,38,6,38,38,37,0,0,
37,37,37,37,37,0,36,0,
6,6,6,6,6,38,6,0,
9,9,9,9,9,9,9,9,
9,9,0,0,37,37,37,37,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 30 */
37,22,22,22,18,18,18,18,
18,18,18,18,18,18,18,18,
18,18,18,22,18,22,22,22,
6,6,22,22,22,22,22,22,
9,9,9,9,9,9,9,9,
9,9,11,11,11,11,11,11,
11,11,11,11,22,6,22,6,
22,6,14,15,14,15,7,7,
37,37,37,37,37,37,37,37,
0,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,0,0,0,
0,38,38,38,38,38,38,38,
38,38,38,38,38,38,38,39,
/* Block: 31 */
38,38,38,38,6,18,6,6,
37,37,37,37,37,38,38,38,
38,38,38,38,38,38,38,38,
0,38,38,38,38,38,38,38,
38,38,38,38,38,38,38,38,
38,38,38,38,38,38,38,38,
38,38,38,38,38,38,38,38,
38,38,38,38,38,0,22,22,
22,22,22,22,22,22,6,22,
22,22,22,22,22,0,22,22,
18,18,18,18,18,22,22,22,
22,18,18,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 32 */
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,39,39,38,38,38,
38,39,38,38,38,38,38,6,
39,6,6,39,39,38,38,37,
9,9,9,9,9,9,9,9,
9,9,18,18,18,18,18,18,
37,37,37,37,37,37,39,39,
38,38,37,37,37,37,38,38,
38,37,39,39,39,37,37,39,
39,39,39,39,39,39,37,37,
37,38,38,38,38,37,37,37,
37,37,37,37,37,37,37,37,
/* Block: 33 */
37,37,38,39,39,38,38,39,
39,39,39,39,39,38,37,39,
9,9,9,9,9,9,9,9,
9,9,39,39,39,38,22,22,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,0,33,
0,0,0,0,0,33,0,0,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,18,36,34,34,34,
/* Block: 34 */
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
/* Block: 35 */
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,0,37,37,37,37,0,0,
37,37,37,37,37,37,37,0,
37,0,37,37,37,37,0,0,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
/* Block: 36 */
37,37,37,37,37,37,37,37,
37,0,37,37,37,37,0,0,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,0,37,37,37,37,0,0,
37,37,37,37,37,37,37,0,
37,0,37,37,37,37,0,0,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,0,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
/* Block: 37 */
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,0,37,37,37,37,0,0,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,0,0,6,6,6,
18,18,18,18,18,18,18,18,
18,11,11,11,11,11,11,11,
11,11,11,11,11,11,11,11,
11,11,11,11,11,0,0,0,
/* Block: 38 */
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
22,22,22,22,22,22,22,22,
22,22,0,0,0,0,0,0,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,0,0,
34,34,34,34,34,34,0,0,
/* Block: 39 */
13,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
/* Block: 40 */
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,22,18,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
/* Block: 41 */
87,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,14,15,0,0,0,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,18,18,18,42,42,
42,37,37,37,37,37,37,37,
37,0,0,0,0,0,0,0,
/* Block: 42 */
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,38,38,6,7,0,0,
0,0,0,0,0,0,0,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,38,38,7,18,18,0,
0,0,0,0,0,0,0,0,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,38,38,0,0,0,0,
0,0,0,0,0,0,0,0,
37,37,37,37,37,37,37,37,
37,37,37,37,37,0,37,37,
37,0,38,38,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 43 */
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,6,6,39,38,
38,38,38,38,38,38,39,39,
39,39,39,39,39,39,38,39,
39,6,6,6,6,6,6,6,
6,6,6,6,18,18,18,36,
18,18,18,20,37,6,0,0,
9,9,9,9,9,9,9,9,
9,9,0,0,0,0,0,0,
11,11,11,11,11,11,11,11,
11,11,0,0,0,0,0,0,
/* Block: 44 */
18,18,18,18,18,18,13,18,
18,18,18,6,6,6,27,6,
9,9,9,9,9,9,9,9,
9,9,0,0,0,0,0,0,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,36,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,0,0,0,0,0,0,0,
/* Block: 45 */
37,37,37,37,37,38,38,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,38,37,0,0,0,0,0,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,0,0,
0,0,0,0,0,0,0,0,
/* Block: 46 */
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,0,
38,38,38,39,39,39,39,38,
38,39,39,39,0,0,0,0,
39,39,38,39,39,39,39,39,
39,6,6,6,0,0,0,0,
22,0,0,0,18,18,9,9,
9,9,9,9,9,9,9,9,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,0,0,
37,37,37,37,37,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 47 */
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,0,0,0,0,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,0,0,0,0,0,0,
9,9,9,9,9,9,9,9,
9,9,11,0,0,0,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
/* Block: 48 */
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,38,
38,39,39,38,0,0,18,18,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,39,38,39,
38,38,38,38,38,38,38,0,
6,39,38,39,39,38,38,38,
38,38,38,38,38,39,39,39,
39,39,39,38,38,6,6,6,
6,6,6,6,6,0,0,6,
/* Block: 49 */
9,9,9,9,9,9,9,9,
9,9,0,0,0,0,0,0,
9,9,9,9,9,9,9,9,
9,9,0,0,0,0,0,0,
18,18,18,18,18,18,18,36,
18,18,18,18,18,18,0,0,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,8,38,
38,6,6,6,6,6,6,6,
6,6,6,6,38,38,38,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 50 */
38,38,38,38,39,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,6,39,38,38,
38,38,38,39,38,39,39,39,
39,39,38,39,7,37,37,37,
37,37,37,37,37,0,0,0,
9,9,9,9,9,9,9,9,
9,9,18,18,18,18,18,18,
18,22,22,22,22,22,22,22,
22,22,22,6,6,6,6,6,
6,6,6,6,22,22,22,22,
22,22,22,22,22,18,18,0,
/* Block: 51 */
38,38,39,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,39,38,38,38,38,39,39,
38,38,7,6,38,38,37,37,
9,9,9,9,9,9,9,9,
9,9,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,6,39,
38,38,39,39,39,38,39,38,
38,38,7,7,0,0,0,0,
0,0,0,0,18,18,18,18,
/* Block: 52 */
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,39,39,39,39,
39,39,39,39,38,38,38,38,
38,38,38,38,39,39,38,6,
0,0,0,18,18,18,18,18,
9,9,9,9,9,9,9,9,
9,9,0,0,0,37,37,37,
9,9,9,9,9,9,9,9,
9,9,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
36,36,36,36,36,36,18,18,
/* Block: 53 */
34,34,34,34,34,34,34,34,
34,0,0,0,0,0,0,0,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,0,0,33,33,33,
18,18,18,18,18,18,18,18,
0,0,0,0,0,0,0,0,
6,6,6,18,6,6,6,6,
6,6,6,6,6,6,6,6,
6,7,6,6,6,6,6,6,
6,37,37,37,37,6,37,37,
37,37,37,37,6,37,37,7,
6,6,37,0,0,0,0,0,
/* Block: 54 */
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,34,34,34,34,34,
34,34,34,34,34,34,34,34,
36,34,34,34,34,34,34,34,
/* Block: 55 */
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,38,
38,38,38,38,38,38,38,38,
38,38,38,38,38,6,6,6,
6,6,6,6,6,6,6,6,
/* Block: 56 */
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
/* Block: 57 */
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,34,34,
34,34,34,34,34,34,33,34,
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
/* Block: 58 */
34,34,34,34,34,34,34,34,
33,33,33,33,33,33,33,33,
34,34,34,34,34,34,0,0,
33,33,33,33,33,33,0,0,
34,34,34,34,34,34,34,34,
33,33,33,33,33,33,33,33,
34,34,34,34,34,34,34,34,
33,33,33,33,33,33,33,33,
34,34,34,34,34,34,0,0,
33,33,33,33,33,33,0,0,
34,34,34,34,34,34,34,34,
0,33,0,33,0,33,0,33,
34,34,34,34,34,34,34,34,
33,33,33,33,33,33,33,33,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,0,0,
/* Block: 59 */
34,34,34,34,34,34,34,34,
35,35,35,35,35,35,35,35,
34,34,34,34,34,34,34,34,
35,35,35,35,35,35,35,35,
34,34,34,34,34,34,34,34,
35,35,35,35,35,35,35,35,
34,34,34,34,34,0,34,34,
33,33,33,33,35,21,34,21,
21,21,34,34,34,0,34,34,
33,33,33,33,35,21,21,21,
34,34,34,34,0,0,34,34,
33,33,33,33,0,21,21,21,
34,34,34,34,34,34,34,34,
33,33,33,33,33,21,21,21,
0,0,34,34,34,0,34,34,
33,33,33,33,35,21,21,0,
/* Block: 60 */
87,87,87,87,87,87,87,87,
87,87,87,27,27,27,27,27,
13,13,13,13,13,13,18,18,
16,17,14,16,16,17,14,16,
18,18,18,18,18,18,18,18,
88,89,27,27,27,27,27,87,
18,18,18,18,18,18,18,18,
18,16,17,18,18,18,18,12,
12,18,18,18,19,14,15,18,
18,18,18,18,18,18,18,18,
18,18,19,18,12,18,18,18,
18,18,18,18,18,18,18,87,
27,27,27,27,27,0,27,27,
27,27,27,27,27,27,27,27,
11,36,0,0,11,11,11,11,
11,11,19,19,19,14,15,36,
/* Block: 61 */
11,11,11,11,11,11,11,11,
11,11,19,19,19,14,15,0,
36,36,36,36,36,36,36,36,
36,36,36,36,36,0,0,0,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
6,6,6,6,6,6,6,6,
6,6,6,6,6,8,8,8,
8,6,8,8,8,6,6,6,
6,6,6,6,6,6,6,6,
6,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 62 */
22,22,33,22,22,22,22,33,
22,22,34,33,33,33,34,34,
33,33,33,34,22,33,22,22,
19,33,33,33,33,33,22,22,
22,22,22,22,33,22,33,22,
33,22,33,33,33,33,22,34,
33,33,33,33,34,37,37,37,
37,34,22,22,34,34,33,33,
19,19,19,19,19,33,34,34,
34,34,22,19,22,22,34,22,
11,11,11,11,11,11,11,11,
11,11,11,11,11,11,11,11,
42,42,42,42,42,42,42,42,
42,42,42,42,42,42,42,42,
42,42,42,42,42,42,42,42,
42,42,42,42,42,42,42,42,
/* Block: 63 */
42,42,42,33,34,42,42,42,
42,11,22,22,0,0,0,0,
19,19,19,19,19,22,22,22,
22,22,19,19,22,22,22,22,
19,22,22,19,22,22,19,22,
22,22,22,22,22,22,19,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,19,19,
22,22,19,22,19,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,19,19,19,19,
19,19,19,19,19,19,19,19,
/* Block: 64 */
19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,
/* Block: 65 */
22,22,22,22,22,22,22,22,
14,15,14,15,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
19,19,22,22,22,22,22,22,
22,14,15,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,19,22,22,22,
/* Block: 66 */
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,19,19,19,19,19,
19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,
19,19,19,19,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,19,19,19,19,
19,19,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
/* Block: 67 */
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
22,22,22,22,22,22,22,22,
22,22,22,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
11,11,11,11,11,11,11,11,
11,11,11,11,11,11,11,11,
11,11,11,11,11,11,11,11,
11,11,11,11,11,11,11,11,
/* Block: 68 */
11,11,11,11,11,11,11,11,
11,11,11,11,11,11,11,11,
11,11,11,11,11,11,11,11,
11,11,11,11,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,54,54,
54,54,54,54,54,54,54,54,
54,54,54,54,54,54,54,54,
54,54,54,54,54,54,54,54,
54,54,54,54,54,54,54,54,
54,54,54,54,54,54,54,54,
54,54,54,54,54,54,54,54,
54,54,11,11,11,11,11,11,
11,11,11,11,11,11,11,11,
11,11,11,11,11,11,11,11,
/* Block: 69 */
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
/* Block: 70 */
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,19,
22,22,22,22,22,22,22,22,
22,19,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
19,19,19,19,19,19,19,19,
/* Block: 71 */
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,19,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
/* Block: 72 */
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
14,15,14,15,14,15,14,15,
14,15,14,15,14,15,11,11,
11,11,11,11,11,11,11,11,
/* Block: 73 */
11,11,11,11,11,11,11,11,
11,11,11,11,11,11,11,11,
11,11,11,11,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
19,19,19,19,19,14,15,19,
19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,
19,19,19,19,19,19,14,15,
14,15,14,15,14,15,14,15,
19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,
/* Block: 74 */
19,19,19,14,15,14,15,14,
15,14,15,14,15,14,15,14,
15,14,15,14,15,14,15,14,
15,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,
14,15,14,15,19,19,19,19,
19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,
19,19,19,19,14,15,19,19,
/* Block: 75 */
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,
19,19,19,19,19,22,22,19,
19,19,19,19,19,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,0,0,22,22,
22,22,22,22,22,22,22,22,
/* Block: 76 */
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,0,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
/* Block: 77 */
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
33,34,33,33,33,34,34,33,
34,33,34,33,34,33,33,33,
33,34,33,34,34,33,34,34,
34,34,34,34,36,36,33,33,
/* Block: 78 */
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
33,34,33,34,34,22,22,22,
22,22,22,33,34,33,34,6,
6,6,33,34,0,0,0,0,
0,18,18,18,18,11,18,18,
/* Block: 79 */
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,0,34,
0,0,0,0,0,34,0,0,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
0,0,0,0,0,0,0,36,
18,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,6,
/* Block: 80 */
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,0,
0,0,0,0,0,0,0,0,
37,37,37,37,37,37,37,0,
37,37,37,37,37,37,37,0,
37,37,37,37,37,37,37,0,
37,37,37,37,37,37,37,0,
37,37,37,37,37,37,37,0,
37,37,37,37,37,37,37,0,
37,37,37,37,37,37,37,0,
37,37,37,37,37,37,37,0,
38,38,38,38,38,38,38,38,
38,38,38,38,38,38,38,38,
38,38,38,38,38,38,38,38,
38,38,38,38,38,38,38,38,
/* Block: 81 */
18,18,16,17,16,17,18,18,
18,16,17,18,16,17,18,18,
18,18,18,18,18,18,18,13,
18,18,13,18,16,17,18,18,
16,17,14,15,14,15,14,15,
14,15,18,18,18,18,18,36,
18,18,18,18,18,18,18,18,
18,18,13,13,18,18,18,18,
13,18,14,18,18,18,18,18,
18,18,18,18,18,18,18,18,
22,22,18,18,18,14,15,14,
15,14,15,14,15,13,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 82 */
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,0,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 83 */
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
/* Block: 84 */
87,18,18,18,22,36,37,42,
14,15,14,15,14,15,14,15,
14,15,22,22,14,15,14,15,
14,15,14,15,13,14,15,15,
22,42,42,42,42,42,42,42,
42,42,6,6,6,6,7,7,
13,36,36,36,36,36,22,22,
42,42,42,36,37,18,22,22,
0,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
/* Block: 85 */
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,0,
0,6,6,21,21,36,36,37,
13,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,18,36,36,36,37,
/* Block: 86 */
0,0,0,0,0,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
0,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
/* Block: 87 */
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,0,
22,22,11,11,11,11,22,22,
22,22,22,22,22,22,22,22,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,0,0,0,0,
0,0,0,0,0,0,0,22,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
/* Block: 88 */
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,0,
11,11,11,11,11,11,11,11,
11,11,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
11,11,11,11,11,11,11,11,
22,11,11,11,11,11,11,11,
11,11,11,11,11,11,11,11,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
/* Block: 89 */
11,11,11,11,11,11,11,11,
11,11,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,11,11,11,11,11,11,11,
11,11,11,11,11,11,11,11,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
/* Block: 90 */
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
/* Block: 91 */
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,36,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
/* Block: 92 */
37,37,37,37,37,37,37,37,
37,37,37,37,37,0,0,0,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,0,
0,0,0,0,0,0,0,0,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
36,36,36,36,36,36,18,18,
/* Block: 93 */
37,37,37,37,37,37,37,37,
37,37,37,37,36,18,18,18,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
9,9,9,9,9,9,9,9,
9,9,37,37,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,37,6,
8,8,8,18,38,38,38,38,
38,38,38,38,6,6,18,36,
/* Block: 94 */
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
33,34,33,34,36,36,38,38,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,42,42,
42,42,42,42,42,42,42,42,
6,6,18,18,18,18,18,18,
0,0,0,0,0,0,0,0,
/* Block: 95 */
21,21,21,21,21,21,21,21,
21,21,21,21,21,21,21,21,
21,21,21,21,21,21,21,36,
36,36,36,36,36,36,36,36,
21,21,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
34,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
36,34,34,34,34,34,34,34,
34,33,34,33,34,33,33,34,
/* Block: 96 */
33,34,33,34,33,34,33,34,
36,21,21,33,34,33,34,37,
33,34,33,34,34,34,33,34,
33,34,33,34,33,34,33,34,
33,34,33,34,33,34,33,34,
33,34,33,33,33,33,33,34,
33,33,33,33,33,34,33,34,
33,34,33,34,33,34,33,34,
33,34,33,34,33,33,33,33,
34,33,34,0,0,0,0,0,
33,34,0,34,0,34,33,34,
33,34,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,36,36,36,33,34,37,
36,36,34,37,37,37,37,37,
/* Block: 97 */
37,37,38,37,37,37,6,37,
37,37,37,38,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,39,39,38,38,39,
22,22,22,22,6,0,0,0,
11,11,11,11,11,11,22,22,
20,22,0,0,0,0,0,0,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,18,18,18,18,
0,0,0,0,0,0,0,0,
/* Block: 98 */
39,39,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,39,39,39,39,
39,39,39,39,39,39,39,39,
39,39,39,39,6,38,0,0,
0,0,0,0,0,0,18,18,
9,9,9,9,9,9,9,9,
9,9,0,0,0,0,0,0,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,37,37,37,37,37,37,
18,18,18,37,18,37,37,38,
/* Block: 99 */
9,9,9,9,9,9,9,9,
9,9,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,38,38,
38,38,38,6,6,6,18,18,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,38,
38,38,38,38,38,38,38,38,
38,38,39,7,0,0,0,0,
0,0,0,0,0,0,0,18,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,0,0,0,
/* Block: 100 */
38,38,38,39,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,6,39,39,38,38,
38,38,39,39,38,38,39,39,
7,18,18,18,18,18,18,18,
18,18,18,18,18,18,0,36,
9,9,9,9,9,9,9,9,
9,9,0,0,0,0,18,18,
37,37,37,37,37,38,36,37,
37,37,37,37,37,37,37,37,
9,9,9,9,9,9,9,9,
9,9,37,37,37,37,37,0,
/* Block: 101 */
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,38,38,38,38,38,38,39,
39,38,38,39,39,38,38,0,
0,0,0,0,0,0,0,0,
37,37,37,38,37,37,37,37,
37,37,37,37,38,39,0,0,
9,9,9,9,9,9,9,9,
9,9,0,0,18,18,18,18,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
36,37,37,37,37,37,37,22,
22,22,37,39,38,39,37,37,
/* Block: 102 */
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
38,37,38,38,38,37,37,38,
38,37,37,37,37,37,38,6,
37,6,37,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,37,37,36,18,18,
37,37,37,37,37,37,37,37,
37,37,37,39,38,38,39,39,
18,18,37,36,36,39,6,0,
0,0,0,0,0,0,0,0,
/* Block: 103 */
0,37,37,37,37,37,37,0,
0,37,37,37,37,37,37,0,
0,37,37,37,37,37,37,0,
0,0,0,0,0,0,0,0,
37,37,37,37,37,37,37,0,
37,37,37,37,37,37,37,0,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,21,36,36,36,36,
34,34,34,34,34,34,34,34,
34,36,21,21,0,0,0,0,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
/* Block: 104 */
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,39,39,38,39,39,
38,39,39,18,7,6,0,0,
9,9,9,9,9,9,9,9,
9,9,0,0,0,0,0,0,
/* Block: 105 */
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,0,0,0,0,
0,0,0,0,0,0,0,0,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,0,
0,0,0,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,0,0,0,0,
/* Block: 106 */
28,28,28,28,28,28,28,28,
28,28,28,28,28,28,28,28,
28,28,28,28,28,28,28,28,
28,28,28,28,28,28,28,28,
28,28,28,28,28,28,28,28,
28,28,28,28,28,28,28,28,
28,28,28,28,28,28,28,28,
28,28,28,28,28,28,28,28,
28,28,28,28,28,28,28,28,
28,28,28,28,28,28,28,28,
28,28,28,28,28,28,28,28,
28,28,28,28,28,28,28,28,
28,28,28,28,28,28,28,28,
28,28,28,28,28,28,28,28,
28,28,28,28,28,28,28,28,
28,28,28,28,28,28,28,28,
/* Block: 107 */
29,29,29,29,29,29,29,29,
29,29,29,29,29,29,29,29,
29,29,29,29,29,29,29,29,
29,29,29,29,29,29,29,29,
29,29,29,29,29,29,29,29,
29,29,29,29,29,29,29,29,
29,29,29,29,29,29,29,29,
29,29,29,29,29,29,29,29,
29,29,29,29,29,29,29,29,
29,29,29,29,29,29,29,29,
29,29,29,29,29,29,29,29,
29,29,29,29,29,29,29,29,
29,29,29,29,29,29,29,29,
29,29,29,29,29,29,29,29,
29,29,29,29,29,29,29,29,
29,29,29,29,29,29,29,29,
/* Block: 108 */
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,0,0,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
/* Block: 109 */
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 110 */
34,34,34,34,34,34,34,0,
0,0,0,0,0,0,0,0,
0,0,0,34,34,34,34,34,
0,0,0,0,0,37,38,37,
37,37,37,37,37,37,37,37,
37,19,37,37,37,37,37,37,
37,37,37,37,37,37,37,0,
37,37,37,37,37,0,37,0,
37,37,0,37,37,0,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
/* Block: 111 */
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,21,21,21,21,21,21,
21,21,21,21,21,21,21,21,
21,21,21,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
/* Block: 112 */
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,15,14,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
/* Block: 113 */
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
0,0,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
0,0,0,0,0,0,0,22,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
37,37,37,37,37,37,37,37,
37,37,37,37,20,22,22,22,
/* Block: 114 */
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
18,18,18,18,18,18,18,14,
15,18,0,0,0,0,0,0,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
18,13,13,12,12,14,15,14,
15,14,15,14,15,14,15,14,
15,14,15,14,15,18,18,14,
15,18,18,18,18,12,12,12,
18,18,18,0,18,18,18,18,
13,14,15,14,15,14,15,18,
18,18,19,13,19,19,19,0,
18,20,18,18,0,0,0,0,
37,37,37,37,37,0,37,37,
37,37,37,37,37,37,37,37,
/* Block: 115 */
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,0,0,27,
/* Block: 116 */
0,18,18,18,20,18,18,18,
14,15,18,19,18,13,18,18,
9,9,9,9,9,9,9,9,
9,9,18,18,19,19,19,18,
18,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,14,18,15,21,12,
21,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,14,19,15,19,14,
15,18,14,15,18,18,37,37,
37,37,37,37,37,37,37,37,
36,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
/* Block: 117 */
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,36,36,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,0,
0,0,37,37,37,37,37,37,
0,0,37,37,37,37,37,37,
0,0,37,37,37,37,37,37,
0,0,37,37,37,0,0,0,
20,20,19,21,22,20,20,0,
22,19,19,19,19,22,22,0,
0,0,0,0,0,0,0,0,
0,27,27,27,22,22,128,128,
/* Block: 118 */
37,37,37,37,37,37,37,37,
37,37,37,37,0,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,0,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,0,37,37,0,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,0,0,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 119 */
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,0,0,0,0,0,
/* Block: 120 */
18,18,18,0,0,0,0,11,
11,11,11,11,11,11,11,11,
11,11,11,11,11,11,11,11,
11,11,11,11,11,11,11,11,
11,11,11,11,11,11,11,11,
11,11,11,11,11,11,11,11,
11,11,11,11,0,0,0,22,
22,22,22,22,22,22,22,22,
42,42,42,42,42,42,42,42,
42,42,42,42,42,42,42,42,
42,42,42,42,42,42,42,42,
42,42,42,42,42,42,42,42,
42,42,42,42,42,42,42,42,
42,42,42,42,42,42,42,42,
42,42,42,42,42,11,11,11,
11,22,22,22,22,22,22,22,
/* Block: 121 */
22,22,22,22,22,22,22,22,
22,22,11,11,22,22,22,0,
22,22,22,22,22,22,22,22,
22,22,22,22,22,0,0,0,
22,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,6,0,0,
/* Block: 122 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 123 */
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,0,0,0,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
6,11,11,11,11,11,11,11,
11,11,11,11,11,11,11,11,
11,11,11,11,11,11,11,11,
11,11,11,11,0,0,0,0,
/* Block: 124 */
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
11,11,11,11,0,0,0,0,
0,0,0,0,0,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,42,37,37,37,37,37,37,
37,37,42,0,0,0,0,0,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,38,38,
38,38,38,0,0,0,0,0,
/* Block: 125 */
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,0,18,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,0,0,0,0,
37,37,37,37,37,37,37,37,
18,42,42,42,42,42,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 126 */
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
/* Block: 127 */
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,0,0,
9,9,9,9,9,9,9,9,
9,9,0,0,0,0,0,0,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,0,0,0,0,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,0,0,0,0,
/* Block: 128 */
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
0,0,0,0,0,0,0,0,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,0,0,0,0,
0,0,0,0,0,0,0,18,
33,33,33,33,33,33,33,33,
33,33,33,0,33,33,33,33,
/* Block: 129 */
33,33,33,33,33,33,33,33,
33,33,33,0,33,33,33,33,
33,33,33,0,33,33,0,34,
34,34,34,34,34,34,34,34,
34,34,0,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,0,34,34,34,34,34,
34,34,0,34,34,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 130 */
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,0,
0,0,0,0,0,0,0,0,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,0,0,
0,0,0,0,0,0,0,0,
37,37,37,37,37,37,37,37,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 131 */
36,36,36,36,36,36,0,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,0,36,36,36,36,36,36,
36,36,36,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 132 */
37,37,37,37,37,37,0,0,
37,0,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,0,37,
37,0,0,0,37,0,0,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,0,18,
11,11,11,11,11,11,11,11,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,22,
22,11,11,11,11,11,11,11,
/* Block: 133 */
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,0,
0,0,0,0,0,0,0,11,
11,11,11,11,11,11,11,11,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,0,37,37,0,0,
0,0,0,11,11,11,11,11,
/* Block: 134 */
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,11,11,
11,11,11,11,0,0,0,18,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,0,0,0,0,0,18,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 135 */
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
0,0,0,0,11,11,37,37,
11,11,11,11,11,11,11,11,
11,11,11,11,11,11,11,11,
0,0,11,11,11,11,11,11,
11,11,11,11,11,11,11,11,
11,11,11,11,11,11,11,11,
11,11,11,11,11,11,11,11,
11,11,11,11,11,11,11,11,
11,11,11,11,11,11,11,11,
/* Block: 136 */
37,38,38,38,0,38,38,0,
0,0,0,0,38,38,38,38,
37,37,37,37,0,37,37,37,
0,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,0,0,
6,6,6,0,0,0,0,6,
11,11,11,11,11,11,11,11,
11,0,0,0,0,0,0,0,
18,18,18,18,18,18,18,18,
18,0,0,0,0,0,0,0,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,11,11,18,
/* Block: 137 */
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,11,11,11,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
37,37,37,37,37,37,37,37,
22,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,6,6,0,
0,0,0,11,11,11,11,11,
18,18,18,18,18,18,18,0,
0,0,0,0,0,0,0,0,
/* Block: 138 */
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,0,0,
0,18,18,18,18,18,18,18,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,0,0,
11,11,11,11,11,11,11,11,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,0,0,0,0,0,
11,11,11,11,11,11,11,11,
/* Block: 139 */
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,0,0,0,0,0,0,
0,18,18,18,18,0,0,0,
0,0,0,0,0,0,0,0,
0,11,11,11,11,11,11,11,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 140 */
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 141 */
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,0,0,0,0,0,
0,0,0,0,0,0,0,0,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,0,0,0,0,0,
0,0,11,11,11,11,11,11,
/* Block: 142 */
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,38,38,38,38,
0,0,0,0,0,0,0,0,
9,9,9,9,9,9,9,9,
9,9,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 143 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
11,11,11,11,11,11,11,11,
11,11,11,11,11,11,11,11,
11,11,11,11,11,11,11,11,
11,11,11,11,11,11,11,0,
/* Block: 144 */
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,0,38,38,13,0,0,
37,37,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,6,6,6,
/* Block: 145 */
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,11,11,11,
11,11,11,11,11,11,11,37,
0,0,0,0,0,0,0,0,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,6,6,
6,6,6,6,6,6,6,6,
6,11,11,11,11,18,18,18,
18,18,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
/* Block: 146 */
37,37,6,6,6,6,18,18,
18,18,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,11,11,11,
11,11,11,11,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,0,
0,0,0,0,0,0,0,0,
/* Block: 147 */
39,38,39,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
38,38,38,38,38,38,38,38,
38,38,38,38,38,38,6,18,
18,18,18,18,18,18,0,0,
0,0,11,11,11,11,11,11,
11,11,11,11,11,11,11,11,
11,11,11,11,11,11,9,9,
9,9,9,9,9,9,9,9,
6,37,37,38,38,37,0,0,
0,0,0,0,0,0,0,6,
/* Block: 148 */
38,38,39,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
39,39,39,38,38,38,38,39,
39,6,6,18,18,27,18,18,
18,18,38,0,0,0,0,0,
0,0,0,0,0,27,0,0,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,0,0,0,0,0,0,0,
9,9,9,9,9,9,9,9,
9,9,0,0,0,0,0,0,
/* Block: 149 */
38,38,38,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,38,
38,38,38,38,39,38,38,38,
38,38,38,6,6,0,9,9,
9,9,9,9,9,9,9,9,
18,18,18,18,37,39,39,37,
0,0,0,0,0,0,0,0,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,6,18,18,37,0,
0,0,0,0,0,0,0,0,
/* Block: 150 */
38,38,39,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,39,39,39,38,38,
38,38,38,38,38,38,38,39,
7,37,37,37,37,18,18,18,
18,6,6,6,6,18,39,38,
9,9,9,9,9,9,9,9,
9,9,37,18,37,18,18,18,
0,11,11,11,11,11,11,11,
11,11,11,11,11,11,11,11,
11,11,11,11,11,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 151 */
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,0,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,39,39,39,38,
38,38,39,39,38,7,6,38,
18,18,18,18,18,18,38,37,
37,38,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 152 */
37,37,37,37,37,37,37,0,
37,0,37,37,37,37,0,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,0,37,
37,37,37,37,37,37,37,37,
37,18,0,0,0,0,0,0,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,38,
39,39,39,38,38,38,38,38,
38,6,6,0,0,0,0,0,
9,9,9,9,9,9,9,9,
9,9,0,0,0,0,0,0,
/* Block: 153 */
38,38,39,39,0,37,37,37,
37,37,37,37,37,0,0,37,
37,0,0,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,0,37,37,37,37,37,37,
37,0,37,37,0,37,37,37,
37,37,0,6,6,37,39,39,
38,39,39,39,39,0,0,39,
39,0,0,39,39,7,0,0,
37,0,0,0,0,0,0,39,
0,0,0,0,0,37,37,37,
37,37,39,39,0,0,6,6,
6,6,6,6,6,0,0,0,
6,6,6,6,6,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 154 */
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,39,39,39,
38,38,38,38,38,38,38,38,
39,39,6,38,38,39,6,37,
37,37,37,18,18,18,18,18,
9,9,9,9,9,9,9,9,
9,9,18,18,0,18,6,37,
37,37,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 155 */
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
39,39,39,38,38,38,38,38,
38,39,38,39,39,39,39,38,
38,39,6,6,37,37,18,37,
0,0,0,0,0,0,0,0,
9,9,9,9,9,9,9,9,
9,9,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 156 */
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,39,
39,39,38,38,38,38,0,0,
39,39,39,39,38,38,39,6,
6,18,18,18,18,18,18,18,
18,18,18,18,18,18,18,18,
18,18,18,18,18,18,18,18,
37,37,37,37,38,38,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 157 */
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
39,39,39,38,38,38,38,38,
38,38,38,39,39,38,39,6,
38,18,18,18,37,0,0,0,
0,0,0,0,0,0,0,0,
9,9,9,9,9,9,9,9,
9,9,0,0,0,0,0,0,
18,18,18,18,18,18,18,18,
18,18,18,18,18,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 158 */
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,38,39,38,39,39,
38,38,38,38,38,38,7,6,
37,18,0,0,0,0,0,0,
9,9,9,9,9,9,9,9,
9,9,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 159 */
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,0,0,38,38,38,
39,39,38,38,38,38,39,38,
38,38,38,6,0,0,0,0,
9,9,9,9,9,9,9,9,
9,9,11,11,18,18,18,22,
37,37,37,37,37,37,37,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 160 */
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,39,39,39,38,
38,38,38,38,38,38,38,38,
39,6,6,18,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 161 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
9,9,9,9,9,9,9,9,
9,9,11,11,11,11,11,11,
11,11,11,0,0,0,0,0,
0,0,0,0,0,0,0,37,
/* Block: 162 */
37,37,37,37,37,37,37,0,
0,37,0,0,37,37,37,37,
37,37,37,37,0,37,37,0,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
39,39,39,39,39,39,0,39,
39,0,0,38,38,7,6,37,
39,37,39,6,18,18,18,0,
0,0,0,0,0,0,0,0,
9,9,9,9,9,9,9,9,
9,9,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 163 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
37,37,37,37,37,37,37,37,
0,0,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,39,39,39,38,38,38,38,
0,0,38,38,39,39,39,39,
6,37,18,37,39,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 164 */
37,38,38,38,38,38,38,38,
38,38,38,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,6,6,38,38,38,
38,39,37,38,38,38,38,18,
18,18,18,18,18,18,18,6,
0,0,0,0,0,0,0,0,
37,38,38,38,38,38,38,39,
39,38,38,38,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
/* Block: 165 */
37,37,37,37,37,37,37,37,
37,37,38,38,38,38,38,38,
38,38,38,38,38,38,38,39,
6,6,18,18,18,37,18,18,
18,18,18,0,0,0,0,0,
0,0,0,0,0,0,0,0,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,0,0,0,0,0,0,0,
/* Block: 166 */
18,18,18,18,18,18,18,18,
18,18,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 167 */
37,37,37,37,37,37,37,37,
37,0,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,39,
38,38,38,38,38,38,38,0,
38,38,38,38,38,38,39,6,
37,18,18,18,18,18,0,0,
0,0,0,0,0,0,0,0,
9,9,9,9,9,9,9,9,
9,9,11,11,11,11,11,11,
11,11,11,11,11,11,11,11,
11,11,11,11,11,0,0,0,
18,18,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
/* Block: 168 */
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
0,0,38,38,38,38,38,38,
38,38,38,38,38,38,38,38,
38,38,38,38,38,38,38,38,
0,39,38,38,38,38,38,38,
38,39,38,38,39,38,38,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 169 */
37,37,37,37,37,37,37,0,
37,37,0,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,38,38,38,38,38,38,0,
0,0,38,0,38,38,0,38,
38,38,6,38,6,6,37,38,
0,0,0,0,0,0,0,0,
9,9,9,9,9,9,9,9,
9,9,0,0,0,0,0,0,
37,37,37,37,37,37,0,37,
37,0,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
/* Block: 170 */
37,37,37,37,37,37,37,37,
37,37,39,39,39,39,39,0,
38,38,0,39,39,38,39,6,
37,0,0,0,0,0,0,0,
9,9,9,9,9,9,9,9,
9,9,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 171 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,38,38,39,39,18,
18,0,0,0,0,0,0,0,
/* Block: 172 */
38,38,37,39,37,37,37,37,
37,37,37,37,37,37,37,37,
37,0,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,39,39,38,38,
38,38,38,0,0,0,39,39,
38,7,6,18,18,18,18,18,
18,18,18,18,18,18,18,18,
9,9,9,9,9,9,9,9,
9,9,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 173 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
37,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
11,11,11,11,11,11,11,11,
11,11,11,11,11,11,11,11,
11,11,11,11,11,22,22,22,
22,22,22,22,22,20,20,20,
20,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,0,0,0,0,0,0,
0,0,0,0,0,0,0,18,
/* Block: 174 */
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 175 */
42,42,42,42,42,42,42,42,
42,42,42,42,42,42,42,42,
42,42,42,42,42,42,42,42,
42,42,42,42,42,42,42,42,
42,42,42,42,42,42,42,42,
42,42,42,42,42,42,42,42,
42,42,42,42,42,42,42,42,
42,42,42,42,42,42,42,42,
42,42,42,42,42,42,42,42,
42,42,42,42,42,42,42,42,
42,42,42,42,42,42,42,42,
42,42,42,42,42,42,42,42,
42,42,42,42,42,42,42,42,
42,42,42,42,42,42,42,0,
18,18,18,18,18,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 176 */
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 177 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,18,18,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 178 */
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
27,27,27,27,27,27,27,27,
27,27,27,27,27,27,27,27,
6,37,37,37,37,37,37,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 179 */
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 180 */
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,0,0,0,0,0,0,0,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,0,
9,9,9,9,9,9,9,9,
9,9,0,0,0,0,18,18,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
/* Block: 181 */
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,0,
9,9,9,9,9,9,9,9,
9,9,0,0,0,0,0,0,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,0,0,
6,6,6,6,6,18,0,0,
0,0,0,0,0,0,0,0,
/* Block: 182 */
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
6,6,6,6,6,6,6,18,
18,18,18,18,22,22,22,22,
36,36,36,36,18,22,0,0,
0,0,0,0,0,0,0,0,
9,9,9,9,9,9,9,9,
9,9,0,11,11,11,11,11,
11,11,0,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
0,0,0,0,0,37,37,37,
/* Block: 183 */
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 184 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
/* Block: 185 */
11,11,11,11,11,11,11,11,
11,11,11,11,11,11,11,11,
11,11,11,11,11,11,11,18,
18,18,18,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 186 */
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,0,0,0,0,38,
37,39,39,39,39,39,39,39,
39,39,39,39,39,39,39,39,
39,39,39,39,39,39,39,39,
39,39,39,39,39,39,39,39,
39,39,39,39,39,39,39,39,
39,39,39,39,39,39,39,39,
/* Block: 187 */
39,39,39,39,39,39,39,39,
0,0,0,0,0,0,0,38,
38,38,38,36,36,36,36,36,
36,36,36,36,36,36,36,36,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
36,36,18,36,6,0,0,0,
0,0,0,0,0,0,0,0,
39,39,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 188 */
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
0,0,0,0,0,0,0,0,
/* Block: 189 */
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 190 */
37,37,37,37,37,37,37,37,
37,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 191 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
36,36,36,36,0,36,36,36,
36,36,36,36,0,36,36,0,
/* Block: 192 */
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,37,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
37,37,37,0,0,37,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,37,37,37,37,
0,0,0,0,0,0,0,0,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
/* Block: 193 */
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,0,0,0,0,
/* Block: 194 */
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,0,0,0,0,0,
37,37,37,37,37,37,37,37,
37,37,37,37,37,0,0,0,
/* Block: 195 */
37,37,37,37,37,37,37,37,
37,0,0,0,0,0,0,0,
37,37,37,37,37,37,37,37,
37,37,0,0,22,6,38,18,
27,27,27,27,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 196 */
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,0,0,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,0,
0,0,0,0,0,0,0,0,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
/* Block: 197 */
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 198 */
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,0,0,
0,0,0,0,0,0,0,0,
/* Block: 199 */
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,0,
0,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,7,7,6,
6,6,22,22,22,7,7,7,
7,7,7,27,27,27,27,27,
27,27,27,6,6,6,6,6,
/* Block: 200 */
6,6,6,22,22,6,6,6,
6,6,6,6,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,6,6,6,6,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 201 */
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,6,6,6,22,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 202 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
11,11,11,11,11,11,11,11,
11,11,11,11,11,11,11,11,
11,11,11,11,0,0,0,0,
0,0,0,0,0,0,0,0,
11,11,11,11,11,11,11,11,
11,11,11,11,11,11,11,11,
11,11,11,11,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 203 */
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,0,
0,0,0,0,0,0,0,0,
11,11,11,11,11,11,11,11,
11,11,11,11,11,11,11,11,
11,11,11,11,11,11,11,11,
11,0,0,0,0,0,0,0,
/* Block: 204 */
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,34,34,
34,34,34,34,34,0,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
/* Block: 205 */
33,33,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,33,0,33,33,
0,0,33,0,0,33,33,0,
0,33,33,33,33,0,33,33,
33,33,33,33,33,33,34,34,
34,34,0,34,0,34,34,34,
34,34,34,34,0,34,34,34,
34,34,34,34,34,34,34,34,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
/* Block: 206 */
34,34,34,34,33,33,0,33,
33,33,33,0,0,33,33,33,
33,33,33,33,33,0,33,33,
33,33,33,33,33,0,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
33,33,0,33,33,33,33,0,
33,33,33,33,33,0,33,0,
0,0,33,33,33,33,33,33,
33,0,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
/* Block: 207 */
33,33,33,33,33,33,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
/* Block: 208 */
34,34,34,34,34,34,34,34,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
/* Block: 209 */
33,33,33,33,33,33,33,33,
33,33,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,0,0,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,19,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,19,34,34,34,34,
34,34,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,19,34,34,34,34,
/* Block: 210 */
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,19,34,34,
34,34,34,34,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,19,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,19,
34,34,34,34,34,34,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,19,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
/* Block: 211 */
34,34,34,34,34,34,34,34,
34,19,34,34,34,34,34,34,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,19,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,19,34,34,34,34,
34,34,33,34,0,0,9,9,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
/* Block: 212 */
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,22,
22,22,22,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,22,22,22,
22,22,22,22,22,6,22,22,
22,22,22,22,22,22,22,22,
/* Block: 213 */
22,22,22,22,6,22,22,18,
18,18,18,18,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,6,6,6,6,6,
0,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 214 */
34,34,34,34,34,34,34,34,
34,34,37,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,0,
0,0,0,0,0,34,34,34,
34,34,34,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 215 */
38,38,38,38,38,38,38,0,
38,38,38,38,38,38,38,38,
38,38,38,38,38,38,38,38,
38,0,0,38,38,38,38,38,
38,38,0,38,38,0,38,38,
38,38,38,0,0,0,0,0,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 216 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,38,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 217 */
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,0,0,0,
6,6,6,6,6,6,6,36,
36,36,36,36,36,36,0,0,
9,9,9,9,9,9,9,9,
9,9,0,0,0,0,37,22,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 218 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,6,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,6,6,6,6,
9,9,9,9,9,9,9,9,
9,9,0,0,0,0,0,20,
/* Block: 219 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,36,6,6,6,6,
9,9,9,9,9,9,9,9,
9,9,0,0,0,0,0,0,
/* Block: 220 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
37,37,37,37,37,37,37,0,
37,37,37,37,0,37,37,0,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,0,
/* Block: 221 */
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,0,0,11,
11,11,11,11,11,11,11,11,
6,6,6,6,6,6,6,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 222 */
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,6,6,6,38,
6,6,6,36,0,0,0,0,
9,9,9,9,9,9,9,9,
9,9,0,0,0,0,18,18,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 223 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,11,11,11,11,11,11,11,
11,11,11,11,11,11,11,11,
/* Block: 224 */
11,11,11,11,11,11,11,11,
11,11,11,11,11,11,11,11,
11,11,11,11,11,11,11,11,
11,11,11,11,11,11,11,11,
11,11,11,11,11,11,11,11,
11,11,11,11,22,11,11,11,
20,11,11,11,11,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 225 */
0,11,11,11,11,11,11,11,
11,11,11,11,11,11,11,11,
11,11,11,11,11,11,11,11,
11,11,11,11,11,11,11,11,
11,11,11,11,11,11,11,11,
11,11,11,11,11,11,22,11,
11,11,11,11,11,11,11,11,
11,11,11,11,11,11,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 226 */
37,37,37,37,0,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
0,37,37,0,37,0,0,37,
0,37,37,37,37,37,37,37,
37,37,37,0,37,37,37,37,
0,37,0,37,0,0,0,0,
0,0,37,0,0,0,0,37,
0,37,0,37,0,37,37,37,
0,37,37,0,37,0,0,37,
0,37,0,37,0,37,0,37,
0,37,37,0,37,0,0,37,
37,37,37,0,37,37,37,37,
37,37,37,0,37,37,37,37,
0,37,37,37,37,0,37,0,
/* Block: 227 */
37,37,37,37,37,37,37,37,
37,37,0,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,0,0,0,0,
0,37,37,37,0,37,37,37,
37,37,0,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
19,19,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 228 */
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,0,0,0,0,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
/* Block: 229 */
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,0,0,0,0,
0,0,0,0,0,0,0,0,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,0,
0,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
0,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
0,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,0,0,
0,0,0,0,0,0,0,0,
/* Block: 230 */
11,11,11,11,11,11,11,11,
11,11,11,11,11,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
54,54,54,54,54,54,54,54,
54,54,54,54,54,54,54,54,
54,54,54,54,54,54,54,54,
54,54,22,22,22,22,22,22,
54,54,54,54,54,54,54,54,
54,54,54,54,54,54,54,54,
54,54,54,54,54,54,54,54,
54,54,22,22,22,22,22,22,
54,54,54,54,54,54,54,54,
54,54,54,54,54,54,54,54,
/* Block: 231 */
54,54,54,54,54,54,54,54,
54,54,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
/* Block: 232 */
22,22,22,0,0,0,0,0,
0,0,0,0,0,0,0,0,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,0,0,0,0,
22,22,22,22,22,22,22,22,
22,0,0,0,0,0,0,0,
22,22,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
22,22,22,22,22,22,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 233 */
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,21,21,21,21,21,
/* Block: 234 */
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
0,0,0,0,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,0,0,0,
22,22,22,22,22,22,22,22,
22,22,22,22,22,0,0,0,
/* Block: 235 */
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,0,
0,0,0,22,22,22,22,22,
/* Block: 236 */
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,0,0,0,0,0,0,
22,22,22,22,22,22,22,22,
22,22,22,22,0,0,0,0,
22,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 237 */
22,22,22,22,22,22,22,22,
22,22,22,22,0,0,0,0,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
0,0,0,0,0,0,0,0,
22,22,22,22,22,22,22,22,
22,22,0,0,0,0,0,0,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
/* Block: 238 */
22,22,22,22,22,22,22,22,
0,0,0,0,0,0,0,0,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,0,0,
22,22,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 239 */
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,0,0,0,0,
0,0,0,0,0,0,0,0,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,0,0,
22,22,22,22,22,22,22,22,
22,22,22,22,22,0,0,0,
/* Block: 240 */
22,22,22,22,22,22,22,22,
22,0,0,0,0,0,0,0,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,0,22,
22,22,22,22,22,22,0,0,
0,0,0,0,0,0,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,0,0,0,0,
22,22,22,22,22,22,22,22,
22,0,0,0,0,0,0,0,
22,22,22,22,22,22,22,22,
22,0,0,0,0,0,0,0,
/* Block: 241 */
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,0,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
9,9,9,9,9,9,9,9,
9,9,0,0,0,0,0,0,
/* Block: 242 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,128,128,
/* Block: 243 */
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 244 */
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,0,0,0,0,0,0,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
/* Block: 245 */
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,0,0,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
/* Block: 246 */
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
/* Block: 247 */
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
/* Block: 248 */
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 249 */
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 250 */
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,0,0,0,0,0,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
/* Block: 251 */
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 252 */
0,27,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
27,27,27,27,27,27,27,27,
27,27,27,27,27,27,27,27,
27,27,27,27,27,27,27,27,
27,27,27,27,27,27,27,27,
27,27,27,27,27,27,27,27,
27,27,27,27,27,27,27,27,
27,27,27,27,27,27,27,27,
27,27,27,27,27,27,27,27,
27,27,27,27,27,27,27,27,
27,27,27,27,27,27,27,27,
27,27,27,27,27,27,27,27,
27,27,27,27,27,27,27,27,
/* Block: 253 */
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
/* Block: 254 */
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 255 */
29,29,29,29,29,29,29,29,
29,29,29,29,29,29,29,29,
29,29,29,29,29,29,29,29,
29,29,29,29,29,29,29,29,
29,29,29,29,29,29,29,29,
29,29,29,29,29,29,29,29,
29,29,29,29,29,29,29,29,
29,29,29,29,29,29,29,29,
29,29,29,29,29,29,29,29,
29,29,29,29,29,29,29,29,
29,29,29,29,29,29,29,29,
29,29,29,29,29,29,29,29,
29,29,29,29,29,29,29,29,
29,29,29,29,29,29,29,29,
29,29,29,29,29,29,29,29,
29,29,29,29,29,29,128,128};

UNI_ALGO_IMPL_NAMESPACE_END

// AMALGAMATION: uni_algo/impl/data/data_script.h

// GENERATED. DO NOT EDIT.

// Unicode 15.1.0

UNI_ALGO_IMPL_NAMESPACE_BEGIN

uaix_const_data uaix_data_array(unsigned char, stage1_script, 8704) = {
0,1,2,2,2,3,4,5,
6,7,8,9,10,11,12,13,
14,15,16,17,18,19,20,21,
22,23,24,25,26,27,28,29,
30,31,32,32,33,34,35,36,
37,37,37,37,37,38,39,40,
41,42,43,44,45,46,47,48,
49,50,51,52,2,2,53,54,
55,56,57,58,59,59,59,59,
60,59,59,59,59,59,59,59,
61,61,59,59,59,59,62,63,
64,65,66,67,68,69,70,71,
72,73,74,75,76,77,78,59,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,79,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
80,80,80,80,80,80,80,80,
80,81,82,82,83,84,85,86,
87,88,89,90,91,92,93,94,
32,32,32,32,32,32,32,32,
32,32,32,32,32,32,32,32,
32,32,32,32,32,32,32,32,
32,32,32,32,32,32,32,32,
32,32,32,32,32,32,32,32,
32,32,32,32,32,32,32,32,
32,32,32,32,32,32,32,32,
32,32,32,32,32,32,32,32,
32,32,32,32,32,32,32,32,
32,32,32,32,32,32,32,32,
32,32,32,32,32,32,32,95,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,70,70,97,98,99,100,
101,101,102,103,104,105,106,107,
108,109,110,111,96,112,113,114,
115,116,117,118,119,119,120,121,
122,123,124,125,126,127,128,129,
130,131,132,96,133,134,135,136,
137,138,139,140,141,142,143,96,
144,145,96,146,147,148,149,96,
150,151,152,153,154,155,156,96,
157,158,159,160,96,161,162,163,
164,164,164,164,164,164,164,165,
166,164,167,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,168,
169,169,169,169,169,169,169,169,
170,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
171,171,171,171,172,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
173,173,173,173,174,175,176,177,
96,96,96,96,178,179,180,181,
182,182,182,182,182,182,182,182,
182,182,182,182,182,182,182,182,
182,182,182,182,182,182,182,182,
182,182,182,182,182,182,182,182,
182,182,182,182,182,182,182,182,
182,182,182,182,182,182,182,183,
182,182,182,182,182,182,184,184,
184,185,186,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,187,
188,189,190,191,191,192,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
193,194,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,195,196,
59,197,198,199,200,201,202,96,
203,204,205,59,59,206,59,207,
208,208,208,208,208,209,96,96,
96,96,96,96,96,96,210,96,
211,212,213,96,96,214,96,96,
96,215,96,96,96,96,96,216,
217,218,219,96,96,96,96,96,
220,221,222,96,223,224,96,96,
225,226,59,227,228,96,59,59,
59,59,59,59,59,229,230,231,
232,233,59,59,234,235,59,236,
96,96,96,96,96,96,96,96,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,237,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,238,70,
239,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,240,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,241,
70,70,70,70,242,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
70,70,70,70,243,96,96,96,
96,96,96,96,96,96,96,96,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,244,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,245,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
246,96,247,248,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96};

uaix_const_data uaix_data_array(unsigned char, stage2_script, 31872) = {
/* Block: 0 */
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,1,1,1,1,1,
1,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,1,1,1,1,1,
/* Block: 1 */
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,2,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,2,1,1,1,1,1,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,1,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,1,
2,2,2,2,2,2,2,2,
/* Block: 2 */
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
/* Block: 3 */
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
2,2,2,2,2,1,1,1,
1,1,35,35,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
/* Block: 4 */
41,41,41,41,41,41,41,41,
41,41,41,41,41,41,41,41,
41,41,41,41,41,41,41,41,
41,41,41,41,41,41,41,41,
41,41,41,41,41,41,41,41,
41,41,41,41,41,41,41,41,
41,41,41,41,41,41,41,41,
41,41,41,41,41,41,41,41,
41,41,41,41,41,41,41,41,
41,41,41,41,41,41,41,41,
41,41,41,41,41,41,41,41,
41,41,41,41,41,41,41,41,
41,41,41,41,41,41,41,41,
41,41,41,41,41,41,41,41,
3,3,3,3,1,3,3,3,
0,0,3,3,3,3,1,3,
/* Block: 5 */
0,0,0,0,3,1,3,1,
3,3,3,0,3,0,3,3,
3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,
3,3,0,3,3,3,3,3,
3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,
3,3,55,55,55,55,55,55,
55,55,55,55,55,55,55,55,
3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,
/* Block: 6 */
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
/* Block: 7 */
4,4,4,4,4,41,41,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
/* Block: 8 */
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
0,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,0,
0,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
/* Block: 9 */
5,5,5,5,5,5,5,5,
5,5,5,0,0,5,5,5,
0,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
0,0,0,0,0,0,0,0,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,0,0,0,0,6,
6,6,6,6,6,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 10 */
7,7,7,7,7,1,7,7,
7,7,7,7,1,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,1,7,7,7,1,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
1,7,7,7,7,7,7,7,
7,7,7,41,41,41,41,41,
41,41,41,41,41,41,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
41,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
/* Block: 11 */
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,1,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
/* Block: 12 */
8,8,8,8,8,8,8,8,
8,8,8,8,8,8,0,8,
8,8,8,8,8,8,8,8,
8,8,8,8,8,8,8,8,
8,8,8,8,8,8,8,8,
8,8,8,8,8,8,8,8,
8,8,8,8,8,8,8,8,
8,8,8,8,8,8,8,8,
8,8,8,8,8,8,8,8,
8,8,8,0,0,8,8,8,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
/* Block: 13 */
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
66,66,66,66,66,66,66,66,
66,66,66,66,66,66,66,66,
66,66,66,66,66,66,66,66,
66,66,66,66,66,66,66,66,
66,66,66,66,66,66,66,66,
66,66,66,66,66,66,66,66,
66,66,66,66,66,66,66,66,
66,66,66,0,0,66,66,66,
/* Block: 14 */
82,82,82,82,82,82,82,82,
82,82,82,82,82,82,82,82,
82,82,82,82,82,82,82,82,
82,82,82,82,82,82,82,82,
82,82,82,82,82,82,82,82,
82,82,82,82,82,82,0,0,
82,82,82,82,82,82,82,82,
82,82,82,82,82,82,82,0,
95,95,95,95,95,95,95,95,
95,95,95,95,95,95,95,95,
95,95,95,95,95,95,95,95,
95,95,95,95,0,0,95,0,
8,8,8,8,8,8,8,8,
8,8,8,0,0,0,0,0,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
/* Block: 15 */
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,0,
7,7,0,0,0,0,0,0,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,1,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
/* Block: 16 */
10,10,10,10,10,10,10,10,
10,10,10,10,10,10,10,10,
10,10,10,10,10,10,10,10,
10,10,10,10,10,10,10,10,
10,10,10,10,10,10,10,10,
10,10,10,10,10,10,10,10,
10,10,10,10,10,10,10,10,
10,10,10,10,10,10,10,10,
10,10,10,10,10,10,10,10,
10,10,10,10,10,10,10,10,
10,41,41,41,41,10,10,10,
10,10,10,10,10,10,10,10,
10,10,10,10,1,1,10,10,
10,10,10,10,10,10,10,10,
10,10,10,10,10,10,10,10,
10,10,10,10,10,10,10,10,
/* Block: 17 */
11,11,11,11,0,11,11,11,
11,11,11,11,11,0,0,11,
11,0,0,11,11,11,11,11,
11,11,11,11,11,11,11,11,
11,11,11,11,11,11,11,11,
11,0,11,11,11,11,11,11,
11,0,11,0,0,0,11,11,
11,11,0,0,11,11,11,11,
11,11,11,11,11,0,0,11,
11,0,0,11,11,11,11,0,
0,0,0,0,0,0,0,11,
0,0,0,0,11,11,0,11,
11,11,11,11,0,0,11,11,
11,11,11,11,11,11,11,11,
11,11,11,11,11,11,11,11,
11,11,11,11,11,11,11,0,
/* Block: 18 */
0,12,12,12,0,12,12,12,
12,12,12,0,0,0,0,12,
12,0,0,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,0,12,12,12,12,12,12,
12,0,12,12,0,12,12,0,
12,12,0,0,12,0,12,12,
12,12,12,0,0,0,0,12,
12,0,0,12,12,12,0,0,
0,12,0,0,0,0,0,0,
0,12,12,12,12,0,12,0,
0,0,0,0,0,0,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,0,
0,0,0,0,0,0,0,0,
/* Block: 19 */
0,13,13,13,0,13,13,13,
13,13,13,13,13,13,0,13,
13,13,0,13,13,13,13,13,
13,13,13,13,13,13,13,13,
13,13,13,13,13,13,13,13,
13,0,13,13,13,13,13,13,
13,0,13,13,0,13,13,13,
13,13,0,0,13,13,13,13,
13,13,13,13,13,13,0,13,
13,13,0,13,13,13,0,0,
13,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
13,13,13,13,0,0,13,13,
13,13,13,13,13,13,13,13,
13,13,0,0,0,0,0,0,
0,13,13,13,13,13,13,13,
/* Block: 20 */
0,14,14,14,0,14,14,14,
14,14,14,14,14,0,0,14,
14,0,0,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,0,14,14,14,14,14,14,
14,0,14,14,0,14,14,14,
14,14,0,0,14,14,14,14,
14,14,14,14,14,0,0,14,
14,0,0,14,14,14,0,0,
0,0,0,0,0,14,14,14,
0,0,0,0,14,14,0,14,
14,14,14,14,0,0,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
0,0,0,0,0,0,0,0,
/* Block: 21 */
0,0,15,15,0,15,15,15,
15,15,15,0,0,0,15,15,
15,0,15,15,15,15,0,0,
0,15,15,0,15,0,15,15,
0,0,0,15,15,0,0,0,
15,15,15,0,0,0,15,15,
15,15,15,15,15,15,15,15,
15,15,0,0,0,0,15,15,
15,15,15,0,0,0,15,15,
15,0,15,15,15,15,0,0,
15,0,0,0,0,0,0,15,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,0,0,0,0,0,
/* Block: 22 */
16,16,16,16,16,16,16,16,
16,16,16,16,16,0,16,16,
16,0,16,16,16,16,16,16,
16,16,16,16,16,16,16,16,
16,16,16,16,16,16,16,16,
16,0,16,16,16,16,16,16,
16,16,16,16,16,16,16,16,
16,16,0,0,16,16,16,16,
16,16,16,16,16,0,16,16,
16,0,16,16,16,16,0,0,
0,0,0,0,0,16,16,0,
16,16,16,0,0,16,0,0,
16,16,16,16,0,0,16,16,
16,16,16,16,16,16,16,16,
0,0,0,0,0,0,0,16,
16,16,16,16,16,16,16,16,
/* Block: 23 */
17,17,17,17,17,17,17,17,
17,17,17,17,17,0,17,17,
17,0,17,17,17,17,17,17,
17,17,17,17,17,17,17,17,
17,17,17,17,17,17,17,17,
17,0,17,17,17,17,17,17,
17,17,17,17,0,17,17,17,
17,17,0,0,17,17,17,17,
17,17,17,17,17,0,17,17,
17,0,17,17,17,17,0,0,
0,0,0,0,0,17,17,0,
0,0,0,0,0,17,17,0,
17,17,17,17,0,0,17,17,
17,17,17,17,17,17,17,17,
0,17,17,17,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 24 */
18,18,18,18,18,18,18,18,
18,18,18,18,18,0,18,18,
18,0,18,18,18,18,18,18,
18,18,18,18,18,18,18,18,
18,18,18,18,18,18,18,18,
18,18,18,18,18,18,18,18,
18,18,18,18,18,18,18,18,
18,18,18,18,18,18,18,18,
18,18,18,18,18,0,18,18,
18,0,18,18,18,18,18,18,
0,0,0,0,18,18,18,18,
18,18,18,18,18,18,18,18,
18,18,18,18,0,0,18,18,
18,18,18,18,18,18,18,18,
18,18,18,18,18,18,18,18,
18,18,18,18,18,18,18,18,
/* Block: 25 */
0,19,19,19,0,19,19,19,
19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,0,
0,0,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,
19,19,0,19,19,19,19,19,
19,19,19,19,0,19,0,0,
19,19,19,19,19,19,19,0,
0,0,19,0,0,0,0,19,
19,19,19,19,19,0,19,0,
19,19,19,19,19,19,19,19,
0,0,0,0,0,0,19,19,
19,19,19,19,19,19,19,19,
0,0,19,19,19,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 26 */
0,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,0,0,0,0,1,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 27 */
0,21,21,0,21,0,21,21,
21,21,21,0,21,21,21,21,
21,21,21,21,21,21,21,21,
21,21,21,21,21,21,21,21,
21,21,21,21,0,21,0,21,
21,21,21,21,21,21,21,21,
21,21,21,21,21,21,21,21,
21,21,21,21,21,21,0,0,
21,21,21,21,21,0,21,0,
21,21,21,21,21,21,21,0,
21,21,21,21,21,21,21,21,
21,21,0,0,21,21,21,21,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 28 */
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
0,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,0,0,0,
0,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
/* Block: 29 */
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
0,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,0,22,22,
22,22,22,22,22,22,22,22,
22,22,22,22,22,0,22,22,
22,22,22,22,22,1,1,1,
1,22,22,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 30 */
23,23,23,23,23,23,23,23,
23,23,23,23,23,23,23,23,
23,23,23,23,23,23,23,23,
23,23,23,23,23,23,23,23,
23,23,23,23,23,23,23,23,
23,23,23,23,23,23,23,23,
23,23,23,23,23,23,23,23,
23,23,23,23,23,23,23,23,
23,23,23,23,23,23,23,23,
23,23,23,23,23,23,23,23,
23,23,23,23,23,23,23,23,
23,23,23,23,23,23,23,23,
23,23,23,23,23,23,23,23,
23,23,23,23,23,23,23,23,
23,23,23,23,23,23,23,23,
23,23,23,23,23,23,23,23,
/* Block: 31 */
23,23,23,23,23,23,23,23,
23,23,23,23,23,23,23,23,
23,23,23,23,23,23,23,23,
23,23,23,23,23,23,23,23,
24,24,24,24,24,24,24,24,
24,24,24,24,24,24,24,24,
24,24,24,24,24,24,24,24,
24,24,24,24,24,24,24,24,
24,24,24,24,24,24,0,24,
0,0,0,0,0,24,0,0,
24,24,24,24,24,24,24,24,
24,24,24,24,24,24,24,24,
24,24,24,24,24,24,24,24,
24,24,24,24,24,24,24,24,
24,24,24,24,24,24,24,24,
24,24,24,1,24,24,24,24,
/* Block: 32 */
25,25,25,25,25,25,25,25,
25,25,25,25,25,25,25,25,
25,25,25,25,25,25,25,25,
25,25,25,25,25,25,25,25,
25,25,25,25,25,25,25,25,
25,25,25,25,25,25,25,25,
25,25,25,25,25,25,25,25,
25,25,25,25,25,25,25,25,
25,25,25,25,25,25,25,25,
25,25,25,25,25,25,25,25,
25,25,25,25,25,25,25,25,
25,25,25,25,25,25,25,25,
25,25,25,25,25,25,25,25,
25,25,25,25,25,25,25,25,
25,25,25,25,25,25,25,25,
25,25,25,25,25,25,25,25,
/* Block: 33 */
26,26,26,26,26,26,26,26,
26,26,26,26,26,26,26,26,
26,26,26,26,26,26,26,26,
26,26,26,26,26,26,26,26,
26,26,26,26,26,26,26,26,
26,26,26,26,26,26,26,26,
26,26,26,26,26,26,26,26,
26,26,26,26,26,26,26,26,
26,26,26,26,26,26,26,26,
26,0,26,26,26,26,0,0,
26,26,26,26,26,26,26,0,
26,0,26,26,26,26,0,0,
26,26,26,26,26,26,26,26,
26,26,26,26,26,26,26,26,
26,26,26,26,26,26,26,26,
26,26,26,26,26,26,26,26,
/* Block: 34 */
26,26,26,26,26,26,26,26,
26,0,26,26,26,26,0,0,
26,26,26,26,26,26,26,26,
26,26,26,26,26,26,26,26,
26,26,26,26,26,26,26,26,
26,26,26,26,26,26,26,26,
26,0,26,26,26,26,0,0,
26,26,26,26,26,26,26,0,
26,0,26,26,26,26,0,0,
26,26,26,26,26,26,26,26,
26,26,26,26,26,26,26,0,
26,26,26,26,26,26,26,26,
26,26,26,26,26,26,26,26,
26,26,26,26,26,26,26,26,
26,26,26,26,26,26,26,26,
26,26,26,26,26,26,26,26,
/* Block: 35 */
26,26,26,26,26,26,26,26,
26,26,26,26,26,26,26,26,
26,0,26,26,26,26,0,0,
26,26,26,26,26,26,26,26,
26,26,26,26,26,26,26,26,
26,26,26,26,26,26,26,26,
26,26,26,26,26,26,26,26,
26,26,26,26,26,26,26,26,
26,26,26,26,26,26,26,26,
26,26,26,26,26,26,26,26,
26,26,26,26,26,26,26,26,
26,26,26,0,0,26,26,26,
26,26,26,26,26,26,26,26,
26,26,26,26,26,26,26,26,
26,26,26,26,26,26,26,26,
26,26,26,26,26,0,0,0,
/* Block: 36 */
26,26,26,26,26,26,26,26,
26,26,26,26,26,26,26,26,
26,26,26,26,26,26,26,26,
26,26,0,0,0,0,0,0,
27,27,27,27,27,27,27,27,
27,27,27,27,27,27,27,27,
27,27,27,27,27,27,27,27,
27,27,27,27,27,27,27,27,
27,27,27,27,27,27,27,27,
27,27,27,27,27,27,27,27,
27,27,27,27,27,27,27,27,
27,27,27,27,27,27,27,27,
27,27,27,27,27,27,27,27,
27,27,27,27,27,27,27,27,
27,27,27,27,27,27,0,0,
27,27,27,27,27,27,0,0,
/* Block: 37 */
28,28,28,28,28,28,28,28,
28,28,28,28,28,28,28,28,
28,28,28,28,28,28,28,28,
28,28,28,28,28,28,28,28,
28,28,28,28,28,28,28,28,
28,28,28,28,28,28,28,28,
28,28,28,28,28,28,28,28,
28,28,28,28,28,28,28,28,
28,28,28,28,28,28,28,28,
28,28,28,28,28,28,28,28,
28,28,28,28,28,28,28,28,
28,28,28,28,28,28,28,28,
28,28,28,28,28,28,28,28,
28,28,28,28,28,28,28,28,
28,28,28,28,28,28,28,28,
28,28,28,28,28,28,28,28,
/* Block: 38 */
29,29,29,29,29,29,29,29,
29,29,29,29,29,29,29,29,
29,29,29,29,29,29,29,29,
29,29,29,29,29,0,0,0,
30,30,30,30,30,30,30,30,
30,30,30,30,30,30,30,30,
30,30,30,30,30,30,30,30,
30,30,30,30,30,30,30,30,
30,30,30,30,30,30,30,30,
30,30,30,30,30,30,30,30,
30,30,30,30,30,30,30,30,
30,30,30,30,30,30,30,30,
30,30,30,30,30,30,30,30,
30,30,30,1,1,1,30,30,
30,30,30,30,30,30,30,30,
30,0,0,0,0,0,0,0,
/* Block: 39 */
42,42,42,42,42,42,42,42,
42,42,42,42,42,42,42,42,
42,42,42,42,42,42,0,0,
0,0,0,0,0,0,0,42,
43,43,43,43,43,43,43,43,
43,43,43,43,43,43,43,43,
43,43,43,43,43,1,1,0,
0,0,0,0,0,0,0,0,
44,44,44,44,44,44,44,44,
44,44,44,44,44,44,44,44,
44,44,44,44,0,0,0,0,
0,0,0,0,0,0,0,0,
45,45,45,45,45,45,45,45,
45,45,45,45,45,0,45,45,
45,0,45,45,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 40 */
31,31,31,31,31,31,31,31,
31,31,31,31,31,31,31,31,
31,31,31,31,31,31,31,31,
31,31,31,31,31,31,31,31,
31,31,31,31,31,31,31,31,
31,31,31,31,31,31,31,31,
31,31,31,31,31,31,31,31,
31,31,31,31,31,31,31,31,
31,31,31,31,31,31,31,31,
31,31,31,31,31,31,31,31,
31,31,31,31,31,31,31,31,
31,31,31,31,31,31,0,0,
31,31,31,31,31,31,31,31,
31,31,0,0,0,0,0,0,
31,31,31,31,31,31,31,31,
31,31,0,0,0,0,0,0,
/* Block: 41 */
32,32,1,1,32,1,32,32,
32,32,32,32,32,32,32,32,
32,32,32,32,32,32,32,32,
32,32,0,0,0,0,0,0,
32,32,32,32,32,32,32,32,
32,32,32,32,32,32,32,32,
32,32,32,32,32,32,32,32,
32,32,32,32,32,32,32,32,
32,32,32,32,32,32,32,32,
32,32,32,32,32,32,32,32,
32,32,32,32,32,32,32,32,
32,32,32,32,32,32,32,32,
32,32,32,32,32,32,32,32,
32,32,32,32,32,32,32,32,
32,32,32,32,32,32,32,32,
32,0,0,0,0,0,0,0,
/* Block: 42 */
32,32,32,32,32,32,32,32,
32,32,32,32,32,32,32,32,
32,32,32,32,32,32,32,32,
32,32,32,32,32,32,32,32,
32,32,32,32,32,32,32,32,
32,32,32,0,0,0,0,0,
28,28,28,28,28,28,28,28,
28,28,28,28,28,28,28,28,
28,28,28,28,28,28,28,28,
28,28,28,28,28,28,28,28,
28,28,28,28,28,28,28,28,
28,28,28,28,28,28,28,28,
28,28,28,28,28,28,28,28,
28,28,28,28,28,28,28,28,
28,28,28,28,28,28,0,0,
0,0,0,0,0,0,0,0,
/* Block: 43 */
46,46,46,46,46,46,46,46,
46,46,46,46,46,46,46,46,
46,46,46,46,46,46,46,46,
46,46,46,46,46,46,46,0,
46,46,46,46,46,46,46,46,
46,46,46,46,0,0,0,0,
46,46,46,46,46,46,46,46,
46,46,46,46,0,0,0,0,
46,0,0,0,46,46,46,46,
46,46,46,46,46,46,46,46,
47,47,47,47,47,47,47,47,
47,47,47,47,47,47,47,47,
47,47,47,47,47,47,47,47,
47,47,47,47,47,47,0,0,
47,47,47,47,47,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 44 */
56,56,56,56,56,56,56,56,
56,56,56,56,56,56,56,56,
56,56,56,56,56,56,56,56,
56,56,56,56,56,56,56,56,
56,56,56,56,56,56,56,56,
56,56,56,56,0,0,0,0,
56,56,56,56,56,56,56,56,
56,56,56,56,56,56,56,56,
56,56,56,56,56,56,56,56,
56,56,0,0,0,0,0,0,
56,56,56,56,56,56,56,56,
56,56,56,0,0,0,56,56,
31,31,31,31,31,31,31,31,
31,31,31,31,31,31,31,31,
31,31,31,31,31,31,31,31,
31,31,31,31,31,31,31,31,
/* Block: 45 */
54,54,54,54,54,54,54,54,
54,54,54,54,54,54,54,54,
54,54,54,54,54,54,54,54,
54,54,54,54,0,0,54,54,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,0,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,0,0,78,
/* Block: 46 */
78,78,78,78,78,78,78,78,
78,78,0,0,0,0,0,0,
78,78,78,78,78,78,78,78,
78,78,0,0,0,0,0,0,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,0,0,
41,41,41,41,41,41,41,41,
41,41,41,41,41,41,41,41,
41,41,41,41,41,41,41,41,
41,41,41,41,41,41,41,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 47 */
62,62,62,62,62,62,62,62,
62,62,62,62,62,62,62,62,
62,62,62,62,62,62,62,62,
62,62,62,62,62,62,62,62,
62,62,62,62,62,62,62,62,
62,62,62,62,62,62,62,62,
62,62,62,62,62,62,62,62,
62,62,62,62,62,62,62,62,
62,62,62,62,62,62,62,62,
62,62,62,62,62,0,0,0,
62,62,62,62,62,62,62,62,
62,62,62,62,62,62,62,62,
62,62,62,62,62,62,62,62,
62,62,62,62,62,62,62,62,
62,62,62,62,62,62,62,62,
62,62,62,62,62,62,62,0,
/* Block: 48 */
67,67,67,67,67,67,67,67,
67,67,67,67,67,67,67,67,
67,67,67,67,67,67,67,67,
67,67,67,67,67,67,67,67,
67,67,67,67,67,67,67,67,
67,67,67,67,67,67,67,67,
67,67,67,67,67,67,67,67,
67,67,67,67,67,67,67,67,
93,93,93,93,93,93,93,93,
93,93,93,93,93,93,93,93,
93,93,93,93,93,93,93,93,
93,93,93,93,93,93,93,93,
93,93,93,93,93,93,93,93,
93,93,93,93,93,93,93,93,
93,93,93,93,0,0,0,0,
0,0,0,0,93,93,93,93,
/* Block: 49 */
68,68,68,68,68,68,68,68,
68,68,68,68,68,68,68,68,
68,68,68,68,68,68,68,68,
68,68,68,68,68,68,68,68,
68,68,68,68,68,68,68,68,
68,68,68,68,68,68,68,68,
68,68,68,68,68,68,68,68,
0,0,0,68,68,68,68,68,
68,68,68,68,68,68,68,68,
68,68,0,0,0,68,68,68,
69,69,69,69,69,69,69,69,
69,69,69,69,69,69,69,69,
69,69,69,69,69,69,69,69,
69,69,69,69,69,69,69,69,
69,69,69,69,69,69,69,69,
69,69,69,69,69,69,69,69,
/* Block: 50 */
4,4,4,4,4,4,4,4,
4,0,0,0,0,0,0,0,
24,24,24,24,24,24,24,24,
24,24,24,24,24,24,24,24,
24,24,24,24,24,24,24,24,
24,24,24,24,24,24,24,24,
24,24,24,24,24,24,24,24,
24,24,24,0,0,24,24,24,
67,67,67,67,67,67,67,67,
0,0,0,0,0,0,0,0,
41,41,41,1,41,41,41,41,
41,41,41,41,41,41,41,41,
41,1,41,41,41,41,41,41,
41,1,1,1,1,41,1,1,
1,1,1,1,41,1,1,1,
41,41,1,0,0,0,0,0,
/* Block: 51 */
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,3,3,
3,3,3,4,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,3,3,3,
3,3,2,2,2,2,3,3,
3,3,3,2,2,2,2,2,
2,2,2,2,2,2,2,2,
4,2,2,2,2,2,2,2,
/* Block: 52 */
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,3,
41,41,41,41,41,41,41,41,
41,41,41,41,41,41,41,41,
41,41,41,41,41,41,41,41,
41,41,41,41,41,41,41,41,
41,41,41,41,41,41,41,41,
41,41,41,41,41,41,41,41,
41,41,41,41,41,41,41,41,
41,41,41,41,41,41,41,41,
/* Block: 53 */
3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,
3,3,3,3,3,3,0,0,
3,3,3,3,3,3,0,0,
3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,
3,3,3,3,3,3,0,0,
3,3,3,3,3,3,0,0,
3,3,3,3,3,3,3,3,
0,3,0,3,0,3,0,3,
3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,
3,3,3,3,3,3,0,0,
/* Block: 54 */
3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,
3,3,3,3,3,0,3,3,
3,3,3,3,3,3,3,3,
3,3,3,3,3,0,3,3,
3,3,3,3,3,3,3,3,
3,3,3,3,0,0,3,3,
3,3,3,3,0,3,3,3,
3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,
0,0,3,3,3,0,3,3,
3,3,3,3,3,3,3,0,
/* Block: 55 */
1,1,1,1,1,1,1,1,
1,1,1,1,41,41,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,0,1,1,
1,1,1,1,1,1,1,1,
1,2,0,0,1,1,1,1,
1,1,1,1,1,1,1,2,
/* Block: 56 */
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,0,
2,2,2,2,2,2,2,2,
2,2,2,2,2,0,0,0,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
41,41,41,41,41,41,41,41,
41,41,41,41,41,41,41,41,
41,41,41,41,41,41,41,41,
41,41,41,41,41,41,41,41,
41,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 57 */
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,3,1,
1,1,2,2,1,1,1,1,
1,1,2,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,2,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
/* Block: 58 */
2,2,2,2,2,2,2,2,
2,1,1,1,0,0,0,0,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
/* Block: 59 */
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
/* Block: 60 */
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
1,1,1,1,1,1,1,1,
1,1,1,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
/* Block: 61 */
53,53,53,53,53,53,53,53,
53,53,53,53,53,53,53,53,
53,53,53,53,53,53,53,53,
53,53,53,53,53,53,53,53,
53,53,53,53,53,53,53,53,
53,53,53,53,53,53,53,53,
53,53,53,53,53,53,53,53,
53,53,53,53,53,53,53,53,
53,53,53,53,53,53,53,53,
53,53,53,53,53,53,53,53,
53,53,53,53,53,53,53,53,
53,53,53,53,53,53,53,53,
53,53,53,53,53,53,53,53,
53,53,53,53,53,53,53,53,
53,53,53,53,53,53,53,53,
53,53,53,53,53,53,53,53,
/* Block: 62 */
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,0,0,1,1,
1,1,1,1,1,1,1,1,
/* Block: 63 */
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,0,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
/* Block: 64 */
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
/* Block: 65 */
55,55,55,55,55,55,55,55,
55,55,55,55,55,55,55,55,
55,55,55,55,55,55,55,55,
55,55,55,55,55,55,55,55,
55,55,55,55,55,55,55,55,
55,55,55,55,55,55,55,55,
55,55,55,55,55,55,55,55,
55,55,55,55,55,55,55,55,
55,55,55,55,55,55,55,55,
55,55,55,55,55,55,55,55,
55,55,55,55,55,55,55,55,
55,55,55,55,55,55,55,55,
55,55,55,55,55,55,55,55,
55,55,55,55,55,55,55,55,
55,55,55,55,0,0,0,0,
0,55,55,55,55,55,55,55,
/* Block: 66 */
24,24,24,24,24,24,24,24,
24,24,24,24,24,24,24,24,
24,24,24,24,24,24,24,24,
24,24,24,24,24,24,24,24,
24,24,24,24,24,24,0,24,
0,0,0,0,0,24,0,0,
58,58,58,58,58,58,58,58,
58,58,58,58,58,58,58,58,
58,58,58,58,58,58,58,58,
58,58,58,58,58,58,58,58,
58,58,58,58,58,58,58,58,
58,58,58,58,58,58,58,58,
58,58,58,58,58,58,58,58,
0,0,0,0,0,0,0,58,
58,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,58,
/* Block: 67 */
26,26,26,26,26,26,26,26,
26,26,26,26,26,26,26,26,
26,26,26,26,26,26,26,0,
0,0,0,0,0,0,0,0,
26,26,26,26,26,26,26,0,
26,26,26,26,26,26,26,0,
26,26,26,26,26,26,26,0,
26,26,26,26,26,26,26,0,
26,26,26,26,26,26,26,0,
26,26,26,26,26,26,26,0,
26,26,26,26,26,26,26,0,
26,26,26,26,26,26,26,0,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
/* Block: 68 */
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 69 */
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,0,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 70 */
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
/* Block: 71 */
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
/* Block: 72 */
1,1,1,1,1,36,1,36,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,36,36,36,36,36,36,36,
36,36,41,41,41,41,25,25,
1,1,1,1,1,1,1,1,
36,36,36,36,1,1,1,1,
0,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
/* Block: 73 */
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,0,
0,41,41,1,1,33,33,33,
1,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,1,1,34,34,34,
/* Block: 74 */
0,0,0,0,0,35,35,35,
35,35,35,35,35,35,35,35,
35,35,35,35,35,35,35,35,
35,35,35,35,35,35,35,35,
35,35,35,35,35,35,35,35,
35,35,35,35,35,35,35,35,
0,25,25,25,25,25,25,25,
25,25,25,25,25,25,25,25,
25,25,25,25,25,25,25,25,
25,25,25,25,25,25,25,25,
25,25,25,25,25,25,25,25,
25,25,25,25,25,25,25,25,
25,25,25,25,25,25,25,25,
25,25,25,25,25,25,25,25,
25,25,25,25,25,25,25,25,
25,25,25,25,25,25,25,25,
/* Block: 75 */
25,25,25,25,25,25,25,25,
25,25,25,25,25,25,25,0,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
35,35,35,35,35,35,35,35,
35,35,35,35,35,35,35,35,
35,35,35,35,35,35,35,35,
35,35,35,35,35,35,35,35,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,0,0,0,0,
0,0,0,0,0,0,0,1,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
/* Block: 76 */
25,25,25,25,25,25,25,25,
25,25,25,25,25,25,25,25,
25,25,25,25,25,25,25,25,
25,25,25,25,25,25,25,0,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
25,25,25,25,25,25,25,25,
25,25,25,25,25,25,25,25,
25,25,25,25,25,25,25,25,
25,25,25,25,25,25,25,1,
/* Block: 77 */
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,1,
/* Block: 78 */
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
/* Block: 79 */
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
/* Block: 80 */
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
/* Block: 81 */
37,37,37,37,37,37,37,37,
37,37,37,37,37,0,0,0,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,37,
37,37,37,37,37,37,37,0,
0,0,0,0,0,0,0,0,
83,83,83,83,83,83,83,83,
83,83,83,83,83,83,83,83,
83,83,83,83,83,83,83,83,
83,83,83,83,83,83,83,83,
83,83,83,83,83,83,83,83,
83,83,83,83,83,83,83,83,
/* Block: 82 */
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
/* Block: 83 */
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,70,70,70,70,
70,70,70,70,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
/* Block: 84 */
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
84,84,84,84,84,84,84,84,
84,84,84,84,84,84,84,84,
84,84,84,84,84,84,84,84,
84,84,84,84,84,84,84,84,
84,84,84,84,84,84,84,84,
84,84,84,84,84,84,84,84,
84,84,84,84,84,84,84,84,
84,84,84,84,84,84,84,84,
84,84,84,84,84,84,84,84,
84,84,84,84,84,84,84,84,
84,84,84,84,84,84,84,84,
0,0,0,0,0,0,0,0,
/* Block: 85 */
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
/* Block: 86 */
2,2,2,2,2,2,2,2,
1,1,1,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,0,0,0,0,0,
2,2,0,2,0,2,2,2,
2,2,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
/* Block: 87 */
59,59,59,59,59,59,59,59,
59,59,59,59,59,59,59,59,
59,59,59,59,59,59,59,59,
59,59,59,59,59,59,59,59,
59,59,59,59,59,59,59,59,
59,59,59,59,59,0,0,0,
1,1,1,1,1,1,1,1,
1,1,0,0,0,0,0,0,
65,65,65,65,65,65,65,65,
65,65,65,65,65,65,65,65,
65,65,65,65,65,65,65,65,
65,65,65,65,65,65,65,65,
65,65,65,65,65,65,65,65,
65,65,65,65,65,65,65,65,
65,65,65,65,65,65,65,65,
0,0,0,0,0,0,0,0,
/* Block: 88 */
71,71,71,71,71,71,71,71,
71,71,71,71,71,71,71,71,
71,71,71,71,71,71,71,71,
71,71,71,71,71,71,71,71,
71,71,71,71,71,71,71,71,
71,71,71,71,71,71,71,71,
71,71,71,71,71,71,71,71,
71,71,71,71,71,71,71,71,
71,71,71,71,71,71,0,0,
0,0,0,0,0,0,71,71,
71,71,71,71,71,71,71,71,
71,71,0,0,0,0,0,0,
10,10,10,10,10,10,10,10,
10,10,10,10,10,10,10,10,
10,10,10,10,10,10,10,10,
10,10,10,10,10,10,10,10,
/* Block: 89 */
72,72,72,72,72,72,72,72,
72,72,72,72,72,72,72,72,
72,72,72,72,72,72,72,72,
72,72,72,72,72,72,72,72,
72,72,72,72,72,72,72,72,
72,72,72,72,72,72,1,72,
73,73,73,73,73,73,73,73,
73,73,73,73,73,73,73,73,
73,73,73,73,73,73,73,73,
73,73,73,73,73,73,73,73,
73,73,73,73,0,0,0,0,
0,0,0,0,0,0,0,73,
25,25,25,25,25,25,25,25,
25,25,25,25,25,25,25,25,
25,25,25,25,25,25,25,25,
25,25,25,25,25,0,0,0,
/* Block: 90 */
85,85,85,85,85,85,85,85,
85,85,85,85,85,85,85,85,
85,85,85,85,85,85,85,85,
85,85,85,85,85,85,85,85,
85,85,85,85,85,85,85,85,
85,85,85,85,85,85,85,85,
85,85,85,85,85,85,85,85,
85,85,85,85,85,85,85,85,
85,85,85,85,85,85,85,85,
85,85,85,85,85,85,0,1,
85,85,85,85,85,85,85,85,
85,85,0,0,0,0,85,85,
23,23,23,23,23,23,23,23,
23,23,23,23,23,23,23,23,
23,23,23,23,23,23,23,23,
23,23,23,23,23,23,23,0,
/* Block: 91 */
77,77,77,77,77,77,77,77,
77,77,77,77,77,77,77,77,
77,77,77,77,77,77,77,77,
77,77,77,77,77,77,77,77,
77,77,77,77,77,77,77,77,
77,77,77,77,77,77,77,77,
77,77,77,77,77,77,77,0,
0,0,0,0,0,0,0,0,
77,77,77,77,77,77,77,77,
77,77,77,77,77,77,0,0,
77,77,77,77,77,77,77,77,
77,77,0,0,77,77,77,77,
23,23,23,23,23,23,23,23,
23,23,23,23,23,23,23,23,
23,23,23,23,23,23,23,23,
23,23,23,23,23,23,23,23,
/* Block: 92 */
79,79,79,79,79,79,79,79,
79,79,79,79,79,79,79,79,
79,79,79,79,79,79,79,79,
79,79,79,79,79,79,79,79,
79,79,79,79,79,79,79,79,
79,79,79,79,79,79,79,79,
79,79,79,79,79,79,79,79,
79,79,79,79,79,79,79,79,
79,79,79,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,79,79,79,79,79,
86,86,86,86,86,86,86,86,
86,86,86,86,86,86,86,86,
86,86,86,86,86,86,86,0,
0,0,0,0,0,0,0,0,
/* Block: 93 */
0,26,26,26,26,26,26,0,
0,26,26,26,26,26,26,0,
0,26,26,26,26,26,26,0,
0,0,0,0,0,0,0,0,
26,26,26,26,26,26,26,0,
26,26,26,26,26,26,26,0,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,1,2,2,2,2,
2,2,2,2,2,3,2,2,
2,2,1,1,0,0,0,0,
27,27,27,27,27,27,27,27,
27,27,27,27,27,27,27,27,
/* Block: 94 */
27,27,27,27,27,27,27,27,
27,27,27,27,27,27,27,27,
27,27,27,27,27,27,27,27,
27,27,27,27,27,27,27,27,
27,27,27,27,27,27,27,27,
27,27,27,27,27,27,27,27,
27,27,27,27,27,27,27,27,
27,27,27,27,27,27,27,27,
86,86,86,86,86,86,86,86,
86,86,86,86,86,86,86,86,
86,86,86,86,86,86,86,86,
86,86,86,86,86,86,86,86,
86,86,86,86,86,86,86,86,
86,86,86,86,86,86,0,0,
86,86,86,86,86,86,86,86,
86,86,0,0,0,0,0,0,
/* Block: 95 */
25,25,25,25,25,25,25,25,
25,25,25,25,25,25,25,25,
25,25,25,25,25,25,25,25,
25,25,25,25,25,25,25,25,
25,25,25,25,0,0,0,0,
0,0,0,0,0,0,0,0,
25,25,25,25,25,25,25,25,
25,25,25,25,25,25,25,25,
25,25,25,25,25,25,25,0,
0,0,0,25,25,25,25,25,
25,25,25,25,25,25,25,25,
25,25,25,25,25,25,25,25,
25,25,25,25,25,25,25,25,
25,25,25,25,25,25,25,25,
25,25,25,25,25,25,25,25,
25,25,25,25,0,0,0,0,
/* Block: 96 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 97 */
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,0,0,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
/* Block: 98 */
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 99 */
2,2,2,2,2,2,2,0,
0,0,0,0,0,0,0,0,
0,0,0,5,5,5,5,5,
0,0,0,0,0,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,0,
6,6,6,6,6,0,6,0,
6,6,0,6,6,0,6,6,
6,6,6,6,6,6,6,6,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
/* Block: 100 */
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
/* Block: 101 */
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
/* Block: 102 */
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,1,1,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
/* Block: 103 */
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
0,0,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
0,0,0,0,0,0,0,7,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
/* Block: 104 */
41,41,41,41,41,41,41,41,
41,41,41,41,41,41,41,41,
1,1,1,1,1,1,1,1,
1,1,0,0,0,0,0,0,
41,41,41,41,41,41,41,41,
41,41,41,41,41,41,4,4,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,0,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,0,
1,1,1,1,0,0,0,0,
7,7,7,7,7,0,7,7,
7,7,7,7,7,7,7,7,
/* Block: 105 */
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,0,0,1,
/* Block: 106 */
0,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,1,1,1,1,1,
1,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,1,1,1,1,1,
1,1,1,1,1,1,34,34,
34,34,34,34,34,34,34,34,
1,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
/* Block: 107 */
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,34,34,
34,34,34,34,34,34,1,1,
25,25,25,25,25,25,25,25,
25,25,25,25,25,25,25,25,
25,25,25,25,25,25,25,25,
25,25,25,25,25,25,25,0,
0,0,25,25,25,25,25,25,
0,0,25,25,25,25,25,25,
0,0,25,25,25,25,25,25,
0,0,25,25,25,0,0,0,
1,1,1,1,1,1,1,0,
1,1,1,1,1,1,1,0,
0,0,0,0,0,0,0,0,
0,1,1,1,1,1,0,0,
/* Block: 108 */
48,48,48,48,48,48,48,48,
48,48,48,48,0,48,48,48,
48,48,48,48,48,48,48,48,
48,48,48,48,48,48,48,48,
48,48,48,48,48,48,48,0,
48,48,48,48,48,48,48,48,
48,48,48,48,48,48,48,48,
48,48,48,0,48,48,0,48,
48,48,48,48,48,48,48,48,
48,48,48,48,48,48,0,0,
48,48,48,48,48,48,48,48,
48,48,48,48,48,48,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 109 */
48,48,48,48,48,48,48,48,
48,48,48,48,48,48,48,48,
48,48,48,48,48,48,48,48,
48,48,48,48,48,48,48,48,
48,48,48,48,48,48,48,48,
48,48,48,48,48,48,48,48,
48,48,48,48,48,48,48,48,
48,48,48,48,48,48,48,48,
48,48,48,48,48,48,48,48,
48,48,48,48,48,48,48,48,
48,48,48,48,48,48,48,48,
48,48,48,48,48,48,48,48,
48,48,48,48,48,48,48,48,
48,48,48,48,48,48,48,48,
48,48,48,48,48,48,48,48,
48,48,48,0,0,0,0,0,
/* Block: 110 */
1,1,1,0,0,0,0,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,0,0,0,1,
1,1,1,1,1,1,1,1,
3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,
/* Block: 111 */
3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,0,
1,1,1,1,1,1,1,1,
1,1,1,1,1,0,0,0,
3,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,41,0,0,
/* Block: 112 */
74,74,74,74,74,74,74,74,
74,74,74,74,74,74,74,74,
74,74,74,74,74,74,74,74,
74,74,74,74,74,0,0,0,
75,75,75,75,75,75,75,75,
75,75,75,75,75,75,75,75,
75,75,75,75,75,75,75,75,
75,75,75,75,75,75,75,75,
75,75,75,75,75,75,75,75,
75,75,75,75,75,75,75,75,
75,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
41,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,0,0,0,0,
/* Block: 113 */
38,38,38,38,38,38,38,38,
38,38,38,38,38,38,38,38,
38,38,38,38,38,38,38,38,
38,38,38,38,38,38,38,38,
38,38,38,38,0,0,0,0,
0,0,0,0,0,38,38,38,
39,39,39,39,39,39,39,39,
39,39,39,39,39,39,39,39,
39,39,39,39,39,39,39,39,
39,39,39,0,0,0,0,0,
120,120,120,120,120,120,120,120,
120,120,120,120,120,120,120,120,
120,120,120,120,120,120,120,120,
120,120,120,120,120,120,120,120,
120,120,120,120,120,120,120,120,
120,120,120,0,0,0,0,0,
/* Block: 114 */
49,49,49,49,49,49,49,49,
49,49,49,49,49,49,49,49,
49,49,49,49,49,49,49,49,
49,49,49,49,49,49,0,49,
60,60,60,60,60,60,60,60,
60,60,60,60,60,60,60,60,
60,60,60,60,60,60,60,60,
60,60,60,60,60,60,60,60,
60,60,60,60,0,0,0,0,
60,60,60,60,60,60,60,60,
60,60,60,60,60,60,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 115 */
40,40,40,40,40,40,40,40,
40,40,40,40,40,40,40,40,
40,40,40,40,40,40,40,40,
40,40,40,40,40,40,40,40,
40,40,40,40,40,40,40,40,
40,40,40,40,40,40,40,40,
40,40,40,40,40,40,40,40,
40,40,40,40,40,40,40,40,
40,40,40,40,40,40,40,40,
40,40,40,40,40,40,40,40,
50,50,50,50,50,50,50,50,
50,50,50,50,50,50,50,50,
50,50,50,50,50,50,50,50,
50,50,50,50,50,50,50,50,
50,50,50,50,50,50,50,50,
50,50,50,50,50,50,50,50,
/* Block: 116 */
51,51,51,51,51,51,51,51,
51,51,51,51,51,51,51,51,
51,51,51,51,51,51,51,51,
51,51,51,51,51,51,0,0,
51,51,51,51,51,51,51,51,
51,51,0,0,0,0,0,0,
136,136,136,136,136,136,136,136,
136,136,136,136,136,136,136,136,
136,136,136,136,136,136,136,136,
136,136,136,136,136,136,136,136,
136,136,136,136,0,0,0,0,
136,136,136,136,136,136,136,136,
136,136,136,136,136,136,136,136,
136,136,136,136,136,136,136,136,
136,136,136,136,136,136,136,136,
136,136,136,136,0,0,0,0,
/* Block: 117 */
106,106,106,106,106,106,106,106,
106,106,106,106,106,106,106,106,
106,106,106,106,106,106,106,106,
106,106,106,106,106,106,106,106,
106,106,106,106,106,106,106,106,
0,0,0,0,0,0,0,0,
103,103,103,103,103,103,103,103,
103,103,103,103,103,103,103,103,
103,103,103,103,103,103,103,103,
103,103,103,103,103,103,103,103,
103,103,103,103,103,103,103,103,
103,103,103,103,103,103,103,103,
103,103,103,103,0,0,0,0,
0,0,0,0,0,0,0,103,
161,161,161,161,161,161,161,161,
161,161,161,0,161,161,161,161,
/* Block: 118 */
161,161,161,161,161,161,161,161,
161,161,161,0,161,161,161,161,
161,161,161,0,161,161,0,161,
161,161,161,161,161,161,161,161,
161,161,0,161,161,161,161,161,
161,161,161,161,161,161,161,161,
161,161,0,161,161,161,161,161,
161,161,0,161,161,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 119 */
110,110,110,110,110,110,110,110,
110,110,110,110,110,110,110,110,
110,110,110,110,110,110,110,110,
110,110,110,110,110,110,110,110,
110,110,110,110,110,110,110,110,
110,110,110,110,110,110,110,110,
110,110,110,110,110,110,110,110,
110,110,110,110,110,110,110,110,
110,110,110,110,110,110,110,110,
110,110,110,110,110,110,110,110,
110,110,110,110,110,110,110,110,
110,110,110,110,110,110,110,110,
110,110,110,110,110,110,110,110,
110,110,110,110,110,110,110,110,
110,110,110,110,110,110,110,110,
110,110,110,110,110,110,110,110,
/* Block: 120 */
110,110,110,110,110,110,110,110,
110,110,110,110,110,110,110,110,
110,110,110,110,110,110,110,110,
110,110,110,110,110,110,110,110,
110,110,110,110,110,110,110,110,
110,110,110,110,110,110,110,110,
110,110,110,110,110,110,110,0,
0,0,0,0,0,0,0,0,
110,110,110,110,110,110,110,110,
110,110,110,110,110,110,110,110,
110,110,110,110,110,110,0,0,
0,0,0,0,0,0,0,0,
110,110,110,110,110,110,110,110,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 121 */
2,2,2,2,2,2,0,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,0,2,2,2,2,2,2,
2,2,2,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 122 */
52,52,52,52,52,52,0,0,
52,0,52,52,52,52,52,52,
52,52,52,52,52,52,52,52,
52,52,52,52,52,52,52,52,
52,52,52,52,52,52,52,52,
52,52,52,52,52,52,52,52,
52,52,52,52,52,52,0,52,
52,0,0,0,52,0,0,52,
87,87,87,87,87,87,87,87,
87,87,87,87,87,87,87,87,
87,87,87,87,87,87,0,87,
87,87,87,87,87,87,87,87,
118,118,118,118,118,118,118,118,
118,118,118,118,118,118,118,118,
118,118,118,118,118,118,118,118,
118,118,118,118,118,118,118,118,
/* Block: 123 */
117,117,117,117,117,117,117,117,
117,117,117,117,117,117,117,117,
117,117,117,117,117,117,117,117,
117,117,117,117,117,117,117,0,
0,0,0,0,0,0,0,117,
117,117,117,117,117,117,117,117,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,0,128,128,0,0,
0,0,0,128,128,128,128,128,
/* Block: 124 */
64,64,64,64,64,64,64,64,
64,64,64,64,64,64,64,64,
64,64,64,64,64,64,64,64,
64,64,64,64,0,0,0,64,
76,76,76,76,76,76,76,76,
76,76,76,76,76,76,76,76,
76,76,76,76,76,76,76,76,
76,76,0,0,0,0,0,76,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 125 */
98,98,98,98,98,98,98,98,
98,98,98,98,98,98,98,98,
98,98,98,98,98,98,98,98,
98,98,98,98,98,98,98,98,
97,97,97,97,97,97,97,97,
97,97,97,97,97,97,97,97,
97,97,97,97,97,97,97,97,
0,0,0,0,97,97,97,97,
97,97,97,97,97,97,97,97,
97,97,97,97,97,97,97,97,
0,0,97,97,97,97,97,97,
97,97,97,97,97,97,97,97,
97,97,97,97,97,97,97,97,
97,97,97,97,97,97,97,97,
97,97,97,97,97,97,97,97,
97,97,97,97,97,97,97,97,
/* Block: 126 */
61,61,61,61,0,61,61,0,
0,0,0,0,61,61,61,61,
61,61,61,61,0,61,61,61,
0,61,61,61,61,61,61,61,
61,61,61,61,61,61,61,61,
61,61,61,61,61,61,61,61,
61,61,61,61,61,61,0,0,
61,61,61,0,0,0,0,61,
61,61,61,61,61,61,61,61,
61,0,0,0,0,0,0,0,
61,61,61,61,61,61,61,61,
61,0,0,0,0,0,0,0,
88,88,88,88,88,88,88,88,
88,88,88,88,88,88,88,88,
88,88,88,88,88,88,88,88,
88,88,88,88,88,88,88,88,
/* Block: 127 */
116,116,116,116,116,116,116,116,
116,116,116,116,116,116,116,116,
116,116,116,116,116,116,116,116,
116,116,116,116,116,116,116,116,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
112,112,112,112,112,112,112,112,
112,112,112,112,112,112,112,112,
112,112,112,112,112,112,112,112,
112,112,112,112,112,112,112,112,
112,112,112,112,112,112,112,0,
0,0,0,112,112,112,112,112,
112,112,112,112,112,112,112,0,
0,0,0,0,0,0,0,0,
/* Block: 128 */
80,80,80,80,80,80,80,80,
80,80,80,80,80,80,80,80,
80,80,80,80,80,80,80,80,
80,80,80,80,80,80,80,80,
80,80,80,80,80,80,80,80,
80,80,80,80,80,80,80,80,
80,80,80,80,80,80,0,0,
0,80,80,80,80,80,80,80,
89,89,89,89,89,89,89,89,
89,89,89,89,89,89,89,89,
89,89,89,89,89,89,0,0,
89,89,89,89,89,89,89,89,
90,90,90,90,90,90,90,90,
90,90,90,90,90,90,90,90,
90,90,90,0,0,0,0,0,
90,90,90,90,90,90,90,90,
/* Block: 129 */
121,121,121,121,121,121,121,121,
121,121,121,121,121,121,121,121,
121,121,0,0,0,0,0,0,
0,121,121,121,121,0,0,0,
0,0,0,0,0,0,0,0,
0,121,121,121,121,121,121,121,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 130 */
91,91,91,91,91,91,91,91,
91,91,91,91,91,91,91,91,
91,91,91,91,91,91,91,91,
91,91,91,91,91,91,91,91,
91,91,91,91,91,91,91,91,
91,91,91,91,91,91,91,91,
91,91,91,91,91,91,91,91,
91,91,91,91,91,91,91,91,
91,91,91,91,91,91,91,91,
91,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 131 */
130,130,130,130,130,130,130,130,
130,130,130,130,130,130,130,130,
130,130,130,130,130,130,130,130,
130,130,130,130,130,130,130,130,
130,130,130,130,130,130,130,130,
130,130,130,130,130,130,130,130,
130,130,130,0,0,0,0,0,
0,0,0,0,0,0,0,0,
130,130,130,130,130,130,130,130,
130,130,130,130,130,130,130,130,
130,130,130,130,130,130,130,130,
130,130,130,130,130,130,130,130,
130,130,130,130,130,130,130,130,
130,130,130,130,130,130,130,130,
130,130,130,0,0,0,0,0,
0,0,130,130,130,130,130,130,
/* Block: 132 */
146,146,146,146,146,146,146,146,
146,146,146,146,146,146,146,146,
146,146,146,146,146,146,146,146,
146,146,146,146,146,146,146,146,
146,146,146,146,146,146,146,146,
0,0,0,0,0,0,0,0,
146,146,146,146,146,146,146,146,
146,146,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 133 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,0,
/* Block: 134 */
156,156,156,156,156,156,156,156,
156,156,156,156,156,156,156,156,
156,156,156,156,156,156,156,156,
156,156,156,156,156,156,156,156,
156,156,156,156,156,156,156,156,
156,156,0,156,156,156,0,0,
156,156,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,7,7,7,
/* Block: 135 */
148,148,148,148,148,148,148,148,
148,148,148,148,148,148,148,148,
148,148,148,148,148,148,148,148,
148,148,148,148,148,148,148,148,
148,148,148,148,148,148,148,148,
0,0,0,0,0,0,0,0,
147,147,147,147,147,147,147,147,
147,147,147,147,147,147,147,147,
147,147,147,147,147,147,147,147,
147,147,147,147,147,147,147,147,
147,147,147,147,147,147,147,147,
147,147,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
158,158,158,158,158,158,158,158,
158,158,158,158,158,158,158,158,
/* Block: 136 */
158,158,158,158,158,158,158,158,
158,158,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
153,153,153,153,153,153,153,153,
153,153,153,153,153,153,153,153,
153,153,153,153,153,153,153,153,
153,153,153,153,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
149,149,149,149,149,149,149,149,
149,149,149,149,149,149,149,149,
149,149,149,149,149,149,149,0,
0,0,0,0,0,0,0,0,
/* Block: 137 */
94,94,94,94,94,94,94,94,
94,94,94,94,94,94,94,94,
94,94,94,94,94,94,94,94,
94,94,94,94,94,94,94,94,
94,94,94,94,94,94,94,94,
94,94,94,94,94,94,94,94,
94,94,94,94,94,94,94,94,
94,94,94,94,94,94,94,94,
94,94,94,94,94,94,94,94,
94,94,94,94,94,94,0,0,
0,0,94,94,94,94,94,94,
94,94,94,94,94,94,94,94,
94,94,94,94,94,94,94,94,
94,94,94,94,94,94,94,94,
94,94,94,94,94,94,0,0,
0,0,0,0,0,0,0,94,
/* Block: 138 */
92,92,92,92,92,92,92,92,
92,92,92,92,92,92,92,92,
92,92,92,92,92,92,92,92,
92,92,92,92,92,92,92,92,
92,92,92,92,92,92,92,92,
92,92,92,92,92,92,92,92,
92,92,92,92,92,92,92,92,
92,92,92,92,92,92,92,92,
92,92,92,0,0,0,0,0,
0,0,0,0,0,92,0,0,
101,101,101,101,101,101,101,101,
101,101,101,101,101,101,101,101,
101,101,101,101,101,101,101,101,
101,0,0,0,0,0,0,0,
101,101,101,101,101,101,101,101,
101,101,0,0,0,0,0,0,
/* Block: 139 */
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,0,96,96,
96,96,96,96,96,96,96,96,
96,96,96,96,96,96,96,96,
0,0,0,0,0,0,0,0,
111,111,111,111,111,111,111,111,
111,111,111,111,111,111,111,111,
111,111,111,111,111,111,111,111,
111,111,111,111,111,111,111,111,
111,111,111,111,111,111,111,0,
0,0,0,0,0,0,0,0,
/* Block: 140 */
100,100,100,100,100,100,100,100,
100,100,100,100,100,100,100,100,
100,100,100,100,100,100,100,100,
100,100,100,100,100,100,100,100,
100,100,100,100,100,100,100,100,
100,100,100,100,100,100,100,100,
100,100,100,100,100,100,100,100,
100,100,100,100,100,100,100,100,
100,100,100,100,100,100,100,100,
100,100,100,100,100,100,100,100,
100,100,100,100,100,100,100,100,
100,100,100,100,100,100,100,100,
0,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,
19,19,19,19,19,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 141 */
109,109,109,109,109,109,109,109,
109,109,109,109,109,109,109,109,
109,109,0,109,109,109,109,109,
109,109,109,109,109,109,109,109,
109,109,109,109,109,109,109,109,
109,109,109,109,109,109,109,109,
109,109,109,109,109,109,109,109,
109,109,109,109,109,109,109,109,
109,109,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 142 */
129,129,129,129,129,129,129,0,
129,0,129,129,129,129,0,129,
129,129,129,129,129,129,129,129,
129,129,129,129,129,129,0,129,
129,129,129,129,129,129,129,129,
129,129,0,0,0,0,0,0,
123,123,123,123,123,123,123,123,
123,123,123,123,123,123,123,123,
123,123,123,123,123,123,123,123,
123,123,123,123,123,123,123,123,
123,123,123,123,123,123,123,123,
123,123,123,123,123,123,123,123,
123,123,123,123,123,123,123,123,
123,123,123,0,0,0,0,0,
123,123,123,123,123,123,123,123,
123,123,0,0,0,0,0,0,
/* Block: 143 */
107,107,107,107,0,107,107,107,
107,107,107,107,107,0,0,107,
107,0,0,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,107,107,107,107,107,107,107,
107,0,107,107,107,107,107,107,
107,0,107,107,0,107,107,107,
107,107,0,41,107,107,107,107,
107,107,107,107,107,0,0,107,
107,0,0,107,107,107,0,0,
107,0,0,0,0,0,0,107,
0,0,0,0,0,107,107,107,
107,107,107,107,0,0,107,107,
107,107,107,107,107,0,0,0,
107,107,107,107,107,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 144 */
135,135,135,135,135,135,135,135,
135,135,135,135,135,135,135,135,
135,135,135,135,135,135,135,135,
135,135,135,135,135,135,135,135,
135,135,135,135,135,135,135,135,
135,135,135,135,135,135,135,135,
135,135,135,135,135,135,135,135,
135,135,135,135,135,135,135,135,
135,135,135,135,135,135,135,135,
135,135,135,135,135,135,135,135,
135,135,135,135,135,135,135,135,
135,135,135,135,0,135,135,135,
135,135,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 145 */
124,124,124,124,124,124,124,124,
124,124,124,124,124,124,124,124,
124,124,124,124,124,124,124,124,
124,124,124,124,124,124,124,124,
124,124,124,124,124,124,124,124,
124,124,124,124,124,124,124,124,
124,124,124,124,124,124,124,124,
124,124,124,124,124,124,124,124,
124,124,124,124,124,124,124,124,
0,0,0,0,0,0,0,0,
124,124,124,124,124,124,124,124,
124,124,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 146 */
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,0,0,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,122,122,
122,122,122,122,122,122,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 147 */
114,114,114,114,114,114,114,114,
114,114,114,114,114,114,114,114,
114,114,114,114,114,114,114,114,
114,114,114,114,114,114,114,114,
114,114,114,114,114,114,114,114,
114,114,114,114,114,114,114,114,
114,114,114,114,114,114,114,114,
114,114,114,114,114,114,114,114,
114,114,114,114,114,0,0,0,
0,0,0,0,0,0,0,0,
114,114,114,114,114,114,114,114,
114,114,0,0,0,0,0,0,
32,32,32,32,32,32,32,32,
32,32,32,32,32,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 148 */
102,102,102,102,102,102,102,102,
102,102,102,102,102,102,102,102,
102,102,102,102,102,102,102,102,
102,102,102,102,102,102,102,102,
102,102,102,102,102,102,102,102,
102,102,102,102,102,102,102,102,
102,102,102,102,102,102,102,102,
102,102,0,0,0,0,0,0,
102,102,102,102,102,102,102,102,
102,102,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 149 */
126,126,126,126,126,126,126,126,
126,126,126,126,126,126,126,126,
126,126,126,126,126,126,126,126,
126,126,126,0,0,126,126,126,
126,126,126,126,126,126,126,126,
126,126,126,126,0,0,0,0,
126,126,126,126,126,126,126,126,
126,126,126,126,126,126,126,126,
126,126,126,126,126,126,126,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 150 */
142,142,142,142,142,142,142,142,
142,142,142,142,142,142,142,142,
142,142,142,142,142,142,142,142,
142,142,142,142,142,142,142,142,
142,142,142,142,142,142,142,142,
142,142,142,142,142,142,142,142,
142,142,142,142,142,142,142,142,
142,142,142,142,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 151 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
125,125,125,125,125,125,125,125,
125,125,125,125,125,125,125,125,
125,125,125,125,125,125,125,125,
125,125,125,125,125,125,125,125,
125,125,125,125,125,125,125,125,
125,125,125,125,125,125,125,125,
125,125,125,125,125,125,125,125,
125,125,125,125,125,125,125,125,
125,125,125,125,125,125,125,125,
125,125,125,125,125,125,125,125,
125,125,125,0,0,0,0,0,
0,0,0,0,0,0,0,125,
/* Block: 152 */
154,154,154,154,154,154,154,0,
0,154,0,0,154,154,154,154,
154,154,154,154,0,154,154,0,
154,154,154,154,154,154,154,154,
154,154,154,154,154,154,154,154,
154,154,154,154,154,154,154,154,
154,154,154,154,154,154,0,154,
154,0,0,154,154,154,154,154,
154,154,154,154,154,154,154,0,
0,0,0,0,0,0,0,0,
154,154,154,154,154,154,154,154,
154,154,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 153 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
150,150,150,150,150,150,150,150,
0,0,150,150,150,150,150,150,
150,150,150,150,150,150,150,150,
150,150,150,150,150,150,150,150,
150,150,150,150,150,150,150,150,
150,150,150,150,150,150,150,150,
150,150,150,150,150,150,150,150,
0,0,150,150,150,150,150,150,
150,150,150,150,150,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 154 */
141,141,141,141,141,141,141,141,
141,141,141,141,141,141,141,141,
141,141,141,141,141,141,141,141,
141,141,141,141,141,141,141,141,
141,141,141,141,141,141,141,141,
141,141,141,141,141,141,141,141,
141,141,141,141,141,141,141,141,
141,141,141,141,141,141,141,141,
141,141,141,141,141,141,141,141,
0,0,0,0,0,0,0,0,
140,140,140,140,140,140,140,140,
140,140,140,140,140,140,140,140,
140,140,140,140,140,140,140,140,
140,140,140,140,140,140,140,140,
140,140,140,140,140,140,140,140,
140,140,140,140,140,140,140,140,
/* Block: 155 */
140,140,140,140,140,140,140,140,
140,140,140,140,140,140,140,140,
140,140,140,140,140,140,140,140,
140,140,140,140,140,140,140,140,
140,140,140,0,0,0,0,0,
0,0,0,0,0,0,0,0,
28,28,28,28,28,28,28,28,
28,28,28,28,28,28,28,28,
119,119,119,119,119,119,119,119,
119,119,119,119,119,119,119,119,
119,119,119,119,119,119,119,119,
119,119,119,119,119,119,119,119,
119,119,119,119,119,119,119,119,
119,119,119,119,119,119,119,119,
119,119,119,119,119,119,119,119,
119,0,0,0,0,0,0,0,
/* Block: 156 */
10,10,10,10,10,10,10,10,
10,10,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 157 */
133,133,133,133,133,133,133,133,
133,0,133,133,133,133,133,133,
133,133,133,133,133,133,133,133,
133,133,133,133,133,133,133,133,
133,133,133,133,133,133,133,133,
133,133,133,133,133,133,133,133,
133,133,133,133,133,133,133,0,
133,133,133,133,133,133,133,133,
133,133,133,133,133,133,0,0,
0,0,0,0,0,0,0,0,
133,133,133,133,133,133,133,133,
133,133,133,133,133,133,133,133,
133,133,133,133,133,133,133,133,
133,133,133,133,133,0,0,0,
134,134,134,134,134,134,134,134,
134,134,134,134,134,134,134,134,
/* Block: 158 */
134,134,134,134,134,134,134,134,
134,134,134,134,134,134,134,134,
0,0,134,134,134,134,134,134,
134,134,134,134,134,134,134,134,
134,134,134,134,134,134,134,134,
0,134,134,134,134,134,134,134,
134,134,134,134,134,134,134,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 159 */
138,138,138,138,138,138,138,0,
138,138,0,138,138,138,138,138,
138,138,138,138,138,138,138,138,
138,138,138,138,138,138,138,138,
138,138,138,138,138,138,138,138,
138,138,138,138,138,138,138,138,
138,138,138,138,138,138,138,0,
0,0,138,0,138,138,0,138,
138,138,138,138,138,138,138,138,
0,0,0,0,0,0,0,0,
138,138,138,138,138,138,138,138,
138,138,0,0,0,0,0,0,
143,143,143,143,143,143,0,143,
143,0,143,143,143,143,143,143,
143,143,143,143,143,143,143,143,
143,143,143,143,143,143,143,143,
/* Block: 160 */
143,143,143,143,143,143,143,143,
143,143,143,143,143,143,143,0,
143,143,0,143,143,143,143,143,
143,0,0,0,0,0,0,0,
143,143,143,143,143,143,143,143,
143,143,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 161 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
144,144,144,144,144,144,144,144,
144,144,144,144,144,144,144,144,
144,144,144,144,144,144,144,144,
144,0,0,0,0,0,0,0,
/* Block: 162 */
162,162,162,162,162,162,162,162,
162,162,162,162,162,162,162,162,
162,0,162,162,162,162,162,162,
162,162,162,162,162,162,162,162,
162,162,162,162,162,162,162,162,
162,162,162,162,162,162,162,162,
162,162,162,162,162,162,162,162,
162,162,162,0,0,0,162,162,
162,162,162,162,162,162,162,162,
162,162,162,162,162,162,162,162,
162,162,162,162,162,162,162,162,
162,162,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 163 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
83,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,0,0,0,0,0,0,
0,0,0,0,0,0,0,15,
/* Block: 164 */
63,63,63,63,63,63,63,63,
63,63,63,63,63,63,63,63,
63,63,63,63,63,63,63,63,
63,63,63,63,63,63,63,63,
63,63,63,63,63,63,63,63,
63,63,63,63,63,63,63,63,
63,63,63,63,63,63,63,63,
63,63,63,63,63,63,63,63,
63,63,63,63,63,63,63,63,
63,63,63,63,63,63,63,63,
63,63,63,63,63,63,63,63,
63,63,63,63,63,63,63,63,
63,63,63,63,63,63,63,63,
63,63,63,63,63,63,63,63,
63,63,63,63,63,63,63,63,
63,63,63,63,63,63,63,63,
/* Block: 165 */
63,63,63,63,63,63,63,63,
63,63,63,63,63,63,63,63,
63,63,63,63,63,63,63,63,
63,63,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 166 */
63,63,63,63,63,63,63,63,
63,63,63,63,63,63,63,63,
63,63,63,63,63,63,63,63,
63,63,63,63,63,63,63,63,
63,63,63,63,63,63,63,63,
63,63,63,63,63,63,63,63,
63,63,63,63,63,63,63,63,
63,63,63,63,63,63,63,63,
63,63,63,63,63,63,63,63,
63,63,63,63,63,63,63,63,
63,63,63,63,63,63,63,63,
63,63,63,63,63,63,63,63,
63,63,63,63,63,63,63,63,
63,63,63,63,63,63,63,0,
63,63,63,63,63,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 167 */
63,63,63,63,63,63,63,63,
63,63,63,63,63,63,63,63,
63,63,63,63,63,63,63,63,
63,63,63,63,63,63,63,63,
63,63,63,63,63,63,63,63,
63,63,63,63,63,63,63,63,
63,63,63,63,63,63,63,63,
63,63,63,63,63,63,63,63,
63,63,63,63,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 168 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
157,157,157,157,157,157,157,157,
157,157,157,157,157,157,157,157,
157,157,157,157,157,157,157,157,
157,157,157,157,157,157,157,157,
157,157,157,157,157,157,157,157,
157,157,157,157,157,157,157,157,
157,157,157,157,157,157,157,157,
157,157,157,157,157,157,157,157,
157,157,157,157,157,157,157,157,
157,157,157,157,157,157,157,157,
157,157,157,157,157,157,157,157,
157,157,157,157,157,157,157,157,
157,157,157,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 169 */
81,81,81,81,81,81,81,81,
81,81,81,81,81,81,81,81,
81,81,81,81,81,81,81,81,
81,81,81,81,81,81,81,81,
81,81,81,81,81,81,81,81,
81,81,81,81,81,81,81,81,
81,81,81,81,81,81,81,81,
81,81,81,81,81,81,81,81,
81,81,81,81,81,81,81,81,
81,81,81,81,81,81,81,81,
81,81,81,81,81,81,81,81,
81,81,81,81,81,81,81,81,
81,81,81,81,81,81,81,81,
81,81,81,81,81,81,81,81,
81,81,81,81,81,81,81,81,
81,81,81,81,81,81,81,81,
/* Block: 170 */
81,81,81,81,81,81,81,81,
81,81,81,81,81,81,81,81,
81,81,81,81,81,81,81,81,
81,81,81,81,81,81,81,81,
81,81,81,81,81,81,81,81,
81,81,81,81,81,81,81,81,
81,81,81,81,81,81,81,81,
81,81,81,81,81,81,81,81,
81,81,81,81,81,81,81,81,
81,81,81,81,81,81,81,81,
81,81,81,81,81,81,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 171 */
127,127,127,127,127,127,127,127,
127,127,127,127,127,127,127,127,
127,127,127,127,127,127,127,127,
127,127,127,127,127,127,127,127,
127,127,127,127,127,127,127,127,
127,127,127,127,127,127,127,127,
127,127,127,127,127,127,127,127,
127,127,127,127,127,127,127,127,
127,127,127,127,127,127,127,127,
127,127,127,127,127,127,127,127,
127,127,127,127,127,127,127,127,
127,127,127,127,127,127,127,127,
127,127,127,127,127,127,127,127,
127,127,127,127,127,127,127,127,
127,127,127,127,127,127,127,127,
127,127,127,127,127,127,127,127,
/* Block: 172 */
127,127,127,127,127,127,127,127,
127,127,127,127,127,127,127,127,
127,127,127,127,127,127,127,127,
127,127,127,127,127,127,127,127,
127,127,127,127,127,127,127,127,
127,127,127,127,127,127,127,127,
127,127,127,127,127,127,127,127,
127,127,127,127,127,127,127,127,
127,127,127,127,127,127,127,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 173 */
84,84,84,84,84,84,84,84,
84,84,84,84,84,84,84,84,
84,84,84,84,84,84,84,84,
84,84,84,84,84,84,84,84,
84,84,84,84,84,84,84,84,
84,84,84,84,84,84,84,84,
84,84,84,84,84,84,84,84,
84,84,84,84,84,84,84,84,
84,84,84,84,84,84,84,84,
84,84,84,84,84,84,84,84,
84,84,84,84,84,84,84,84,
84,84,84,84,84,84,84,84,
84,84,84,84,84,84,84,84,
84,84,84,84,84,84,84,84,
84,84,84,84,84,84,84,84,
84,84,84,84,84,84,84,84,
/* Block: 174 */
84,84,84,84,84,84,84,84,
84,84,84,84,84,84,84,84,
84,84,84,84,84,84,84,84,
84,84,84,84,84,84,84,84,
84,84,84,84,84,84,84,84,
84,84,84,84,84,84,84,84,
84,84,84,84,84,84,84,84,
84,0,0,0,0,0,0,0,
115,115,115,115,115,115,115,115,
115,115,115,115,115,115,115,115,
115,115,115,115,115,115,115,115,
115,115,115,115,115,115,115,0,
115,115,115,115,115,115,115,115,
115,115,0,0,0,0,115,115,
159,159,159,159,159,159,159,159,
159,159,159,159,159,159,159,159,
/* Block: 175 */
159,159,159,159,159,159,159,159,
159,159,159,159,159,159,159,159,
159,159,159,159,159,159,159,159,
159,159,159,159,159,159,159,159,
159,159,159,159,159,159,159,159,
159,159,159,159,159,159,159,159,
159,159,159,159,159,159,159,159,
159,159,159,159,159,159,159,0,
159,159,159,159,159,159,159,159,
159,159,0,0,0,0,0,0,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,104,104,
104,104,104,104,104,104,0,0,
104,104,104,104,104,104,0,0,
0,0,0,0,0,0,0,0,
/* Block: 176 */
108,108,108,108,108,108,108,108,
108,108,108,108,108,108,108,108,
108,108,108,108,108,108,108,108,
108,108,108,108,108,108,108,108,
108,108,108,108,108,108,108,108,
108,108,108,108,108,108,108,108,
108,108,108,108,108,108,108,108,
108,108,108,108,108,108,108,108,
108,108,108,108,108,108,0,0,
0,0,0,0,0,0,0,0,
108,108,108,108,108,108,108,108,
108,108,0,108,108,108,108,108,
108,108,0,108,108,108,108,108,
108,108,108,108,108,108,108,108,
108,108,108,108,108,108,108,108,
0,0,0,0,0,108,108,108,
/* Block: 177 */
108,108,108,108,108,108,108,108,
108,108,108,108,108,108,108,108,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 178 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
145,145,145,145,145,145,145,145,
145,145,145,145,145,145,145,145,
145,145,145,145,145,145,145,145,
145,145,145,145,145,145,145,145,
145,145,145,145,145,145,145,145,
145,145,145,145,145,145,145,145,
145,145,145,145,145,145,145,145,
145,145,145,145,145,145,145,145,
/* Block: 179 */
145,145,145,145,145,145,145,145,
145,145,145,145,145,145,145,145,
145,145,145,145,145,145,145,145,
145,145,145,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 180 */
99,99,99,99,99,99,99,99,
99,99,99,99,99,99,99,99,
99,99,99,99,99,99,99,99,
99,99,99,99,99,99,99,99,
99,99,99,99,99,99,99,99,
99,99,99,99,99,99,99,99,
99,99,99,99,99,99,99,99,
99,99,99,99,99,99,99,99,
99,99,99,99,99,99,99,99,
99,99,99,0,0,0,0,99,
99,99,99,99,99,99,99,99,
99,99,99,99,99,99,99,99,
99,99,99,99,99,99,99,99,
99,99,99,99,99,99,99,99,
99,99,99,99,99,99,99,99,
99,99,99,99,99,99,99,99,
/* Block: 181 */
99,99,99,99,99,99,99,99,
0,0,0,0,0,0,0,99,
99,99,99,99,99,99,99,99,
99,99,99,99,99,99,99,99,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
137,139,36,36,155,0,0,0,
0,0,0,0,0,0,0,0,
36,36,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 182 */
137,137,137,137,137,137,137,137,
137,137,137,137,137,137,137,137,
137,137,137,137,137,137,137,137,
137,137,137,137,137,137,137,137,
137,137,137,137,137,137,137,137,
137,137,137,137,137,137,137,137,
137,137,137,137,137,137,137,137,
137,137,137,137,137,137,137,137,
137,137,137,137,137,137,137,137,
137,137,137,137,137,137,137,137,
137,137,137,137,137,137,137,137,
137,137,137,137,137,137,137,137,
137,137,137,137,137,137,137,137,
137,137,137,137,137,137,137,137,
137,137,137,137,137,137,137,137,
137,137,137,137,137,137,137,137,
/* Block: 183 */
137,137,137,137,137,137,137,137,
137,137,137,137,137,137,137,137,
137,137,137,137,137,137,137,137,
137,137,137,137,137,137,137,137,
137,137,137,137,137,137,137,137,
137,137,137,137,137,137,137,137,
137,137,137,137,137,137,137,137,
137,137,137,137,137,137,137,137,
137,137,137,137,137,137,137,137,
137,137,137,137,137,137,137,137,
137,137,137,137,137,137,137,137,
137,137,137,137,137,137,137,137,
137,137,137,137,137,137,137,137,
137,137,137,137,137,137,137,137,
137,137,137,137,137,137,137,137,
0,0,0,0,0,0,0,0,
/* Block: 184 */
155,155,155,155,155,155,155,155,
155,155,155,155,155,155,155,155,
155,155,155,155,155,155,155,155,
155,155,155,155,155,155,155,155,
155,155,155,155,155,155,155,155,
155,155,155,155,155,155,155,155,
155,155,155,155,155,155,155,155,
155,155,155,155,155,155,155,155,
155,155,155,155,155,155,155,155,
155,155,155,155,155,155,155,155,
155,155,155,155,155,155,155,155,
155,155,155,155,155,155,155,155,
155,155,155,155,155,155,155,155,
155,155,155,155,155,155,155,155,
155,155,155,155,155,155,155,155,
155,155,155,155,155,155,155,155,
/* Block: 185 */
155,155,155,155,155,155,155,155,
155,155,155,155,155,155,155,155,
155,155,155,155,155,155,155,155,
155,155,155,155,155,155,155,155,
155,155,155,155,155,155,155,155,
155,155,155,155,155,155,155,155,
155,155,155,155,155,155,155,155,
155,155,155,155,155,155,155,155,
155,155,155,155,155,155,155,155,
155,155,155,155,155,155,155,155,
155,155,155,155,155,155,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 186 */
137,137,137,137,137,137,137,137,
137,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 187 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
34,34,34,34,0,34,34,34,
34,34,34,34,0,34,34,0,
/* Block: 188 */
34,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
/* Block: 189 */
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
/* Block: 190 */
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
33,33,33,33,33,33,33,33,
34,34,34,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,33,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
33,33,33,0,0,34,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,34,34,34,34,
0,0,0,0,0,0,0,0,
139,139,139,139,139,139,139,139,
139,139,139,139,139,139,139,139,
/* Block: 191 */
139,139,139,139,139,139,139,139,
139,139,139,139,139,139,139,139,
139,139,139,139,139,139,139,139,
139,139,139,139,139,139,139,139,
139,139,139,139,139,139,139,139,
139,139,139,139,139,139,139,139,
139,139,139,139,139,139,139,139,
139,139,139,139,139,139,139,139,
139,139,139,139,139,139,139,139,
139,139,139,139,139,139,139,139,
139,139,139,139,139,139,139,139,
139,139,139,139,139,139,139,139,
139,139,139,139,139,139,139,139,
139,139,139,139,139,139,139,139,
139,139,139,139,139,139,139,139,
139,139,139,139,139,139,139,139,
/* Block: 192 */
139,139,139,139,139,139,139,139,
139,139,139,139,139,139,139,139,
139,139,139,139,139,139,139,139,
139,139,139,139,139,139,139,139,
139,139,139,139,139,139,139,139,
139,139,139,139,139,139,139,139,
139,139,139,139,139,139,139,139,
139,139,139,139,139,139,139,139,
139,139,139,139,139,139,139,139,
139,139,139,139,139,139,139,139,
139,139,139,139,139,139,139,139,
139,139,139,139,139,139,139,139,
139,139,139,139,139,139,139,139,
139,139,139,139,139,139,139,139,
139,139,139,139,139,139,139,139,
139,139,139,139,0,0,0,0,
/* Block: 193 */
105,105,105,105,105,105,105,105,
105,105,105,105,105,105,105,105,
105,105,105,105,105,105,105,105,
105,105,105,105,105,105,105,105,
105,105,105,105,105,105,105,105,
105,105,105,105,105,105,105,105,
105,105,105,105,105,105,105,105,
105,105,105,105,105,105,105,105,
105,105,105,105,105,105,105,105,
105,105,105,105,105,105,105,105,
105,105,105,105,105,105,105,105,
105,105,105,105,105,105,105,105,
105,105,105,105,105,105,105,105,
105,105,105,0,0,0,0,0,
105,105,105,105,105,105,105,105,
105,105,105,105,105,0,0,0,
/* Block: 194 */
105,105,105,105,105,105,105,105,
105,0,0,0,0,0,0,0,
105,105,105,105,105,105,105,105,
105,105,0,0,105,105,105,105,
1,1,1,1,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 195 */
41,41,41,41,41,41,41,41,
41,41,41,41,41,41,41,41,
41,41,41,41,41,41,41,41,
41,41,41,41,41,41,41,41,
41,41,41,41,41,41,41,41,
41,41,41,41,41,41,0,0,
41,41,41,41,41,41,41,41,
41,41,41,41,41,41,41,41,
41,41,41,41,41,41,41,0,
0,0,0,0,0,0,0,0,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
/* Block: 196 */
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 197 */
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,0,0,
0,0,0,0,0,0,0,0,
/* Block: 198 */
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,0,
0,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,41,
41,41,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,41,41,41,41,41,
/* Block: 199 */
41,41,41,1,1,41,41,41,
41,41,41,41,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,41,41,41,41,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 200 */
3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,
3,3,3,3,3,3,3,3,
3,3,3,3,3,3,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 201 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,0,0,0,0,
0,0,0,0,0,0,0,0,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 202 */
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,0,
0,0,0,0,0,0,0,0,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,0,0,0,0,0,0,0,
/* Block: 203 */
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,0,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
/* Block: 204 */
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,0,1,1,
0,0,1,0,0,1,1,0,
0,1,1,1,1,0,1,1,
1,1,1,1,1,1,1,1,
1,1,0,1,0,1,1,1,
1,1,1,1,0,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
/* Block: 205 */
1,1,1,1,1,1,0,1,
1,1,1,0,0,1,1,1,
1,1,1,1,1,0,1,1,
1,1,1,1,1,0,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,0,1,1,1,1,0,
1,1,1,1,1,0,1,0,
0,0,1,1,1,1,1,1,
1,0,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
/* Block: 206 */
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,0,0,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
/* Block: 207 */
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,0,0,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
/* Block: 208 */
131,131,131,131,131,131,131,131,
131,131,131,131,131,131,131,131,
131,131,131,131,131,131,131,131,
131,131,131,131,131,131,131,131,
131,131,131,131,131,131,131,131,
131,131,131,131,131,131,131,131,
131,131,131,131,131,131,131,131,
131,131,131,131,131,131,131,131,
131,131,131,131,131,131,131,131,
131,131,131,131,131,131,131,131,
131,131,131,131,131,131,131,131,
131,131,131,131,131,131,131,131,
131,131,131,131,131,131,131,131,
131,131,131,131,131,131,131,131,
131,131,131,131,131,131,131,131,
131,131,131,131,131,131,131,131,
/* Block: 209 */
131,131,131,131,131,131,131,131,
131,131,131,131,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,131,131,131,131,131,
0,131,131,131,131,131,131,131,
131,131,131,131,131,131,131,131,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 210 */
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,0,
0,0,0,0,0,2,2,2,
2,2,2,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 211 */
57,57,57,57,57,57,57,0,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,0,0,57,57,57,57,57,
57,57,0,57,57,0,57,57,
57,57,57,0,0,0,0,0,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 212 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,4,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 213 */
151,151,151,151,151,151,151,151,
151,151,151,151,151,151,151,151,
151,151,151,151,151,151,151,151,
151,151,151,151,151,151,151,151,
151,151,151,151,151,151,151,151,
151,151,151,151,151,0,0,0,
151,151,151,151,151,151,151,151,
151,151,151,151,151,151,0,0,
151,151,151,151,151,151,151,151,
151,151,0,0,0,0,151,151,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 214 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
160,160,160,160,160,160,160,160,
160,160,160,160,160,160,160,160,
160,160,160,160,160,160,160,160,
160,160,160,160,160,160,160,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
152,152,152,152,152,152,152,152,
152,152,152,152,152,152,152,152,
152,152,152,152,152,152,152,152,
152,152,152,152,152,152,152,152,
152,152,152,152,152,152,152,152,
152,152,152,152,152,152,152,152,
152,152,152,152,152,152,152,152,
152,152,0,0,0,0,0,152,
/* Block: 215 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
163,163,163,163,163,163,163,163,
163,163,163,163,163,163,163,163,
163,163,163,163,163,163,163,163,
163,163,163,163,163,163,163,163,
163,163,163,163,163,163,163,163,
163,163,0,0,0,0,0,0,
/* Block: 216 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
26,26,26,26,26,26,26,0,
26,26,26,26,0,26,26,0,
26,26,26,26,26,26,26,26,
26,26,26,26,26,26,26,0,
/* Block: 217 */
113,113,113,113,113,113,113,113,
113,113,113,113,113,113,113,113,
113,113,113,113,113,113,113,113,
113,113,113,113,113,113,113,113,
113,113,113,113,113,113,113,113,
113,113,113,113,113,113,113,113,
113,113,113,113,113,113,113,113,
113,113,113,113,113,113,113,113,
113,113,113,113,113,113,113,113,
113,113,113,113,113,113,113,113,
113,113,113,113,113,113,113,113,
113,113,113,113,113,113,113,113,
113,113,113,113,113,113,113,113,
113,113,113,113,113,113,113,113,
113,113,113,113,113,113,113,113,
113,113,113,113,113,113,113,113,
/* Block: 218 */
113,113,113,113,113,113,113,113,
113,113,113,113,113,113,113,113,
113,113,113,113,113,113,113,113,
113,113,113,113,113,113,113,113,
113,113,113,113,113,113,113,113,
113,113,113,113,113,113,113,113,
113,113,113,113,113,113,113,113,
113,113,113,113,113,113,113,113,
113,113,113,113,113,0,0,113,
113,113,113,113,113,113,113,113,
113,113,113,113,113,113,113,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 219 */
132,132,132,132,132,132,132,132,
132,132,132,132,132,132,132,132,
132,132,132,132,132,132,132,132,
132,132,132,132,132,132,132,132,
132,132,132,132,132,132,132,132,
132,132,132,132,132,132,132,132,
132,132,132,132,132,132,132,132,
132,132,132,132,132,132,132,132,
132,132,132,132,132,132,132,132,
132,132,132,132,0,0,0,0,
132,132,132,132,132,132,132,132,
132,132,0,0,0,0,132,132,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 220 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
/* Block: 221 */
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 222 */
0,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 223 */
7,7,7,7,0,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
0,7,7,0,7,0,0,7,
0,7,7,7,7,7,7,7,
7,7,7,0,7,7,7,7,
0,7,0,7,0,0,0,0,
0,0,7,0,0,0,0,7,
0,7,0,7,0,7,7,7,
0,7,7,0,7,0,0,7,
0,7,0,7,0,7,0,7,
0,7,7,0,7,0,0,7,
7,7,7,0,7,7,7,7,
7,7,7,0,7,7,7,7,
0,7,7,7,7,0,7,0,
/* Block: 224 */
7,7,7,7,7,7,7,7,
7,7,0,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,0,0,0,0,
0,7,7,7,0,7,7,7,
7,7,0,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
7,7,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 225 */
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,0,0,0,0,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
/* Block: 226 */
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,0,0,0,0,
0,0,0,0,0,0,0,0,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,0,
0,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
0,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
0,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,0,0,
0,0,0,0,0,0,0,0,
/* Block: 227 */
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
/* Block: 228 */
33,1,1,0,0,0,0,0,
0,0,0,0,0,0,0,0,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,0,0,0,0,
1,1,1,1,1,1,1,1,
1,0,0,0,0,0,0,0,
1,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
1,1,1,1,1,1,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 229 */
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
0,0,0,0,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,0,0,0,
1,1,1,1,1,1,1,1,
1,1,1,1,1,0,0,0,
/* Block: 230 */
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,0,
0,0,0,1,1,1,1,1,
/* Block: 231 */
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,0,0,0,0,0,0,
1,1,1,1,1,1,1,1,
1,1,1,1,0,0,0,0,
1,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 232 */
1,1,1,1,1,1,1,1,
1,1,1,1,0,0,0,0,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
0,0,0,0,0,0,0,0,
1,1,1,1,1,1,1,1,
1,1,0,0,0,0,0,0,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
/* Block: 233 */
1,1,1,1,1,1,1,1,
0,0,0,0,0,0,0,0,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,0,0,
1,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 234 */
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,0,0,0,0,
0,0,0,0,0,0,0,0,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,0,0,
1,1,1,1,1,1,1,1,
1,1,1,1,1,0,0,0,
/* Block: 235 */
1,1,1,1,1,1,1,1,
1,0,0,0,0,0,0,0,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,0,1,
1,1,1,1,1,1,0,0,
0,0,0,0,0,0,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,0,0,0,0,
1,1,1,1,1,1,1,1,
1,0,0,0,0,0,0,0,
1,1,1,1,1,1,1,1,
1,0,0,0,0,0,0,0,
/* Block: 236 */
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,0,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
1,1,1,1,1,1,1,1,
1,1,0,0,0,0,0,0,
/* Block: 237 */
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 238 */
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,0,0,0,0,0,0,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
/* Block: 239 */
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,0,0,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
/* Block: 240 */
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
/* Block: 241 */
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
/* Block: 242 */
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 243 */
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 244 */
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,0,0,0,0,0,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
/* Block: 245 */
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
36,36,36,36,36,36,36,36,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 246 */
0,1,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
/* Block: 247 */
41,41,41,41,41,41,41,41,
41,41,41,41,41,41,41,41,
41,41,41,41,41,41,41,41,
41,41,41,41,41,41,41,41,
41,41,41,41,41,41,41,41,
41,41,41,41,41,41,41,41,
41,41,41,41,41,41,41,41,
41,41,41,41,41,41,41,41,
41,41,41,41,41,41,41,41,
41,41,41,41,41,41,41,41,
41,41,41,41,41,41,41,41,
41,41,41,41,41,41,41,41,
41,41,41,41,41,41,41,41,
41,41,41,41,41,41,41,41,
41,41,41,41,41,41,41,41,
41,41,41,41,41,41,41,41,
/* Block: 248 */
41,41,41,41,41,41,41,41,
41,41,41,41,41,41,41,41,
41,41,41,41,41,41,41,41,
41,41,41,41,41,41,41,41,
41,41,41,41,41,41,41,41,
41,41,41,41,41,41,41,41,
41,41,41,41,41,41,41,41,
41,41,41,41,41,41,41,41,
41,41,41,41,41,41,41,41,
41,41,41,41,41,41,41,41,
41,41,41,41,41,41,41,41,
41,41,41,41,41,41,41,41,
41,41,41,41,41,41,41,41,
41,41,41,41,41,41,41,41,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0};

uaix_const_data uaix_data_array(type_codept, stage3_script, 164) = {
0,1517910393,1281455214,1198679403,1132032620,1098018158,1214603890,1098015074,
1400468067,1416126817,1147500129,1113943655,1198879349,1198877298,1332902241,1415671148,
1415933045,1265525857,1298954605,1399418472,1416126825,1281453935,1416192628,1299803506,
1197830002,1214344807,1165256809,1130915186,1130458739,1332175213,1383427698,1265134962,
1299148391,1214870113,1264676449,1114599535,1214344809,1500080489,1232363884,1198486632,
1148416628,1516858984,1416064103,1214344815,1114990692,1415669602,1281977698,1415670885,
1281977954,1432838514,1399349623,1332964705,1131442804,1114792297,1114990441,1131376756,
1415670901,1198285159,1415999079,1400466543,1483761007,1265131890,1113681001,1483961720,
1349021304,1349017959,1315663727,1400204900,1281716323,1332503403,1449224553,1398895986,
1264675945,1382706791,1283023721,1130459753,1283023977,1130914157,1281453665,1415673460,
1098281844,1164409200,1398893938,1281979253,1113681269,1247901281,1299473769,1098018153,
1398895202,1349678185,1349020777,1332898664,1265920105,1113683051,1114792296,1298230884,
1130457965,1298494051,1298494063,1349284452,1399353956,1399812705,1415670642,1097295970,
1113682803,1148547180,1164730977,1198678382,1215131239,1265135466,1281977953,1298229354,
1298230889,1298493028,1299145833,1299345263,1315009122,1315070324,1348562029,1348564323,
1348825709,1349020784,1399415908,1399418468,1416196712,1466004065,1097363309,1215067511,
1214346354,1299541108,1215655527,1399287415,1097100397,1114139507,1298231907,1315272545,
1332963173,1415671399,1198485101,1316186229,1399814511,1516334690,1148151666,1198485095,
1298230113,1298490470,1383032935,1399809892,1399809903,1164736877,1315008100,1215131248,
1466132591,1130918515,1147756907,1265202291,1499822697,1131441518,1333094258,1416524641,
1416590447,1449751656,1264678761,1315006317};

uaix_const_data uaix_data_array(unsigned char, stage1_script_ext, 8704) = {
0,0,0,0,0,0,1,0,
0,2,0,0,3,4,0,0,
0,0,5,6,7,8,0,9,
0,10,0,0,0,0,0,0,
11,12,0,0,0,0,0,0,
0,0,0,0,0,0,13,0,
14,0,0,0,0,0,0,0,
0,15,0,16,0,0,0,0,
17,18,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,19,0,0,0,
20,21,0,22,23,24,25,26,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,27,0,28,0,
29,30,31,32,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,33,34,35,0,36,37,
0,0,38,0,0,39,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,40,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,41,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,42,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,43,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,44,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,45,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0};

uaix_const_data uaix_data_array(unsigned short, stage2_script_ext, 5888) = {
/* Block: 0 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 1 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,19,0,0,21,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,59,59,59,59,59,
59,59,59,59,59,59,59,59,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 2 */
0,0,0,140,125,137,137,128,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 3 */
0,0,0,0,0,0,0,0,
0,0,0,0,357,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,364,245,0,0,546,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
554,0,0,0,0,0,0,0,
0,0,0,80,80,80,80,80,
80,80,80,80,80,80,0,0,
0,0,0,0,0,0,0,0,
249,249,249,249,249,249,249,249,
249,249,0,0,0,0,0,0,
83,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 4 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,77,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 5 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,625,599,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,670,691,304,304,
304,304,304,304,304,304,304,304,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 6 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,253,253,
253,253,253,253,253,253,253,253,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 7 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,203,203,
203,203,203,203,203,203,203,203,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 8 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,200,200,
200,200,200,200,200,200,200,200,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 9 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,176,176,
176,176,176,176,176,176,176,176,
179,179,179,182,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 10 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,230,230,
230,230,230,230,230,230,230,230,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 11 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
257,257,257,257,257,257,257,257,
257,257,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 12 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,173,0,0,0,0,
/* Block: 13 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,299,299,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 14 */
0,0,239,239,0,242,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 15 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
289,3,294,146,5,92,92,158,
95,161,539,7,164,164,9,9,
167,98,11,11,11,11,11,11,
11,155,101,13,13,104,15,15,
15,15,564,149,269,107,107,1,
152,152,61,0,0,0,0,0,
/* Block: 16 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
23,23,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
143,0,63,0,0,0,0,0,
/* Block: 17 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,233,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 18 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
273,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 19 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,131,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 20 */
0,371,371,309,0,0,25,0,
378,385,392,399,406,413,420,427,
434,441,0,315,448,455,462,469,
476,483,490,497,321,327,333,333,
0,0,0,0,0,0,0,0,
0,0,113,113,113,113,0,0,
339,209,209,209,209,209,0,345,
0,0,0,0,277,281,27,27,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 21 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,212,212,215,215,0,0,0,
218,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,504,221,0,0,0,
/* Block: 22 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
29,29,31,31,31,31,33,33,
33,33,33,33,33,33,33,33,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
35,35,35,35,35,35,35,35,
35,35,35,35,35,35,35,35,
35,35,35,35,35,35,35,35,
35,35,35,35,35,35,35,35,
35,35,35,35,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 23 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
37,37,37,37,37,37,37,37,
37,37,39,39,39,39,39,39,
39,39,39,39,39,39,39,39,
39,39,39,39,39,39,39,39,
39,39,39,39,39,39,39,39,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 24 */
41,41,41,41,41,41,41,41,
41,41,43,43,43,43,43,43,
43,43,43,43,43,43,43,43,
43,43,43,43,43,43,43,43,
43,43,43,43,43,43,43,43,
43,43,43,43,43,43,43,43,
43,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
45,45,45,45,45,45,45,45,
45,45,45,45,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,47,
/* Block: 25 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
49,49,49,49,49,49,49,49,
49,49,49,49,49,49,49,49,
49,49,49,49,49,49,49,49,
49,0,0,0,0,0,0,0,
0,0,0,51,51,51,51,51,
/* Block: 26 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
53,53,53,53,53,53,53,53,
53,53,53,53,53,53,53,53,
53,53,53,53,53,53,53,53,
53,53,53,53,53,53,53,0,
/* Block: 27 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,134,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 28 */
206,206,206,206,206,206,206,206,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 29 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
654,654,654,639,639,639,575,575,
612,587,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 30 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,110,0,170,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 31 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,285,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 32 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,116,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 33 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,71,74,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 34 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,86,0,0,0,0,0,
0,0,0,0,0,89,0,0,
/* Block: 35 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,351,351,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 36 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,511,518,525,532,532,0,0,
0,0,0,0,0,0,0,0,
224,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 37 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,227,227,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 38 */
261,261,119,0,0,0,0,265,
265,265,265,265,265,265,265,265,
265,265,265,265,265,265,265,265,
265,265,265,265,265,265,265,265,
265,265,265,265,265,265,265,265,
265,265,265,265,265,265,265,265,
265,265,265,265,0,0,0,122,
122,122,122,122,122,122,122,122,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 39 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
65,68,68,68,68,68,68,68,
68,68,68,68,68,68,68,68,
68,68,68,68,68,68,68,68,
68,68,68,68,0,0,0,0,
/* Block: 40 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,236,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 41 */
0,185,0,188,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,191,191,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 42 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
194,194,0,197,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 43 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
17,17,17,17,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 44 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
55,55,55,55,55,55,55,55,
55,55,55,55,55,55,55,55,
55,55,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 45 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
57,57,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0};

uaix_const_data uaix_data_array(type_codept, stage3_script_ext, 713) = {
0,1,1113943655,1,1147500129,1,1147500129,1,
1147500129,1,1147500129,1,1147500129,1,1147500129,1,
1147500129,1,1148547180,1,1198679403,1,1198679403,1,
1198679403,1,1214344809,1,1214344809,1,1214344809,1,
1214344809,1,1214344809,1,1214344809,1,1214344809,1,
1214344809,1,1214344809,1,1214344809,1,1214344809,1,
1214344809,1,1214344809,1,1214344809,1,1214344809,1,
1214344809,1,1214344809,1,1281455214,1,1315008100,1,
1400468067,2,1098015074,1131376756,2,1098015074,1131376756,2,
1098015074,1315663727,2,1098015074,1315663727,2,1098015074,1383032935,
2,1098015074,1400468067,2,1098015074,1400468067,2,1098015074,
1416126817,2,1098015074,1416126817,2,1113943655,1147500129,2,
1113943655,1147500129,2,1113943655,1147500129,2,1113943655,1147500129,
2,1113943655,1147500129,2,1113943655,1147500129,2,1113943655,
1147500129,2,1114599535,1214344809,2,1114990441,1247901281,2,
1131442804,1281977954,2,1131442804,1281977954,2,1132032620,1198285159,
2,1132032620,1198285159,2,1132032620,1198285159,2,1132032620,
1198285159,2,1132032620,1281455214,2,1132032620,1348825709,2,
1132032620,1400468067,2,1147500129,1198678382,2,1147500129,1198678382,
2,1147500129,1198678382,2,1147500129,1315008100,2,1147500129,
1399353956,2,1147500129,1399353956,2,1147500129,1399353956,2,
1147500129,1399353956,2,1147500129,1415671148,2,1197830002,1281455214,
2,1198678382,1415671148,2,1198678382,1415671148,2,1198678382,
1415671148,2,1198678382,1415671148,2,1198678382,1415671148,2,
1198678382,1415671148,2,1198678382,1415671148,2,1198678382,1415671148,
2,1198877298,1265135466,2,1198879349,1299541108,2,1214344809,
1281455214,2,1214870113,1264676449,2,1214870113,1264676449,2,
1214870113,1264676449,2,1214870113,1264676449,2,1214870113,1264676449,
2,1214870113,1264676449,2,1214870113,1264676449,2,1265525857,
1315008100,2,1281455214,1299148391,2,1298230889,1333094258,2,
1299148391,1349017959,2,1299148391,1349017959,3,1098015074,1400468067,
1416126817,3,1098015074,1416126817,1499822697,3,1113943655,1130457965,
1400466543,3,1130457965,1299803506,1415670885,3,1131441518,1131442804,
1281977954,3,1131442804,1281977953,1281977954,3,1147500129,1198678382,
1265525857,3,1147500129,1198678382,1281455214,3,1214344809,1214870113,
1264676449,3,1214344809,1214870113,1264676449,3,1264675945,1281455214,
1299803506,4,1113943655,1147500129,1198678382,1265525857,4,1113943655,
1147500129,1198678382,1265525857,4,1114990692,1214344815,1415669602,1416064103,
4,1147500129,1148151666,1265920105,1298229354,5,1114599535,1214344807,
1214344809,1214870113,1264676449,5,1114599535,1214344807,1214344809,1214870113,
1264676449,5,1114599535,1214344807,1214344809,1214870113,1264676449,5,
1114599535,1214344807,1214344809,1214870113,1264676449,5,1114599535,1214344807,
1214344809,1214870113,1264676449,5,1114599535,1214344807,1214344809,1214870113,
1264676449,5,1114599535,1214344807,1214344809,1214870113,1264676449,5,
1114599535,1214344807,1214344809,1214870113,1264676449,6,1098015074,1315663727,
1383032935,1400468067,1416126817,1499822697,6,1098015074,1315663727,1383032935,
1400468067,1416126817,1499822697,6,1114599535,1214344807,1214344809,1214870113,
1264676449,1500080489,6,1114599535,1214344807,1214344809,1214870113,1264676449,
1500080489,6,1114599535,1214344807,1214344809,1214870113,1264676449,1500080489,
6,1114599535,1214344807,1214344809,1214870113,1264676449,1500080489,6,
1114599535,1214344807,1214344809,1214870113,1264676449,1500080489,6,1114599535,
1214344807,1214344809,1214870113,1264676449,1500080489,6,1114599535,1214344807,
1214344809,1214870113,1264676449,1500080489,6,1114599535,1214344807,1214344809,
1214870113,1264676449,1500080489,6,1114599535,1214344807,1214344809,1214870113,
1264676449,1500080489,6,1114599535,1214344807,1214344809,1214870113,1264676449,
1500080489,6,1114599535,1214344807,1214344809,1214870113,1264676449,1500080489,
6,1114599535,1214344807,1214344809,1214870113,1264676449,1500080489,6,
1114599535,1214344807,1214344809,1214870113,1264676449,1500080489,6,1114599535,
1214344807,1214344809,1214870113,1264676449,1500080489,6,1114599535,1214344807,
1214344809,1214870113,1264676449,1500080489,6,1114599535,1214344807,1214344809,
1214870113,1264676449,1500080489,6,1114599535,1214344807,1214344809,1214870113,
1264676449,1500080489,6,1114599535,1214344807,1214344809,1214870113,1264676449,
1500080489,6,1114599535,1214344807,1214344809,1214870113,1264676449,1500080489,
6,1114599535,1214344807,1214344809,1214870113,1264676449,1500080489,6,
1114599535,1214344807,1214344809,1214870113,1264676449,1500080489,6,1114599535,
1214344807,1214344809,1214870113,1264676449,1500080489,6,1114599535,1214344807,
1214344809,1214870113,1264676449,1500080489,6,1114599535,1214344807,1214344809,
1214870113,1264676449,1500080489,6,1147500129,1265525857,1298954605,1332902241,
1415671148,1415933045,7,1097100397,1098015074,1315663727,1383032935,1400468067,
1416126817,1499822697,9,1097100397,1098015074,1298230884,1298230889,1333094258,
1349020784,1383032935,1399809892,1400468067,10,1113943655,1147500129,1198678382,
1265525857,1298954605,1315008100,1332902241,1399418472,1415933045,1416196712,11,
1147500129,1148151666,1198877298,1198879349,1265135466,1265920105,1298229354,1299145833,
1399418468,1415670642,1416196712,11,1147500129,1148151666,1198877298,1198879349,
1265135466,1265920105,1298229354,1299145833,1399418468,1415670642,1416196712,12,
1113943655,1147500129,1198678382,1198877298,1198879349,1265525857,1281455214,1298954605,
1332902241,1415671148,1415933045,1416196712,12,1147500129,1148151666,1198877298,
1198879349,1265135466,1265920105,1298229354,1299145833,1399353956,1399418468,1415670642,
1416196712,13,1113943655,1147500129,1198678382,1198877298,1198879349,1265525857,
1281455214,1298954605,1332902241,1399353956,1415671148,1415933045,1416196712,14,
1147500129,1148151666,1198877298,1198879349,1265135466,1265525857,1265920105,1298229354,
1299145833,1315008100,1399353956,1399418468,1415670642,1416196712,15,1147500129,
1148151666,1198877298,1198879349,1265135466,1265525857,1265920105,1298229354,1298954605,
1299145833,1315008100,1399353956,1399418468,1415670642,1416196712,20,1113943655,
1147500129,1148151666,1198485095,1198485101,1198678382,1198877298,1198879349,1265525857,
1298229354,1298954605,1315008100,1332902241,1399418468,1399418472,1400466543,1415670642,
1415671148,1415933045,1416196712,21,1113943655,1147500129,1148151666,1198485095,
1198485101,1198678382,1198877298,1198879349,1265525857,1281977698,1298229354,1298954605,
1315008100,1332902241,1399418468,1399418472,1400466543,1415670642,1415671148,1415933045,
1416196712};

UNI_ALGO_IMPL_NAMESPACE_END

// AMALGAMATION: uni_algo/impl/data/data_segment_grapheme.h

// GENERATED. DO NOT EDIT.

// Unicode 15.1.0

UNI_ALGO_IMPL_NAMESPACE_BEGIN

uaix_const_data uaix_data_array(unsigned char, stage1_segment_grapheme, 8704) = {
0,1,2,2,2,2,3,2,
2,4,2,5,6,7,8,9,
10,11,12,13,14,15,16,17,
18,19,20,21,22,23,24,25,
26,27,28,29,2,2,30,2,
2,2,2,2,2,2,31,32,
33,34,35,2,36,37,38,39,
40,41,2,42,2,2,2,2,
43,44,45,46,2,2,47,48,
2,49,2,50,51,52,53,54,
2,2,55,2,2,2,56,2,
2,57,58,59,2,2,2,2,
60,61,2,2,2,62,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,63,64,2,2,
65,66,67,68,69,70,2,71,
72,73,74,75,76,77,78,72,
73,74,75,76,77,78,72,73,
74,75,76,77,78,72,73,74,
75,76,77,78,72,73,74,75,
76,77,78,72,73,74,75,76,
77,78,72,73,74,75,76,77,
78,72,73,74,75,76,77,78,
72,73,74,75,76,77,78,72,
73,74,75,76,77,78,72,73,
74,75,76,77,78,72,73,74,
75,76,77,78,72,73,74,79,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,80,2,
2,2,2,2,81,82,2,83,
2,2,2,84,2,85,86,2,
2,2,2,2,2,2,2,2,
2,2,2,2,87,88,2,2,
2,2,89,2,2,90,91,92,
93,94,95,96,97,98,99,2,
100,101,2,102,103,104,105,2,
106,2,107,108,109,110,2,2,
111,112,113,114,2,115,116,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
117,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,118,119,2,
2,2,2,2,2,2,120,121,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,122,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,123,2,
2,2,124,125,126,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,127,128,2,2,
2,2,2,2,2,2,2,2,
129,130,119,2,2,131,2,2,
2,132,2,2,2,2,2,2,
2,133,134,2,2,2,2,2,
2,2,2,2,2,2,2,2,
135,135,136,137,138,135,135,139,
135,135,140,135,141,135,142,143,
144,145,146,135,135,135,2,2,
135,135,135,135,135,135,135,147,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
148,149,150,151,149,149,149,149,
149,149,149,149,149,149,149,149,
149,149,149,149,149,149,149,149,
149,149,149,149,149,149,149,149,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2};

uaix_const_data uaix_data_array(unsigned char, stage2_segment_grapheme, 19456) = {
/* Block: 0 */
4,4,4,4,4,4,4,4,
4,4,3,4,4,2,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,4,
/* Block: 1 */
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
0,0,0,0,0,0,0,0,
0,14,0,0,0,4,14,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 2 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 3 */
197,197,197,197,197,197,197,197,
197,197,197,197,197,197,197,197,
197,197,197,197,197,197,197,197,
197,197,197,197,197,197,197,197,
197,197,197,197,197,197,197,197,
197,197,197,197,197,197,197,197,
197,197,197,197,197,197,197,197,
197,197,197,197,197,197,197,197,
197,197,197,197,197,197,197,197,
197,197,197,197,197,197,197,5,
197,197,197,197,197,197,197,197,
197,197,197,197,197,197,197,197,
197,197,197,197,197,197,197,197,
197,197,197,197,197,197,197,197,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 4 */
0,0,0,197,197,197,197,197,
5,5,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 5 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,197,197,197,197,197,197,197,
197,197,197,197,197,197,197,197,
197,197,197,197,197,197,197,197,
197,197,197,197,197,197,197,197,
197,197,197,197,197,197,197,197,
197,197,197,197,197,197,0,197,
0,197,197,0,197,197,0,197,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 6 */
1,1,1,1,1,1,0,0,
0,0,0,0,0,0,0,0,
197,197,197,197,197,197,197,197,
197,197,197,0,4,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,197,197,197,197,197,
197,197,197,197,197,197,197,197,
197,197,197,197,197,197,197,197,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
197,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 7 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,197,197,
197,197,197,197,197,1,0,197,
197,197,197,197,197,0,0,197,
197,0,197,197,197,197,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 8 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,1,
0,197,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
197,197,197,197,197,197,197,197,
197,197,197,197,197,197,197,197,
197,197,197,197,197,197,197,197,
197,197,197,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 9 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,5,5,
5,5,5,5,5,5,5,5,
5,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,197,197,197,197,197,
197,197,197,197,0,0,0,0,
0,0,0,0,0,197,0,0,
/* Block: 10 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,197,197,
197,197,0,197,197,197,197,197,
197,197,197,197,0,197,197,197,
0,197,197,197,197,197,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,197,197,197,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 11 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
1,1,0,0,0,0,0,0,
197,197,197,197,197,197,197,197,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,197,197,197,197,197,197,
197,197,197,197,197,197,197,197,
197,197,197,197,197,197,197,197,
197,197,1,197,197,197,197,197,
197,197,197,197,197,197,197,197,
197,197,197,197,197,197,197,197,
197,197,197,197,197,197,197,197,
/* Block: 12 */
5,5,5,7,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,5,7,197,0,7,7,
7,5,5,5,5,5,5,5,
5,7,7,7,7,69,7,7,
0,197,197,197,197,5,5,5,
128,128,128,128,128,128,128,128,
0,0,5,5,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
128,128,128,128,128,128,128,128,
/* Block: 13 */
0,5,7,7,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,0,128,128,128,128,128,128,
128,0,128,0,0,0,128,128,
128,128,0,0,197,0,5,7,
7,5,5,5,5,0,0,7,
7,0,0,7,7,69,0,0,
0,0,0,0,0,0,0,5,
0,0,0,0,128,128,0,128,
0,0,5,5,0,0,0,0,
0,0,0,0,0,0,0,0,
128,128,0,0,0,0,0,0,
0,0,0,0,0,0,197,0,
/* Block: 14 */
0,5,5,7,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,197,0,7,7,
7,5,5,0,0,0,0,5,
5,0,0,5,5,5,0,0,
0,5,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
5,5,0,0,0,5,0,0,
0,0,0,0,0,0,0,0,
/* Block: 15 */
0,5,5,7,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,0,128,128,128,128,128,128,
128,0,128,128,0,128,128,128,
128,128,0,0,197,0,7,7,
7,5,5,5,5,5,0,5,
5,7,0,7,7,69,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,5,5,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,128,5,5,5,5,5,5,
/* Block: 16 */
0,5,7,7,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,0,128,128,128,128,128,128,
128,0,128,128,0,128,128,128,
128,128,0,0,197,0,5,5,
7,5,5,5,5,0,0,7,
7,0,0,7,7,69,0,0,
0,0,0,0,0,5,5,5,
0,0,0,0,128,128,0,128,
0,0,5,5,0,0,0,0,
0,0,0,0,0,0,0,0,
0,128,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 17 */
0,0,5,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,5,7,
5,7,7,0,0,0,7,7,
7,0,7,7,7,5,0,0,
0,0,0,0,0,0,0,5,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 18 */
5,7,7,7,5,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,0,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,0,0,197,0,5,5,
5,7,7,7,7,0,5,5,
5,0,5,5,5,69,0,0,
0,0,0,0,0,197,197,0,
128,128,128,0,0,0,0,0,
0,0,5,5,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 19 */
0,5,7,7,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,197,0,7,5,
7,7,5,7,7,0,5,7,
7,0,7,7,5,5,0,0,
0,0,0,0,0,5,5,0,
0,0,0,0,0,0,0,0,
0,0,5,5,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,7,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 20 */
5,5,7,7,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,197,197,0,5,7,
7,5,5,5,5,0,7,7,
7,0,7,7,7,69,1,0,
0,0,0,0,0,0,0,5,
0,0,0,0,0,0,0,0,
0,0,5,5,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 21 */
0,5,7,7,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,5,0,0,0,0,5,
7,7,5,5,5,0,5,0,
7,7,7,7,7,7,7,5,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,7,7,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 22 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,5,0,7,5,5,5,5,
197,197,197,0,0,0,0,0,
0,0,0,0,0,0,0,5,
197,197,197,197,5,5,5,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 23 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,5,0,7,5,5,5,5,
197,197,197,5,5,0,0,0,
0,0,0,0,0,0,0,0,
197,197,197,197,5,5,5,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 24 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
197,197,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,197,0,197,
0,197,0,0,0,0,7,7,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,197,197,5,197,5,5,5,
5,5,197,197,197,197,5,7,
/* Block: 25 */
197,5,197,197,197,0,197,197,
0,0,0,0,0,5,5,5,
5,5,5,5,5,5,5,5,
0,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,0,0,0,
0,0,0,0,0,0,197,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 26 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,5,5,5,
5,7,5,5,5,5,5,197,
0,197,197,7,7,5,5,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,7,7,
5,5,0,0,0,0,5,5,
5,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,5,5,5,5,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 27 */
0,0,5,0,7,5,5,0,
0,0,0,0,0,197,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,5,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 28 */
8,8,8,8,8,8,8,8,
8,8,8,8,8,8,8,8,
8,8,8,8,8,8,8,8,
8,8,8,8,8,8,8,8,
8,8,8,8,8,8,8,8,
8,8,8,8,8,8,8,8,
8,8,8,8,8,8,8,8,
8,8,8,8,8,8,8,8,
8,8,8,8,8,8,8,8,
8,8,8,8,8,8,8,8,
8,8,8,8,8,8,8,8,
8,8,8,8,8,8,8,8,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
/* Block: 29 */
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
10,10,10,10,10,10,10,10,
10,10,10,10,10,10,10,10,
10,10,10,10,10,10,10,10,
10,10,10,10,10,10,10,10,
10,10,10,10,10,10,10,10,
10,10,10,10,10,10,10,10,
10,10,10,10,10,10,10,10,
10,10,10,10,10,10,10,10,
10,10,10,10,10,10,10,10,
10,10,10,10,10,10,10,10,
10,10,10,10,10,10,10,10,
/* Block: 30 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,197,197,197,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 31 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,5,5,197,7,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,5,5,7,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,5,5,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,5,5,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 32 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,5,5,7,5,
5,5,5,5,5,5,7,7,
7,7,7,7,7,7,5,7,
7,5,5,5,5,5,5,5,
5,5,197,5,0,0,0,0,
0,0,0,0,0,197,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 33 */
0,0,0,0,0,0,0,0,
0,0,0,5,5,5,4,5,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 34 */
0,0,0,0,0,5,5,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,197,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 35 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
5,5,5,7,7,7,7,5,
5,7,7,7,0,0,0,0,
7,7,5,7,7,7,7,7,
7,197,197,197,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 36 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,197,
197,7,7,5,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,7,5,7,
5,5,5,5,5,5,5,0,
197,0,5,0,0,5,5,5,
5,5,5,5,5,7,7,7,
7,7,7,5,5,197,197,197,
197,197,197,197,197,0,0,197,
/* Block: 37 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
197,197,197,197,197,197,197,197,
197,197,197,197,197,197,5,197,
197,197,197,197,197,197,197,197,
197,197,197,197,197,197,197,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 38 */
5,5,5,5,7,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,197,5,5,5,
5,5,5,7,5,7,7,7,
7,7,5,7,7,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,197,197,197,197,197,
197,197,197,197,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 39 */
5,5,7,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,7,5,5,5,5,7,7,
5,5,7,197,5,5,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,197,7,
5,5,7,7,7,5,7,5,
5,5,7,7,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 40 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,7,7,7,7,
7,7,7,7,5,5,5,5,
5,5,5,5,7,7,5,197,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 41 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
197,197,197,0,197,197,197,197,
197,197,197,197,197,197,197,197,
197,7,197,197,197,197,197,197,
197,0,0,0,0,197,0,0,
0,0,0,0,197,0,0,7,
197,197,0,0,0,0,0,0,
/* Block: 42 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
197,197,197,197,197,197,197,197,
197,197,197,197,197,197,197,197,
197,197,197,197,197,197,197,197,
197,197,197,197,197,197,197,197,
197,197,197,197,197,197,197,197,
197,197,197,197,197,197,197,197,
197,197,197,197,197,197,197,197,
197,197,197,197,197,197,197,197,
/* Block: 43 */
0,0,0,0,0,0,0,0,
0,0,0,4,5,205,4,4,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
4,4,4,4,4,4,4,0,
0,0,0,0,0,0,0,0,
0,0,0,0,14,0,0,0,
0,0,0,0,0,0,0,0,
0,14,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 44 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
197,197,197,197,197,197,197,197,
197,197,197,197,197,5,5,5,
5,197,5,5,5,197,197,197,
197,197,197,197,197,197,197,197,
197,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 45 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,14,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,14,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 46 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,14,14,14,14,
14,14,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,14,14,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 47 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,14,14,0,0,0,0,
0,0,0,0,0,0,0,0,
14,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 48 */
0,0,0,0,0,0,0,0,
14,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,14,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,14,14,14,14,14,14,14,
14,14,14,14,0,0,0,0,
14,14,14,0,0,0,0,0,
/* Block: 49 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,14,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 50 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,14,14,0,0,0,0,
0,0,0,0,0,0,14,0,
0,0,0,0,0,0,0,0,
14,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,14,14,14,14,0,
/* Block: 51 */
14,14,14,14,14,14,0,14,
14,14,14,14,14,14,14,14,
14,14,14,0,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
/* Block: 52 */
14,14,14,14,14,14,0,0,
0,0,0,0,0,0,0,0,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
/* Block: 53 */
14,14,14,14,14,14,0,0,
14,14,14,14,14,14,14,14,
14,14,14,0,14,0,14,0,
0,0,0,0,0,14,0,0,
0,14,0,0,0,0,0,0,
14,0,0,0,0,0,0,0,
0,0,0,14,14,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,14,0,0,14,
0,0,0,0,14,0,14,0,
0,0,0,14,14,14,0,14,
0,0,0,0,0,0,0,0,
0,0,0,14,14,14,14,14,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 54 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,14,14,14,
0,0,0,0,0,0,0,0,
0,14,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
14,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,14,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 55 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,14,14,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 56 */
0,0,0,0,0,14,14,14,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,14,14,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
14,0,0,0,0,14,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 57 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,197,
197,197,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 58 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,197,
/* Block: 59 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
197,197,197,197,197,197,197,197,
197,197,197,197,197,197,197,197,
197,197,197,197,197,197,197,197,
197,197,197,197,197,197,197,197,
/* Block: 60 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,197,197,197,197,197,197,
14,0,0,0,0,0,0,0,
0,0,0,0,0,14,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 61 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,197,197,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 62 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,14,
0,14,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 63 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,197,
5,5,5,0,197,197,197,197,
197,197,197,197,197,197,0,0,
/* Block: 64 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,197,197,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
197,197,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 65 */
0,0,5,0,0,0,5,0,
0,0,0,5,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,7,7,5,5,7,
0,0,0,0,197,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 66 */
7,7,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,5,5,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
197,197,197,197,197,197,197,197,
197,197,197,197,197,197,197,197,
197,197,0,0,0,0,0,0,
0,0,0,0,0,0,0,5,
/* Block: 67 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,5,5,
5,5,5,197,197,197,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,5,
5,5,5,5,5,5,5,5,
5,5,7,7,0,0,0,0,
0,0,0,0,0,0,0,0,
8,8,8,8,8,8,8,8,
8,8,8,8,8,8,8,8,
8,8,8,8,8,8,8,8,
8,8,8,8,8,0,0,0,
/* Block: 68 */
5,5,5,7,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,197,7,7,5,5,
5,5,7,7,5,5,7,7,
7,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,5,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 69 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,5,5,5,5,5,5,7,
7,5,5,7,7,5,5,0,
0,0,0,0,0,0,0,0,
0,0,0,5,0,0,0,0,
0,0,0,0,5,7,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,5,0,0,0,
/* Block: 70 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
197,0,197,197,197,0,0,197,
197,0,0,0,0,0,197,197,
0,197,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,7,5,5,7,7,
0,0,0,0,0,7,197,0,
0,0,0,0,0,0,0,0,
/* Block: 71 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,7,7,5,7,7,
5,7,7,0,7,197,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 72 */
11,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,11,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
11,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,11,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
11,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
/* Block: 73 */
12,12,12,12,12,12,12,12,
12,12,12,12,11,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
11,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,11,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
11,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,11,12,12,12,
/* Block: 74 */
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
11,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,11,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
11,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,11,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
/* Block: 75 */
12,12,12,12,12,12,12,12,
11,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,11,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
11,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,11,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
11,12,12,12,12,12,12,12,
/* Block: 76 */
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,11,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
11,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,11,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
11,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
/* Block: 77 */
12,12,12,12,11,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
11,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,11,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
11,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,11,12,12,12,
12,12,12,12,12,12,12,12,
/* Block: 78 */
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
11,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,11,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
11,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,11,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
/* Block: 79 */
12,12,12,12,12,12,12,12,
11,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,12,12,12,12,
12,12,12,12,0,0,0,0,
0,0,0,0,0,0,0,0,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,9,
9,9,9,9,9,9,9,0,
0,0,0,10,10,10,10,10,
10,10,10,10,10,10,10,10,
10,10,10,10,10,10,10,10,
10,10,10,10,10,10,10,10,
10,10,10,10,10,10,10,10,
10,10,10,10,10,10,10,10,
10,10,10,10,0,0,0,0,
/* Block: 80 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,197,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 81 */
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
197,197,197,197,197,197,197,197,
197,197,197,197,197,197,197,197,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 82 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,4,
/* Block: 83 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,5,5,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
4,4,4,4,4,4,4,4,
4,4,4,4,0,0,0,0,
/* Block: 84 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,197,0,0,
/* Block: 85 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
197,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 86 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,197,197,
197,197,197,0,0,0,0,0,
/* Block: 87 */
0,5,5,5,0,5,5,0,
0,0,0,0,5,197,5,197,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
197,197,197,0,0,0,0,197,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 88 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,197,197,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 89 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,197,197,197,197,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 90 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,197,197,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,197,197,197,
/* Block: 91 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,197,197,
197,197,197,197,197,197,197,197,
197,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 92 */
0,0,197,197,197,197,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 93 */
7,5,7,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
197,0,0,5,5,0,0,0,
0,0,0,0,0,0,0,197,
/* Block: 94 */
5,5,7,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
7,7,7,5,5,5,5,7,
7,5,197,0,0,1,0,0,
0,0,5,0,0,0,0,0,
0,0,0,0,0,1,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 95 */
197,197,197,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,5,
5,5,5,5,7,5,5,5,
5,5,5,197,197,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,7,7,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,197,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 96 */
5,5,7,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,7,7,7,5,5,
5,5,5,5,5,5,5,7,
7,0,1,1,0,0,0,0,
0,5,197,5,5,0,7,5,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 97 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,7,7,7,5,
5,5,7,7,5,7,197,5,
0,0,0,0,0,0,5,0,
0,5,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 98 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,5,
7,7,7,5,5,5,5,5,
5,197,197,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 99 */
5,5,7,7,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,197,197,0,5,7,
5,7,7,7,7,0,0,7,
7,0,0,7,7,7,0,0,
0,0,0,0,0,0,0,5,
0,0,0,0,0,0,0,0,
0,0,7,7,0,0,197,197,
197,197,197,197,197,0,0,0,
197,197,197,197,197,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 100 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,7,7,7,
5,5,5,5,5,5,5,5,
7,7,5,5,5,7,197,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,197,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 101 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
5,7,7,5,5,5,5,5,
5,7,5,7,7,5,7,5,
5,7,5,197,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 102 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,5,
7,7,5,5,5,5,0,0,
7,7,7,7,5,5,7,5,
197,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,5,5,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 103 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
7,7,7,5,5,5,5,5,
5,5,5,7,7,5,7,5,
5,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 104 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,5,7,5,7,7,
5,5,5,5,5,5,7,197,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 105 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,5,5,5,
0,0,5,5,5,5,7,5,
5,5,5,197,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 106 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,7,7,7,5,
5,5,5,5,5,5,5,5,
7,5,197,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 107 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
5,7,7,7,7,7,0,7,
7,0,0,5,5,7,197,1,
7,1,7,197,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 108 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,7,7,7,5,5,5,5,
0,0,5,5,7,7,7,7,
5,0,0,0,7,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 109 */
0,5,5,5,5,5,5,5,
5,5,5,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,5,197,5,5,5,
5,7,1,5,5,5,5,0,
0,0,0,0,0,0,0,197,
0,0,0,0,0,0,0,0,
0,5,5,5,5,5,5,7,
7,5,5,5,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 110 */
0,0,0,0,1,1,1,1,
1,1,5,5,5,5,5,5,
5,5,5,5,5,5,5,7,
5,197,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 111 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,7,
5,5,5,5,5,5,5,0,
5,5,5,5,5,5,7,5,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 112 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
0,7,5,5,5,5,5,5,
5,7,5,5,7,5,5,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 113 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,5,5,5,5,5,5,0,
0,0,5,0,5,5,0,5,
5,5,197,5,197,197,1,5,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 114 */
0,0,0,0,0,0,0,0,
0,0,7,7,7,7,7,0,
5,5,0,7,7,5,7,197,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 115 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,5,5,7,7,0,
0,0,0,0,0,0,0,0,
/* Block: 116 */
5,5,1,7,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,7,7,5,5,
5,5,5,0,0,0,7,7,
5,7,197,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 117 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
5,0,0,0,0,0,0,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 118 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
197,197,197,197,197,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 119 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
197,197,197,197,197,197,197,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 120 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,5,
0,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,
/* Block: 121 */
7,7,7,7,7,7,7,7,
0,0,0,0,0,0,0,5,
5,5,5,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,5,0,0,0,
0,0,0,0,0,0,0,0,
7,7,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 122 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,5,197,0,
4,4,4,4,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 123 */
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,0,0,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 124 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,197,7,197,
197,197,0,0,0,7,197,197,
197,197,197,4,4,4,4,4,
4,4,4,197,197,197,197,197,
/* Block: 125 */
197,197,197,0,0,197,197,197,
197,197,197,197,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,197,197,197,197,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 126 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,197,197,197,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 127 */
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,0,
0,0,0,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,0,0,0,
0,0,0,0,0,5,0,0,
0,0,0,0,0,0,0,0,
/* Block: 128 */
0,0,0,0,5,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,5,5,5,5,5,
0,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 129 */
197,197,197,197,197,197,197,0,
197,197,197,197,197,197,197,197,
197,197,197,197,197,197,197,197,
197,0,0,197,197,197,197,197,
197,197,0,197,197,0,197,197,
197,197,197,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 130 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,197,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 131 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,197,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,197,197,197,197,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 132 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,197,197,197,197,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 133 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
197,197,197,197,197,197,197,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 134 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,197,197,197,197,
197,197,197,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 135 */
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
/* Block: 136 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,14,14,14,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,14,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,14,14,14,14,
14,14,0,0,0,0,0,0,
0,0,0,0,0,0,14,14,
/* Block: 137 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,14,0,
0,14,14,14,14,14,14,14,
14,14,14,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
/* Block: 138 */
0,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
0,0,0,0,0,0,0,0,
0,0,14,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,14,
0,0,14,14,14,14,14,14,
14,14,14,0,14,14,14,14,
0,0,0,0,0,0,0,0,
0,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
/* Block: 139 */
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,5,5,5,5,5,
/* Block: 140 */
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,0,0,
0,0,0,0,0,0,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
/* Block: 141 */
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 142 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,14,14,14,14,
14,14,14,14,14,14,14,14,
/* Block: 143 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
/* Block: 144 */
0,0,0,0,0,0,0,0,
0,0,0,0,14,14,14,14,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
14,14,14,14,14,14,14,14,
0,0,0,0,0,0,0,0,
0,0,14,14,14,14,14,14,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 145 */
0,0,0,0,0,0,0,0,
14,14,14,14,14,14,14,14,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
/* Block: 146 */
0,0,0,0,0,0,0,0,
0,0,0,0,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,0,14,14,14,14,
14,14,14,14,14,14,0,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
/* Block: 147 */
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,0,0,
/* Block: 148 */
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
/* Block: 149 */
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
/* Block: 150 */
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
/* Block: 151 */
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
5,5,5,5,5,5,5,5,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4};

UNI_ALGO_IMPL_NAMESPACE_END

// AMALGAMATION: uni_algo/impl/data/data_segment_word.h

// GENERATED. DO NOT EDIT.

// Unicode 15.1.0

UNI_ALGO_IMPL_NAMESPACE_BEGIN

uaix_const_data uaix_data_array(unsigned char, stage1_segment_word, 8704) = {
0,1,2,2,2,3,4,5,
2,6,7,8,9,10,11,12,
13,14,15,16,17,18,19,20,
21,22,23,24,25,26,27,28,
29,30,2,2,31,32,33,34,
35,2,2,2,36,37,38,39,
40,41,42,43,44,45,46,47,
48,49,2,50,2,2,51,52,
53,54,55,56,57,57,58,59,
57,60,57,61,62,63,64,65,
57,57,66,57,57,57,67,57,
2,68,69,70,71,57,57,57,
72,73,74,75,57,76,77,57,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,79,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
2,2,2,2,2,2,2,2,
2,80,2,2,81,82,83,84,
85,86,87,88,89,90,91,92,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,2,
2,2,2,2,2,2,2,93,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,78,78,94,95,96,97,
2,2,98,99,100,101,102,103,
104,105,106,107,57,108,109,110,
2,111,112,113,2,2,114,115,
116,117,118,119,120,121,122,123,
124,125,126,57,57,127,128,129,
130,131,132,133,134,135,136,57,
137,138,57,139,140,141,142,57,
143,144,145,146,147,148,57,57,
149,150,151,152,57,153,154,155,
2,2,2,2,2,2,2,156,
157,2,158,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,159,
2,2,2,2,2,2,2,2,
160,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
2,2,2,2,161,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
2,2,2,2,162,163,164,165,
57,57,57,57,166,57,167,168,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,169,
78,78,78,78,78,78,78,78,
78,170,171,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,172,
173,174,175,78,78,176,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
177,178,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,179,57,
57,57,180,181,182,57,57,57,
183,184,185,2,2,186,187,188,
57,57,57,57,189,190,57,57,
57,57,57,57,57,57,191,57,
192,193,194,57,57,195,57,57,
57,196,57,57,57,57,57,197,
2,198,199,57,57,57,57,57,
57,57,57,57,200,201,57,57,
202,202,203,204,205,202,202,206,
202,202,207,202,208,202,209,210,
211,212,213,202,202,202,57,214,
202,202,202,202,202,202,202,215,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,216,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,217,78,
218,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,219,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,220,
78,78,78,78,221,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
78,78,78,78,222,57,57,57,
57,57,57,57,57,57,57,57,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,223,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,78,
78,78,78,78,78,78,78,224,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
225,57,226,227,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57,
57,57,57,57,57,57,57,57};

uaix_const_data uaix_data_array(unsigned char, stage2_segment_word, 29184) = {
/* Block: 0 */
0,0,0,0,0,0,0,0,
0,0,2,3,3,1,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
13,0,8,0,0,0,0,7,
0,0,0,0,11,0,9,0,
14,14,14,14,14,14,14,14,
14,14,10,11,0,0,0,0,
0,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,0,0,0,0,12,
0,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,0,0,0,0,0,
/* Block: 1 */
0,0,0,0,0,3,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,128,15,0,0,6,128,0,
0,0,0,0,0,15,0,10,
0,0,15,0,0,0,0,0,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,0,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,0,
15,15,15,15,15,15,15,15,
/* Block: 2 */
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
/* Block: 3 */
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
0,0,0,0,0,0,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
/* Block: 4 */
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
15,15,15,15,15,0,15,15,
0,0,15,15,15,15,11,15,
/* Block: 5 */
0,0,0,0,0,0,15,10,
15,15,15,0,15,0,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,0,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,0,15,
15,15,15,15,15,15,15,15,
/* Block: 6 */
15,15,0,4,4,4,4,4,
4,4,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
/* Block: 7 */
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
0,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,0,
0,15,15,15,15,0,15,10,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
/* Block: 8 */
15,15,15,15,15,15,15,15,
15,11,15,0,0,0,0,0,
0,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,0,4,
0,4,4,0,4,4,0,4,
0,0,0,0,0,0,0,0,
16,16,16,16,16,16,16,16,
16,16,16,16,16,16,16,16,
16,16,16,16,16,16,16,16,
16,16,16,0,0,0,0,16,
16,16,16,15,10,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 9 */
14,14,14,14,14,14,0,0,
0,0,0,0,11,11,0,0,
4,4,4,4,4,4,4,4,
4,4,4,0,6,0,0,0,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
14,14,14,14,14,14,14,14,
14,14,0,14,11,0,15,15,
4,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
/* Block: 10 */
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,0,15,4,4,
4,4,4,4,4,14,0,4,
4,4,4,4,4,15,15,4,
4,0,4,4,4,4,15,15,
14,14,14,14,14,14,14,14,
14,14,15,15,15,0,0,15,
/* Block: 11 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,15,
15,4,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,0,0,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
/* Block: 12 */
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,4,4,
4,4,4,4,4,4,4,4,
4,15,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
14,14,14,14,14,14,14,14,
14,14,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,4,4,4,4,4,
4,4,4,4,15,15,0,0,
11,0,15,0,0,4,0,0,
/* Block: 13 */
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,4,4,
4,4,15,4,4,4,4,4,
4,4,4,4,15,4,4,4,
15,4,4,4,4,4,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,4,4,4,0,0,0,0,
15,15,15,15,15,15,15,15,
15,15,15,0,0,0,0,0,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
/* Block: 14 */
15,15,15,15,15,15,15,15,
0,15,15,15,15,15,15,0,
14,14,0,0,0,0,0,0,
4,4,4,4,4,4,4,4,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,14,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
/* Block: 15 */
4,4,4,4,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,4,4,4,15,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
15,4,4,4,4,4,4,4,
15,15,15,15,15,15,15,15,
15,15,4,4,0,0,14,14,
14,14,14,14,14,14,14,14,
0,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
/* Block: 16 */
15,4,4,4,0,15,15,15,
15,15,15,15,15,0,0,15,
15,0,0,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,0,15,15,15,15,15,15,
15,0,15,0,0,0,15,15,
15,15,0,0,4,15,4,4,
4,4,4,4,4,0,0,4,
4,0,0,4,4,4,15,0,
0,0,0,0,0,0,0,4,
0,0,0,0,15,15,0,15,
15,15,4,4,0,0,14,14,
14,14,14,14,14,14,14,14,
15,15,0,0,0,0,0,0,
0,0,0,0,15,0,4,0,
/* Block: 17 */
0,4,4,4,0,15,15,15,
15,15,15,0,0,0,0,15,
15,0,0,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,0,15,15,15,15,15,15,
15,0,15,15,0,15,15,0,
15,15,0,0,4,0,4,4,
4,4,4,0,0,0,0,4,
4,0,0,4,4,4,0,0,
0,4,0,0,0,0,0,0,
0,15,15,15,15,0,15,0,
0,0,0,0,0,0,14,14,
14,14,14,14,14,14,14,14,
4,4,15,15,15,4,0,0,
0,0,0,0,0,0,0,0,
/* Block: 18 */
0,4,4,4,0,15,15,15,
15,15,15,15,15,15,0,15,
15,15,0,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,0,15,15,15,15,15,15,
15,0,15,15,0,15,15,15,
15,15,0,0,4,15,4,4,
4,4,4,4,4,4,0,4,
4,4,0,4,4,4,0,0,
15,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
15,15,4,4,0,0,14,14,
14,14,14,14,14,14,14,14,
0,0,0,0,0,0,0,0,
0,15,4,4,4,4,4,4,
/* Block: 19 */
0,4,4,4,0,15,15,15,
15,15,15,15,15,0,0,15,
15,0,0,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,0,15,15,15,15,15,15,
15,0,15,15,0,15,15,15,
15,15,0,0,4,15,4,4,
4,4,4,4,4,0,0,4,
4,0,0,4,4,4,0,0,
0,0,0,0,0,4,4,4,
0,0,0,0,15,15,0,15,
15,15,4,4,0,0,14,14,
14,14,14,14,14,14,14,14,
0,15,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 20 */
0,0,4,15,0,15,15,15,
15,15,15,0,0,0,15,15,
15,0,15,15,15,15,0,0,
0,15,15,0,15,0,15,15,
0,0,0,15,15,0,0,0,
15,15,15,0,0,0,15,15,
15,15,15,15,15,15,15,15,
15,15,0,0,0,0,4,4,
4,4,4,0,0,0,4,4,
4,0,4,4,4,4,0,0,
15,0,0,0,0,0,0,4,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,14,14,
14,14,14,14,14,14,14,14,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 21 */
4,4,4,4,4,15,15,15,
15,15,15,15,15,0,15,15,
15,0,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,0,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,0,0,4,15,4,4,
4,4,4,4,4,0,4,4,
4,0,4,4,4,4,0,0,
0,0,0,0,0,4,4,0,
15,15,15,0,0,15,0,0,
15,15,4,4,0,0,14,14,
14,14,14,14,14,14,14,14,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 22 */
15,4,4,4,0,15,15,15,
15,15,15,15,15,0,15,15,
15,0,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,0,15,15,15,15,15,15,
15,15,15,15,0,15,15,15,
15,15,0,0,4,15,4,4,
4,4,4,4,4,0,4,4,
4,0,4,4,4,4,0,0,
0,0,0,0,0,4,4,0,
0,0,0,0,0,15,15,0,
15,15,4,4,0,0,14,14,
14,14,14,14,14,14,14,14,
0,15,15,4,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 23 */
4,4,4,4,15,15,15,15,
15,15,15,15,15,0,15,15,
15,0,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,4,4,15,4,4,
4,4,4,4,4,0,4,4,
4,0,4,4,4,4,15,0,
0,0,0,0,15,15,15,4,
0,0,0,0,0,0,0,15,
15,15,4,4,0,0,14,14,
14,14,14,14,14,14,14,14,
0,0,0,0,0,0,0,0,
0,0,15,15,15,15,15,15,
/* Block: 24 */
0,4,4,4,0,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,0,
0,0,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,0,15,15,15,15,15,
15,15,15,15,0,15,0,0,
15,15,15,15,15,15,15,0,
0,0,4,0,0,0,0,4,
4,4,4,4,4,0,4,0,
4,4,4,4,4,4,4,4,
0,0,0,0,0,0,14,14,
14,14,14,14,14,14,14,14,
0,0,4,4,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 25 */
0,17,17,17,17,17,17,17,
17,17,17,17,17,17,17,17,
17,17,17,17,17,17,17,17,
17,17,17,17,17,17,17,17,
17,17,17,17,17,17,17,17,
17,17,17,17,17,17,17,17,
17,4,17,17,4,4,4,4,
4,4,4,0,0,0,0,0,
17,17,17,17,17,17,17,4,
4,4,4,4,4,4,4,0,
14,14,14,14,14,14,14,14,
14,14,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 26 */
0,17,17,0,17,0,17,17,
17,17,17,0,17,17,17,17,
17,17,17,17,17,17,17,17,
17,17,17,17,17,17,17,17,
17,17,17,17,0,17,0,17,
17,17,17,17,17,17,17,17,
17,4,17,17,4,4,4,4,
4,4,4,4,4,17,0,0,
17,17,17,17,17,0,17,0,
4,4,4,4,4,4,4,0,
14,14,14,14,14,14,14,14,
14,14,0,0,17,17,17,17,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 27 */
15,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
4,4,0,0,0,0,0,0,
14,14,14,14,14,14,14,14,
14,14,0,0,0,0,0,0,
0,0,0,0,0,4,0,4,
0,4,0,0,0,0,4,4,
15,15,15,15,15,15,15,15,
0,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,0,0,0,
0,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
/* Block: 28 */
4,4,4,4,4,0,4,4,
15,15,15,15,15,4,4,4,
4,4,4,4,4,4,4,4,
0,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,0,0,0,
0,0,0,0,0,0,4,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 29 */
17,17,17,17,17,17,17,17,
17,17,17,17,17,17,17,17,
17,17,17,17,17,17,17,17,
17,17,17,17,17,17,17,17,
17,17,17,17,17,17,17,17,
17,17,17,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,17,
14,14,14,14,14,14,14,14,
14,14,0,0,0,0,0,0,
17,17,17,17,17,17,4,4,
4,4,17,17,17,17,4,4,
4,17,4,4,4,17,17,4,
4,4,4,4,4,4,17,17,
17,4,4,4,4,17,17,17,
17,17,17,17,17,17,17,17,
/* Block: 30 */
17,17,4,4,4,4,4,4,
4,4,4,4,4,4,17,4,
14,14,14,14,14,14,14,14,
14,14,4,4,4,4,0,0,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,0,15,
0,0,0,0,0,15,0,0,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,0,15,15,15,15,
/* Block: 31 */
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,0,15,15,15,15,0,0,
15,15,15,15,15,15,15,0,
15,0,15,15,15,15,0,0,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
/* Block: 32 */
15,15,15,15,15,15,15,15,
15,0,15,15,15,15,0,0,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,0,15,15,15,15,0,0,
15,15,15,15,15,15,15,0,
15,0,15,15,15,15,0,0,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,0,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
/* Block: 33 */
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,0,15,15,15,15,0,0,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,0,0,4,4,4,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 34 */
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,0,0,
15,15,15,15,15,15,0,0,
/* Block: 35 */
0,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
/* Block: 36 */
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,0,0,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
/* Block: 37 */
13,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,0,0,0,0,0,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,0,0,0,15,15,
15,15,15,15,15,15,15,15,
15,0,0,0,0,0,0,0,
/* Block: 38 */
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,4,4,4,4,0,0,
0,0,0,0,0,0,0,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,4,4,4,0,0,0,
0,0,0,0,0,0,0,0,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,4,4,0,0,0,0,
0,0,0,0,0,0,0,0,
15,15,15,15,15,15,15,15,
15,15,15,15,15,0,15,15,
15,0,4,4,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 39 */
17,17,17,17,17,17,17,17,
17,17,17,17,17,17,17,17,
17,17,17,17,17,17,17,17,
17,17,17,17,17,17,17,17,
17,17,17,17,17,17,17,17,
17,17,17,17,17,17,17,17,
17,17,17,17,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,0,0,0,17,
0,0,0,0,17,4,0,0,
14,14,14,14,14,14,14,14,
14,14,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 40 */
0,0,0,0,0,0,0,0,
0,0,0,4,4,4,6,4,
14,14,14,14,14,14,14,14,
14,14,0,0,0,0,0,0,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,0,0,0,0,0,0,0,
/* Block: 41 */
15,15,15,15,15,4,4,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,4,15,0,0,0,0,0,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,0,0,
0,0,0,0,0,0,0,0,
/* Block: 42 */
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,0,
4,4,4,4,4,4,4,4,
4,4,4,4,0,0,0,0,
4,4,4,4,4,4,4,4,
4,4,4,4,0,0,0,0,
0,0,0,0,0,0,14,14,
14,14,14,14,14,14,14,14,
17,17,17,17,17,17,17,17,
17,17,17,17,17,17,17,17,
17,17,17,17,17,17,17,17,
17,17,17,17,17,17,0,0,
17,17,17,17,17,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 43 */
17,17,17,17,17,17,17,17,
17,17,17,17,17,17,17,17,
17,17,17,17,17,17,17,17,
17,17,17,17,17,17,17,17,
17,17,17,17,17,17,17,17,
17,17,17,17,0,0,0,0,
17,17,17,17,17,17,17,17,
17,17,17,17,17,17,17,17,
17,17,17,17,17,17,17,17,
17,17,0,0,0,0,0,0,
14,14,14,14,14,14,14,14,
14,14,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 44 */
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,4,
4,4,4,4,0,0,0,0,
17,17,17,17,17,17,17,17,
17,17,17,17,17,17,17,17,
17,17,17,17,17,17,17,17,
17,17,17,17,17,17,17,17,
17,17,17,17,17,17,17,17,
17,17,17,17,17,17,17,17,
17,17,17,17,17,4,4,4,
4,4,4,4,4,4,4,0,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,0,0,4,
/* Block: 45 */
14,14,14,14,14,14,14,14,
14,14,0,0,0,0,0,0,
14,14,14,14,14,14,14,14,
14,14,0,0,0,0,0,0,
0,0,0,0,0,0,0,17,
0,0,0,0,0,0,0,0,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 46 */
4,4,4,4,4,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,15,15,15,
15,15,15,15,15,0,0,0,
14,14,14,14,14,14,14,14,
14,14,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,4,4,4,4,4,
4,4,4,4,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 47 */
4,4,4,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,4,4,4,4,4,4,4,
4,4,4,4,4,4,15,15,
14,14,14,14,14,14,14,14,
14,14,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 48 */
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
0,0,0,0,0,0,0,0,
14,14,14,14,14,14,14,14,
14,14,0,0,0,15,15,15,
14,14,14,14,14,14,14,14,
14,14,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,0,0,
/* Block: 49 */
15,15,15,15,15,15,15,15,
15,0,0,0,0,0,0,0,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,0,0,15,15,15,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
4,4,4,0,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,15,15,15,15,4,15,15,
15,15,15,15,4,15,15,4,
4,4,15,0,0,0,0,0,
/* Block: 50 */
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
/* Block: 51 */
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,0,0,
15,15,15,15,15,15,0,0,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,0,0,
15,15,15,15,15,15,0,0,
15,15,15,15,15,15,15,15,
0,15,0,15,0,15,0,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,0,0,
/* Block: 52 */
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,0,15,15,
15,15,15,15,15,0,15,0,
0,0,15,15,15,0,15,15,
15,15,15,15,15,0,0,0,
15,15,15,15,0,0,15,15,
15,15,15,15,0,0,0,0,
15,15,15,15,15,15,15,15,
15,15,15,15,15,0,0,0,
0,0,15,15,15,0,15,15,
15,15,15,15,15,0,0,0,
/* Block: 53 */
13,13,13,13,13,13,13,0,
13,13,13,0,4,5,6,6,
0,0,0,0,0,0,0,0,
9,9,0,0,0,0,0,0,
0,0,0,0,9,0,0,10,
3,3,6,6,6,6,6,12,
0,0,0,0,0,0,0,0,
0,0,0,0,128,0,0,12,
12,0,0,0,11,0,0,0,
0,128,0,0,0,0,0,0,
0,0,0,0,12,0,0,0,
0,0,0,0,0,0,0,13,
6,6,6,6,6,0,6,6,
6,6,6,6,6,6,6,6,
0,15,0,0,0,0,0,0,
0,0,0,0,0,0,0,15,
/* Block: 54 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
15,15,15,15,15,15,15,15,
15,15,15,15,15,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 55 */
0,0,15,0,0,0,0,15,
0,0,15,15,15,15,15,15,
15,15,15,15,0,15,0,0,
0,15,15,15,15,15,0,0,
0,0,128,0,15,0,15,0,
15,0,15,15,15,15,0,15,
15,15,15,15,15,15,15,15,
15,143,0,0,15,15,15,15,
0,0,0,0,0,15,15,15,
15,15,0,0,0,0,15,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
/* Block: 56 */
15,15,15,15,15,15,15,15,
15,0,0,0,0,0,0,0,
0,0,0,0,128,128,128,128,
128,128,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,128,128,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 57 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 58 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,128,128,0,0,0,0,
0,0,0,0,0,0,0,0,
128,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 59 */
0,0,0,0,0,0,0,0,
128,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,128,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,128,128,128,128,128,128,128,
128,128,128,128,0,0,0,0,
128,128,128,0,0,0,0,0,
/* Block: 60 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,15,15,
15,15,15,15,15,15,15,15,
15,15,143,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 61 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,128,128,0,0,0,0,
0,0,0,0,0,0,128,0,
0,0,0,0,0,0,0,0,
128,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,128,128,128,128,0,
/* Block: 62 */
128,128,128,128,128,128,0,128,
128,128,128,128,128,128,128,128,
128,128,128,0,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
/* Block: 63 */
128,128,128,128,128,128,0,0,
0,0,0,0,0,0,0,0,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
/* Block: 64 */
128,128,128,128,128,128,0,0,
128,128,128,128,128,128,128,128,
128,128,128,0,128,0,128,0,
0,0,0,0,0,128,0,0,
0,128,0,0,0,0,0,0,
128,0,0,0,0,0,0,0,
0,0,0,128,128,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,128,0,0,128,
0,0,0,0,128,0,128,0,
0,0,0,128,128,128,0,128,
0,0,0,0,0,0,0,0,
0,0,0,128,128,128,128,128,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 65 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,128,128,128,
0,0,0,0,0,0,0,0,
0,128,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
128,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,128,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 66 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,128,128,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 67 */
0,0,0,0,0,128,128,128,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,128,128,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
128,0,0,0,0,128,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 68 */
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,0,0,0,
0,0,0,15,15,15,15,4,
4,4,15,15,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 69 */
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,0,15,
0,0,0,0,0,15,0,0,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
0,0,0,0,0,0,0,15,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,4,
/* Block: 70 */
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,0,
0,0,0,0,0,0,0,0,
15,15,15,15,15,15,15,0,
15,15,15,15,15,15,15,0,
15,15,15,15,15,15,15,0,
15,15,15,15,15,15,15,0,
15,15,15,15,15,15,15,0,
15,15,15,15,15,15,15,0,
15,15,15,15,15,15,15,0,
15,15,15,15,15,15,15,0,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
/* Block: 71 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,15,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 72 */
13,0,0,0,0,15,20,20,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,20,20,20,20,20,20,20,
20,20,4,4,4,4,4,4,
128,18,18,18,18,18,0,0,
20,20,20,15,15,128,0,0,
0,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,
/* Block: 73 */
19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,0,
0,4,4,18,18,19,19,19,
18,18,18,18,18,18,18,18,
18,18,18,18,18,18,18,18,
18,18,18,18,18,18,18,18,
18,18,18,18,18,18,18,18,
18,18,18,18,18,18,18,18,
18,18,18,18,18,18,18,18,
18,18,18,18,18,18,18,18,
18,18,18,18,18,18,18,18,
18,18,18,18,18,18,18,18,
18,18,18,18,18,18,18,18,
18,18,18,18,18,18,18,18,
18,18,18,0,18,18,18,18,
/* Block: 74 */
0,0,0,0,0,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
0,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
/* Block: 75 */
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
18,18,18,18,18,18,18,18,
18,18,18,18,18,18,18,18,
/* Block: 76 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,128,
0,128,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
18,18,18,18,18,18,18,18,
18,18,18,18,18,18,18,18,
18,18,18,18,18,18,18,18,
18,18,18,18,18,18,18,18,
18,18,18,18,18,18,18,18,
18,18,18,18,18,18,18,0,
/* Block: 77 */
18,18,18,18,18,18,18,18,
18,18,18,18,18,18,18,18,
18,18,18,18,18,18,18,18,
18,18,18,18,18,18,18,18,
18,18,18,18,18,18,18,18,
18,18,18,18,18,18,18,18,
18,18,18,18,18,18,18,18,
18,18,18,18,18,18,18,18,
18,18,18,18,18,18,18,18,
18,18,18,18,18,18,18,18,
18,18,18,18,18,18,18,18,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 78 */
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
/* Block: 79 */
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 80 */
15,15,15,15,15,15,15,15,
15,15,15,15,15,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,0,0,
/* Block: 81 */
15,15,15,15,15,15,15,15,
15,15,15,15,15,0,0,0,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
14,14,14,14,14,14,14,14,
14,14,15,15,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,4,
4,4,4,0,4,4,4,4,
4,4,4,4,4,4,0,15,
/* Block: 82 */
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,4,4,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
4,4,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 83 */
0,0,0,0,0,0,0,0,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
/* Block: 84 */
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,0,0,0,0,0,
15,15,0,15,0,15,15,15,
15,15,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
/* Block: 85 */
15,15,4,15,15,15,4,15,
15,15,15,4,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,4,4,4,4,4,
0,0,0,0,4,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 86 */
4,4,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,0,0,
0,0,0,0,0,0,0,0,
14,14,14,14,14,14,14,14,
14,14,0,0,0,0,0,0,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,15,15,15,15,15,15,
0,0,0,15,0,15,15,4,
/* Block: 87 */
14,14,14,14,14,14,14,14,
14,14,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,4,4,
4,4,4,4,4,4,0,0,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,4,
4,4,4,4,4,4,4,4,
4,4,4,4,0,0,0,0,
0,0,0,0,0,0,0,0,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,0,0,0,
/* Block: 88 */
4,4,4,4,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,15,
14,14,14,14,14,14,14,14,
14,14,0,0,0,0,0,0,
17,17,17,17,17,4,17,17,
17,17,17,17,17,17,17,17,
14,14,14,14,14,14,14,14,
14,14,17,17,17,17,17,0,
/* Block: 89 */
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,0,
0,0,0,0,0,0,0,0,
15,15,15,4,15,15,15,15,
15,15,15,15,4,4,0,0,
14,14,14,14,14,14,14,14,
14,14,0,0,0,0,0,0,
17,17,17,17,17,17,17,17,
17,17,17,17,17,17,17,17,
17,17,17,17,17,17,17,0,
0,0,17,4,4,4,17,17,
/* Block: 90 */
17,17,17,17,17,17,17,17,
17,17,17,17,17,17,17,17,
17,17,17,17,17,17,17,17,
17,17,17,17,17,17,17,17,
17,17,17,17,17,17,17,17,
17,17,17,17,17,17,17,17,
4,17,4,4,4,17,17,4,
4,17,17,17,17,17,4,4,
17,4,17,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,17,17,17,0,0,
15,15,15,15,15,15,15,15,
15,15,15,4,4,4,4,4,
0,0,15,15,15,4,4,0,
0,0,0,0,0,0,0,0,
/* Block: 91 */
0,15,15,15,15,15,15,0,
0,15,15,15,15,15,15,0,
0,15,15,15,15,15,15,0,
0,0,0,0,0,0,0,0,
15,15,15,15,15,15,15,0,
15,15,15,15,15,15,15,0,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,0,0,0,0,0,0,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
/* Block: 92 */
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,4,4,4,4,4,
4,4,4,0,4,4,0,0,
14,14,14,14,14,14,14,14,
14,14,0,0,0,0,0,0,
/* Block: 93 */
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,0,0,0,0,
0,0,0,0,0,0,0,0,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,0,
0,0,0,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,0,0,0,0,
/* Block: 94 */
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,0,0,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
/* Block: 95 */
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 96 */
15,15,15,15,15,15,15,0,
0,0,0,0,0,0,0,0,
0,0,0,15,15,15,15,15,
0,0,0,0,0,16,4,16,
16,16,16,16,16,16,16,16,
16,0,16,16,16,16,16,16,
16,16,16,16,16,16,16,0,
16,16,16,16,16,0,16,0,
16,16,0,16,16,0,16,16,
16,16,16,16,16,16,16,16,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
/* Block: 97 */
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
/* Block: 98 */
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
/* Block: 99 */
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
0,0,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
15,15,15,15,15,15,15,15,
15,15,15,15,0,0,0,0,
/* Block: 100 */
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
11,0,0,10,11,0,0,0,
0,0,0,0,0,0,0,0,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
0,0,0,12,12,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,12,12,12,
11,0,9,0,11,10,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
15,15,15,15,15,0,15,15,
15,15,15,15,15,15,15,15,
/* Block: 101 */
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,0,0,6,
/* Block: 102 */
0,0,0,0,0,0,0,9,
0,0,0,0,11,0,9,0,
14,14,14,14,14,14,14,14,
14,14,10,11,0,0,0,0,
0,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,0,0,0,0,12,
0,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,0,0,0,0,0,
0,0,0,0,0,0,18,18,
18,18,18,18,18,18,18,18,
18,18,18,18,18,18,18,18,
18,18,18,18,18,18,18,18,
/* Block: 103 */
18,18,18,18,18,18,18,18,
18,18,18,18,18,18,18,18,
18,18,18,18,18,18,18,18,
18,18,18,18,18,18,4,4,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,0,
0,0,15,15,15,15,15,15,
0,0,15,15,15,15,15,15,
0,0,15,15,15,15,15,15,
0,0,15,15,15,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,6,6,6,0,0,0,0,
/* Block: 104 */
15,15,15,15,15,15,15,15,
15,15,15,15,0,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,0,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,0,15,15,0,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,0,0,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 105 */
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,0,0,0,0,0,
/* Block: 106 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 107 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,4,0,0,
/* Block: 108 */
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,0,0,0,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
4,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 109 */
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
0,0,0,0,0,0,0,0,
0,0,0,0,0,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,0,0,0,0,0,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,4,4,
4,4,4,0,0,0,0,0,
/* Block: 110 */
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,0,0,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,0,0,0,0,
15,15,15,15,15,15,15,15,
0,15,15,15,15,15,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 111 */
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,0,0,
14,14,14,14,14,14,14,14,
14,14,0,0,0,0,0,0,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,0,0,0,0,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,0,0,0,0,
/* Block: 112 */
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
0,0,0,0,0,0,0,0,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,0,0,0,0,
0,0,0,0,0,0,0,0,
15,15,15,15,15,15,15,15,
15,15,15,0,15,15,15,15,
/* Block: 113 */
15,15,15,15,15,15,15,15,
15,15,15,0,15,15,15,15,
15,15,15,0,15,15,0,15,
15,15,15,15,15,15,15,15,
15,15,0,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,0,15,15,15,15,15,
15,15,0,15,15,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 114 */
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,0,
0,0,0,0,0,0,0,0,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,0,0,
0,0,0,0,0,0,0,0,
15,15,15,15,15,15,15,15,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 115 */
15,15,15,15,15,15,0,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,0,15,15,15,15,15,15,
15,15,15,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 116 */
15,15,15,15,15,15,0,0,
15,0,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,0,15,
15,0,0,0,15,0,0,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,0,0,
0,0,0,0,0,0,0,0,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,0,
0,0,0,0,0,0,0,0,
/* Block: 117 */
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,0,15,15,0,0,
0,0,0,0,0,0,0,0,
/* Block: 118 */
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,0,0,
0,0,0,0,0,0,0,0,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 119 */
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
0,0,0,0,0,0,15,15,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 120 */
15,4,4,4,0,4,4,0,
0,0,0,0,4,4,4,4,
15,15,15,15,0,15,15,15,
0,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,0,0,
4,4,4,0,0,0,0,4,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,0,0,0,
/* Block: 121 */
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
15,15,15,15,15,15,15,15,
0,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,4,4,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 122 */
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,0,0,
0,0,0,0,0,0,0,0,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,0,0,
0,0,0,0,0,0,0,0,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 123 */
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 124 */
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 125 */
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,0,0,0,0,0,
0,0,0,0,0,0,0,0,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 126 */
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,4,4,4,4,
0,0,0,0,0,0,0,0,
14,14,14,14,14,14,14,14,
14,14,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 127 */
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,0,4,4,0,0,0,
15,15,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,4,4,4,
/* Block: 128 */
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,0,0,0,
0,0,0,0,0,0,0,15,
0,0,0,0,0,0,0,0,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,4,4,
4,4,4,4,4,4,4,4,
4,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
/* Block: 129 */
15,15,4,4,4,4,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,0,
0,0,0,0,0,0,0,0,
/* Block: 130 */
4,4,4,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,14,14,
14,14,14,14,14,14,14,14,
4,15,15,4,4,15,0,0,
0,0,0,0,0,0,0,4,
/* Block: 131 */
4,4,4,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
4,4,4,4,4,4,4,4,
4,4,4,0,0,14,0,0,
0,0,4,0,0,0,0,0,
0,0,0,0,0,14,0,0,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,0,0,0,0,0,0,0,
14,14,14,14,14,14,14,14,
14,14,0,0,0,0,0,0,
/* Block: 132 */
4,4,4,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,0,14,14,
14,14,14,14,14,14,14,14,
0,0,0,0,15,4,4,15,
0,0,0,0,0,0,0,0,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,4,0,0,15,0,
0,0,0,0,0,0,0,0,
/* Block: 133 */
4,4,4,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,15,15,15,15,0,0,0,
0,4,4,4,4,0,4,4,
14,14,14,14,14,14,14,14,
14,14,15,0,15,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 134 */
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,0,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,4,4,4,4,
4,4,4,4,4,4,4,4,
0,0,0,0,0,0,4,15,
15,4,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 135 */
15,15,15,15,15,15,15,0,
15,0,15,15,15,15,0,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,0,15,
15,15,15,15,15,15,15,15,
15,0,0,0,0,0,0,0,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,4,
4,4,4,4,4,4,4,4,
4,4,4,0,0,0,0,0,
14,14,14,14,14,14,14,14,
14,14,0,0,0,0,0,0,
/* Block: 136 */
4,4,4,4,0,15,15,15,
15,15,15,15,15,0,0,15,
15,0,0,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,0,15,15,15,15,15,15,
15,0,15,15,0,15,15,15,
15,15,0,4,4,15,4,4,
4,4,4,4,4,0,0,4,
4,0,0,4,4,4,0,0,
15,0,0,0,0,0,0,4,
0,0,0,0,0,15,15,15,
15,15,4,4,0,0,4,4,
4,4,4,4,4,0,0,0,
4,4,4,4,4,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 137 */
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,15,
15,15,15,0,0,0,0,0,
14,14,14,14,14,14,14,14,
14,14,0,0,0,0,4,15,
15,15,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 138 */
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,15,15,0,15,
0,0,0,0,0,0,0,0,
14,14,14,14,14,14,14,14,
14,14,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 139 */
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,4,
4,4,4,4,4,4,0,0,
4,4,4,4,4,4,4,4,
4,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
15,15,15,15,4,4,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 140 */
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,0,0,0,15,0,0,0,
0,0,0,0,0,0,0,0,
14,14,14,14,14,14,14,14,
14,14,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 141 */
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,4,4,4,4,4,
4,4,4,4,4,4,4,4,
15,0,0,0,0,0,0,0,
14,14,14,14,14,14,14,14,
14,14,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 142 */
17,17,17,17,17,17,17,17,
17,17,17,17,17,17,17,17,
17,17,17,17,17,17,17,17,
17,17,17,0,0,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,0,0,0,0,
14,14,14,14,14,14,14,14,
14,14,0,0,0,0,0,0,
17,17,17,17,17,17,17,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 143 */
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 144 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
14,14,14,14,14,14,14,14,
14,14,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,15,
/* Block: 145 */
15,15,15,15,15,15,15,0,
0,15,0,0,15,15,15,15,
15,15,15,15,0,15,15,0,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
4,4,4,4,4,4,0,4,
4,0,0,4,4,4,4,15,
4,15,4,4,0,0,0,0,
0,0,0,0,0,0,0,0,
14,14,14,14,14,14,14,14,
14,14,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 146 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
15,15,15,15,15,15,15,15,
0,0,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,4,4,4,4,4,4,4,
0,0,4,4,4,4,4,4,
4,15,0,15,4,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 147 */
15,4,4,4,4,4,4,4,
4,4,4,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,4,4,4,4,4,
4,4,15,4,4,4,4,0,
0,0,0,0,0,0,0,4,
0,0,0,0,0,0,0,0,
15,4,4,4,4,4,4,4,
4,4,4,4,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
/* Block: 148 */
15,15,15,15,15,15,15,15,
15,15,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,0,0,0,15,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,0,0,0,0,0,0,0,
/* Block: 149 */
15,15,15,15,15,15,15,15,
15,0,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,4,
4,4,4,4,4,4,4,0,
4,4,4,4,4,4,4,4,
15,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
14,14,14,14,14,14,14,14,
14,14,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
/* Block: 150 */
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
0,0,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
0,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 151 */
15,15,15,15,15,15,15,0,
15,15,0,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,4,4,4,4,4,4,0,
0,0,4,0,4,4,0,4,
4,4,4,4,4,4,15,4,
0,0,0,0,0,0,0,0,
14,14,14,14,14,14,14,14,
14,14,0,0,0,0,0,0,
15,15,15,15,15,15,0,15,
15,0,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
/* Block: 152 */
15,15,15,15,15,15,15,15,
15,15,4,4,4,4,4,0,
4,4,0,4,4,4,4,4,
15,0,0,0,0,0,0,0,
14,14,14,14,14,14,14,14,
14,14,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 153 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,4,4,4,4,0,
0,0,0,0,0,0,0,0,
/* Block: 154 */
4,4,15,4,15,15,15,15,
15,15,15,15,15,15,15,15,
15,0,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,4,4,4,4,
4,4,4,0,0,0,4,4,
4,4,4,0,0,0,0,0,
0,0,0,0,0,0,0,0,
14,14,14,14,14,14,14,14,
14,14,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 155 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
15,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 156 */
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 157 */
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 158 */
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 159 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 160 */
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
6,6,6,6,6,6,6,6,
6,6,6,6,6,6,6,6,
4,15,15,15,15,15,15,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 161 */
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 162 */
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,0,0,0,0,0,0,0,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,0,
14,14,14,14,14,14,14,14,
14,14,0,0,0,0,0,0,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
/* Block: 163 */
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,0,
14,14,14,14,14,14,14,14,
14,14,0,0,0,0,0,0,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,0,0,
4,4,4,4,4,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 164 */
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
4,4,4,4,4,4,4,0,
0,0,0,0,0,0,0,0,
15,15,15,15,0,0,0,0,
0,0,0,0,0,0,0,0,
14,14,14,14,14,14,14,14,
14,14,0,0,0,0,0,0,
0,0,0,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
0,0,0,0,0,15,15,15,
/* Block: 165 */
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 166 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
/* Block: 167 */
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,0,0,0,0,4,
15,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
/* Block: 168 */
4,4,4,4,4,4,4,4,
0,0,0,0,0,0,0,4,
4,4,4,15,15,15,15,15,
15,15,15,15,15,15,15,15,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
15,15,0,15,4,0,0,0,
0,0,0,0,0,0,0,0,
4,4,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 169 */
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
0,0,0,0,0,0,0,0,
/* Block: 170 */
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 171 */
20,20,20,20,20,20,20,20,
20,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 172 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
18,18,18,18,0,18,18,18,
18,18,18,18,0,18,18,0,
/* Block: 173 */
18,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,
/* Block: 174 */
19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,
/* Block: 175 */
19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,
19,19,19,19,19,19,19,19,
18,18,18,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,19,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
19,19,19,0,0,18,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,18,18,18,18,
0,0,0,0,0,0,0,0,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
/* Block: 176 */
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,0,0,0,0,
/* Block: 177 */
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,0,0,0,0,0,
15,15,15,15,15,15,15,15,
15,15,15,15,15,0,0,0,
/* Block: 178 */
15,15,15,15,15,15,15,15,
15,0,0,0,0,0,0,0,
15,15,15,15,15,15,15,15,
15,15,0,0,0,4,4,0,
6,6,6,6,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 179 */
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,0,0,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 180 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,4,4,4,
4,4,0,0,0,4,4,4,
4,4,4,6,6,6,6,6,
6,6,6,4,4,4,4,4,
/* Block: 181 */
4,4,4,0,0,4,4,4,
4,4,4,4,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,4,4,4,4,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 182 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,4,4,4,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 183 */
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,0,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
/* Block: 184 */
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,0,15,15,
0,0,15,0,0,15,15,0,
0,15,15,15,15,0,15,15,
15,15,15,15,15,15,15,15,
15,15,0,15,0,15,15,15,
15,15,15,15,0,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
/* Block: 185 */
15,15,15,15,15,15,0,15,
15,15,15,0,0,15,15,15,
15,15,15,15,15,0,15,15,
15,15,15,15,15,0,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,0,15,15,15,15,0,
15,15,15,15,15,0,15,0,
0,0,15,15,15,15,15,15,
15,0,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
/* Block: 186 */
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,0,0,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,0,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,0,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,0,15,15,15,15,
/* Block: 187 */
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,0,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,0,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,0,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,0,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
/* Block: 188 */
15,15,15,15,15,15,15,15,
15,0,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,0,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,0,15,15,15,15,
15,15,15,15,0,0,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
14,14,14,14,14,14,14,14,
/* Block: 189 */
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,0,
0,0,0,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,0,0,0,
0,0,0,0,0,4,0,0,
0,0,0,0,0,0,0,0,
/* Block: 190 */
0,0,0,0,4,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,4,4,4,4,4,
0,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 191 */
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,0,
0,0,0,0,0,15,15,15,
15,15,15,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 192 */
4,4,4,4,4,4,4,0,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,0,0,4,4,4,4,4,
4,4,0,4,4,0,4,4,
4,4,4,0,0,0,0,0,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 193 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,4,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 194 */
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,0,0,0,
4,4,4,4,4,4,4,15,
15,15,15,15,15,15,0,0,
14,14,14,14,14,14,14,14,
14,14,0,0,0,0,15,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 195 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,4,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,4,4,4,4,
14,14,14,14,14,14,14,14,
14,14,0,0,0,0,0,0,
/* Block: 196 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,4,4,4,4,
14,14,14,14,14,14,14,14,
14,14,0,0,0,0,0,0,
/* Block: 197 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
15,15,15,15,15,15,15,0,
15,15,15,15,0,15,15,0,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,0,
/* Block: 198 */
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,0,0,0,
0,0,0,0,0,0,0,0,
4,4,4,4,4,4,4,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 199 */
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,4,4,4,4,
4,4,4,15,0,0,0,0,
14,14,14,14,14,14,14,14,
14,14,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 200 */
15,15,15,15,0,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
0,15,15,0,15,0,0,15,
0,15,15,15,15,15,15,15,
15,15,15,0,15,15,15,15,
0,15,0,15,0,0,0,0,
0,0,15,0,0,0,0,15,
0,15,0,15,0,15,15,15,
0,15,15,0,15,0,0,15,
0,15,0,15,0,15,0,15,
0,15,15,0,15,0,0,15,
15,15,15,0,15,15,15,15,
15,15,15,0,15,15,15,15,
0,15,15,15,15,0,15,0,
/* Block: 201 */
15,15,15,15,15,15,15,15,
15,15,0,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,0,0,0,0,
0,15,15,15,0,15,15,15,
15,15,0,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 202 */
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
/* Block: 203 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,128,128,128,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,128,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,0,0,0,0,0,0,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,15,15,15,15,15,15,
15,15,0,0,128,128,128,128,
143,143,15,15,15,15,15,15,
15,15,15,15,15,15,143,143,
/* Block: 204 */
15,15,15,15,15,15,15,15,
15,15,0,0,0,0,128,0,
0,128,128,128,128,128,128,128,
128,128,128,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,21,21,
21,21,21,21,21,21,21,21,
21,21,21,21,21,21,21,21,
21,21,21,21,21,21,21,21,
/* Block: 205 */
19,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
0,0,0,0,0,0,0,0,
0,0,128,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,128,
0,0,128,128,128,128,128,128,
128,128,128,0,128,128,128,128,
0,0,0,0,0,0,0,0,
0,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
/* Block: 206 */
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,4,4,4,4,4,
/* Block: 207 */
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,0,0,
0,0,0,0,0,0,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
/* Block: 208 */
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 209 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,128,128,128,128,
128,128,128,128,128,128,128,128,
/* Block: 210 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
/* Block: 211 */
0,0,0,0,0,0,0,0,
0,0,0,0,128,128,128,128,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
128,128,128,128,128,128,128,128,
0,0,0,0,0,0,0,0,
0,0,128,128,128,128,128,128,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 212 */
0,0,0,0,0,0,0,0,
128,128,128,128,128,128,128,128,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
/* Block: 213 */
0,0,0,0,0,0,0,0,
0,0,0,0,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,0,128,128,128,128,
128,128,128,128,128,128,0,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
/* Block: 214 */
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
14,14,14,14,14,14,14,14,
14,14,0,0,0,0,0,0,
/* Block: 215 */
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,128,128,
128,128,128,128,128,128,0,0,
/* Block: 216 */
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 217 */
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,0,0,0,0,0,0,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
/* Block: 218 */
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,0,0,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
/* Block: 219 */
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
/* Block: 220 */
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
/* Block: 221 */
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 222 */
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 223 */
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,0,0,0,0,0,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
/* Block: 224 */
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
20,20,20,20,20,20,20,20,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
/* Block: 225 */
0,6,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
/* Block: 226 */
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
/* Block: 227 */
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
4,4,4,4,4,4,4,4,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0};

UNI_ALGO_IMPL_NAMESPACE_END

// AMALGAMATION: uni_algo/impl/internal_stages.h


UNI_ALGO_IMPL_NAMESPACE_BEGIN

// This is the only function that directly access stage1 and stage2 tables.
// Note that some data can use stage3 table then stage2 result is index in stage3.
#ifdef __cplusplus
template<typename T1, typename T2>
uaix_always_inline_tmpl
uaix_static type_codept stages(type_codept c, const T1& stage1, const T2& stage2)
{
    // If c > 0x10FFFF the behaviour is undefined
    // For stage1/2_special_* tables if c > 0xFFFF the behaviour is undefined

#ifdef UNI_ALGO_TEST_ASSERT
    uaix_assert(c <= 0x10FFFF);
#endif

    return stage2[(stage1[c >> 7] << 7) + (c & 127)];
    // The same as: stage2[stage1[c / 128] * 128 + c % 128]
}
#else
// This is the only complex macro that is used in this library and only when compiled in C mode
// https://gcc.gnu.org/onlinedocs/cpp/Duplication-of-Side-Effects.html#Duplication-of-Side-Effects
#define stages(c, stage1, stage2) (stage2[(size_t)(stage1[(c) >> 7] << 7) + ((c) & 127)]) /* UNSAFE */
// REMINDER:
//#define stages(c, stage1, stage2) /*__extension__*/({ __typeof__(c) c_ = (c); (stage2[(size_t)(stage1[c_ >> 7] << 7) + (c_ & 127)]); })
#endif

UNI_ALGO_IMPL_NAMESPACE_END


// AMALGAMATION: uni_algo/impl/impl_iter.h


//!#include "internal_defines.h"

UNI_ALGO_IMPL_NAMESPACE_BEGIN

uaix_const type_codept iter_replacement = 0xFFFD; // REPLACEMENT CHARACTER (U+FFFD)
uaix_const type_codept iter_error = 0xFFFFFFFF; // Any number outside Unicode range is fine

#ifdef __cplusplus
template<typename it_in_utf8, typename it_end_utf8>
#endif
uaix_always_inline_tmpl
uaix_static it_in_utf8 iter_utf8(it_in_utf8 first, it_end_utf8 last, type_codept* const codepoint, type_codept error)
{
    // If first >= last the behaviour is undefined
    // C++ Note: works with iterators: input, forward, bidirectional, random access, contiguous

    // See impl_utf8to16 in impl_conv.h for details

    it_in_utf8 s = first;

    type_codept c = (*s & 0xFF), c2 = 0, c3 = 0, c4 = 0; // c2, c3, c4 tag_can_be_uninitialized

    // NOLINTBEGIN(bugprone-assignment-in-if-condition)

    if (uaix_likely(c <= 0x7F)) // Fast route for ASCII
    {
        *codepoint = c;
        return ++s;
    }
    else if (c >= 0xC2 && c <= 0xDF)
    {
        if (++s != last && ((c2 = (*s & 0xFF)) >= 0x80 && c2 <= 0xBF))
        {
            c = ((c & 0x1F) << 6) + (c2 & 0x3F);
            *codepoint = c;
            return ++s;
        }
    }
    else if (c >= 0xE1 && c <= 0xEC)
    { // NOLINT(bugprone-branch-clone)
        if (++s != last && ((c2 = (*s & 0xFF)) >= 0x80 && c2 <= 0xBF) &&
            ++s != last && ((c3 = (*s & 0xFF)) >= 0x80 && c3 <= 0xBF))
        {
            c = ((c & 0x0F) << 12) + ((c2 & 0x3F) << 6) + (c3 & 0x3F);
            *codepoint = c;
            return ++s;
        }
    }
    else if (c >= 0xEE && c <= 0xEF)
    { // NOLINT(bugprone-branch-clone)
        if (++s != last && ((c2 = (*s & 0xFF)) >= 0x80 && c2 <= 0xBF) &&
            ++s != last && ((c3 = (*s & 0xFF)) >= 0x80 && c3 <= 0xBF))
        {
            c = ((c & 0x0F) << 12) + ((c2 & 0x3F) << 6) + (c3 & 0x3F);
            *codepoint = c;
            return ++s;
        }
    }
    else if (uaix_likely(c == 0xE0))
    {
        if (++s != last && ((c2 = (*s & 0xFF)) >= 0xA0 && c2 <= 0xBF) &&
            ++s != last && ((c3 = (*s & 0xFF)) >= 0x80 && c3 <= 0xBF))
        {
            c = ((c & 0x0F) << 12) + ((c2 & 0x3F) << 6) + (c3 & 0x3F);
            *codepoint = c;
            return ++s;
        }
    }
    else if (c == 0xED)
    {
        if (++s != last && ((c2 = (*s & 0xFF)) >= 0x80 && c2 <= 0x9F) &&
            ++s != last && ((c3 = (*s & 0xFF)) >= 0x80 && c3 <= 0xBF))
        {
            c = ((c & 0x0F) << 12) + ((c2 & 0x3F) << 6) + (c3 & 0x3F);
            *codepoint = c;
            return ++s;
        }
    }
    else if (c == 0xF0)
    {
        if (++s != last && ((c2 = (*s & 0xFF)) >= 0x90 && c2 <= 0xBF) &&
            ++s != last && ((c3 = (*s & 0xFF)) >= 0x80 && c3 <= 0xBF) &&
            ++s != last && ((c4 = (*s & 0xFF)) >= 0x80 && c4 <= 0xBF))
        {
            c = ((c & 0x07) << 18) + ((c2 & 0x3F) << 12) + ((c3 & 0x3F) << 6) + (c4 & 0x3F);
            *codepoint = c;
            return ++s;
        }
    }
    else if (c == 0xF4)
    {
        if (++s != last && ((c2 = (*s & 0xFF)) >= 0x80 && c2 <= 0x8F) &&
            ++s != last && ((c3 = (*s & 0xFF)) >= 0x80 && c3 <= 0xBF) &&
            ++s != last && ((c4 = (*s & 0xFF)) >= 0x80 && c4 <= 0xBF))
        {
            c = ((c & 0x07) << 18) + ((c2 & 0x3F) << 12) + ((c3 & 0x3F) << 6) + (c4 & 0x3F);
            *codepoint = c;
            return ++s;
        }
    }
    else if (c >= 0xF1 && c <= 0xF3)
    {
        if (++s != last && ((c2 = (*s & 0xFF)) >= 0x80 && c2 <= 0xBF) &&
            ++s != last && ((c3 = (*s & 0xFF)) >= 0x80 && c3 <= 0xBF) &&
            ++s != last && ((c4 = (*s & 0xFF)) >= 0x80 && c4 <= 0xBF))
        {
            c = ((c & 0x07) << 18) + ((c2 & 0x3F) << 12) + ((c3 & 0x3F) << 6) + (c4 & 0x3F);
            *codepoint = c;
            return ++s;
        }
    }
    else
    {
        // invalid code unit
        ++s;
    }

    // NOLINTEND(bugprone-assignment-in-if-condition)

    // Error: invalid code unit or overlong code point or truncated sequence in UTF-8

    *codepoint = error;

    return s;
}

#ifdef __cplusplus
template<typename it_in_utf16, typename it_end_utf16>
#endif
uaix_always_inline_tmpl
uaix_static it_in_utf16 iter_utf16(it_in_utf16 first, it_end_utf16 last, type_codept* const codepoint, type_codept error)
{
    // If first >= last the behaviour is undefined
    // C++ Note: works with iterators: input, forward, bidirectional, random access, contiguous

    it_in_utf16 src = first;

    const type_codept h = (*src & 0xFFFF);
    ++src;

    if (uaix_unlikely(h >= 0xD800 && h <= 0xDFFF)) // Surrogate pair
    {
        if (/*h >= 0xD800 &&*/ h <= 0xDBFF) // High surrogate is in range
        {
            if (src != last) // Unpaired high surrogate if reached the end here
            {
                const type_codept l = (*src & 0xFFFF);

                if (l >= 0xDC00 && l <= 0xDFFF) // Low surrogate is in range
                {
                    const type_codept c = ((h - 0xD800) << 10) + (l - 0xDC00) + 0x10000;
                    *codepoint = c;
                    ++src;
                    return src;
                }
            }
        }
    }
    else
    {
        *codepoint = h;
        return src;
    }

    // Error: lone low surrogate or broken surrogate pair in UTF-16

    *codepoint = error;
    return src;
}

#ifdef __cplusplus
template<typename it_in_utf8>
#endif
uaix_always_inline_tmpl
uaix_static it_in_utf8 iter_rev_utf8(it_in_utf8 first, it_in_utf8 last, type_codept* const codepoint, type_codept error)
{
    // If first >= last the behaviour is undefined
    // C++ Note: works with iterators: bidirectional, random access, contiguous

    it_in_utf8 src = last;
    it_in_utf8 forward = last;

    // Go back by 1 code point by skipping tails
    while (--src != first && ((*src & 0xFF) & 0xC0) == 0x80);

    // Read next code point
    forward = iter_utf8(src, last, codepoint, error);

    if (forward == last)
        return src;

    // Multiple invalid code units then
    *codepoint = error; // For readability, iter_utf8 returns error anyway
    src = last;
    return --src; // Go back by 1 code unit
}

#ifdef __cplusplus
template<typename it_in_utf16>
#endif
uaix_always_inline_tmpl
uaix_static it_in_utf16 iter_rev_utf16(it_in_utf16 first, it_in_utf16 last, type_codept* const codepoint, type_codept error)
{
    // If first >= last the behaviour is undefined
    // C++ Note: works with iterators: bidirectional, random access, contiguous

    it_in_utf16 src = last;
    it_in_utf16 forward = last;

    // Go back by 1 code point by skipping low surrogates
    while (--src != first && ((*src & 0xFFFF) >= 0xDC00 && (*src & 0xFFFF) <= 0xDFFF));

    // Read next code point
    forward = iter_utf16(src, last, codepoint, error);

    if (forward == last)
        return src;

    // Multiple invalid code units then
    *codepoint = error; // For readability, iter_utf16 returns error anyway
    src = last;
    return --src; // Go back by 1 code unit
}

#ifdef __cplusplus
template<typename it_out_utf8>
#endif
uaix_always_inline_tmpl
uaix_static it_out_utf8 codepoint_to_utf8(type_codept c, it_out_utf8 dst)
{
    if (c <= 0x7F)
    {
        *dst++ = (type_char8)c;
    }
    else if (c <= 0x7FF)
    {
        *dst++ = (type_char8)(0xC0 | (c >> 6));
        *dst++ = (type_char8)(0x80 | (c & 0x3F));
    }
    else if (c <= 0xFFFF)
    {
        *dst++ = (type_char8)(0xE0 |  (c >> 12));
        *dst++ = (type_char8)(0x80 | ((c >> 6) & 0x3F));
        *dst++ = (type_char8)(0x80 |  (c       & 0x3F));
    }
    else
    {
        *dst++ = (type_char8)(0xF0 |  (c >> 18));
        *dst++ = (type_char8)(0x80 | ((c >> 12) & 0x3F));
        *dst++ = (type_char8)(0x80 | ((c >> 6)  & 0x3F));
        *dst++ = (type_char8)(0x80 |  (c        & 0x3F));
    }

    return dst;
}

#ifdef __cplusplus
template<typename it_out_utf16>
#endif
uaix_always_inline_tmpl
uaix_static it_out_utf16 codepoint_to_utf16(type_codept c, it_out_utf16 dst)
{
    if (c <= 0xFFFF)
    {
        *dst++ = (type_char16)c;
    }
    else
    {
        *dst++ = (type_char16)(0xD7C0 + (c >> 10));
        *dst++ = (type_char16)(0xDC00 + (c & 0x3FF));
    }

    return dst;
}

// impl_* versions don't have always inline attribute. They can be used on a higher level
// and a compiler should decide better what to do with them.
// Hovewer we have inline versions of these functions for a higher level too
// they can be used for a critical performance code to guarantee to omit function calls always.

uaix_const type_codept impl_iter_replacement = 0xFFFD; // iter_replacement
uaix_const type_codept impl_iter_error = 0xFFFFFFFF; // iter_error

#ifdef __cplusplus
template<typename it_in_utf8, typename it_end_utf8>
#endif
uaix_static it_in_utf8 impl_iter_utf8(it_in_utf8 first, it_end_utf8 last, type_codept* const codepoint, type_codept error)
{
    return iter_utf8(first, last, codepoint, error);
}

#ifdef __cplusplus
template<typename it_in_utf16, typename it_end_utf16>
#endif
uaix_static it_in_utf16 impl_iter_utf16(it_in_utf16 first, it_end_utf16 last, type_codept* const codepoint, type_codept error)
{
    return iter_utf16(first, last, codepoint, error);
}

#ifdef __cplusplus
template<typename it_in_utf8>
#endif
uaix_static it_in_utf8 impl_iter_rev_utf8(it_in_utf8 first, it_in_utf8 last, type_codept* const codepoint, type_codept error)
{
    return iter_rev_utf8(first, last, codepoint, error);
}

#ifdef __cplusplus
template<typename it_in_utf16>
#endif
uaix_static it_in_utf16 impl_iter_rev_utf16(it_in_utf16 first, it_in_utf16 last, type_codept* const codepoint, type_codept error)
{
    return iter_rev_utf16(first, last, codepoint, error);
}

// Inline versions

#ifdef __cplusplus
template<typename it_in_utf8, typename it_end_utf8>
#endif
uaix_always_inline_tmpl
uaix_static it_in_utf8 inline_iter_utf8(it_in_utf8 first, it_end_utf8 last, type_codept* const codepoint, type_codept error)
{
    return iter_utf8(first, last, codepoint, error);
}

#ifdef __cplusplus
template<typename it_in_utf16, typename it_end_utf16>
#endif
uaix_always_inline_tmpl
uaix_static it_in_utf16 inline_iter_utf16(it_in_utf16 first, it_end_utf16 last, type_codept* const codepoint, type_codept error)
{
    return iter_utf16(first, last, codepoint, error);
}

#ifdef __cplusplus
template<typename it_in_utf8>
#endif
uaix_always_inline_tmpl
uaix_static it_in_utf8 inline_iter_rev_utf8(it_in_utf8 first, it_in_utf8 last, type_codept* const codepoint, type_codept error)
{
    return iter_rev_utf8(first, last, codepoint, error);
}

#ifdef __cplusplus
template<typename it_in_utf16>
#endif
uaix_always_inline_tmpl
uaix_static it_in_utf16 inline_iter_rev_utf16(it_in_utf16 first, it_in_utf16 last, type_codept* const codepoint, type_codept error)
{
    return iter_rev_utf16(first, last, codepoint, error);
}

// Output

#ifdef __cplusplus
template<typename it_out_utf8>
#endif
uaix_static it_out_utf8 impl_output_utf8(type_codept c, it_out_utf8 dst)
{
    // TODO: try to merge it with the function below can give a bit better performance
    if (c > 0x10FFFF || (c >= 0xD800 && c <= 0xDFFF))
        c = 0xFFFD;

    return codepoint_to_utf8(c, dst);
}

#ifdef __cplusplus
template<typename it_out_utf16>
#endif
uaix_static it_out_utf16 impl_output_utf16(type_codept c, it_out_utf16 dst)
{
    // TODO: try to merge it with the function below can give a bit better performance
    if (c > 0x10FFFF || (c >= 0xD800 && c <= 0xDFFF))
        c = 0xFFFD;

    return codepoint_to_utf16(c, dst);
}

UNI_ALGO_IMPL_NAMESPACE_END

//!#include "internal_undefs.h"


// AMALGAMATION: uni_algo/impl/impl_conv.h


//!#include "internal_defines.h"

UNI_ALGO_IMPL_NAMESPACE_BEGIN

// The length of a destination (result) string must be premultiplied with one of these
// Example: destination_length = source_length * impl_x_function_name
uaix_const size_t impl_x_utf8to16  = 1; // tag_unicode_stable_value
uaix_const size_t impl_x_utf16to8  = 3; // tag_unicode_stable_value
uaix_const size_t impl_x_utf8to32  = 1; // tag_unicode_stable_value
uaix_const size_t impl_x_utf32to8  = 4; // tag_unicode_stable_value
uaix_const size_t impl_x_utf16to32 = 1; // tag_unicode_stable_value
uaix_const size_t impl_x_utf32to16 = 2; // tag_unicode_stable_value

// Forward declaration for fast ASCII functions
#ifdef __cplusplus
template<typename it_in_utf8, typename it_end_utf8, typename it_out_utf16>
#endif
uaix_always_inline_tmpl
uaix_static bool fast_ascii_utf8to16(it_in_utf8* s, it_end_utf8 last, it_out_utf16* dst);
#ifdef __cplusplus
template<typename it_in_utf8, typename it_end_utf8, typename it_out_utf32>
#endif
uaix_always_inline_tmpl
uaix_static bool fast_ascii_utf8to32(it_in_utf8* s, it_end_utf8 last, it_out_utf32* dst);

#ifdef __cplusplus
template<typename it_in_utf8, typename it_end_utf8, typename it_out_utf16, bool contiguous = true>
#endif
uaix_static size_t impl_utf8to16(it_in_utf8 first, it_end_utf8 last, it_out_utf16 result, size_t* const error)
{
    // If first > last the behaviour is undefined
    // If error is used and wasn't initialized with impl_npos the behaviour is undefined
    // C++ Note: works with input iterators: random access, contiguous, with proxy: input, forward, bidirectional
    // C++ Note: works with output iterators: random access, contiguous, with proxy: output
    // C++ Note: for info about proxy iterators see: impl/example/cpp_proxy_iterator.h
    // Other functions in this file have the same restrictions

    /* The algorithm is compatible with W3C Standard: https://www.w3.org/TR/encoding/#utf-8-decoder
     * For better understanding see The Unicode Standard: 3.9 -> Table 3-7. Well-Formed UTF-8 Byte Sequences
     * https://www.unicode.org/versions/Unicode12.0.0/ch03.pdf
     * Note that The Unicode Standard now recommends W3C Standard practice to handle U+FFFD.
     * See The Unicode Standard: 3.9 -> U+FFFD Substitution of Maximal Subparts
     * and The Unicode Standard: 5.22 U+FFFD Substitution in Conversion
     * For better understanding about different practices in handling U+FFFD
     * see this article: https://hsivonen.fi/broken-utf-8
     */

    /* Performance notes:
     * Zero unnecessary instructions zero unnecessary jumps all branches are straightforward.
     * Number of checks less than in W3C algorithm and they are simpler.
     * The branches are reordered it gives a bit better performance in some cases.
     * __builtin_expect is used because GCC sometimes messes up ASCII fast loop for some reason.
     * Also I tried to implement it a bit different but it seems a compiler can optimize
     * it better when it written like that even though it looks a bit ugly.
     * Note that we don't use iterator functions here and inline everything because
     * it gives a better performance. See test/test_perf_iter_conv.h
     */

    it_in_utf8 s = first;
    it_in_utf8 prev = s;
    it_out_utf16 dst = result;

#ifdef __cplusplus
    if constexpr (contiguous)
#endif
        fast_ascii_utf8to16(&s, last, &dst);

    while (s != last)
    {
        type_codept c = (*s & 0xFF), c2 = 0, c3 = 0, c4 = 0; // c2, c3, c4 tag_can_be_uninitialized
        prev = s; // Save previous position for error

        // NOLINTBEGIN(bugprone-assignment-in-if-condition)

        if (uaix_likely(c <= 0x7F)) // Fast route for ASCII
        {
            // It is possible to use the fast ASCII function here instead of before the main loop
            // but it can degrade the performance of UTF-8 conversion in some cases.
            // Note that uaix_likely must be removed too for better performance.
#if 0
#ifdef __cplusplus
            if constexpr (contiguous)
#endif
                if (fast_ascii_utf8to16(&s, last, &dst))
                    continue;
#endif // 0

            *dst++ = (type_char16)c;
            ++s;
            continue;
        }
        else if (c >= 0xC2 && c <= 0xDF)
        {
            if (++s != last && ((c2 = (*s & 0xFF)) >= 0x80 && c2 <= 0xBF))
            {
                c = ((c & 0x1F) << 6) + (c2 & 0x3F);
                *dst++ = (type_char16)c;
                ++s;
                continue;
            }
        }
        else if (c >= 0xE1 && c <= 0xEC)
        { // NOLINT(bugprone-branch-clone)
            if (++s != last && ((c2 = (*s & 0xFF)) >= 0x80 && c2 <= 0xBF) &&
                ++s != last && ((c3 = (*s & 0xFF)) >= 0x80 && c3 <= 0xBF))
            {
                c = ((c & 0x0F) << 12) + ((c2 & 0x3F) << 6) + (c3 & 0x3F);
                *dst++ = (type_char16)c;
                ++s;
                continue;
            }
        }
        else if (c >= 0xEE && c <= 0xEF)
        { // NOLINT(bugprone-branch-clone)
            if (++s != last && ((c2 = (*s & 0xFF)) >= 0x80 && c2 <= 0xBF) &&
                ++s != last && ((c3 = (*s & 0xFF)) >= 0x80 && c3 <= 0xBF))
            {
                c = ((c & 0x0F) << 12) + ((c2 & 0x3F) << 6) + (c3 & 0x3F);
                *dst++ = (type_char16)c;
                ++s;
                continue;
            }
        }
        else if (uaix_likely(c == 0xE0))
        {
            if (++s != last && ((c2 = (*s & 0xFF)) >= 0xA0 && c2 <= 0xBF) &&
                ++s != last && ((c3 = (*s & 0xFF)) >= 0x80 && c3 <= 0xBF))
            {
                c = ((c & 0x0F) << 12) + ((c2 & 0x3F) << 6) + (c3 & 0x3F);
                *dst++ = (type_char16)c;
                ++s;
                continue;
            }
        }
        else if (c == 0xED)
        {
            // REMINDER:
            // For WTF-8 change 0x9F to 0xBF here that means branches:
            // this (c == 0xED), (c >= 0xE1 && c <= 0xEC), (c >= 0xEE && c <= 0xEF)
            // can be merged into one.
            // For CESU-8 it's more complicated but it seems branches:
            // (c == 0xF0), (c == 0xF4), (c >= 0xF1 && c <= 0xF3)
            // must be removed too and surrogates must be handled differently.
            // All of this is just initial observations it doesn't mean
            // it will work properly like this.

            if (++s != last && ((c2 = (*s & 0xFF)) >= 0x80 && c2 <= 0x9F) &&
                ++s != last && ((c3 = (*s & 0xFF)) >= 0x80 && c3 <= 0xBF))
            {
                c = ((c & 0x0F) << 12) + ((c2 & 0x3F) << 6) + (c3 & 0x3F);
                *dst++ = (type_char16)c;
                ++s;
                continue;
            }
        }
        else if (c == 0xF0)
        {
            if (++s != last && ((c2 = (*s & 0xFF)) >= 0x90 && c2 <= 0xBF) &&
                ++s != last && ((c3 = (*s & 0xFF)) >= 0x80 && c3 <= 0xBF) &&
                ++s != last && ((c4 = (*s & 0xFF)) >= 0x80 && c4 <= 0xBF))
            {
                c = ((c & 0x07) << 18) + ((c2 & 0x3F) << 12) + ((c3 & 0x3F) << 6) + (c4 & 0x3F);
                // Make a surrogate pair
                *dst++ = (type_char16)(0xD7C0 + (c >> 10));
                *dst++ = (type_char16)(0xDC00 + (c & 0x3FF));
                ++s;
                continue;
            }
        }
        else if (c == 0xF4)
        {
            if (++s != last && ((c2 = (*s & 0xFF)) >= 0x80 && c2 <= 0x8F) &&
                ++s != last && ((c3 = (*s & 0xFF)) >= 0x80 && c3 <= 0xBF) &&
                ++s != last && ((c4 = (*s & 0xFF)) >= 0x80 && c4 <= 0xBF))
            {
                c = ((c & 0x07) << 18) + ((c2 & 0x3F) << 12) + ((c3 & 0x3F) << 6) + (c4 & 0x3F);
                // Make a surrogate pair
                *dst++ = (type_char16)(0xD7C0 + (c >> 10));
                *dst++ = (type_char16)(0xDC00 + (c & 0x3FF));
                ++s;
                continue;
            }
        }
        else if (c >= 0xF1 && c <= 0xF3)
        {
            if (++s != last && ((c2 = (*s & 0xFF)) >= 0x80 && c2 <= 0xBF) &&
                ++s != last && ((c3 = (*s & 0xFF)) >= 0x80 && c3 <= 0xBF) &&
                ++s != last && ((c4 = (*s & 0xFF)) >= 0x80 && c4 <= 0xBF))
            {
                c = ((c & 0x07) << 18) + ((c2 & 0x3F) << 12) + ((c3 & 0x3F) << 6) + (c4 & 0x3F);
                // Make a surrogate pair
                *dst++ = (type_char16)(0xD7C0 + (c >> 10));
                *dst++ = (type_char16)(0xDC00 + (c & 0x3FF));
                ++s;
                continue;
            }
        }
        else
        {
            // invalid code unit
            ++s;
        }

        // NOLINTEND(bugprone-assignment-in-if-condition)

        // Error: invalid code unit or overlong code point or truncated sequence in UTF-8

        if (error)
        {
            // *error points to the start of ill-formed sequence
            *error = (size_t)(prev - first);
            return (size_t)(dst - result);
        }

        *dst++ = (type_char16)0xFFFD; // Replacement char U+FFFD
    }

    return (size_t)(dst - result);
}

#ifdef __cplusplus
template<typename it_in_utf16, typename it_end_utf16, typename it_out_utf8, bool = true>
#endif
uaix_static size_t impl_utf16to8(it_in_utf16 first, it_end_utf16 last, it_out_utf8 result, size_t* const error)
{
    it_in_utf16 src = first;
    it_out_utf8 dst = result;

    while (src != last)
    {
        const type_codept h = (*src & 0xFFFF);
        ++src;

        if (h <= 0x7F)
        {
            *dst++ = (type_char8)h;

            continue;
        }
        else if (h <= 0x7FF)
        {
            *dst++ = (type_char8)(0xC0 | (h >> 6));
            *dst++ = (type_char8)(0x80 | (h & 0x3F));

            continue;
        }
        else if (h >= 0xD800 && h <= 0xDFFF) // Surrogate pair
        {
            if (/*h >= 0xD800 &&*/ h <= 0xDBFF) // High surrogate is in range
            {
                if (src != last) // Unpaired high surrogate if reached the end here
                {
                    const type_codept l = (*src & 0xFFFF);

                    if (l >= 0xDC00 && l <= 0xDFFF) // Low surrogate is in range
                    {
                        const type_codept c = ((h - 0xD800) << 10) + (l - 0xDC00) + 0x10000;

                        *dst++ = (type_char8)(0xF0 |  (c >> 18));
                        *dst++ = (type_char8)(0x80 | ((c >> 12) & 0x3F));
                        *dst++ = (type_char8)(0x80 | ((c >> 6)  & 0x3F));
                        *dst++ = (type_char8)(0x80 |  (c        & 0x3F));

                        ++src;
                        continue;
                    }
                }
            }
        }
        else
        {
            *dst++ = (type_char8)(0xE0 |  (h >> 12));
            *dst++ = (type_char8)(0x80 | ((h >> 6) & 0x3F));
            *dst++ = (type_char8)(0x80 |  (h       & 0x3F));

            continue;
        }

        // Error: lone low surrogate or broken surrogate pair in UTF-16

        if (error)
        {
            // *error points to the start of ill-formed sequence
            *error = (size_t)(src - first) - 1;
            return (size_t)(dst - result);
        }

        // Replacement char U+FFFD
        *dst++ = (type_char8)(type_codept)0xEF;
        *dst++ = (type_char8)(type_codept)0xBF;
        *dst++ = (type_char8)(type_codept)0xBD;
    }

    return (size_t)(dst - result);
}

#ifdef __cplusplus
template<typename it_in_utf8, typename it_end_utf8, typename it_out_utf32, bool contiguous = true>
#endif
uaix_static size_t impl_utf8to32(it_in_utf8 first, it_end_utf8 last, it_out_utf32 result, size_t* const error)
{
    it_in_utf8 s = first;
    it_in_utf8 prev = s;
    it_out_utf32 dst = result;

#ifdef __cplusplus
    if constexpr (contiguous)
#endif
        fast_ascii_utf8to32(&s, last, &dst);

    while (s != last)
    {
        type_codept c = (*s & 0xFF), c2 = 0, c3 = 0, c4 = 0; // c2, c3, c4 tag_can_be_uninitialized
        prev = s; // Save previous position for error

        // NOLINTBEGIN(bugprone-assignment-in-if-condition)

        if (uaix_likely(c <= 0x7F)) // Fast route for ASCII
        {
            *dst++ = (type_char32)c;
            ++s;
            continue;
        }
        else if (c >= 0xC2 && c <= 0xDF)
        {
            if (++s != last && ((c2 = (*s & 0xFF)) >= 0x80 && c2 <= 0xBF))
            {
                c = ((c & 0x1F) << 6) + (c2 & 0x3F);
                *dst++ = (type_char32)c;
                ++s;
                continue;
            }
        }
        else if (c >= 0xE1 && c <= 0xEC)
        { // NOLINT(bugprone-branch-clone)
            if (++s != last && ((c2 = (*s & 0xFF)) >= 0x80 && c2 <= 0xBF) &&
                ++s != last && ((c3 = (*s & 0xFF)) >= 0x80 && c3 <= 0xBF))
            {
                c = ((c & 0x0F) << 12) + ((c2 & 0x3F) << 6) + (c3 & 0x3F);
                *dst++ = (type_char32)c;
                ++s;
                continue;
            }
        }
        else if (c >= 0xEE && c <= 0xEF)
        { // NOLINT(bugprone-branch-clone)
            if (++s != last && ((c2 = (*s & 0xFF)) >= 0x80 && c2 <= 0xBF) &&
                ++s != last && ((c3 = (*s & 0xFF)) >= 0x80 && c3 <= 0xBF))
            {
                c = ((c & 0x0F) << 12) + ((c2 & 0x3F) << 6) + (c3 & 0x3F);
                *dst++ = (type_char32)c;
                ++s;
                continue;
            }
        }
        else if (uaix_likely(c == 0xE0))
        {
            if (++s != last && ((c2 = (*s & 0xFF)) >= 0xA0 && c2 <= 0xBF) &&
                ++s != last && ((c3 = (*s & 0xFF)) >= 0x80 && c3 <= 0xBF))
            {
                c = ((c & 0x0F) << 12) + ((c2 & 0x3F) << 6) + (c3 & 0x3F);
                *dst++ = (type_char32)c;
                ++s;
                continue;
            }
        }
        else if (c == 0xED)
        {
            if (++s != last && ((c2 = (*s & 0xFF)) >= 0x80 && c2 <= 0x9F) &&
                ++s != last && ((c3 = (*s & 0xFF)) >= 0x80 && c3 <= 0xBF))
            {
                c = ((c & 0x0F) << 12) + ((c2 & 0x3F) << 6) + (c3 & 0x3F);
                *dst++ = (type_char32)c;
                ++s;
                continue;
            }
        }
        else if (c == 0xF0)
        {
            if (++s != last && ((c2 = (*s & 0xFF)) >= 0x90 && c2 <= 0xBF) &&
                ++s != last && ((c3 = (*s & 0xFF)) >= 0x80 && c3 <= 0xBF) &&
                ++s != last && ((c4 = (*s & 0xFF)) >= 0x80 && c4 <= 0xBF))
            {
                c = ((c & 0x07) << 18) + ((c2 & 0x3F) << 12) + ((c3 & 0x3F) << 6) + (c4 & 0x3F);
                *dst++ = (type_char32)c;
                ++s;
                continue;
            }
        }
        else if (c == 0xF4)
        {
            if (++s != last && ((c2 = (*s & 0xFF)) >= 0x80 && c2 <= 0x8F) &&
                ++s != last && ((c3 = (*s & 0xFF)) >= 0x80 && c3 <= 0xBF) &&
                ++s != last && ((c4 = (*s & 0xFF)) >= 0x80 && c4 <= 0xBF))
            {
                c = ((c & 0x07) << 18) + ((c2 & 0x3F) << 12) + ((c3 & 0x3F) << 6) + (c4 & 0x3F);
                *dst++ = (type_char32)c;
                ++s;
                continue;
            }
        }
        else if (c >= 0xF1 && c <= 0xF3)
        {
            if (++s != last && ((c2 = (*s & 0xFF)) >= 0x80 && c2 <= 0xBF) &&
                ++s != last && ((c3 = (*s & 0xFF)) >= 0x80 && c3 <= 0xBF) &&
                ++s != last && ((c4 = (*s & 0xFF)) >= 0x80 && c4 <= 0xBF))
            {
                c = ((c & 0x07) << 18) + ((c2 & 0x3F) << 12) + ((c3 & 0x3F) << 6) + (c4 & 0x3F);
                *dst++ = (type_char32)c;
                ++s;
                continue;
            }
        }
        else
        {
            // invalid code unit
            ++s;
        }

        // NOLINTEND(bugprone-assignment-in-if-condition)

        // Error: invalid code unit or overlong code point or truncated sequence in UTF-8

        if (error)
        {
            // *error points to the start of ill-formed sequence
            *error = (size_t)(prev - first);
            return (size_t)(dst - result);
        }

        *dst++ = 0xFFFD; // Replacement char U+FFFD
    }

    return (size_t)(dst - result);
}

#ifdef __cplusplus
template<typename it_in_utf32, typename it_end_utf32, typename it_out_utf8, bool = true>
#endif
uaix_static size_t impl_utf32to8(it_in_utf32 first, it_end_utf32 last, it_out_utf8 result, size_t* const error)
{
    it_in_utf32 src = first;
    it_out_utf8 dst = result;

    while (src != last)
    {
        const type_codept c = ((type_codept)*src & 0xFFFFFFFF);
        ++src;

        if (c <= 0x7F)
        {
            *dst++ = (type_char8)c;

            continue;
        }
        else if (c <= 0x7FF)
        {
            *dst++ = (type_char8)(0xC0 | (c >> 6));
            *dst++ = (type_char8)(0x80 | (c & 0x3F));

            continue;
        }
        else if (c <= 0xFFFF)
        {
            if (!(c >= 0xD800 && c <= 0xDFFF)) // If not in surrogate pairs range
            {
                *dst++ = (type_char8)(0xE0 |  (c >> 12));
                *dst++ = (type_char8)(0x80 | ((c >> 6) & 0x3F));
                *dst++ = (type_char8)(0x80 |  (c       & 0x3F));

                continue;
            }
        }
        else if (c <= 0x10FFFF)
        {
            *dst++ = (type_char8)(0xF0 |  (c >> 18));
            *dst++ = (type_char8)(0x80 | ((c >> 12) & 0x3F));
            *dst++ = (type_char8)(0x80 | ((c >> 6)  & 0x3F));
            *dst++ = (type_char8)(0x80 |  (c        & 0x3F));

            continue;
        }

        // Error: code point > 0x10FFFF or surrogate in UTF-32

        if (error)
        {
            // *error points to invalid code point
            *error = (size_t)(src - first) - 1;
            return (size_t)(dst - result);
        }

        // Replacement char U+FFFD
        *dst++ = (type_char8)(type_codept)0xEF;
        *dst++ = (type_char8)(type_codept)0xBF;
        *dst++ = (type_char8)(type_codept)0xBD;
    }

    return (size_t)(dst - result);
}

#ifdef __cplusplus
template<typename it_in_utf16, typename it_end_utf16, typename it_out_utf32, bool = true>
#endif
uaix_static size_t impl_utf16to32(it_in_utf16 first, it_end_utf16 last, it_out_utf32 result, size_t* const error)
{
    it_in_utf16 src = first;
    it_out_utf32 dst = result;

    while (src != last)
    {
        const type_codept h = (*src & 0xFFFF);
        ++src;

        if (h >= 0xD800 && h <= 0xDFFF) // Surrogate pair
        {
            if (/*h >= 0xD800 &&*/ h <= 0xDBFF) // High surrogate is in range
            {
                if (src != last) // Unpaired high surrogate if reached the end here
                {
                    const type_codept l = (*src & 0xFFFF);

                    if (l >= 0xDC00 && l <= 0xDFFF) // Low surrogate is in range
                    {
                        const type_codept c = ((h - 0xD800) << 10) + (l - 0xDC00) + 0x10000;

                        *dst++ = (type_char32)c;

                        ++src;
                        continue;
                    }
                }
            }
        }
        else
        {
            *dst++ = (type_char32)h;

            continue;
        }

        // Error: lone low surrogate or broken surrogate pair in UTF-16

        if (error)
        {
            // *error points to the start of ill-formed sequence
            *error = (size_t)(src - first) - 1;
            return (size_t)(dst - result);
        }

        *dst++ = 0xFFFD; // Replacement char U+FFFD
    }

    return (size_t)(dst - result);
}

#ifdef __cplusplus
template<typename it_in_utf32, typename it_end_utf32, typename it_out_utf16, bool = true>
#endif
uaix_static size_t impl_utf32to16(it_in_utf32 first, it_end_utf32 last, it_out_utf16 result, size_t* const error)
{
    it_in_utf32 src = first;
    it_out_utf16 dst = result;

    while (src != last)
    {
        const type_codept c = ((type_codept)*src & 0xFFFFFFFF);
        ++src;

        if (c <= 0xFFFF)
        {
            if (!(c >= 0xD800 && c <= 0xDFFF)) // If not in surrogate pairs range
            {
                *dst++ = (type_char16)c;

                continue;
            }
        }
        else if (c <= 0x10FFFF) // Make a surrogate pair
        {
            *dst++ = (type_char16)(0xD7C0 + (c >> 10));
            *dst++ = (type_char16)(0xDC00 + (c & 0x3FF));

            continue;
        }

        // Error: code point > 0x10FFFF or surrogate in UTF-32

        if (error)
        {
            // *error points to invalid code point
            *error = (size_t)(src - first) - 1;
            return (size_t)(dst - result);
        }

        *dst++ = (type_char16)0xFFFD; // Replacement char U+FFFD
    }

    return (size_t)(dst - result);
}

#ifdef __cplusplus
template<typename it_in_utf8, typename it_end_utf8>
#endif
uaix_static bool impl_is_valid_utf8(it_in_utf8 first, it_end_utf8 last, size_t* const error)
{
    // Based on impl_utf8to16 function

    it_in_utf8 s = first;
    it_in_utf8 prev = s;

    while (s != last)
    {
        // NOTE: NOLINT is used here because the function should be consistent with impl_utf8to16
        // NOLINTNEXTLINE(misc-const-correctness)
        type_codept c = (*s & 0xFF), c2 = 0, c3 = 0, c4 = 0; // c2, c3, c4 tag_can_be_uninitialized
        prev = s; // Save previous position for error

        // NOLINTBEGIN(bugprone-assignment-in-if-condition)

        if (uaix_likely(c <= 0x7F)) // Fast route for ASCII
        {
            ++s;
            continue;
        }
        else if (c >= 0xC2 && c <= 0xDF)
        {
            if (++s != last && ((c2 = (*s & 0xFF)) >= 0x80 && c2 <= 0xBF))
            {
                ++s;
                continue;
            }
        }
        else if (c >= 0xE1 && c <= 0xEC)
        { // NOLINT(bugprone-branch-clone)
            if (++s != last && ((c2 = (*s & 0xFF)) >= 0x80 && c2 <= 0xBF) &&
                ++s != last && ((c3 = (*s & 0xFF)) >= 0x80 && c3 <= 0xBF))
            {
                ++s;
                continue;
            }
        }
        else if (c >= 0xEE && c <= 0xEF)
        { // NOLINT(bugprone-branch-clone)
            if (++s != last && ((c2 = (*s & 0xFF)) >= 0x80 && c2 <= 0xBF) &&
                ++s != last && ((c3 = (*s & 0xFF)) >= 0x80 && c3 <= 0xBF))
            {
                ++s;
                continue;
            }
        }
        else if (c == 0xE0)
        {
            if (++s != last && ((c2 = (*s & 0xFF)) >= 0xA0 && c2 <= 0xBF) &&
                ++s != last && ((c3 = (*s & 0xFF)) >= 0x80 && c3 <= 0xBF))
            {
                ++s;
                continue;
            }
        }
        else if (c == 0xED)
        {
            if (++s != last && ((c2 = (*s & 0xFF)) >= 0x80 && c2 <= 0x9F) &&
                ++s != last && ((c3 = (*s & 0xFF)) >= 0x80 && c3 <= 0xBF))
            {
                ++s;
                continue;
            }
        }
        else if (c == 0xF0)
        {
            if (++s != last && ((c2 = (*s & 0xFF)) >= 0x90 && c2 <= 0xBF) &&
                ++s != last && ((c3 = (*s & 0xFF)) >= 0x80 && c3 <= 0xBF) &&
                ++s != last && ((c4 = (*s & 0xFF)) >= 0x80 && c4 <= 0xBF))
            {
                ++s;
                continue;
            }
        }
        else if (c == 0xF4)
        {
            if (++s != last && ((c2 = (*s & 0xFF)) >= 0x80 && c2 <= 0x8F) &&
                ++s != last && ((c3 = (*s & 0xFF)) >= 0x80 && c3 <= 0xBF) &&
                ++s != last && ((c4 = (*s & 0xFF)) >= 0x80 && c4 <= 0xBF))
            {
                ++s;
                continue;
            }
        }
        else if (c >= 0xF1 && c <= 0xF3)
        {
            if (++s != last && ((c2 = (*s & 0xFF)) >= 0x80 && c2 <= 0xBF) &&
                ++s != last && ((c3 = (*s & 0xFF)) >= 0x80 && c3 <= 0xBF) &&
                ++s != last && ((c4 = (*s & 0xFF)) >= 0x80 && c4 <= 0xBF))
            {
                ++s;
                continue;
            }
        }
        else
        {
            // invalid code unit
            ++s;
        }

        // NOLINTEND(bugprone-assignment-in-if-condition)

        // Error: invalid code unit or overlong code point or truncated sequence in UTF-8

        if (error) // *error points to the start of ill-formed sequence
            *error = (size_t)(prev - first);

        return false;
    }

    return true;
}

#ifdef __cplusplus
template<typename it_in_utf16, typename it_end_utf16>
#endif
uaix_static bool impl_is_valid_utf16(it_in_utf16 first, it_end_utf16 last, size_t* const error)
{
    // Based on impl_utf16to8 function

    it_in_utf16 src = first;

    while (src != last)
    {
        const type_codept h = (*src & 0xFFFF);
        ++src;

        if (h <= 0x7F)
        { // NOLINT(bugprone-branch-clone)
            continue;
        }
        else if (h <= 0x7FF)
        { // NOLINT(bugprone-branch-clone)
            continue;
        }
        else if (h >= 0xD800 && h <= 0xDFFF) // Surrogate pair
        {
            if (/*h >= 0xD800 &&*/ h <= 0xDBFF) // High surrogate is in range
            {
                if (src != last) // Unpaired high surrogate if reached the end here
                {
                    const type_codept l = (*src & 0xFFFF);

                    if (l >= 0xDC00 && l <= 0xDFFF) // Low surrogate is in range
                    {
                        ++src;
                        continue;
                    }
                }
            }
        }
        else
        { // NOLINT(bugprone-branch-clone)
            continue;
        }

        // Error: lone low surrogate or broken surrogate pair in UTF-16

        if (error) // *error points to the start of ill-formed sequence
            *error = (size_t)(src - first) - 1;

        return false;
    }

    return true;
}

#ifdef __cplusplus
template<typename it_in_utf32, typename it_end_utf32>
#endif
uaix_static bool impl_is_valid_utf32(it_in_utf32 first, it_end_utf32 last, size_t* const error)
{
    // Based on impl_utf32to8 function

    it_in_utf32 src = first;

    while (src != last)
    {
        const type_codept c = ((type_codept)*src & 0xFFFFFFFF);
        ++src;

        if (c <= 0x7F)
        { // NOLINT(bugprone-branch-clone)
            continue;
        }
        else if (c <= 0x7FF)
        { // NOLINT(bugprone-branch-clone)
            continue;
        }
        else if (c <= 0xFFFF)
        {
            if (!(c >= 0xD800 && c <= 0xDFFF)) // If not in surrogate pairs range
            {
                continue;
            }
        }
        else if (c <= 0x10FFFF)
        { // NOLINT(bugprone-branch-clone)
            continue;
        }

        // Error: code point > 0x10FFFF or surrogate in UTF-32

        if (error) // *error points to invalid code point
            *error = (size_t)(src - first) - 1;

        return false;
    }

    return true;
}

#ifdef __cplusplus
template<typename it_in_utf8, typename it_end_utf8, typename it_out_utf16>
#endif
uaix_always_inline_tmpl
uaix_static bool fast_ascii_utf8to16(it_in_utf8* s, it_end_utf8 last, it_out_utf16* dst)
{
    // This optimization makes processing of ASCII strings by about 20-30% faster
    // C++ Note: works only with contiguous or random access input iterators

    bool processed = false;

    for (it_in_utf8 end = *s + (last - *s) - ((last - *s) % 4); *s != end; *s += 4)
    {
        // There are 3 ways to perform unaligned load:
        // 1. uint32_t = *((uint32_t*)uint8_t*); // Unsafe and not portable garbage.
        // 2. memcpy(&uint32_t, uint8_t*, 4); // Better but won't work for us for many reasons.
        // 3. Manual load. Harder to optimize for a compiler but safe and without potential function call in the worst case.
        // So we use manual load here.
        // In the best case scenario the following 4 lines will be optimized into one mov instruction
        // in the worst case it won't but we only lose a bit performance, processing by 4 bytes is always faster.
        // Note that manual load is endian agnostic too compared to other ways so we don't need to deal with that crap.
        // This means the behaviour will be the same on little/big/middle endian systems the value c will be the same.
        type_codept c = 0;
        c |= ((type_codept)*(*s+0) & 0xFF);
        c |= ((type_codept)*(*s+1) & 0xFF) << 8;
        c |= ((type_codept)*(*s+2) & 0xFF) << 16;
        c |= ((type_codept)*(*s+3) & 0xFF) << 24;

        // If non-ASCII then drop from the function and proceed as usual
        if ((c & 0x80808080) != 0)
            break;

        // This is not unaligned store even though it looks like it, we just do the usual thing here.
        *(*dst)++ = (type_char16)(c & 0xFF);
        *(*dst)++ = (type_char16)((c >> 8) & 0xFF);
        *(*dst)++ = (type_char16)((c >> 16) & 0xFF);
        *(*dst)++ = (type_char16)((c >> 24) & 0xFF);

        // This is how unaligned store should look like it can be used for potential utf8to8 function.
        // Even though a compiler probably optimize both variants the same for such function.
        //*(*dst+0) = (impl_char8)(c & 0xFF);
        //*(*dst+1) = (impl_char8)((c >> 8) & 0xFF);
        //*(*dst+2) = (impl_char8)((c >> 16) & 0xFF);
        //*(*dst+3) = (impl_char8)((c >> 24) & 0xFF);
        //*dst += 4;

        processed = true;
    }

    return processed;

    // NOTE from mg152:
    // In my observations MSVC never optimize manual load, GCC and Clang optimize it starting with version 5.
    // See test/random_stuff/unaligned_load_store.h to check which compiler is able to optimize it properly.
    // It is possible to make it faster by using long long and processing by 8 bytes or even intrinsics like _mm_loadu_si128
    // but it will be much less portable and the number of defines to handle it will be enormous.
    // So the basic optimization should be enough it's over optimization anyway I just did it for fun. At least it's always safe.

    // For reference: https://blog.quarkslab.com/unaligned-accesses-in-cc-what-why-and-solutions-to-do-it-properly.html
}

#ifdef __cplusplus
template<typename it_in_utf8, typename it_end_utf8, typename it_out_utf32>
#endif
uaix_always_inline_tmpl
uaix_static bool fast_ascii_utf8to32(it_in_utf8* s, it_end_utf8 last, it_out_utf32* dst)
{
    bool processed = false;

    for (it_in_utf8 end = *s + (last - *s) - ((last - *s) % 4); *s != end; *s += 4)
    {
        type_codept c = 0;
        c |= ((type_codept)*(*s+0) & 0xFF);
        c |= ((type_codept)*(*s+1) & 0xFF) << 8;
        c |= ((type_codept)*(*s+2) & 0xFF) << 16;
        c |= ((type_codept)*(*s+3) & 0xFF) << 24;

        if ((c & 0x80808080) != 0)
            break;

        *(*dst)++ = (type_char32)(c & 0xFF);
        *(*dst)++ = (type_char32)((c >> 8) & 0xFF);
        *(*dst)++ = (type_char32)((c >> 16) & 0xFF);
        *(*dst)++ = (type_char32)((c >> 24) & 0xFF);

        processed = true;
    }

    return processed;
}

UNI_ALGO_IMPL_NAMESPACE_END

//!#include "internal_undefs.h"


// AMALGAMATION: uni_algo/impl/impl_segment_grapheme.h


//!#include "impl_iter.h"

//!#include "internal_defines.h"
//!#include "internal_stages.h"

#ifndef UNI_ALGO_STATIC_DATA
//!#include "data/extern_segment_grapheme.h"
#else
//!#include "data/data_segment_grapheme.h"
#endif

UNI_ALGO_IMPL_NAMESPACE_BEGIN

// See generator_segment_grapheme in gen/gen.h

uaix_const type_codept prop_GB_Prepend               = 1;
uaix_const type_codept prop_GB_CR                    = 2;
uaix_const type_codept prop_GB_LF                    = 3;
uaix_const type_codept prop_GB_Control               = 4;
uaix_const type_codept prop_GB_Extend                = 5;
uaix_const type_codept prop_GB_Regional_Indicator    = 6;
uaix_const type_codept prop_GB_SpacingMark           = 7;
uaix_const type_codept prop_GB_L                     = 8;
uaix_const type_codept prop_GB_V                     = 9;
uaix_const type_codept prop_GB_T                     = 10;
uaix_const type_codept prop_GB_LV                    = 11;
uaix_const type_codept prop_GB_LVT                   = 12;
uaix_const type_codept prop_GB_ZWJ                   = 13;
uaix_const type_codept prop_GB_Extended_Pictographic = 14;

uaix_const type_codept prop_GB_InCB_Linker           = 1;
uaix_const type_codept prop_GB_InCB_Consonant        = 2;
uaix_const type_codept prop_GB_InCB_Extend           = 3;

uaix_const int state_segment_grapheme_begin    = 0;
uaix_const int state_segment_grapheme_continue = 1;
uaix_const int state_segment_grapheme_RI       = 2;
uaix_const int state_segment_grapheme_RI_RI    = 3;
uaix_const int state_segment_grapheme_EP       = 4;
uaix_const int state_segment_grapheme_EP_ZWJ   = 5;
uaix_const int state_segment_grapheme_InCB_C   = 6;
uaix_const int state_segment_grapheme_InCB_CL  = 7;

uaix_always_inline
uaix_static type_codept stages_segment_grapheme_prop(type_codept c)
{
    // This function returns raw property that contains property with InCB (see GB9c rule)
    // Two functions below must be used to get the real property and InCB
    return stages(c, stage1_segment_grapheme, stage2_segment_grapheme);
}

uaix_always_inline
uaix_static type_codept segment_grapheme_prop(type_codept prop)
{
    return (prop & 0x3F); // 6 right bits are used for properties
}

uaix_always_inline
uaix_static type_codept segment_grapheme_prop_inCB(type_codept prop)
{
    return (prop >> 6); // 2 first (left) bits are used for InCB
}

struct impl_segment_grapheme_state
{
    type_codept prev_cp;
    type_codept prev_cp_prop;

    int state;
};

uaix_always_inline
uaix_static void impl_segment_grapheme_state_reset(struct impl_segment_grapheme_state* const state)
{
    state->prev_cp = 0;
    state->prev_cp_prop = 0;

    state->state = state_segment_grapheme_begin;
}
/*
// TODO: see TODO below.
// Extend_ExtCccZwj and ZWJ_ExtCccZwj should not be used.
// ZWJ must be the same as Extend.
uaix_static const bool segment_table_grapheme[15][15] =
{
//   Oth CR LF Con Ext RI Pre SpM L  V  T  LV LVT EP ZWJ
    {1,  1, 1, 1,  0,  1, 1,  0,  1, 1, 1, 1, 1,  1, 0}, // Other
    {1,  1, 0, 1,  1,  1, 1,  1,  1, 1, 1, 1, 1,  1, 1}, // CR
    {1,  1, 1, 1,  1,  1, 1,  1,  1, 1, 1, 1, 1,  1, 1}, // LF
    {1,  1, 1, 1,  1,  1, 1,  1,  1, 1, 1, 1, 1,  1, 1}, // Control
    {1,  1, 1, 1,  0,  1, 1,  0,  1, 1, 1, 1, 1,  1, 0}, // Extend
    {1,  1, 1, 1,  0,  0, 1,  0,  1, 1, 1, 1, 1,  1, 0}, // RI
    {0,  1, 1, 1,  0,  0, 0,  0,  0, 0, 0, 0, 0,  0, 0}, // Prepend
    {1,  1, 1, 1,  0,  1, 1,  0,  1, 1, 1, 1, 1,  1, 0}, // SpacingMark
    {1,  1, 1, 1,  0,  1, 1,  0,  0, 0, 1, 0, 0,  1, 0}, // L
    {1,  1, 1, 1,  0,  1, 1,  0,  1, 0, 0, 1, 1,  1, 0}, // V
    {1,  1, 1, 1,  0,  1, 1,  0,  1, 1, 0, 1, 1,  1, 0}, // T
    {1,  1, 1, 1,  0,  1, 1,  0,  1, 0, 0, 1, 1,  1, 0}, // LV
    {1,  1, 1, 1,  0,  1, 1,  0,  1, 1, 0, 1, 1,  1, 0}, // LVT
    {1,  1, 1, 1,  0,  1, 1,  0,  1, 1, 1, 1, 1,  1, 0}, // ExtPict
    {1,  1, 1, 1,  0,  1, 1,  0,  1, 1, 1, 1, 1,  1, 0}, // ZWJ
};
*/
uaix_always_inline
uaix_static bool segment_grapheme(struct impl_segment_grapheme_state* const state, type_codept c)
{
    // TODO: https://unicode.org/reports/tr29/#State_Machines
    // ftp://ftp.unicode.org/Public/UNIDATA/auxiliary/GraphemeBreakTest.html
    // See state table above.
    // Compared the performance with ICU it's already much faster so it can wait.

    const type_codept raw_prop = stages_segment_grapheme_prop(c);

    const type_codept c_prop = segment_grapheme_prop(raw_prop);
    const type_codept p_prop = segment_grapheme_prop(state->prev_cp_prop);

    const type_codept c_inCB = segment_grapheme_prop_inCB(raw_prop);

    bool result = false; // tag_can_be_uninitialized

    // https://www.unicode.org/reports/tr29/#Grapheme_Cluster_Boundary_Rules
    // Unicode 15.1 rules

    if (state->state == state_segment_grapheme_begin)
        state->state = state_segment_grapheme_continue;
    else if (p_prop == prop_GB_CR && c_prop == prop_GB_LF) // GB3
        result = false; // NOLINT
    else if (p_prop == prop_GB_Control || p_prop == prop_GB_CR || p_prop == prop_GB_LF) // GB4
        result = true; // NOLINT
    else if (c_prop == prop_GB_Control || c_prop == prop_GB_CR || c_prop == prop_GB_LF) // GB5
        result = true; // NOLINT
    else if (p_prop == prop_GB_L && (c_prop == prop_GB_L || c_prop == prop_GB_V || c_prop == prop_GB_LV || c_prop == prop_GB_LVT)) // GB6
        result = false; // NOLINT
    else if ((p_prop == prop_GB_LV || p_prop == prop_GB_V) && (c_prop == prop_GB_V || c_prop == prop_GB_T)) // GB7
        result = false; // NOLINT
    else if ((p_prop == prop_GB_LVT || p_prop == prop_GB_T) && c_prop == prop_GB_T) // GB8
        result = false; // NOLINT
    else if (c_prop == prop_GB_Extend || c_prop == prop_GB_ZWJ) // GB9
        result = false; // NOLINT
    else if (c_prop == prop_GB_SpacingMark) // GB9a
        result = false; // NOLINT
    else if (p_prop == prop_GB_Prepend) // GB9b
        result = false; // NOLINT
    else if (state->state == state_segment_grapheme_InCB_CL && c_inCB == prop_GB_InCB_Consonant) // GB9c
        result = false; // NOLINT
    else if (state->state == state_segment_grapheme_EP_ZWJ && c_prop == prop_GB_Extended_Pictographic) // GB11
        result = false; // NOLINT
    else if (state->state == state_segment_grapheme_RI && c_prop == prop_GB_Regional_Indicator) // GB12/GB13
        result = false; // NOLINT
    else // GB999
        result = true; // NOLINT

    // GB12/GB13
    if (c_prop == prop_GB_Regional_Indicator)
    {
        if (state->state == state_segment_grapheme_RI)
            state->state = state_segment_grapheme_RI_RI;
        else
            state->state = state_segment_grapheme_RI;
    }
    // GB11
    else if (c_prop == prop_GB_Extended_Pictographic)
        state->state = state_segment_grapheme_EP; // NOLINT
    else if (state->state == state_segment_grapheme_EP && c_prop == prop_GB_Extend)
        state->state = state_segment_grapheme_EP; // NOLINT
    else if (state->state == state_segment_grapheme_EP && c_prop == prop_GB_ZWJ)
        state->state = state_segment_grapheme_EP_ZWJ;
    // GB9c
    else if (c_inCB == prop_GB_InCB_Consonant)
        state->state = state_segment_grapheme_InCB_C; // NOLINT
    else if (state->state == state_segment_grapheme_InCB_C && c_inCB == prop_GB_InCB_Linker)
        state->state = state_segment_grapheme_InCB_CL; // NOLINT
    else if (state->state == state_segment_grapheme_InCB_C && (c_inCB == prop_GB_InCB_Extend || c_inCB == prop_GB_InCB_Linker))
        state->state = state_segment_grapheme_InCB_C; // NOLINT
    else if (state->state == state_segment_grapheme_InCB_CL && (c_inCB == prop_GB_InCB_Extend || c_inCB == prop_GB_InCB_Linker))
        state->state = state_segment_grapheme_InCB_CL; // NOLINT
    // Otherwise state continue
    else
        state->state = state_segment_grapheme_continue;

    state->prev_cp = c;
    state->prev_cp_prop = raw_prop;

    return result;
}

uaix_inline bool impl_segment_grapheme(struct impl_segment_grapheme_state* const state, type_codept c)
{
    return segment_grapheme(state, c);
}

uaix_always_inline
uaix_static bool inline_segment_grapheme(struct impl_segment_grapheme_state* const state, type_codept c)
{
    return segment_grapheme(state, c);
}

// -------------
// REVERSE RULES
// -------------

#ifdef __cplusplus
template<typename it_in_utf8>
#endif
uaix_static bool segment_grapheme_rev_EP_utf8(it_in_utf8 first, it_in_utf8 last)
{
    it_in_utf8 src = last;
    type_codept c = 0; // tag_can_be_uninitialized

    while (src != first)
    {
        src = iter_rev_utf8(first, src, &c, iter_replacement);

        const type_codept prop = segment_grapheme_prop(stages_segment_grapheme_prop(c));

        if (prop == prop_GB_Extend)
            continue;
        if (prop == prop_GB_Extended_Pictographic)
            return false;

        break;
    }
    return true;
}

#ifdef __cplusplus
template<typename it_in_utf8>
#endif
uaix_static bool segment_grapheme_rev_RI_utf8(it_in_utf8 first, it_in_utf8 last)
{
    it_in_utf8 src = last;
    type_codept c = 0; // tag_can_be_uninitialized
    size_t count_RI = 0; // tag_must_be_initialized

    while (src != first)
    {
        src = iter_rev_utf8(first, src, &c, iter_replacement);

        const type_codept prop = segment_grapheme_prop(stages_segment_grapheme_prop(c));

        if (prop == prop_GB_Regional_Indicator)
            ++count_RI;
        else
            break;
    }
    return (count_RI % 2) != 0;
}

#ifdef __cplusplus
template<typename it_in_utf8>
#endif
uaix_static bool segment_grapheme_rev_inCB_utf8(it_in_utf8 first, it_in_utf8 last, bool inCB_Linker)
{
    it_in_utf8 src = last;
    type_codept c = 0; // tag_can_be_uninitialized

    while (src != first)
    {
        src = iter_rev_utf8(first, src, &c, iter_replacement);

        const type_codept inCB = segment_grapheme_prop_inCB(stages_segment_grapheme_prop(c));

        if (inCB == prop_GB_InCB_Consonant && inCB_Linker)
            return false;

        if (inCB == prop_GB_InCB_Linker)
        {
            inCB_Linker = true;
            continue;
        }
        if (inCB == prop_GB_InCB_Extend)
            continue;

        break;
    }
    return true;
}

#ifdef __cplusplus
template<typename it_in_utf8>
#endif
uaix_always_inline_tmpl
uaix_static bool segment_grapheme_rev_utf8(struct impl_segment_grapheme_state* const state, type_codept c,
                                           it_in_utf8 first, it_in_utf8 last)
{
    const type_codept raw_prop = stages_segment_grapheme_prop(c);

    const type_codept c_prop = segment_grapheme_prop(raw_prop);
    const type_codept p_prop = segment_grapheme_prop(state->prev_cp_prop);

    const type_codept c_inCB = segment_grapheme_prop_inCB(raw_prop);

    bool result = false; // tag_can_be_uninitialized

    // https://www.unicode.org/reports/tr29/#Grapheme_Cluster_Boundary_Rules
    // Unicode 15.1 rules

    if (state->state == state_segment_grapheme_begin)
        state->state = state_segment_grapheme_continue;
    else if (c_prop == prop_GB_CR && p_prop == prop_GB_LF) // GB3
        result = false; // NOLINT
    else if (c_prop == prop_GB_Control || c_prop == prop_GB_CR || c_prop == prop_GB_LF) // GB4
        result = true; // NOLINT
    else if (p_prop == prop_GB_Control || p_prop == prop_GB_CR || p_prop == prop_GB_LF) // GB5
        result = true; // NOLINT
    else if (c_prop == prop_GB_L && (p_prop == prop_GB_L || p_prop == prop_GB_V || p_prop == prop_GB_LV || p_prop == prop_GB_LVT)) // GB6
        result = false; // NOLINT
    else if ((c_prop == prop_GB_LV || c_prop == prop_GB_V) && (p_prop == prop_GB_V || p_prop == prop_GB_T)) // GB7
        result = false; // NOLINT
    else if ((c_prop == prop_GB_LVT || c_prop == prop_GB_T) && p_prop == prop_GB_T) // GB8
        result = false; // NOLINT
    else if (p_prop == prop_GB_Extend || p_prop == prop_GB_ZWJ) // GB9
        result = false; // NOLINT
    else if (p_prop == prop_GB_SpacingMark) // GB9a
        result = false; // NOLINT
    else if (c_prop == prop_GB_Prepend) // GB9b
        result = false; // NOLINT
    else if ((c_inCB == prop_GB_InCB_Linker || c_inCB == prop_GB_InCB_Extend) &&
             segment_grapheme_prop_inCB(state->prev_cp_prop) == prop_GB_InCB_Consonant) // GB9c
        result = segment_grapheme_rev_inCB_utf8(first, last, c_inCB == prop_GB_InCB_Linker);
    else if (c_prop == prop_GB_ZWJ && p_prop == prop_GB_Extended_Pictographic) // GB11
        result = segment_grapheme_rev_EP_utf8(first, last);
    else if (c_prop == prop_GB_Regional_Indicator && p_prop == prop_GB_Regional_Indicator) // GB12/GB13
        result = segment_grapheme_rev_RI_utf8(first, last);
    else // GB999
        result = true; // NOLINT

    state->prev_cp = c;
    state->prev_cp_prop = raw_prop;

    return result;
}

#ifdef __cplusplus
template<typename it_in_utf8>
#endif
uaix_static bool impl_segment_grapheme_rev_utf8(struct impl_segment_grapheme_state* const state, type_codept c,
                                                it_in_utf8 first, it_in_utf8 last)
{
    return segment_grapheme_rev_utf8(state, c, first, last);
}

#ifdef __cplusplus
template<typename it_in_utf8>
#endif
uaix_always_inline_tmpl
uaix_static bool inline_segment_grapheme_rev_utf8(struct impl_segment_grapheme_state* const state, type_codept c,
                                                  it_in_utf8 first, it_in_utf8 last)
{
    return segment_grapheme_rev_utf8(state, c, first, last);
}

// BEGIN: GENERATED UTF-16 FUNCTIONS
#ifndef UNI_ALGO_DOC_GENERATED_UTF16

#ifdef __cplusplus
template<typename it_in_utf16>
#endif
uaix_static bool segment_grapheme_rev_EP_utf16(it_in_utf16 first, it_in_utf16 last)
{
    it_in_utf16 src = last;
    type_codept c = 0; // tag_can_be_uninitialized

    while (src != first)
    {
        src = iter_rev_utf16(first, src, &c, iter_replacement);

        const type_codept prop = segment_grapheme_prop(stages_segment_grapheme_prop(c));

        if (prop == prop_GB_Extend)
            continue;
        if (prop == prop_GB_Extended_Pictographic)
            return false;

        break;
    }
    return true;
}

#ifdef __cplusplus
template<typename it_in_utf16>
#endif
uaix_static bool segment_grapheme_rev_RI_utf16(it_in_utf16 first, it_in_utf16 last)
{
    it_in_utf16 src = last;
    type_codept c = 0; // tag_can_be_uninitialized
    size_t count_RI = 0; // tag_must_be_initialized

    while (src != first)
    {
        src = iter_rev_utf16(first, src, &c, iter_replacement);

        const type_codept prop = segment_grapheme_prop(stages_segment_grapheme_prop(c));

        if (prop == prop_GB_Regional_Indicator)
            ++count_RI;
        else
            break;
    }
    return (count_RI % 2) != 0;
}

#ifdef __cplusplus
template<typename it_in_utf16>
#endif
uaix_static bool segment_grapheme_rev_inCB_utf16(it_in_utf16 first, it_in_utf16 last, bool inCB_Linker)
{
    it_in_utf16 src = last;
    type_codept c = 0; // tag_can_be_uninitialized

    while (src != first)
    {
        src = iter_rev_utf16(first, src, &c, iter_replacement);

        const type_codept inCB = segment_grapheme_prop_inCB(stages_segment_grapheme_prop(c));

        if (inCB == prop_GB_InCB_Consonant && inCB_Linker)
            return false;

        if (inCB == prop_GB_InCB_Linker)
        {
            inCB_Linker = true;
            continue;
        }
        if (inCB == prop_GB_InCB_Extend)
            continue;

        break;
    }
    return true;
}

#ifdef __cplusplus
template<typename it_in_utf16>
#endif
uaix_always_inline_tmpl
uaix_static bool segment_grapheme_rev_utf16(struct impl_segment_grapheme_state* const state, type_codept c,
                                            it_in_utf16 first, it_in_utf16 last)
{
    const type_codept raw_prop = stages_segment_grapheme_prop(c);

    const type_codept c_prop = segment_grapheme_prop(raw_prop);
    const type_codept p_prop = segment_grapheme_prop(state->prev_cp_prop);

    const type_codept c_inCB = segment_grapheme_prop_inCB(raw_prop);

    bool result = false; // tag_can_be_uninitialized

    // https://www.unicode.org/reports/tr29/#Grapheme_Cluster_Boundary_Rules
    // Unicode 15.1 rules

    if (state->state == state_segment_grapheme_begin)
        state->state = state_segment_grapheme_continue;
    else if (c_prop == prop_GB_CR && p_prop == prop_GB_LF) // GB3
        result = false; // NOLINT
    else if (c_prop == prop_GB_Control || c_prop == prop_GB_CR || c_prop == prop_GB_LF) // GB4
        result = true; // NOLINT
    else if (p_prop == prop_GB_Control || p_prop == prop_GB_CR || p_prop == prop_GB_LF) // GB5
        result = true; // NOLINT
    else if (c_prop == prop_GB_L && (p_prop == prop_GB_L || p_prop == prop_GB_V || p_prop == prop_GB_LV || p_prop == prop_GB_LVT)) // GB6
        result = false; // NOLINT
    else if ((c_prop == prop_GB_LV || c_prop == prop_GB_V) && (p_prop == prop_GB_V || p_prop == prop_GB_T)) // GB7
        result = false; // NOLINT
    else if ((c_prop == prop_GB_LVT || c_prop == prop_GB_T) && p_prop == prop_GB_T) // GB8
        result = false; // NOLINT
    else if (p_prop == prop_GB_Extend || p_prop == prop_GB_ZWJ) // GB9
        result = false; // NOLINT
    else if (p_prop == prop_GB_SpacingMark) // GB9a
        result = false; // NOLINT
    else if (c_prop == prop_GB_Prepend) // GB9b
        result = false; // NOLINT
    else if ((c_inCB == prop_GB_InCB_Linker || c_inCB == prop_GB_InCB_Extend) &&
             segment_grapheme_prop_inCB(state->prev_cp_prop) == prop_GB_InCB_Consonant) // GB9c
        result = segment_grapheme_rev_inCB_utf16(first, last, c_inCB == prop_GB_InCB_Linker);
    else if (c_prop == prop_GB_ZWJ && p_prop == prop_GB_Extended_Pictographic) // GB11
        result = segment_grapheme_rev_EP_utf16(first, last);
    else if (c_prop == prop_GB_Regional_Indicator && p_prop == prop_GB_Regional_Indicator) // GB12/GB13
        result = segment_grapheme_rev_RI_utf16(first, last);
    else // GB999
        result = true; // NOLINT

    state->prev_cp = c;
    state->prev_cp_prop = raw_prop;

    return result;
}

#ifdef __cplusplus
template<typename it_in_utf16>
#endif
uaix_static bool impl_segment_grapheme_rev_utf16(struct impl_segment_grapheme_state* const state, type_codept c,
                                                 it_in_utf16 first, it_in_utf16 last)
{
    return segment_grapheme_rev_utf16(state, c, first, last);
}

#ifdef __cplusplus
template<typename it_in_utf16>
#endif
uaix_always_inline_tmpl
uaix_static bool inline_segment_grapheme_rev_utf16(struct impl_segment_grapheme_state* const state, type_codept c,
                                                   it_in_utf16 first, it_in_utf16 last)
{
    return segment_grapheme_rev_utf16(state, c, first, last);
}

#endif // UNI_ALGO_DOC_GENERATED_UTF16
// END: GENERATED UTF-16 FUNCTIONS


UNI_ALGO_IMPL_NAMESPACE_END

//!#include "internal_undefs.h"


// AMALGAMATION: uni_algo/impl/impl_segment_word.h


//!#include "impl_iter.h"

//!#include "internal_defines.h"
//!#include "internal_stages.h"

#ifndef UNI_ALGO_STATIC_DATA
//!#include "data/extern_segment_word.h"
#else
//!#include "data/data_segment_word.h"
#endif

UNI_ALGO_IMPL_NAMESPACE_BEGIN

// See generator_segment_word in gen/gen.h

// NOTE: The order of the word properties is important here:
// 1. New lines, punctuation, space etc. must be in this order:
// CR/LF/Newline -> Extend -> ZWJ -> Format -> Punctuation -> WSegSpace
uaix_const type_codept prop_WB_CR                    = 1;
uaix_const type_codept prop_WB_LF                    = 2;
uaix_const type_codept prop_WB_Newline               = 3;
uaix_const type_codept prop_WB_Extend                = 4;
uaix_const type_codept prop_WB_ZWJ                   = 5;
uaix_const type_codept prop_WB_Format                = 6;
uaix_const type_codept prop_WB_Single_Quote          = 7;
uaix_const type_codept prop_WB_Double_Quote          = 8;
uaix_const type_codept prop_WB_MidNumLet             = 9;
uaix_const type_codept prop_WB_MidLetter             = 10;
uaix_const type_codept prop_WB_MidNum                = 11;
uaix_const type_codept prop_WB_ExtendNumLet          = 12;
uaix_const type_codept prop_WB_WSegSpace             = 13;
// 2. Everything else that can be considered a word must be in this order:
// Numeric -> Alphabetic -> Kana -> Ideographic -> Emoji
uaix_const type_codept prop_WB_Numeric               = 14;
uaix_const type_codept prop_WB_ALetter               = 15;
uaix_const type_codept prop_WB_Hebrew_Letter         = 16;
uaix_const type_codept prop_WX_Remaining_Alphabetic  = 17;
uaix_const type_codept prop_WB_Katakana              = 18;
uaix_const type_codept prop_WX_Remaining_Hiragana    = 19;
uaix_const type_codept prop_WX_Remaining_Ideographic = 20;
// 3. Regional_Indicator must be the last because it can be considered emoji
uaix_const type_codept prop_WB_Regional_Indicator    = 21;

uaix_const int state_segment_word_begin    = 0;
uaix_const int state_segment_word_continue = 1;
uaix_const int state_segment_word_RI       = 2;
uaix_const int state_segment_word_RI_RI    = 3;

uaix_always_inline
uaix_static type_codept stages_segment_word_prop(type_codept c)
{
    // This function returns raw property that contains property with Extended_Pictographic
    // Two functions below must be used to get the real property and Extended_Pictographic
    return stages(c, stage1_segment_word, stage2_segment_word);
}

uaix_always_inline
uaix_static type_codept segment_word_prop(type_codept prop)
{
    return (prop & 0x7F); // 7 right bits are used for properties
}

uaix_always_inline
uaix_static bool segment_word_prop_ext_pic(type_codept prop)
{
    return (prop & 0x80) ? true : false; // First (left) bit is used for Extended_Pictographic
}

struct impl_segment_word_state
{
    type_codept prev_cp;
    type_codept prev_cp_prop;

    type_codept prev_cp1;
    type_codept prev_cp1_prop;

    type_codept prev_cp2;
    type_codept prev_cp2_prop;

    int state;
};

uaix_always_inline
uaix_static void impl_segment_word_state_reset(struct impl_segment_word_state* const state)
{
    state->prev_cp = 0;
    state->prev_cp_prop = 0;

    state->prev_cp1 = 0;
    state->prev_cp1_prop = 0;

    state->prev_cp2 = 0;
    state->prev_cp2_prop = 0;

    state->state = state_segment_word_begin;
}

uaix_always_inline
uaix_static bool impl_segment_is_word(type_codept word_prop)
{
    // ICU analog: !UBRK_WORD_NONE
    // Excludes spaces and most punctuation and emojis
    return (word_prop >= prop_WB_Numeric && word_prop <= prop_WX_Remaining_Ideographic);
    // REMINDER: Treat all emojis as words too
    //return (word_prop >= prop_WB_Numeric);
    // REMINDER: Treat "letter emojis" (ALetter | Extended_Pictographic) as words too
    //return (word_prop >= prop_WB_Numeric && word_prop <= prop_WX_Remaining_Ideographic) || word_prop == (prop_WB_ALetter | 0x80);
}

uaix_always_inline
uaix_static bool impl_segment_is_word_number(type_codept word_prop)
{
    // ICU analog: UBRK_WORD_NUMBER
    // Includes only numbers
    return (word_prop == prop_WB_Numeric);
}

uaix_always_inline
uaix_static bool impl_segment_is_word_letter(type_codept word_prop)
{
    // ICU analog: UBRK_WORD_LETTER
    // Includes words that contain letters
    // Excludes numbers and kana and ideographic
    return (word_prop >= prop_WB_ALetter && word_prop <= prop_WX_Remaining_Alphabetic);
}

uaix_always_inline
uaix_static bool impl_segment_is_word_kana(type_codept word_prop)
{
    // ICU analog: UBRK_WORD_KANA
    // Includes only kana
    return (word_prop == prop_WB_Katakana || word_prop == prop_WX_Remaining_Hiragana);
}

uaix_always_inline
uaix_static bool impl_segment_is_word_ideo(type_codept word_prop)
{
    // ICU analog: UBRK_WORD_IDEO
    // Includes only ideographic
    return (word_prop == prop_WX_Remaining_Ideographic);
}

uaix_always_inline
uaix_static bool impl_segment_is_word_emoji(type_codept word_prop)
{
    // Includes only emojis
    return (word_prop >= prop_WB_Regional_Indicator); // Includes Extended_Pictographic
}

uaix_always_inline
uaix_static bool impl_segment_is_word_punct(type_codept word_prop)
{
    // Includes only punctuation
    return (word_prop > prop_WB_Format && word_prop < prop_WB_WSegSpace);
}

uaix_always_inline
uaix_static bool impl_segment_is_word_space(type_codept word_prop)
{
    // Includes only spaces
    return (word_prop == prop_WB_WSegSpace);
}

uaix_always_inline
uaix_static bool impl_segment_is_word_newline(type_codept word_prop)
{
    // Includes only spaces
    return (word_prop == prop_WB_CR || word_prop == prop_WB_LF || word_prop == prop_WB_Newline);
}

uaix_always_inline
uaix_static bool segment_word_skip(type_codept prop)
{
    return (prop == prop_WB_ZWJ || prop == prop_WB_Extend || prop == prop_WB_Format);
}

#ifdef __cplusplus
template<typename it_in_utf8, typename it_end_utf8>
#endif
uaix_static type_codept segment_word_skip_utf8(it_in_utf8 first, it_end_utf8 last)
{
    /* C++ Note: this function makes the word segmentation algorithm incompatible with input iterators.
     * This means Word Boundary Rules are not compatible with streams at all and require at least forward iterator.
     * It can even look like it works but it never pass tests because we must go back after this function.
     * The test line where it fails: "\x0061\x003A\x0001" - AHLetter + MidLetter + Other.
     * Must be 3 words but if we don't go back it will be 2. */

    it_in_utf8 src = first;
    type_codept c = 0; // tag_can_be_uninitialized

    while (src != last)
    {
        src = iter_utf8(src, last, &c, iter_replacement);

        const type_codept prop = segment_word_prop(stages_segment_word_prop(c));

        if (segment_word_skip(prop))
            continue;

        return prop;
    }
    return 0;
}

#ifdef __cplusplus
template<typename it_in_utf8, typename it_end_utf8>
#endif
uaix_always_inline_tmpl
uaix_static bool segment_word_utf8(struct impl_segment_word_state* const state, type_codept c, type_codept* const word_prop,
                                   it_in_utf8 first, it_end_utf8 last)
{
    // word_prop property must be used only with impl_segment_is_word* functions

    // TODO: https://unicode.org/reports/tr29/#State_Machines
    // ftp://ftp.unicode.org/Public/UNIDATA/auxiliary/WordBreakTest.html
    // Note that only WB5, WB7a, WB8, WB9, WB10, WB13 rules can be handled
    // with the state table so it's not even worth it probably.
    // Compared the performance with ICU it's already much faster so it can wait.

    const type_codept raw_prop = stages_segment_word_prop(c);

    const type_codept c_prop = segment_word_prop(raw_prop);
    const type_codept p_prop = segment_word_prop(state->prev_cp_prop);

    // Previous values of code points with WB4 rules
    const type_codept p1_prop = segment_word_prop(state->prev_cp1_prop);
    const type_codept p2_prop = segment_word_prop(state->prev_cp2_prop);

    type_codept s_prop = 0; // tag_can_be_uninitialized

    bool result = false; // tag_can_be_uninitialized

    // https://www.unicode.org/reports/tr29/#Word_Boundary_Rules
    // Unicode 11.0 - 15.0 rules

    if (state->state == state_segment_word_begin)
    {
        state->state = state_segment_word_continue;
        *word_prop = 0;
    }
    else if (p_prop == prop_WB_CR && c_prop == prop_WB_LF) // WB3
        result = false; // NOLINT
    else if (p_prop == prop_WB_Newline || p_prop == prop_WB_CR || p_prop == prop_WB_LF) // WB3a
        result = true; // NOLINT
    else if (c_prop == prop_WB_Newline || c_prop == prop_WB_CR || c_prop == prop_WB_LF) // WB3b
        result = true; // NOLINT
    else if (p_prop == prop_WB_ZWJ && segment_word_prop_ext_pic(raw_prop)) // WB3c
        result = false; // NOLINT
    else if (p_prop == prop_WB_WSegSpace && c_prop == prop_WB_WSegSpace) // WB3d
        result = false; // NOLINT
    else if (segment_word_skip(c_prop)) // WB4
        result = false; // NOLINT

    // p and p_prop must not be used anymore because WB4 takes effect below this line

    else if ((p1_prop == prop_WB_ALetter || p1_prop == prop_WB_Hebrew_Letter) &&
             (c_prop == prop_WB_ALetter || c_prop == prop_WB_Hebrew_Letter)) // WB5
        result = false; // NOLINT
    else if ((p1_prop == prop_WB_ALetter || p1_prop == prop_WB_Hebrew_Letter) &&
             (c_prop == prop_WB_MidLetter || c_prop == prop_WB_MidNumLet || c_prop == prop_WB_Single_Quote) &&
             ((s_prop = segment_word_skip_utf8(first, last)) != 0 && // NOLINT(bugprone-assignment-in-if-condition)
              (s_prop == prop_WB_ALetter || s_prop == prop_WB_Hebrew_Letter))) // WB6
        result = false; // NOLINT
    else if ((p2_prop == prop_WB_ALetter || p2_prop == prop_WB_Hebrew_Letter) &&
             (p1_prop == prop_WB_MidLetter || p1_prop == prop_WB_MidNumLet || p1_prop == prop_WB_Single_Quote) &&
             (c_prop == prop_WB_ALetter || c_prop == prop_WB_Hebrew_Letter)) // WB7
        result = false; // NOLINT
    else if (p1_prop == prop_WB_Hebrew_Letter && c_prop == prop_WB_Single_Quote) // WB7a
        result = false; // NOLINT
    else if (p1_prop == prop_WB_Hebrew_Letter && c_prop == prop_WB_Double_Quote &&
             segment_word_skip_utf8(first, last) == prop_WB_Hebrew_Letter) // WB7b
        result = false; // NOLINT
    else if (p2_prop == prop_WB_Hebrew_Letter && p1_prop == prop_WB_Double_Quote && c_prop == prop_WB_Hebrew_Letter) // WB7c
        result = false; // NOLINT
    else if (p1_prop == prop_WB_Numeric && c_prop == prop_WB_Numeric) // WB8
        result = false; // NOLINT
    else if ((p1_prop == prop_WB_ALetter || p1_prop == prop_WB_Hebrew_Letter) && c_prop == prop_WB_Numeric) // WB9
        result = false; // NOLINT
    else if (p1_prop == prop_WB_Numeric && (c_prop == prop_WB_ALetter || c_prop == prop_WB_Hebrew_Letter)) // WB10
        result = false; // NOLINT
    else if (p2_prop == prop_WB_Numeric &&
             (p1_prop == prop_WB_MidNum || p1_prop == prop_WB_MidNumLet || p1_prop == prop_WB_Single_Quote) &&
             c_prop == prop_WB_Numeric) // WB11
        result = false; // NOLINT
    else if (p1_prop == prop_WB_Numeric &&
             (c_prop == prop_WB_MidNum || c_prop == prop_WB_MidNumLet || c_prop == prop_WB_Single_Quote) &&
             segment_word_skip_utf8(first, last) == prop_WB_Numeric) // WB12
        result = false; // NOLINT
    else if (p1_prop == prop_WB_Katakana && c_prop == prop_WB_Katakana) // WB13
        result = false; // NOLINT
    else if (((p1_prop == prop_WB_ALetter || p1_prop == prop_WB_Hebrew_Letter) ||
              p1_prop == prop_WB_Numeric || p1_prop == prop_WB_Katakana || p1_prop == prop_WB_ExtendNumLet) &&
             c_prop == prop_WB_ExtendNumLet) // WB13a
        result = false; // NOLINT
    else if (p1_prop == prop_WB_ExtendNumLet &&
             ((c_prop == prop_WB_ALetter || c_prop == prop_WB_Hebrew_Letter) ||
              c_prop == prop_WB_Numeric || c_prop == prop_WB_Katakana)) // WB13b
        result = false; // NOLINT
    else if (state->state == state_segment_word_RI && c_prop == prop_WB_Regional_Indicator) // WB15/WB16
        result = false; // NOLINT
    else // WB999
    {
        result = true;
        *word_prop = 0;
    }

    state->prev_cp = c;
    state->prev_cp_prop = raw_prop;

    if (segment_word_skip(c_prop))
        return result;

    // WB15/WB16
    if (c_prop == prop_WB_Regional_Indicator)
    {
        if (state->state == state_segment_word_RI)
            state->state = state_segment_word_RI_RI;
        else
            state->state = state_segment_word_RI;
    }
    else
        state->state = state_segment_word_continue;

    // Set previous values of codepoints with WB4 rules
    state->prev_cp2 = state->prev_cp1;
    state->prev_cp2_prop = state->prev_cp1_prop;
    state->prev_cp1 = c;
    state->prev_cp1_prop = raw_prop;

    if (raw_prop > *word_prop)
        *word_prop = raw_prop;

    return result;
}

#ifdef __cplusplus
template<typename it_in_utf8, typename it_end_utf8>
#endif
uaix_static bool impl_segment_word_utf8(struct impl_segment_word_state* const state, type_codept c, type_codept* const word_prop,
                                        it_in_utf8 first, it_end_utf8 last)
{
    return segment_word_utf8(state, c, word_prop, first, last);
}

#ifdef __cplusplus
template<typename it_in_utf8, typename it_end_utf8>
#endif
uaix_always_inline_tmpl
uaix_static bool inline_segment_word_utf8(struct impl_segment_word_state* const state, type_codept c, type_codept* const word_prop,
                                          it_in_utf8 first, it_end_utf8 last)
{
    return segment_word_utf8(state, c, word_prop, first, last);
}

// -------------
// REVERSE RULES
// -------------

#ifdef __cplusplus
template<typename it_in_utf8>
#endif
uaix_static type_codept segment_word_skip_rev_utf8(it_in_utf8 first, it_in_utf8 last)
{
    it_in_utf8 src = last;
    type_codept c = 0; // tag_can_be_uninitialized

    while (src != first)
    {
        src = iter_rev_utf8(first, src, &c, iter_replacement);

        const type_codept prop = segment_word_prop(stages_segment_word_prop(c));

        if (segment_word_skip(prop))
            continue;

        return prop;
    }
    return 0;
}

#ifdef __cplusplus
template<typename it_in_utf8>
#endif
uaix_always_inline_tmpl
uaix_static it_in_utf8 segment_word_skip_rev2_utf8(it_in_utf8 first, it_in_utf8 last, type_codept* const new_prop)
{
    it_in_utf8 src = last;
    type_codept c = 0; // tag_can_be_uninitialized

    while (src != first)
    {
        src = iter_rev_utf8(first, src, &c, iter_replacement);

        const type_codept prop = segment_word_prop(stages_segment_word_prop(c));

        if (segment_word_skip(prop))
            continue;

        *new_prop = prop;
        return src;
    }
    return src;
}

#ifdef __cplusplus
template<typename it_in_utf8>
#endif
uaix_static bool segment_word_rev_RI_utf8(it_in_utf8 first, it_in_utf8 last)
{
    it_in_utf8 src = last;
    type_codept c = 0; // tag_can_be_uninitialized
    size_t count_RI = 0; // tag_must_be_initialized

    while (src != first)
    {
        src = iter_rev_utf8(first, src, &c, iter_replacement);

        const type_codept prop = segment_word_prop(stages_segment_word_prop(c));

        if (segment_word_skip(prop))
            continue;

        if (prop == prop_WB_Regional_Indicator)
            ++count_RI;
        else
            break;
    }
    return (count_RI % 2) != 0;
}

#ifdef __cplusplus
template<typename it_in_utf8>
#endif
uaix_always_inline_tmpl
uaix_static bool segment_word_rev_utf8(struct impl_segment_word_state* const state, type_codept c, type_codept* const word_prop,
                                       it_in_utf8 first, it_in_utf8 last)
{
    // word_prop property must be used only with impl_segment_is_word* functions

    const type_codept raw_prop = stages_segment_word_prop(c);

    const type_codept c_prop = segment_word_prop(raw_prop);
    const type_codept p_prop = segment_word_prop(state->prev_cp_prop);

    // Previous values of code points with WB4 rules
    const type_codept p1_prop = segment_word_prop(state->prev_cp1_prop);
    const type_codept p2_prop = segment_word_prop(state->prev_cp2_prop);

    type_codept s_prop = 0; // tag_can_be_uninitialized

    bool result = false; // tag_can_be_uninitialized

    // https://www.unicode.org/reports/tr29/#Word_Boundary_Rules
    // Unicode 11.0 - 15.0 rules

    if (state->state == state_segment_word_begin)
    {
        state->state = state_segment_word_continue;
        *word_prop = 0;
    }
    else if (c_prop == prop_WB_CR && p_prop == prop_WB_LF) // WB3
        result = false; // NOLINT
    else if (c_prop == prop_WB_Newline || c_prop == prop_WB_CR || c_prop == prop_WB_LF) // WB3a
        result = true; // NOLINT
    else if (p_prop == prop_WB_Newline || p_prop == prop_WB_CR || p_prop == prop_WB_LF) // WB3b
        result = true; // NOLINT
    else if (c_prop == prop_WB_ZWJ && segment_word_prop_ext_pic(state->prev_cp_prop)) // WB3c
        result = false; // NOLINT
    else if (c_prop == prop_WB_WSegSpace && p_prop == prop_WB_WSegSpace) // WB3d
        result = false; // NOLINT
    else if (segment_word_skip(p_prop)) // WB4 First Part
        result = false; // NOLINT
    else
    {
        // WB4 Second Part
        // This is the complex one, c_prop is no good anymore because we must skip backward all Extend etc.
        // and find the real code point and get a new prop. All rules after WB4 must use it instead of c_prop
        // p_prop also cannot be used anymore by the same reasons as in forward rules.
        it_in_utf8 src = last;
        type_codept n_prop = c_prop;
        if (segment_word_skip(c_prop))
            src = segment_word_skip_rev2_utf8(first, last, &n_prop);

    if ((n_prop == prop_WB_ALetter || n_prop == prop_WB_Hebrew_Letter) &&
        (p1_prop == prop_WB_ALetter || p1_prop == prop_WB_Hebrew_Letter)) // WB5
        result = false; // NOLINT
    else if ((n_prop == prop_WB_ALetter || n_prop == prop_WB_Hebrew_Letter) &&
             (p1_prop == prop_WB_MidLetter || p1_prop == prop_WB_MidNumLet || p1_prop == prop_WB_Single_Quote) &&
             (p2_prop == prop_WB_ALetter || p2_prop == prop_WB_Hebrew_Letter)) // WB6
        result = false; // NOLINT
    else if ((p1_prop == prop_WB_ALetter || p1_prop == prop_WB_Hebrew_Letter) &&
             (n_prop == prop_WB_MidLetter || n_prop == prop_WB_MidNumLet || n_prop == prop_WB_Single_Quote) &&
             ((s_prop = segment_word_skip_rev_utf8(first, src)) != 0 && // NOLINT(bugprone-assignment-in-if-condition)
              (s_prop == prop_WB_ALetter || s_prop == prop_WB_Hebrew_Letter))) // WB7
        result = false; // NOLINT
    else if (n_prop == prop_WB_Hebrew_Letter && p1_prop == prop_WB_Single_Quote) // WB7a
        result = false; // NOLINT
    else if (n_prop == prop_WB_Hebrew_Letter && p1_prop == prop_WB_Double_Quote && p2_prop == prop_WB_Hebrew_Letter) // WB7b
        result = false; // NOLINT
    else if (p1_prop == prop_WB_Hebrew_Letter && n_prop == prop_WB_Double_Quote &&
             segment_word_skip_rev_utf8(first, src) == prop_WB_Hebrew_Letter) // WB7c
        result = false; // NOLINT
    else if (n_prop == prop_WB_Numeric && p1_prop == prop_WB_Numeric) // WB8
        result = false; // NOLINT
    else if ((n_prop == prop_WB_ALetter || n_prop == prop_WB_Hebrew_Letter) && p1_prop == prop_WB_Numeric) // WB9
        result = false; // NOLINT
    else if (n_prop == prop_WB_Numeric && (p1_prop == prop_WB_ALetter || p1_prop == prop_WB_Hebrew_Letter)) // WB10
        result = false; // NOLINT
    else if (p1_prop == prop_WB_Numeric &&
             (n_prop == prop_WB_MidNum || n_prop == prop_WB_MidNumLet || n_prop == prop_WB_Single_Quote) &&
             segment_word_skip_rev_utf8(first, src) == prop_WB_Numeric) // WB11
        result = false; // NOLINT
    else if (n_prop == prop_WB_Numeric &&
             (p1_prop == prop_WB_MidNum || p1_prop == prop_WB_MidNumLet || p1_prop == prop_WB_Single_Quote) &&
             p2_prop == prop_WB_Numeric) // WB12
        result = false; // NOLINT
    else if (n_prop == prop_WB_Katakana && p1_prop == prop_WB_Katakana) // WB13
        result = false; // NOLINT
    else if (((n_prop == prop_WB_ALetter || n_prop == prop_WB_Hebrew_Letter) ||
              n_prop == prop_WB_Numeric || n_prop == prop_WB_Katakana || n_prop == prop_WB_ExtendNumLet) &&
             p1_prop == prop_WB_ExtendNumLet) // WB13a
        result = false; // NOLINT
    else if (n_prop == prop_WB_ExtendNumLet &&
             ((p1_prop == prop_WB_ALetter || p1_prop == prop_WB_Hebrew_Letter) ||
              p1_prop == prop_WB_Numeric || p1_prop == prop_WB_Katakana)) // WB13b
        result = false; // NOLINT
    else if (n_prop == prop_WB_Regional_Indicator && p1_prop == prop_WB_Regional_Indicator) // WB15/WB16
        result = segment_word_rev_RI_utf8(first, src);
    else // WB999
        {
            result = true;
            *word_prop = 0;
        }
    }

    state->prev_cp = c;
    state->prev_cp_prop = raw_prop;

    if (segment_word_skip(c_prop))
        return result;

    // Set previous values of codepoints with WB4 rules
    state->prev_cp2 = state->prev_cp1;
    state->prev_cp2_prop = state->prev_cp1_prop;
    state->prev_cp1 = c;
    state->prev_cp1_prop = raw_prop;

    if (raw_prop > *word_prop)
        *word_prop = raw_prop;

    return result;
}

#ifdef __cplusplus
template<typename it_in_utf8>
#endif
uaix_static bool impl_segment_word_rev_utf8(struct impl_segment_word_state* const state, type_codept c, type_codept* const word_prop,
                                            it_in_utf8 first, it_in_utf8 last)
{
    return segment_word_rev_utf8(state, c, word_prop, first, last);
}

#ifdef __cplusplus
template<typename it_in_utf8>
#endif
uaix_always_inline_tmpl
uaix_static bool inline_segment_word_rev_utf8(struct impl_segment_word_state* const state, type_codept c, type_codept* const word_prop,
                                              it_in_utf8 first, it_in_utf8 last)
{
    return segment_word_rev_utf8(state, c, word_prop, first, last);
}

// BEGIN: GENERATED UTF-16 FUNCTIONS
#ifndef UNI_ALGO_DOC_GENERATED_UTF16

#ifdef __cplusplus
template<typename it_in_utf16, typename it_end_utf16>
#endif
uaix_static type_codept segment_word_skip_utf16(it_in_utf16 first, it_end_utf16 last)
{
    it_in_utf16 src = first;
    type_codept c = 0; // tag_can_be_uninitialized

    while (src != last)
    {
        src = iter_utf16(src, last, &c, iter_replacement);

        const type_codept prop = segment_word_prop(stages_segment_word_prop(c));

        if (segment_word_skip(prop))
            continue;

        return prop;
    }
    return 0;
}

#ifdef __cplusplus
template<typename it_in_utf16, typename it_end_utf16>
#endif
uaix_always_inline_tmpl
uaix_static bool segment_word_utf16(struct impl_segment_word_state* const state, type_codept c, type_codept* const word_prop,
                                    it_in_utf16 first, it_end_utf16 last)
{
    // word_prop property must be used only with impl_segment_is_word* functions

    const type_codept raw_prop = stages_segment_word_prop(c);

    const type_codept c_prop = segment_word_prop(raw_prop);
    const type_codept p_prop = segment_word_prop(state->prev_cp_prop);

    // Previous values of code points with WB4 rules
    const type_codept p1_prop = segment_word_prop(state->prev_cp1_prop);
    const type_codept p2_prop = segment_word_prop(state->prev_cp2_prop);

    type_codept s_prop = 0; // tag_can_be_uninitialized

    bool result = false; // tag_can_be_uninitialized

    // https://www.unicode.org/reports/tr29/#Word_Boundary_Rules
    // Unicode 11.0 - 15.0 rules

    if (state->state == state_segment_word_begin)
    {
        state->state = state_segment_word_continue;
        *word_prop = 0;
    }
    else if (p_prop == prop_WB_CR && c_prop == prop_WB_LF) // WB3
        result = false; // NOLINT
    else if (p_prop == prop_WB_Newline || p_prop == prop_WB_CR || p_prop == prop_WB_LF) // WB3a
        result = true; // NOLINT
    else if (c_prop == prop_WB_Newline || c_prop == prop_WB_CR || c_prop == prop_WB_LF) // WB3b
        result = true; // NOLINT
    else if (p_prop == prop_WB_ZWJ && segment_word_prop_ext_pic(raw_prop)) // WB3c
        result = false; // NOLINT
    else if (p_prop == prop_WB_WSegSpace && c_prop == prop_WB_WSegSpace) // WB3d
        result = false; // NOLINT
    else if (segment_word_skip(c_prop)) // WB4
        result = false; // NOLINT

    // p and p_prop must not be used anymore because WB4 takes effect below this line

    else if ((p1_prop == prop_WB_ALetter || p1_prop == prop_WB_Hebrew_Letter) &&
             (c_prop == prop_WB_ALetter || c_prop == prop_WB_Hebrew_Letter)) // WB5
        result = false; // NOLINT
    else if ((p1_prop == prop_WB_ALetter || p1_prop == prop_WB_Hebrew_Letter) &&
             (c_prop == prop_WB_MidLetter || c_prop == prop_WB_MidNumLet || c_prop == prop_WB_Single_Quote) &&
             ((s_prop = segment_word_skip_utf16(first, last)) != 0 && // NOLINT(bugprone-assignment-in-if-condition)
              (s_prop == prop_WB_ALetter || s_prop == prop_WB_Hebrew_Letter))) // WB6
        result = false; // NOLINT
    else if ((p2_prop == prop_WB_ALetter || p2_prop == prop_WB_Hebrew_Letter) &&
             (p1_prop == prop_WB_MidLetter || p1_prop == prop_WB_MidNumLet || p1_prop == prop_WB_Single_Quote) &&
             (c_prop == prop_WB_ALetter || c_prop == prop_WB_Hebrew_Letter)) // WB7
        result = false; // NOLINT
    else if (p1_prop == prop_WB_Hebrew_Letter && c_prop == prop_WB_Single_Quote) // WB7a
        result = false; // NOLINT
    else if (p1_prop == prop_WB_Hebrew_Letter && c_prop == prop_WB_Double_Quote &&
             segment_word_skip_utf16(first, last) == prop_WB_Hebrew_Letter) // WB7b
        result = false; // NOLINT
    else if (p2_prop == prop_WB_Hebrew_Letter && p1_prop == prop_WB_Double_Quote && c_prop == prop_WB_Hebrew_Letter) // WB7c
        result = false; // NOLINT
    else if (p1_prop == prop_WB_Numeric && c_prop == prop_WB_Numeric) // WB8
        result = false; // NOLINT
    else if ((p1_prop == prop_WB_ALetter || p1_prop == prop_WB_Hebrew_Letter) && c_prop == prop_WB_Numeric) // WB9
        result = false; // NOLINT
    else if (p1_prop == prop_WB_Numeric && (c_prop == prop_WB_ALetter || c_prop == prop_WB_Hebrew_Letter)) // WB10
        result = false; // NOLINT
    else if (p2_prop == prop_WB_Numeric &&
             (p1_prop == prop_WB_MidNum || p1_prop == prop_WB_MidNumLet || p1_prop == prop_WB_Single_Quote) &&
             c_prop == prop_WB_Numeric) // WB11
        result = false; // NOLINT
    else if (p1_prop == prop_WB_Numeric &&
             (c_prop == prop_WB_MidNum || c_prop == prop_WB_MidNumLet || c_prop == prop_WB_Single_Quote) &&
             segment_word_skip_utf16(first, last) == prop_WB_Numeric) // WB12
        result = false; // NOLINT
    else if (p1_prop == prop_WB_Katakana && c_prop == prop_WB_Katakana) // WB13
        result = false; // NOLINT
    else if (((p1_prop == prop_WB_ALetter || p1_prop == prop_WB_Hebrew_Letter) ||
              p1_prop == prop_WB_Numeric || p1_prop == prop_WB_Katakana || p1_prop == prop_WB_ExtendNumLet) &&
             c_prop == prop_WB_ExtendNumLet) // WB13a
        result = false; // NOLINT
    else if (p1_prop == prop_WB_ExtendNumLet &&
             ((c_prop == prop_WB_ALetter || c_prop == prop_WB_Hebrew_Letter) ||
              c_prop == prop_WB_Numeric || c_prop == prop_WB_Katakana)) // WB13b
        result = false; // NOLINT
    else if (state->state == state_segment_word_RI && c_prop == prop_WB_Regional_Indicator) // WB15/WB16
        result = false; // NOLINT
    else // WB999
    {
        result = true;
        *word_prop = 0;
    }

    state->prev_cp = c;
    state->prev_cp_prop = raw_prop;

    if (segment_word_skip(c_prop))
        return result;

    // WB15/WB16
    if (c_prop == prop_WB_Regional_Indicator)
    {
        if (state->state == state_segment_word_RI)
            state->state = state_segment_word_RI_RI;
        else
            state->state = state_segment_word_RI;
    }
    else
        state->state = state_segment_word_continue;

    // Set previous values of codepoints with WB4 rules
    state->prev_cp2 = state->prev_cp1;
    state->prev_cp2_prop = state->prev_cp1_prop;
    state->prev_cp1 = c;
    state->prev_cp1_prop = raw_prop;

    if (raw_prop > *word_prop)
        *word_prop = raw_prop;

    return result;
}

#ifdef __cplusplus
template<typename it_in_utf16, typename it_end_utf16>
#endif
uaix_static bool impl_segment_word_utf16(struct impl_segment_word_state* const state, type_codept c, type_codept* const word_prop,
                                         it_in_utf16 first, it_end_utf16 last)
{
    return segment_word_utf16(state, c, word_prop, first, last);
}

#ifdef __cplusplus
template<typename it_in_utf16, typename it_end_utf16>
#endif
uaix_always_inline_tmpl
uaix_static bool inline_segment_word_utf16(struct impl_segment_word_state* const state, type_codept c, type_codept* const word_prop,
                                           it_in_utf16 first, it_end_utf16 last)
{
    return segment_word_utf16(state, c, word_prop, first, last);
}

#ifdef __cplusplus
template<typename it_in_utf16>
#endif
uaix_static type_codept segment_word_skip_rev_utf16(it_in_utf16 first, it_in_utf16 last)
{
    it_in_utf16 src = last;
    type_codept c = 0; // tag_can_be_uninitialized

    while (src != first)
    {
        src = iter_rev_utf16(first, src, &c, iter_replacement);

        const type_codept prop = segment_word_prop(stages_segment_word_prop(c));

        if (segment_word_skip(prop))
            continue;

        return prop;
    }
    return 0;
}

#ifdef __cplusplus
template<typename it_in_utf16>
#endif
uaix_always_inline_tmpl
uaix_static it_in_utf16 segment_word_skip_rev2_utf16(it_in_utf16 first, it_in_utf16 last, type_codept* const new_prop)
{
    it_in_utf16 src = last;
    type_codept c = 0; // tag_can_be_uninitialized

    while (src != first)
    {
        src = iter_rev_utf16(first, src, &c, iter_replacement);

        const type_codept prop = segment_word_prop(stages_segment_word_prop(c));

        if (segment_word_skip(prop))
            continue;

        *new_prop = prop;
        return src;
    }
    return src;
}

#ifdef __cplusplus
template<typename it_in_utf16>
#endif
uaix_static bool segment_word_rev_RI_utf16(it_in_utf16 first, it_in_utf16 last)
{
    it_in_utf16 src = last;
    type_codept c = 0; // tag_can_be_uninitialized
    size_t count_RI = 0; // tag_must_be_initialized

    while (src != first)
    {
        src = iter_rev_utf16(first, src, &c, iter_replacement);

        const type_codept prop = segment_word_prop(stages_segment_word_prop(c));

        if (segment_word_skip(prop))
            continue;

        if (prop == prop_WB_Regional_Indicator)
            ++count_RI;
        else
            break;
    }
    return (count_RI % 2) != 0;
}

#ifdef __cplusplus
template<typename it_in_utf16>
#endif
uaix_always_inline_tmpl
uaix_static bool segment_word_rev_utf16(struct impl_segment_word_state* const state, type_codept c, type_codept* const word_prop,
                                        it_in_utf16 first, it_in_utf16 last)
{
    // word_prop property must be used only with impl_segment_is_word* functions

    const type_codept raw_prop = stages_segment_word_prop(c);

    const type_codept c_prop = segment_word_prop(raw_prop);
    const type_codept p_prop = segment_word_prop(state->prev_cp_prop);

    // Previous values of code points with WB4 rules
    const type_codept p1_prop = segment_word_prop(state->prev_cp1_prop);
    const type_codept p2_prop = segment_word_prop(state->prev_cp2_prop);

    type_codept s_prop = 0; // tag_can_be_uninitialized

    bool result = false; // tag_can_be_uninitialized

    // https://www.unicode.org/reports/tr29/#Word_Boundary_Rules
    // Unicode 11.0 - 15.0 rules

    if (state->state == state_segment_word_begin)
    {
        state->state = state_segment_word_continue;
        *word_prop = 0;
    }
    else if (c_prop == prop_WB_CR && p_prop == prop_WB_LF) // WB3
        result = false; // NOLINT
    else if (c_prop == prop_WB_Newline || c_prop == prop_WB_CR || c_prop == prop_WB_LF) // WB3a
        result = true; // NOLINT
    else if (p_prop == prop_WB_Newline || p_prop == prop_WB_CR || p_prop == prop_WB_LF) // WB3b
        result = true; // NOLINT
    else if (c_prop == prop_WB_ZWJ && segment_word_prop_ext_pic(state->prev_cp_prop)) // WB3c
        result = false; // NOLINT
    else if (c_prop == prop_WB_WSegSpace && p_prop == prop_WB_WSegSpace) // WB3d
        result = false; // NOLINT
    else if (segment_word_skip(p_prop)) // WB4
        result = false; // NOLINT
    else
    {
        it_in_utf16 src = last;
        type_codept n_prop = c_prop;
        if (segment_word_skip(c_prop))
            src = segment_word_skip_rev2_utf16(first, last, &n_prop);

    if ((n_prop == prop_WB_ALetter || n_prop == prop_WB_Hebrew_Letter) &&
        (p1_prop == prop_WB_ALetter || p1_prop == prop_WB_Hebrew_Letter)) // WB5
        result = false; // NOLINT
    else if ((n_prop == prop_WB_ALetter || n_prop == prop_WB_Hebrew_Letter) &&
             (p1_prop == prop_WB_MidLetter || p1_prop == prop_WB_MidNumLet || p1_prop == prop_WB_Single_Quote) &&
             (p2_prop == prop_WB_ALetter || p2_prop == prop_WB_Hebrew_Letter)) // WB6
        result = false; // NOLINT
    else if ((p1_prop == prop_WB_ALetter || p1_prop == prop_WB_Hebrew_Letter) &&
             (n_prop == prop_WB_MidLetter || n_prop == prop_WB_MidNumLet || n_prop == prop_WB_Single_Quote) &&
             ((s_prop = segment_word_skip_rev_utf16(first, src)) != 0 && // NOLINT(bugprone-assignment-in-if-condition)
              (s_prop == prop_WB_ALetter || s_prop == prop_WB_Hebrew_Letter))) // WB7
        result = false; // NOLINT
    else if (n_prop == prop_WB_Hebrew_Letter && p1_prop == prop_WB_Single_Quote) // WB7a
        result = false; // NOLINT
    else if (n_prop == prop_WB_Hebrew_Letter && p1_prop == prop_WB_Double_Quote && p2_prop == prop_WB_Hebrew_Letter) // WB7b
        result = false; // NOLINT
    else if (p1_prop == prop_WB_Hebrew_Letter && n_prop == prop_WB_Double_Quote &&
             segment_word_skip_rev_utf16(first, src) == prop_WB_Hebrew_Letter) // WB7c
        result = false; // NOLINT
    else if (n_prop == prop_WB_Numeric && p1_prop == prop_WB_Numeric) // WB8
        result = false; // NOLINT
    else if ((n_prop == prop_WB_ALetter || n_prop == prop_WB_Hebrew_Letter) && p1_prop == prop_WB_Numeric) // WB9
        result = false; // NOLINT
    else if (n_prop == prop_WB_Numeric && (p1_prop == prop_WB_ALetter || p1_prop == prop_WB_Hebrew_Letter)) // WB10
        result = false; // NOLINT
    else if (p1_prop == prop_WB_Numeric &&
             (n_prop == prop_WB_MidNum || n_prop == prop_WB_MidNumLet || n_prop == prop_WB_Single_Quote) &&
             segment_word_skip_rev_utf16(first, src) == prop_WB_Numeric) // WB11
        result = false; // NOLINT
    else if (n_prop == prop_WB_Numeric &&
             (p1_prop == prop_WB_MidNum || p1_prop == prop_WB_MidNumLet || p1_prop == prop_WB_Single_Quote) &&
             p2_prop == prop_WB_Numeric) // WB12
        result = false; // NOLINT
    else if (n_prop == prop_WB_Katakana && p1_prop == prop_WB_Katakana) // WB13
        result = false; // NOLINT
    else if (((n_prop == prop_WB_ALetter || n_prop == prop_WB_Hebrew_Letter) ||
              n_prop == prop_WB_Numeric || n_prop == prop_WB_Katakana || n_prop == prop_WB_ExtendNumLet) &&
             p1_prop == prop_WB_ExtendNumLet) // WB13a
        result = false; // NOLINT
    else if (n_prop == prop_WB_ExtendNumLet &&
             ((p1_prop == prop_WB_ALetter || p1_prop == prop_WB_Hebrew_Letter) ||
              p1_prop == prop_WB_Numeric || p1_prop == prop_WB_Katakana)) // WB13b
        result = false; // NOLINT
    else if (n_prop == prop_WB_Regional_Indicator && p1_prop == prop_WB_Regional_Indicator) // WB15/WB16
        result = segment_word_rev_RI_utf16(first, src);
    else // WB999
        {
            result = true;
            *word_prop = 0;
        }
    }

    state->prev_cp = c;
    state->prev_cp_prop = raw_prop;

    if (segment_word_skip(c_prop))
        return result;

    // Set previous values of codepoints with WB4 rules
    state->prev_cp2 = state->prev_cp1;
    state->prev_cp2_prop = state->prev_cp1_prop;
    state->prev_cp1 = c;
    state->prev_cp1_prop = raw_prop;

    if (raw_prop > *word_prop)
        *word_prop = raw_prop;

    return result;
}

#ifdef __cplusplus
template<typename it_in_utf16>
#endif
uaix_static bool impl_segment_word_rev_utf16(struct impl_segment_word_state* const state, type_codept c, type_codept* const word_prop,
                                             it_in_utf16 first, it_in_utf16 last)
{
    return segment_word_rev_utf16(state, c, word_prop, first, last);
}

#ifdef __cplusplus
template<typename it_in_utf16>
#endif
uaix_always_inline_tmpl
uaix_static bool inline_segment_word_rev_utf16(struct impl_segment_word_state* const state, type_codept c, type_codept* const word_prop,
                                               it_in_utf16 first, it_in_utf16 last)
{
    return segment_word_rev_utf16(state, c, word_prop, first, last);
}

#endif // UNI_ALGO_DOC_GENERATED_UTF16
// END: GENERATED UTF-16 FUNCTIONS

UNI_ALGO_IMPL_NAMESPACE_END

//!#include "internal_undefs.h"


// AMALGAMATION: uni_algo/impl/impl_locale.h


//!#include "internal_defines.h"

UNI_ALGO_IMPL_NAMESPACE_BEGIN

// TODO:
// Everything related to locales is a mess in Unicode so what is the best approach is still a question.
// For now this file contains only conversion functions that store locale subtags in type_codept
// See Unicode Technical Standard #35 for all things that ICU supports in locale tags
// but we definitely don't want most of those things and want to KISS and follow BCP47.

// https://www.rfc-editor.org/rfc/bcp/bcp47.txt
// https://en.wikipedia.org/wiki/Script_(Unicode)
// https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes
// https://en.wikipedia.org/wiki/ISO_15924
// https://en.wikipedia.org/wiki/ISO_3166-1
// https://en.wikipedia.org/wiki/UN_M49
// https://en.wikipedia.org/wiki/ISO_4217
// https://www.unicode.org/reports/tr35/#Unknown_or_Invalid_Identifiers

uaix_const type_codept impl_locale_language_und = 0x756E6400; // ISO 639-1 / BCP47 (Undetermined) primary language
uaix_const type_codept impl_locale_script_Zzzz  = 0x5A7A7A7A; // ISO 15924
uaix_const type_codept impl_locale_region_ZZ    = 0x5A5A0000; // ISO 3166-1 alpha-2
//uaix_const type_codept impl_locale_region_ZZZ   = 0x5A5A5A00; // ISO 3166-1 alpha-3
//uaix_const type_codept impl_locale_region_999   = 0x39393900; // ISO 3166-1 numeric (UN M.49)
//uaix_const type_codept impl_locale_currency_XXX = 0x58585800; // ISO 4217

// This function must be always constexpr in C++ even if constexpr low-level is disabled
#ifdef __cplusplus
template <typename it_in_utf8>
constexpr   type_codept impl_locate_from_tag(it_in_utf8 s, size_t size)
#else
uaix_static type_codept impl_locate_from_tag(it_in_utf8 s, size_t size)
#endif
{
    if (size == 1)
        return ((s[0] & 0xFF) << 24);
    if (size == 2)
        return ((s[0] & 0xFF) << 24) | ((s[1] & 0xFF) << 16);
    if (size == 3)
        return ((s[0] & 0xFF) << 24) | ((s[1] & 0xFF) << 16) | ((s[2] & 0xFF) << 8);
    if (size == 4)
        return ((s[0] & 0xFF) << 24) | ((s[1] & 0xFF) << 16) | ((s[2] & 0xFF) << 8) | (s[3] & 0xFF);

    return 0;
}

#ifdef __cplusplus
template <typename it_out_utf8>
#endif
uaix_static size_t impl_locate_to_tag(type_codept v, it_out_utf8 s)
{
    size_t size = 0;

    if ((v >> 24) & 0xFF)
        s[size++] = (type_char8)((v >> 24) & 0xFF);
    if ((v >> 16) & 0xFF)
        s[size++] = (type_char8)((v >> 16) & 0xFF);
    if ((v >> 8) & 0xFF)
        s[size++] = (type_char8)((v >> 8) & 0xFF);
    if (v & 0xFF)
        s[size++] = (type_char8)(v & 0xFF);

    return size;
}

#ifdef __cplusplus
template <typename it_in_utf8>
#endif
uaix_static type_codept impl_locale_from_language(it_in_utf8 s, size_t size, type_codept unknown)
{
    // EXAMPLE: en/und (shortest ISO 639 code)
    type_codept result = 0;

    if (size != 2 && size != 3)
        return unknown;

    if (s[0] >= 'A' && s[0] <= 'Z')
        result |= (((s[0] ^ 32) & 0xFF) << 24);
    else if (s[0] >= 'a' && s[0] <= 'z')
        result |= ((s[0] & 0xFF) << 24);
    else
        return unknown;

    if (s[1] >= 'A' && s[1] <= 'Z')
        result |= (((s[1] ^ 32) & 0xFF) << 16);
    else if (s[1] >= 'a' && s[1] <= 'z')
        result |= ((s[1] & 0xFF) << 16);
    else
        return unknown;

    if (size == 3)
    {
        if (s[2] >= 'A' && s[2] <= 'Z')
            result |= (((s[2] ^ 32) & 0xFF) << 8);
        else if (s[2] >= 'a' && s[2] <= 'z')
            result |= ((s[2] & 0xFF) << 8);
        else
            return unknown;
    }

    return result;
}

#ifdef __cplusplus
template <typename it_in_utf8>
#endif
uaix_static type_codept impl_locale_from_script(it_in_utf8 s, size_t size, type_codept unknown)
{
    // EXAMPLE: Zzzz (ISO 15924 code)
    type_codept result = 0;

    if (size != 4)
        return unknown;

    if (s[0] >= 'A' && s[0] <= 'Z')
        result |= ((s[0] & 0xFF) << 24);
    else if (s[0] >= 'a' && s[0] <= 'z')
        result |= (((s[0] ^ 32) & 0xFF) << 24);
    else
        return unknown;

    if (s[1] >= 'A' && s[1] <= 'Z')
        result |= (((s[1] ^ 32) & 0xFF) << 16);
    else if (s[1] >= 'a' && s[1] <= 'z')
        result |= ((s[1] & 0xFF) << 16);
    else
        return unknown;

    if (s[2] >= 'A' && s[2] <= 'Z')
        result |= (((s[2] ^ 32) & 0xFF) << 8);
    else if (s[2] >= 'a' && s[2] <= 'z')
        result |= ((s[2] & 0xFF) << 8);
    else
        return unknown;

    if (s[3] >= 'A' && s[3] <= 'Z')
        result |= ((s[3] ^ 32) & 0xFF);
    else if (s[3] >= 'a' && s[3] <= 'z')
        result |= (s[3] & 0xFF);
    else
        return unknown;

    return result;
}

#ifdef __cplusplus
template <typename it_in_utf8>
#endif
uaix_static type_codept impl_locale_from_region(it_in_utf8 s, size_t size, type_codept unknown)
{
    // NOTE: Even though it's possible to use numeric codes for script subtag too
    // it's not handled there because BCP47 allows numeric codes for region subtag only.

    // EXAMPLE: 999 (UN M.49 code)
    if (size == 3)
    {
        if (s[0] >= '0' && s[0] <= '9' &&
            s[1] >= '0' && s[1] <= '9' &&
            s[2] >= '0' && s[2] <= '9')
            return ((s[0] & 0xFF) << 24) | ((s[1] & 0xFF) << 16) | ((s[2] & 0xFF) << 8);
            // return ((s[0] - 48) * 100) + ((s[1] - 48) * 10) + (s[2] - 48); // REMINDER: Numeric result

        return unknown;
    }

    // EXAMPLE: ZZ (ISO 3166-1 code)
    type_codept result = 0;

    if (size != 2)
        return unknown;

    if (s[0] >= 'A' && s[0] <= 'Z')
        result |= ((s[0] & 0xFF) << 24);
    else if (s[0] >= 'a' && s[0] <= 'z')
        result |= (((s[0] ^ 32) & 0xFF) << 24);
    else
        return unknown;

    if (s[1] >= 'A' && s[1] <= 'Z')
        result |= ((s[1] & 0xFF) << 16);
    else if (s[1] >= 'a' && s[1] <= 'z')
        result |= (((s[1] ^ 32) & 0xFF) << 16);
    else
        return unknown;

    return result;
}

#ifdef UNI_ALGO_EXPERIMENTAL

uaix_inline type_codept impl_locale_norm_language(type_codept v, type_codept unknown)
{
    // EXAMPLE: en/und (shortest ISO 639 code)
    type_codept result = 0;

    if (((v >> 24) & 0xFF) >= 'A' && ((v >> 24) & 0xFF) <= 'Z')
        result |= ((((v >> 24) & 0xFF) ^ 32) << 24);
    else if (((v >> 24) & 0xFF) >= 'a' && ((v >> 24) & 0xFF) <= 'z')
        result |= (((v >> 24) & 0xFF) << 24);
    else
        return unknown;

    if (((v >> 16) & 0xFF) >= 'A' && ((v >> 16) & 0xFF) <= 'Z')
        result |= ((((v >> 16) & 0xFF) ^ 32) << 16);
    else if (((v >> 16) & 0xFF) >= 'a' && ((v >> 16) & 0xFF) <= 'z')
        result |= (((v >> 16) & 0xFF) << 16);
    else
        return unknown;

    if (((v >> 8) & 0xFF) == 0)
        return result;

    if (((v >> 8) & 0xFF) >= 'A' && ((v >> 8) & 0xFF) <= 'Z')
        result |= ((((v >> 8) & 0xFF) ^ 32) << 8);
    else if (((v >> 8) & 0xFF) >= 'a' && ((v >> 8) & 0xFF) <= 'z')
        result |= (((v >> 8) & 0xFF) << 8);
    else
        return unknown;

    if ((v & 0xFF) != 0)
        return unknown;

    return result;
}

uaix_inline type_codept impl_locale_norm_script(type_codept v, type_codept unknown)
{
    // EXAMPLE: Zzzz (ISO 15924 code)
    type_codept result = 0;

    if (((v >> 24) & 0xFF) >= 'A' && ((v >> 24) & 0xFF) <= 'Z')
        result |= (((v >> 24) & 0xFF) << 24);
    else if (((v >> 24) & 0xFF) >= 'a' && ((v >> 24) & 0xFF) <= 'z')
        result |= ((((v >> 24) & 0xFF) ^ 32) << 24);
    else
        return unknown;

    if (((v >> 16) & 0xFF) >= 'A' && ((v >> 16) & 0xFF) <= 'Z')
        result |= ((((v >> 16) & 0xFF) ^ 32) << 16);
    else if (((v >> 16) & 0xFF) >= 'a' && ((v >> 16) & 0xFF) <= 'z')
        result |= (((v >> 16) & 0xFF) << 16);
    else
        return unknown;

    if (((v >> 8) & 0xFF) >= 'A' && ((v >> 8) & 0xFF) <= 'Z')
        result |= ((((v >> 8) & 0xFF) ^ 32) << 8);
    else if (((v >> 8) & 0xFF) >= 'a' && ((v >> 8) & 0xFF) <= 'z')
        result |= (((v >> 8) & 0xFF) << 8);
    else
        return unknown;

    if ((v & 0xFF) >= 'A' && (v & 0xFF) <= 'Z')
        result |= ((v & 0xFF) ^ 32);
    else if ((v & 0xFF) >= 'a' && (v & 0xFF) <= 'z')
        result |= (v & 0xFF);
    else
        return unknown;

    return result;
}

uaix_inline type_codept impl_locale_norm_region(type_codept v, type_codept unknown)
{
    // EXAMPLE: 999 (UN M.49 code)
    if (((v >> 24) & 0xFF) >= '0' && ((v >> 24) & 0xFF) <= '9' &&
        ((v >> 16) & 0xFF) >= '0' && ((v >> 16) & 0xFF) <= '9' &&
        ((v >> 8)  & 0xFF) >= '0' && ((v >> 8)  & 0xFF) <= '9' && (v & 0xFF) == 0)
        return (((v >> 24) & 0xFF) << 24) | (((v >> 16) & 0xFF) << 16) | (((v >> 8) & 0xFF) << 8);

    // EXAMPLE: ZZ (ISO 3166-1 code)
    type_codept result = 0;

    if (((v >> 24) & 0xFF) >= 'A' && ((v >> 24) & 0xFF) <= 'Z')
        result |= (((v >> 24) & 0xFF) << 24);
    else if (((v >> 24) & 0xFF) >= 'a' && ((v >> 24) & 0xFF) <= 'z')
        result |= ((((v >> 24) & 0xFF) ^ 32) << 24);
    else
        return unknown;

    if (((v >> 16) & 0xFF) >= 'A' && ((v >> 16) & 0xFF) <= 'Z')
        result |= (((v >> 16) & 0xFF) << 16);
    else if (((v >> 16) & 0xFF) >= 'a' && ((v >> 16) & 0xFF) <= 'z')
        result |= ((((v >> 16) & 0xFF) ^ 32) << 16);
    else
        return unknown;

    if (((v >> 8) & 0xFF) != 0)
        return unknown;
    if ((v & 0xFF) != 0)
        return unknown;

    return result;
}

#endif // UNI_ALGO_EXPERIMENTAL

#if 0
uaix_inline type_codept impl_locale_script_to_stage(type_codept v)
{
    // REMINDER:
    // x ^ 64 == x - 'A' + 1 (when x >= 'A' && x <= 'Z')
    // x ^ 96 == x - 'a' + 1 (when x >= 'z' && x <= 'z')
    // so x fit 5 bits and xxxx = 20 bits and max value is 0xFFFFFF

    // A compiler optimizes this function to around 40 instructions
    // it is possible to write it better.

    // For example it can be used to get script properties from
    // cldr/common/properties/scriptMetadata.txt
    // using two-stage table O(n) approach
    // but binary search O(log n) probably be better for such particular case.

    type_codept result = 0;

    if (((v >> 24) & 0xFF) >= 'A' && ((v >> 24) & 0xFF) <= 'Z')
        result |= ((((v >> 24) & 0xFF) ^ 64) << 15);
    else
        return 0;

    if (((v >> 16) & 0xFF) >= 'a' && ((v >> 16) & 0xFF) <= 'z')
        result |= ((((v >> 16) & 0xFF) ^ 96) << 10);
    else
        return 0;

    if (((v >> 8) & 0xFF) >= 'a' && ((v >> 8) & 0xFF) <= 'z')
        result |= ((((v >> 8) & 0xFF) ^ 96) << 5);
    else
        return 0;

    if ((v & 0xFF) >= 'a' && (v & 0xFF) <= 'z')
        result |= ((v & 0xFF) ^ 96);
    else
        return 0;

    return result;
}
#endif // 0

UNI_ALGO_IMPL_NAMESPACE_END

//!#include "internal_undefs.h"


// AMALGAMATION: uni_algo/impl/impl_case.h


//!#include "impl_iter.h"
// Note that title case has cross dependency with word segmentation module
// and if it's disabled all title case functions must be disabled too
#ifndef UNI_ALGO_DISABLE_SEGMENT_WORD
//!#include "impl_segment_word.h"
#endif

//!#include "internal_defines.h"
//!#include "internal_stages.h"

#ifndef UNI_ALGO_STATIC_DATA
//!#include "data/extern_case.h"
#else
//!#include "data/data_case.h"
#endif

UNI_ALGO_IMPL_NAMESPACE_BEGIN

// The length of a destination (result) string must be premultiplied with one of these
// Example: destination_length = source_length * impl_x_function_name
#ifndef UNI_ALGO_DISABLE_FULL_CASE
uaix_const size_t impl_x_case_map_utf8  = 3; // tag_unicode_unstable_value
uaix_const size_t impl_x_case_map_utf16 = 3; // tag_unicode_unstable_value
#else
uaix_const size_t impl_x_case_map_utf8  = 3; // tag_unicode_unstable_value
uaix_const size_t impl_x_case_map_utf16 = 1; // tag_unicode_unstable_value
#endif
#ifdef __cplusplus
uaix_const size_t impl_max_case_expand  = 3; // tag_unicode_unstable_value
#else // tag_synchronize
#define impl_max_case_expand 3
#endif
// All these values are Unicode unstable values even though Case_Folding is stable,
// but Lowercase_Mapping, Uppercase_Mapping, Titlecase_Mapping are not stable.
// https://www.unicode.org/policies/stability_policy.html#Property_Value

// Modes for case map functions
//uaix_const int impl_case_map_mode_null     = 0;
uaix_const int impl_case_map_mode_casefold   = 1;
uaix_const int impl_case_map_mode_uppercase  = 2;
uaix_const int impl_case_map_mode_lowercase  = 3;
uaix_const int impl_case_map_mode_titlecase  = 4;

uaix_const type_codept prop_Cased            = 1 << 0;
uaix_const type_codept prop_Cased_Ignorable  = 1 << 1;
uaix_const type_codept prop_Lowercase        = 1 << 2;
uaix_const type_codept prop_Uppercase        = 1 << 3;
uaix_const type_codept prop_Soft_Dotted      = 1 << 4; // impl_case_locale.h
uaix_const type_codept prop_CCC_NOT_0        = 1 << 5; // impl_case_locale.h
uaix_const type_codept prop_CCC_230          = 1 << 6; // impl_case_locale.h

struct case_special_buffer
{
    uaix_array(type_codept, cps, impl_max_case_expand);
};

struct case_special_pair
{
    size_t size;
    size_t count;
};

uaix_always_inline
uaix_static type_codept stages_lower(type_codept c)
{
    const type_codept v = stages(c, stage1_lower, stage2_lower);
    return v ? v : c;
}

uaix_always_inline
uaix_static type_codept stages_upper(type_codept c)
{
    const type_codept v = stages(c, stage1_upper, stage2_upper);
    return v ? v : c;
}

uaix_always_inline
uaix_static type_codept stages_fold(type_codept c)
{
    const type_codept v = stages(c, stage1_fold, stage2_fold);
    return v ? v : c;
}

#ifndef UNI_ALGO_DISABLE_SEGMENT_WORD

uaix_always_inline
uaix_static type_codept stages_title(type_codept c)
{
    const type_codept v = stages(c, stage1_title, stage2_title);
    return v ? v : c;
}

#endif // UNI_ALGO_DISABLE_SEGMENT_WORD

#ifndef UNI_ALGO_DISABLE_COLLATE

uaix_always_inline
uaix_static type_codept stages_order(type_codept c)
{
    const type_codept v = stages(c, stage1_order, stage2_order);
    return v ? v : c + 0x110000;
    // Sort code points that are not in DUCET in code point order
    // The result must never be > 0x3FBFFF or it will break our experimental sort keys
}

#endif // UNI_ALGO_DISABLE_COLLATE

uaix_always_inline
uaix_static type_codept stages_case_prop(type_codept c)
{
    return stages(c, stage1_case_prop, stage2_case_prop);
}

#ifndef UNI_ALGO_DISABLE_FULL_CASE

uaix_always_inline
uaix_static size_t stages_special_fold(type_codept c, struct case_special_buffer* const buffer)
{
    if (c <= 0xFFFF)
    {
        const size_t n = stages(c, stage1_special_fold, stage2_special_fold);
        buffer->cps[0] = stage3_special_fold[n][1];
        buffer->cps[1] = stage3_special_fold[n][2];
        buffer->cps[2] = stage3_special_fold[n][3];
        return stage3_special_fold[n][0];
    }
    return 0;
}

uaix_always_inline
uaix_static bool stages_special_fold_check(type_codept c)
{
    // This function itself is optimization

    if (c <= 0xFFFF)
    {
        const size_t n = stages(c, stage1_special_fold, stage2_special_fold);
        return n ? true : false;
    }
    return false;
}

uaix_always_inline
uaix_static size_t stages_special_upper(type_codept c, struct case_special_buffer* const buffer)
{
    if (c <= 0xFFFF)
    {
        const size_t n = stages(c, stage1_special_upper, stage2_special_upper);
        buffer->cps[0] = stage3_special_upper[n][1];
        buffer->cps[1] = stage3_special_upper[n][2];
        buffer->cps[2] = stage3_special_upper[n][3];
        return stage3_special_upper[n][0];
    }
    return 0;
}

uaix_always_inline
uaix_static bool stages_special_upper_check(type_codept c)
{
    // This function itself is optimization

    if (c <= 0xFFFF)
    {
        const size_t n = stages(c, stage1_special_upper, stage2_special_upper);
        return n ? true : false;
    }
    return false;
}

#ifndef UNI_ALGO_DISABLE_SEGMENT_WORD

uaix_always_inline
uaix_static size_t stages_special_title(type_codept c, struct case_special_buffer* const buffer)
{
    if (c <= 0xFFFF)
    {
        const size_t n = stages(c, stage1_special_title, stage2_special_title);
        buffer->cps[0] = stage3_special_title[n][1];
        buffer->cps[1] = stage3_special_title[n][2];
        buffer->cps[2] = stage3_special_title[n][3];
        return stage3_special_title[n][0];
    }
    return 0;
}

uaix_always_inline
uaix_static bool stages_special_title_check(type_codept c)
{
    // This function itself is optimization

    if (c <= 0xFFFF)
    {
        const size_t n = stages(c, stage1_special_title, stage2_special_title);
        return n ? true : false;
    }
    return false;
}

#endif // UNI_ALGO_DISABLE_SEGMENT_WORD

#endif // UNI_ALGO_DISABLE_FULL_CASE

#ifndef UNI_ALGO_DISABLE_FULL_CASE

#ifdef __cplusplus
template<typename it_in_utf8, typename it_end_utf8>
#endif
uaix_static bool case_final_sigma_fwd_utf8(it_in_utf8 first, it_end_utf8 last)
{
    /* Final_Sigma special case from The Unicode Standard:
     * C is preceded by a sequence consisting of a cased letter and then zero or more
     * case-ignorable characters, and C is not followed by a sequence consisting of zero
     * or more case-ignorable characters and then a cased letter.
     * \p{cased}(\p{case-ignorable})* U+03A3 !((\p{case-ignorable})*\p{cased})
     * The algorithm has two parts: this forward function and reverse function below.
     */

    it_in_utf8 src = first;
    type_codept c = 0; // tag_can_be_uninitialized

    while (src != last)
    {
        src = iter_utf8(src, last, &c, iter_replacement);

        const type_codept prop = stages_case_prop(c);

        if (prop & prop_Cased_Ignorable)
            continue;
        return (prop & prop_Cased) ? true : false;
    }

    return false;
}

#ifdef __cplusplus
template<typename it_in_utf8>
#endif
uaix_static bool case_final_sigma_rev_utf8(it_in_utf8 first, it_in_utf8 last)
{
    it_in_utf8 src = last;
    type_codept c = 0; // tag_can_be_uninitialized

    while (src != first)
    {
        src = iter_rev_utf8(first, src, &c, iter_replacement);

        const type_codept prop = stages_case_prop(c);

        if (prop & prop_Cased_Ignorable)
            continue;
        return (prop & prop_Cased) ? true : false;
    }

    return false;
}

#ifdef __cplusplus
template<typename it_in_utf16, typename it_end_utf16>
#endif
uaix_static bool case_final_sigma_fwd_utf16(it_in_utf16 first, it_end_utf16 last)
{
    it_in_utf16 src = first;
    type_codept c = 0; // tag_can_be_uninitialized

    while (src != last)
    {
        src = iter_utf16(src, last, &c, iter_replacement);

        const type_codept prop = stages_case_prop(c);

        if (prop & prop_Cased_Ignorable)
            continue;
        return (prop & prop_Cased) ? true : false;
    }

    return false;
}

#ifdef __cplusplus
template<typename it_in_utf16>
#endif
uaix_static bool case_final_sigma_rev_utf16(it_in_utf16 first, it_in_utf16 last)
{
    it_in_utf16 src = last;
    type_codept c = 0; // tag_can_be_uninitialized

    while (src != first)
    {
        src = iter_rev_utf16(first, src, &c, iter_replacement);

        const type_codept prop = stages_case_prop(c);

        if (prop & prop_Cased_Ignorable)
            continue;
        return (prop & prop_Cased) ? true : false;
    }

    return false;
}

#endif // UNI_ALGO_DISABLE_FULL_CASE

#ifndef UNI_ALGO_DISABLE_SEGMENT_WORD

// Forward declaration for title case functions

#ifdef __cplusplus
template<typename it_in_utf8, typename it_end_utf8, typename it_out_utf8>
#endif
uaix_static size_t case_title_utf8(it_in_utf8 first, it_end_utf8 last, it_out_utf8 result);

#ifdef __cplusplus
template<typename it_in_utf16, typename it_end_utf16, typename it_out_utf16>
#endif
uaix_static size_t case_title_utf16(it_in_utf16 first, it_end_utf16 last, it_out_utf16 result);

#endif // UNI_ALGO_DISABLE_SEGMENT_WORD

// The Unicode Standard: 3.13 Default Case Algorithms:
// Default Case Conversion (locale-independent)
// Default Case Folding
#ifdef __cplusplus
template<typename it_in_utf8, typename it_end_utf8, typename it_out_utf8>
#endif
uaix_static size_t impl_case_map_utf8(it_in_utf8 first, it_end_utf8 last, it_out_utf8 result, int mode)
{
    it_in_utf8 src = first;
    it_out_utf8 dst = result;
    type_codept c = 0; // tag_can_be_uninitialized

    if (mode == impl_case_map_mode_lowercase)
    {
        while (src != last)
        {
#ifndef UNI_ALGO_DISABLE_FULL_CASE
            it_in_utf8 prev = src;
#endif
            src = iter_utf8(src, last, &c, iter_replacement);

#ifndef UNI_ALGO_DISABLE_FULL_CASE
            if (c == 0x0130) // tag_lowercase_special
            {
                *dst++ = (type_char8)(type_codept)0x69;
                *dst++ = (type_char8)(type_codept)0xCC;
                *dst++ = (type_char8)(type_codept)0x87;
                continue;
            }
            if (c == 0x03A3) // Final_Sigma
            {
                if (!case_final_sigma_fwd_utf8(src, last) &&
                    case_final_sigma_rev_utf8(first, prev))
                {
                    *dst++ = (type_char8)(type_codept)0xCF;
                    *dst++ = (type_char8)(type_codept)0x82;
                    continue;
                }
            }
#endif
            c = stages_lower(c);

            dst = codepoint_to_utf8(c, dst);
        }
    }
    else if (mode == impl_case_map_mode_uppercase)
    {
        while (src != last)
        {
            src = iter_utf8(src, last, &c, iter_replacement);

#ifndef UNI_ALGO_DISABLE_FULL_CASE
            if (stages_special_upper_check(c))
            {
                struct case_special_buffer buffer = {{0}}; // tag_can_be_uninitialized
                const size_t size = stages_special_upper(c, &buffer);

                for (size_t i = 0; i < size; ++i)
                    dst = codepoint_to_utf8(buffer.cps[i], dst);

                continue;
            }
#endif
            c = stages_upper(c);

            dst = codepoint_to_utf8(c, dst);
        }
    }
    else if (mode == impl_case_map_mode_casefold)
    {
        while (src != last)
        {
            src = iter_utf8(src, last, &c, iter_replacement);

#ifndef UNI_ALGO_DISABLE_FULL_CASE
            if (stages_special_fold_check(c))
            {
                struct case_special_buffer buffer = {{0}}; // tag_can_be_uninitialized
                const size_t size = stages_special_fold(c, &buffer);

                for (size_t i = 0; i < size; ++i)
                    dst = codepoint_to_utf8(buffer.cps[i], dst);

                continue;
            }
#endif
            c = stages_fold(c);

            dst = codepoint_to_utf8(c, dst);
        }
    }
#ifndef UNI_ALGO_DISABLE_SEGMENT_WORD
    else if (mode == impl_case_map_mode_titlecase)
        return case_title_utf8(first, last, result);
#endif

    return (size_t)(dst - result);
}

// The Unicode Standard: 3.13 Default Case Algorithms:
// Default Case Conversion (locale-independent)
// Default Case Folding
#ifdef __cplusplus
template<typename it_in_utf16, typename it_end_utf16, typename it_out_utf16>
#endif
uaix_static size_t impl_case_map_utf16(it_in_utf16 first, it_end_utf16 last, it_out_utf16 result, int mode)
{
    it_in_utf16 src = first;
    it_out_utf16 dst = result;
    type_codept c = 0; // tag_can_be_uninitialized

    if (mode == impl_case_map_mode_lowercase)
    {
        while (src != last)
        {
#ifndef UNI_ALGO_DISABLE_FULL_CASE
            it_in_utf16 prev = src;
#endif
            src = iter_utf16(src, last, &c, iter_replacement);

#ifndef UNI_ALGO_DISABLE_FULL_CASE
            if (c == 0x0130) // tag_lowercase_special
            {
                *dst++ = (type_char16)0x0069;
                *dst++ = (type_char16)0x0307;
                continue;
            }
            if (c == 0x03A3) // Final_Sigma
            {
                if (!case_final_sigma_fwd_utf16(src, last) &&
                    case_final_sigma_rev_utf16(first, prev))
                {
                    *dst++ = (type_char16)0x03C2;
                    continue;
                }
            }
#endif
            c = stages_lower(c);

            dst = codepoint_to_utf16(c, dst);
        }
    }
    else if (mode == impl_case_map_mode_uppercase)
    {
        while (src != last)
        {
            src = iter_utf16(src, last, &c, iter_replacement);

#ifndef UNI_ALGO_DISABLE_FULL_CASE
            if (stages_special_upper_check(c))
            {
                struct case_special_buffer buffer = {{0}}; // tag_can_be_uninitialized
                const size_t size = stages_special_upper(c, &buffer);

                for (size_t i = 0; i < size; ++i)
                    dst = codepoint_to_utf16(buffer.cps[i], dst);

                continue;
            }
#endif
            c = stages_upper(c);

            dst = codepoint_to_utf16(c, dst);
        }
    }
    else if (mode == impl_case_map_mode_casefold)
    {
        while (src != last)
        {
            src = iter_utf16(src, last, &c, iter_replacement);

#ifndef UNI_ALGO_DISABLE_FULL_CASE
            if (stages_special_fold_check(c))
            {
                struct case_special_buffer buffer = {{0}}; // tag_can_be_uninitialized
                const size_t size = stages_special_fold(c, &buffer);

                for (size_t i = 0; i < size; ++i)
                    dst = codepoint_to_utf16(buffer.cps[i], dst);

                continue;
            }
#endif
            c = stages_fold(c);

            dst = codepoint_to_utf16(c, dst);
        }
    }
#ifndef UNI_ALGO_DISABLE_SEGMENT_WORD
    else if (mode == impl_case_map_mode_titlecase)
        return case_title_utf16(first, last, result);
#endif

    return (size_t)(dst - result);
}

#ifndef UNI_ALGO_DISABLE_FULL_CASE

#ifdef __cplusplus
template<typename it_in_utf8, typename it_end_utf8>
#endif
uaix_always_inline_tmpl
uaix_static it_in_utf8 iter_fold_utf8(it_in_utf8 first, it_end_utf8 last, type_codept* const codepoint,
                                      struct case_special_pair* const pair, struct case_special_buffer* const buffer)
{
    it_in_utf8 src = first;

    if (pair->count == 0)
    {
        src = iter_utf8(first, last, codepoint, iter_replacement);

        if (stages_special_fold_check(*codepoint))
        {
            pair->size = stages_special_fold(*codepoint, buffer);
            pair->count = pair->size;
        }
    }
    if (pair->count != 0)
        *codepoint = buffer->cps[pair->size - pair->count--];

    return src;
}

#ifdef __cplusplus
template<typename it_in_utf16, typename it_end_utf16>
#endif
uaix_always_inline_tmpl
uaix_static it_in_utf16 iter_fold_utf16(it_in_utf16 first, it_end_utf16 last, type_codept* const codepoint,
                                        struct case_special_pair* const pair, struct case_special_buffer* const buffer)
{
    it_in_utf16 src = first;

    if (pair->count == 0)
    {
        src = iter_utf16(first, last, codepoint, iter_replacement);

        if (stages_special_fold_check(*codepoint))
        {
            pair->size = stages_special_fold(*codepoint, buffer);
            pair->count = pair->size;
        }
    }
    if (pair->count != 0)
        *codepoint = buffer->cps[pair->size - pair->count--];

    return src;
}

#endif // UNI_ALGO_DISABLE_FULL_CASE

// if caseless == false then result in code point order
// if caseless == true then The Unicode Standard: 3.13 Default Caseless Matching
// with result in code point order
#ifdef __cplusplus
template<typename it_in_utf8, typename it_end_utf8>
#endif
uaix_static int impl_case_compare_utf8(it_in_utf8 first1, it_end_utf8 last1,
                                       it_in_utf8 first2, it_end_utf8 last2, bool caseless)
{
    it_in_utf8 src1 = first1;
    it_in_utf8 src2 = first2;
    type_codept c1 = 0; // tag_can_be_uninitialized
    type_codept c2 = 0; // tag_can_be_uninitialized
#ifndef UNI_ALGO_DISABLE_FULL_CASE
    struct case_special_buffer buffer1 = {{0}}; // tag_can_be_uninitialized
    struct case_special_buffer buffer2 = {{0}}; // tag_can_be_uninitialized
    struct case_special_pair pair1 = {0, 0}; // tag_must_be_initialized
    struct case_special_pair pair2 = {0, 0}; // tag_must_be_initialized
#endif

    // Optimization for long mostly equal strings
    while (src1 != last1 && src2 != last2)
    {
        if (*src1 == *src2) // Fast comparison to locate the difference
        {
            src1 += 1;
            src2 += 1;
        }
        else // Go back by 3 for correct codepoint calculation below
        {
            src1 = (src1 - first1 >= 3) ? src1 - 3 : first1;
            src2 = (src2 - first2 >= 3) ? src2 - 3 : first2;
            break;
        }
    }

    if (!caseless)
    {
        while (src1 != last1 && src2 != last2)
        {
            src1 = iter_utf8(src1, last1, &c1, iter_replacement);
            src2 = iter_utf8(src2, last2, &c2, iter_replacement);

            if (c1 != c2)
                return (c1 < c2) ? -1 : 1;
        }
        return (src2 == last2) - (src1 == last1);
    }

#ifndef UNI_ALGO_DISABLE_FULL_CASE
    while ((src1 != last1 || pair1.count) && (src2 != last2 || pair2.count))
    {
        src1 = iter_fold_utf8(src1, last1, &c1, &pair1, &buffer1);
        src2 = iter_fold_utf8(src2, last2, &c2, &pair2, &buffer2);
#else
    while (src1 != last1 && src2 != last2)
    {
        src1 = iter_utf8(src1, last1, &c1, iter_replacement);
        src2 = iter_utf8(src2, last2, &c2, iter_replacement);
#endif
        if (c1 == c2) // Optimization
            continue;

        c1 = stages_fold(c1);
        c2 = stages_fold(c2);

        if (c1 != c2)
            return (c1 < c2) ? -1 : 1;
    }

#ifndef UNI_ALGO_DISABLE_FULL_CASE
    return (src2 == last2 && pair2.count == 0) - (src1 == last1 && pair1.count == 0);
#else
    return (src2 == last2) - (src1 == last1);
#endif
}

// if caseless == false then result in code point order
// if caseless == true then The Unicode Standard: 3.13 Default Caseless Matching
// with result in code point order
#ifdef __cplusplus
template<typename it_in_utf16, typename it_end_utf16>
#endif
uaix_static int impl_case_compare_utf16(it_in_utf16 first1, it_end_utf16 last1,
                                        it_in_utf16 first2, it_end_utf16 last2, bool caseless)
{
    it_in_utf16 src1 = first1;
    it_in_utf16 src2 = first2;
    type_codept c1 = 0; // tag_can_be_uninitialized
    type_codept c2 = 0; // tag_can_be_uninitialized
#ifndef UNI_ALGO_DISABLE_FULL_CASE
    struct case_special_buffer buffer1 = {{0}}; // tag_can_be_uninitialized
    struct case_special_buffer buffer2 = {{0}}; // tag_can_be_uninitialized
    struct case_special_pair pair1 = {0, 0}; // tag_must_be_initialized
    struct case_special_pair pair2 = {0, 0}; // tag_must_be_initialized
#endif

    // Optimization for long mostly equal strings
    while (src1 != last1 && src2 != last2)
    {
        if (*src1 == *src2) // Fast comparison to locate the difference
        {
            src1 += 1;
            src2 += 1;
        }
        else // Go back by 1 for correct codepoint calculation below
        {
            if (src1 > first1) src1 -= 1;
            if (src2 > first2) src2 -= 1;
            break;
        }
    }

    if (!caseless)
    {
        while (src1 != last1 && src2 != last2)
        {
            src1 = iter_utf16(src1, last1, &c1, iter_replacement);
            src2 = iter_utf16(src2, last2, &c2, iter_replacement);

            if (c1 != c2)
                return (c1 < c2) ? -1 : 1;
        }
        return (src2 == last2) - (src1 == last1);
    }

#ifndef UNI_ALGO_DISABLE_FULL_CASE
    while ((src1 != last1 || pair1.count) && (src2 != last2 || pair2.count))
    {
        src1 = iter_fold_utf16(src1, last1, &c1, &pair1, &buffer1);
        src2 = iter_fold_utf16(src2, last2, &c2, &pair2, &buffer2);
#else
    while (src1 != last1 && src2 != last2)
    {
        src1 = iter_utf16(src1, last1, &c1, iter_replacement);
        src2 = iter_utf16(src2, last2, &c2, iter_replacement);
#endif
        if (c1 == c2) // Optimization
            continue;

        c1 = stages_fold(c1);
        c2 = stages_fold(c2);

        if (c1 != c2)
            return (c1 < c2) ? -1 : 1;
    }

#ifndef UNI_ALGO_DISABLE_FULL_CASE
    return (src2 == last2 && pair2.count == 0) - (src1 == last1 && pair1.count == 0);
#else
    return (src2 == last2) - (src1 == last1);
#endif
}

#ifndef UNI_ALGO_DISABLE_COLLATE

// if caseless == false then result in DUCET order
// if caseless == true then The Unicode Standard: 3.13 Default Caseless Matching
// with result in DUCET order
#ifdef __cplusplus
template<typename it_in_utf8, typename it_end_utf8>
#endif
uaix_static int impl_case_collate_utf8(it_in_utf8 first1, it_end_utf8 last1,
                                       it_in_utf8 first2, it_end_utf8 last2, bool caseless)
{
    it_in_utf8 src1 = first1;
    it_in_utf8 src2 = first2;
    type_codept c1 = 0; // tag_can_be_uninitialized
    type_codept c2 = 0; // tag_can_be_uninitialized
#ifndef UNI_ALGO_DISABLE_FULL_CASE
    struct case_special_buffer buffer1 = {{0}}; // tag_can_be_uninitialized
    struct case_special_buffer buffer2 = {{0}}; // tag_can_be_uninitialized
    struct case_special_pair pair1 = {0, 0}; // tag_must_be_initialized
    struct case_special_pair pair2 = {0, 0}; // tag_must_be_initialized
#endif

    // Optimization for long mostly equal strings
    while (src1 != last1 && src2 != last2)
    {
        if (*src1 == *src2) // Fast comparison to locate the difference
        {
            src1 += 1;
            src2 += 1;
        }
        else // Go back by 3 for correct codepoint calculation below
        {
            src1 = (src1 - first1 >= 3) ? src1 - 3 : first1;
            src2 = (src2 - first2 >= 3) ? src2 - 3 : first2;
            break;
        }
    }

    if (!caseless)
    {
        while (src1 != last1 && src2 != last2)
        {
            src1 = iter_utf8(src1, last1, &c1, iter_replacement);
            src2 = iter_utf8(src2, last2, &c2, iter_replacement);

            if (c1 == c2) // Optimization
                continue;

            c1 = stages_order(c1);
            c2 = stages_order(c2);

            if (c1 != c2)
                return (c1 < c2) ? -1 : 1;
        }
        return (src2 == last2) - (src1 == last1);
    }

#ifndef UNI_ALGO_DISABLE_FULL_CASE
    while ((src1 != last1 || pair1.count) && (src2 != last2 || pair2.count))
    {
        src1 = iter_fold_utf8(src1, last1, &c1, &pair1, &buffer1);
        src2 = iter_fold_utf8(src2, last2, &c2, &pair2, &buffer2);
#else
    while (src1 != last1 && src2 != last2)
    {
        src1 = iter_utf8(src1, last1, &c1, iter_replacement);
        src2 = iter_utf8(src2, last2, &c2, iter_replacement);
#endif
        if (c1 == c2) // Optimization
            continue;

        c1 = stages_fold(c1);
        c2 = stages_fold(c2);

        c1 = stages_order(c1);
        c2 = stages_order(c2);

        if (c1 != c2)
            return (c1 < c2) ? -1 : 1;
    }

#ifndef UNI_ALGO_DISABLE_FULL_CASE
    return (src2 == last2 && pair2.count == 0) - (src1 == last1 && pair1.count == 0);
#else
    return (src2 == last2) - (src1 == last1);
#endif
}

// if caseless == false then result in DUCET order
// if caseless == true then The Unicode Standard: 3.13 Default Caseless Matching
// with result in DUCET order
#ifdef __cplusplus
template<typename it_in_utf16, typename it_end_utf16>
#endif
uaix_static int impl_case_collate_utf16(it_in_utf16 first1, it_end_utf16 last1,
                                        it_in_utf16 first2, it_end_utf16 last2, bool caseless)
{
    it_in_utf16 src1 = first1;
    it_in_utf16 src2 = first2;
    type_codept c1 = 0; // tag_can_be_uninitialized
    type_codept c2 = 0; // tag_can_be_uninitialized
#ifndef UNI_ALGO_DISABLE_FULL_CASE
    struct case_special_buffer buffer1 = {{0}}; // tag_can_be_uninitialized
    struct case_special_buffer buffer2 = {{0}}; // tag_can_be_uninitialized
    struct case_special_pair pair1 = {0, 0}; // tag_must_be_initialized
    struct case_special_pair pair2 = {0, 0}; // tag_must_be_initialized
#endif

    // Optimization for long mostly equal strings
    while (src1 != last1 && src2 != last2)
    {
        if (*src1 == *src2) // Fast comparison to locate the difference
        {
            src1 += 1;
            src2 += 1;
        }
        else // Go back by 1 for correct codepoint calculation below
        {
            if (src1 > first1) src1 -= 1;
            if (src2 > first2) src2 -= 1;
            break;
        }
    }

    if (!caseless)
    {
        while (src1 != last1 && src2 != last2)
        {
            src1 = iter_utf16(src1, last1, &c1, iter_replacement);
            src2 = iter_utf16(src2, last2, &c2, iter_replacement);

            if (c1 == c2) // Optimization
                continue;

            c1 = stages_order(c1);
            c2 = stages_order(c2);

            if (c1 != c2)
                return (c1 < c2) ? -1 : 1;
        }
        return (src2 == last2) - (src1 == last1);
    }

#ifndef UNI_ALGO_DISABLE_FULL_CASE
    while ((src1 != last1 || pair1.count) && (src2 != last2 || pair2.count))
    {
        src1 = iter_fold_utf16(src1, last1, &c1, &pair1, &buffer1);
        src2 = iter_fold_utf16(src2, last2, &c2, &pair2, &buffer2);
#else
    while (src1 != last1 && src2 != last2)
    {
        src1 = iter_utf16(src1, last1, &c1, iter_replacement);
        src2 = iter_utf16(src2, last2, &c2, iter_replacement);
#endif
        if (c1 == c2) // Optimization
            continue;

        c1 = stages_fold(c1);
        c2 = stages_fold(c2);

        c1 = stages_order(c1);
        c2 = stages_order(c2);

        if (c1 != c2)
            return (c1 < c2) ? -1 : 1;
    }

#ifndef UNI_ALGO_DISABLE_FULL_CASE
    return (src2 == last2 && pair2.count == 0) - (src1 == last1 && pair1.count == 0);
#else
    return (src2 == last2) - (src1 == last1);
#endif
}

#endif // UNI_ALGO_DISABLE_COLLATE

// if caseless == false then search by code points
// if caseless == true then The Unicode Standard: 3.13 Default Caseless Matching
// with search by code points
#ifdef __cplusplus
template<typename it_in_utf8, typename it_end_utf8>
#endif
uaix_static bool impl_case_find_utf8(it_in_utf8 first1, it_end_utf8 last1,
                                     it_in_utf8 first2, it_end_utf8 last2, bool caseless,
                                     size_t* const found_pos, size_t* const found_end)
{
    it_in_utf8 src1 = first1;
    it_in_utf8 src2 = first2;
    it_in_utf8 back = src1;
    it_in_utf8 prev = src1;
    type_codept c1 = 0; // tag_can_be_uninitialized
    type_codept c2 = 0; // tag_can_be_uninitialized
#ifndef UNI_ALGO_DISABLE_FULL_CASE
    struct case_special_buffer buffer1 = {{0}}; // tag_can_be_uninitialized
    struct case_special_buffer buffer2 = {{0}}; // tag_can_be_uninitialized
    struct case_special_pair pair1 = {0, 0}; // tag_must_be_initialized
    struct case_special_pair pair2 = {0, 0}; // tag_must_be_initialized
#endif

    if (!caseless)
    {
        while (src1 != last1 && src2 != last2)
        {
            src1 = iter_utf8(src1, last1, &c1, iter_replacement);
            src2 = iter_utf8(src2, last2, &c2, iter_replacement);

            if (back == prev)
                back = src1;

            if (c1 != c2) // Restart
            {
                src2 = first2;
                src1 = back;
                prev = back;
                back = prev;
            }
        }

        if (src2 == last2)
        {
            *found_pos = (size_t)(prev - first1);
            *found_end = (size_t)(src1 - first1);
            return true;
        }

        return false;
    }

#ifndef UNI_ALGO_DISABLE_FULL_CASE
    while ((src1 != last1 || pair1.count) && (src2 != last2 || pair2.count))
    {
        src1 = iter_fold_utf8(src1, last1, &c1, &pair1, &buffer1);
        src2 = iter_fold_utf8(src2, last2, &c2, &pair2, &buffer2);
#else
    while (src1 != last1 && src2 != last2)
    {
        src1 = iter_utf8(src1, last1, &c1, iter_replacement);
        src2 = iter_utf8(src2, last2, &c2, iter_replacement);
#endif
        if (back == prev)
            back = src1;

        //if (c1 == c2) // Optimization // TODO: Test me
        //	continue;

        c1 = stages_fold(c1);
        c2 = stages_fold(c2);

#ifndef UNI_ALGO_DISABLE_FULL_CASE
        if (c1 != c2 || (src2 == last2 && !pair2.count && pair1.count)) // Restart
        {
            pair2.count = 0;
            pair1.count = 0;
#else
        if (c1 != c2) // Restart
        {
#endif
            src2 = first2;
            src1 = back;
            prev = back;
            back = prev;
        }
    }

#ifndef UNI_ALGO_DISABLE_FULL_CASE
    if (src2 == last2 && pair2.count == 0)
#else
    if (src2 == last2)
#endif
    {
        *found_pos = (size_t)(prev - first1);
        *found_end = (size_t)(src1 - first1);
        return true;
    }

    return false;
}

// if caseless == false then search by code points
// if caseless == true then The Unicode Standard: 3.13 Default Caseless Matching
// with search by code points
#ifdef __cplusplus
template<typename it_in_utf16, typename it_end_utf16>
#endif
uaix_static bool impl_case_find_utf16(it_in_utf16 first1, it_end_utf16 last1,
                                      it_in_utf16 first2, it_end_utf16 last2, bool caseless,
                                      size_t* const found_pos, size_t* const found_end)
{
    it_in_utf16 src1 = first1;
    it_in_utf16 src2 = first2;
    it_in_utf16 back = src1;
    it_in_utf16 prev = src1;
    type_codept c1 = 0; // tag_can_be_uninitialized
    type_codept c2 = 0; // tag_can_be_uninitialized
#ifndef UNI_ALGO_DISABLE_FULL_CASE
    struct case_special_buffer buffer1 = {{0}}; // tag_can_be_uninitialized
    struct case_special_buffer buffer2 = {{0}}; // tag_can_be_uninitialized
    struct case_special_pair pair1 = {0, 0}; // tag_must_be_initialized
    struct case_special_pair pair2 = {0, 0}; // tag_must_be_initialized
#endif

    if (!caseless)
    {
        while (src1 != last1 && src2 != last2)
        {
            src1 = iter_utf16(src1, last1, &c1, iter_replacement);
            src2 = iter_utf16(src2, last2, &c2, iter_replacement);

            if (back == prev)
                back = src1;

            if (c1 != c2) // Restart
            {
                src2 = first2;
                src1 = back;
                prev = back;
                back = prev;
            }
        }

        if (src2 == last2)
        {
            *found_pos = (size_t)(prev - first1);
            *found_end = (size_t)(src1 - first1);
            return true;
        }

        return false;
    }

#ifndef UNI_ALGO_DISABLE_FULL_CASE
    while ((src1 != last1 || pair1.count) && (src2 != last2 || pair2.count))
    {
        src1 = iter_fold_utf16(src1, last1, &c1, &pair1, &buffer1);
        src2 = iter_fold_utf16(src2, last2, &c2, &pair2, &buffer2);
#else
    while (src1 != last1 && src2 != last2)
    {
        src1 = iter_utf16(src1, last1, &c1, iter_replacement);
        src2 = iter_utf16(src2, last2, &c2, iter_replacement);
#endif
        if (back == prev)
            back = src1;

        //if (c1 == c2) // Optimization // TODO: Test me
        //	continue;

        c1 = stages_fold(c1);
        c2 = stages_fold(c2);

#ifndef UNI_ALGO_DISABLE_FULL_CASE
        if (c1 != c2 || (src2 == last2 && !pair2.count && pair1.count)) // Restart
        {
            pair2.count = 0;
            pair1.count = 0;
#else
        if (c1 != c2) // Restart
        {
#endif
            src2 = first2;
            src1 = back;
            prev = back;
            back = prev;
        }
    }

#ifndef UNI_ALGO_DISABLE_FULL_CASE
    if (src2 == last2 && pair2.count == 0)
#else
    if (src2 == last2)
#endif
    {
        *found_pos = (size_t)(prev - first1);
        *found_end = (size_t)(src1 - first1);
        return true;
    }

    return false;
}

#ifdef __cplusplus
template<typename it_in_utf8, typename it_end_utf8>
#endif
uaix_static bool impl_case_like_utf8(it_in_utf8 first1, it_end_utf8 last1,
                                     it_in_utf8 first2, it_end_utf8 last2, bool caseless,
                                     type_codept all, type_codept one, type_codept escape)
{
    it_in_utf8 src1 = first1;
    it_in_utf8 src2 = first2;
    it_in_utf8 back1 = src1;
    it_in_utf8 prev1 = src1;
    it_in_utf8 back2 = src2;
    type_codept c1 = 0; // tag_can_be_uninitialized
    type_codept c2 = 0; // tag_can_be_uninitialized
    bool skip1 = false; // tag_must_be_initialized
    bool multi = false; // tag_must_be_initialized
    bool prev_escape = false; // tag_must_be_initialized
#ifndef UNI_ALGO_DISABLE_FULL_CASE
    struct case_special_buffer buffer1 = {{0}}; // tag_can_be_uninitialized
    struct case_special_buffer buffer2 = {{0}}; // tag_can_be_uninitialized
    struct case_special_pair pair1 = {0, 0}; // tag_must_be_initialized
    struct case_special_pair pair2 = {0, 0}; // tag_must_be_initialized
#endif

    // Only ASCII is supported for all and one in a pattern
    // because we use code units in some places to simplify the code
    // it is not affects escape
    if (all > 0x7F || one > 0x7F)
        return false;

    // If all == escape or one == escape set it to a code point
    // that is outside Unicode range so we just ignore one of them
    if (all == escape) all = 0xFFFFFFFF;
    if (one == escape) one = 0xFFFFFFFF;

    if (!caseless) // no-op
        return false;

#ifndef UNI_ALGO_DISABLE_FULL_CASE
    while ((src1 != last1 || pair1.count || skip1) && (src2 != last2 || pair2.count))
    {
        if (skip1)
            skip1 = false;
        else
            src1 = iter_fold_utf8(src1, last1, &c1, &pair1, &buffer1);
        src2 = iter_fold_utf8(src2, last2, &c2, &pair2, &buffer2);
#else
    while ((src1 != last1 || skip1) && src2 != last2)
    {
        if (skip1)
            skip1 = false;
        else
            src1 = iter_utf8(src1, last1, &c1, iter_replacement);
        src2 = iter_utf8(src2, last2, &c2, iter_replacement);
#endif

        if (back1 == prev1)
            back1 = src1;

        if (prev_escape)
            prev_escape = false;
        else
        {
            // If escape == 0 it won't be used
            if (escape && c2 == escape)
            {
                prev_escape = true;
                skip1 = true;
                continue;
            }
            if (c2 == all)
            {
                back1 = src1;
                back2 = src2;
                skip1 = true;
                multi = true;
                continue;
            }
            if (c2 == one)
                continue;
        }

        //if (c1 == c2) // Optimization // TODO: Test me
        //	continue;

        c1 = stages_fold(c1);
        c2 = stages_fold(c2);

#ifndef UNI_ALGO_DISABLE_FULL_CASE
        if (c1 != c2
            || (src2 != last2 && ((type_codept)*src2 == all || (type_codept)*src2 == one)
            && !pair2.count && pair1.count)) // Restart
        {
            pair2.count = 0;
            pair1.count = 0;
#else
        if (c1 != c2) // Restart
        {
#endif
            if (multi)
                src2 = back2;
            else
                return false;

            src1 = back1;
            prev1 = back1;
            back1 = prev1;
        }
    }

    //if (src2 == last2 && (src1 == last1 || c2 == '%'))
    //	return true;
    //if ((src2 == last2 || (*src2 == '%' && ++src2 == last2)) && (src1 == last1 || c2 == '%'))
    //	return true;

#ifndef UNI_ALGO_DISABLE_FULL_CASE
    // Test: "abc123xyz789" "%abc%xyz%"
    //if ((src1 == last1 && pair1.count == 0) || (first2 == last2 || c2 == all)) // second empty = not match
    if ((src1 == last1 && pair1.count == 0) || (first2 != last2 && c2 == all)) // second empty = match
    {
#else
    //if (src1 == last1 || (first2 == last2 || c2 == all)) // second empty = not match
    if (src1 == last1 || (first2 != last2 && c2 == all)) // second empty = match
    {
#endif
        // Test: "abc123xyz" "%abc%xyz%" | "abc123xyz" "%abc%xyz%%%"
        while (src2 != last2 && (type_codept)*src2 == all) ++src2;

        if (src2 == last2)
            return true;
    }

    return false;
}

#ifndef UNI_ALGO_DISABLE_SEGMENT_WORD

#ifdef __cplusplus
template<typename it_in_utf8, typename it_end_utf8, typename it_out_utf8>
#endif
uaix_static size_t case_title_utf8(it_in_utf8 first, it_end_utf8 last, it_out_utf8 result)
{
    /* Title case rules from The Unicode Standard:
     * toTitlecase(X): Find the word boundaries in X according to The Unicode Standard Annex #29,
     * "Unicode Text Segmentation." For each word boundary, find the first cased character F
     * following the word boundary. If F exists, map F to Titlecase_Mapping(F);
     * then map all characters C between F and the following word boundary to Lowercase_Mapping(C).
     */

    it_in_utf8 src = first;
    it_in_utf8 brk = first;
    it_in_utf8 prev_brk = first;
    it_out_utf8 dst = result;
    type_codept c = 0; // tag_can_be_uninitialized
    bool found_break = false; // tag_must_be_initialized
    bool make_lower = false; // tag_must_be_initialized

    type_codept word_prop = 0; // Not used here
    struct impl_segment_word_state state = {0,0,0,0,0,0,0}; // tag_can_be_uninitialized
    impl_segment_word_state_reset(&state);

    while (src != last)
    {
        it_in_utf8 prev = src;
        src = iter_utf8(src, last, &c, iter_replacement);

        if (!found_break)
        {
            // Find break (if at the end then force break)
            if (segment_word_utf8(&state, c, &word_prop, src, last) || src == last)
            {
                //brk = prev;
                brk = src;
                src = prev_brk;
                prev_brk = prev;
                found_break = true;
                make_lower = false;
            }
            continue;
        }
        //else if (brk == prev)
        else if (brk == src) // Found previous break
        {
            found_break = false;
            // If not at the end then find next break else output last code point
            if (src != last)
                continue;
        }

        if (!make_lower)
        {
            // If Cased then make it title else output as is
            if (stages_case_prop(c) & prop_Cased)
            {
                // Make lower all code points after title
                make_lower = true;

#ifndef UNI_ALGO_DISABLE_FULL_CASE
                if (stages_special_title_check(c))
                {
                    struct case_special_buffer buffer = {{0}};
                    const size_t size = stages_special_title(c, &buffer);

                    for (size_t i = 0; i < size; ++i)
                        dst = codepoint_to_utf8(buffer.cps[i], dst);

                    continue;
                }
#endif
                c = stages_title(c);
            }
        }
        else
        {
#ifndef UNI_ALGO_DISABLE_FULL_CASE
            if (c == 0x0130) // tag_lowercase_special
            {
                *dst++ = (type_char8)(type_codept)0x69;
                *dst++ = (type_char8)(type_codept)0xCC;
                *dst++ = (type_char8)(type_codept)0x87;
                continue;
            }
            if (c == 0x03A3) // Final_Sigma
            {
                if (!case_final_sigma_fwd_utf8(src, last) &&
                    case_final_sigma_rev_utf8(first, prev))
                {
                    *dst++ = (type_char8)(type_codept)0xCF;
                    *dst++ = (type_char8)(type_codept)0x82;
                    continue;
                }
            }
#endif
            c = stages_lower(c);
        }

        dst = codepoint_to_utf8(c, dst);
    }

    return (size_t)(dst - result);
}

#ifdef __cplusplus
template<typename it_in_utf16, typename it_end_utf16, typename it_out_utf16>
#endif
uaix_static size_t case_title_utf16(it_in_utf16 first, it_end_utf16 last, it_out_utf16 result)
{
    it_in_utf16 src = first;
    it_in_utf16 brk = first;
    it_in_utf16 prev_brk = first;
    it_out_utf16 dst = result;
    type_codept c = 0; // tag_can_be_uninitialized
    bool found_break = false; // tag_must_be_initialized
    bool make_lower = false; // tag_must_be_initialized

    type_codept word_prop = 0; // Not used here
    struct impl_segment_word_state state = {0,0,0,0,0,0,0}; // tag_can_be_uninitialized
    impl_segment_word_state_reset(&state);

    while (src != last)
    {
        it_in_utf16 prev = src;
        src = iter_utf16(src, last, &c, iter_replacement);

        if (!found_break)
        {
            // Find break (if at the end then force break)
            if (segment_word_utf16(&state, c, &word_prop, src, last) || src == last)
            {
                //brk = prev;
                brk = src;
                src = prev_brk;
                prev_brk = prev;
                found_break = true;
                make_lower = false;
            }
            continue;
        }
        //else if (brk == prev)
        else if (brk == src) // Found previous break
        {
            found_break = false;
            // If not at the end then find next break else output last code point
            if (src != last)
                continue;
        }

        if (!make_lower)
        {
            // If Cased then make it title else output as is
            if (stages_case_prop(c) & prop_Cased)
            {
                // Make lower all code points after title
                make_lower = true;

#ifndef UNI_ALGO_DISABLE_FULL_CASE
                if (stages_special_title_check(c))
                {
                    struct case_special_buffer buffer = {{0}};
                    const size_t size = stages_special_title(c, &buffer);

                    for (size_t i = 0; i < size; ++i)
                        dst = codepoint_to_utf16(buffer.cps[i], dst);

                    continue;
                }
#endif
                c = stages_title(c);
            }
        }
        else
        {
#ifndef UNI_ALGO_DISABLE_FULL_CASE
            if (c == 0x0130) // tag_lowercase_special
            {
                *dst++ = (type_char16)0x0069;
                *dst++ = (type_char16)0x0307;
                continue;
            }
            else if (c == 0x03A3) // Final_Sigma
            {
                if (!case_final_sigma_fwd_utf16(src, last) &&
                    case_final_sigma_rev_utf16(first, prev))
                {
                    *dst++ = (type_char16)0x03C2;
                    continue;
                }
            }
#endif
            c = stages_lower(c);
        }

        dst = codepoint_to_utf16(c, dst);
    }

    return (size_t)(dst - result);
}

#endif // UNI_ALGO_DISABLE_SEGMENT_WORD

// This is just an example how sort keys can look with this simple collation algorithm.
// They are not that usefull so these functions are disabled for now.
#ifdef UNI_ALGO_EXPERIMENTAL

#ifndef UNI_ALGO_DISABLE_COLLATE

#ifndef UNI_ALGO_DISABLE_FULL_CASE
uaix_const size_t impl_x_case_sortkey_utf8  = 5; // tag_unicode_stable_value
uaix_const size_t impl_x_case_sortkey_utf16 = 9; // tag_unicode_stable_value
#else
uaix_const size_t impl_x_case_sortkey_utf8  = 3; // tag_unicode_stable_value
uaix_const size_t impl_x_case_sortkey_utf16 = 3; // tag_unicode_stable_value
#endif
// All these values are Unicode stable values because Case_Folding is stable,
// https://www.unicode.org/policies/stability_policy.html#Property_Value

#ifdef __cplusplus
template<typename it_out_utf8>
#endif
uaix_always_inline_tmpl
uaix_static it_out_utf8 codepoint_to_sortkey(type_codept c, it_out_utf8 dst)
{
    // Store sort key as 3 bytes for every code point, without null bytes
    // This is not very effective but at least this is simple and fast
    // xxxxxxxx+1 1xxxxxxx 1xxxxxxx (max is 0x3FBFFF (256-1)*128*128)
    // our code point weight cannot be > 0x3FBFFF
    *dst++ = (type_char8)(        (c >> 14) + 1);
    *dst++ = (type_char8)(0x80 | ((c >> 7) & 0x7F));
    *dst++ = (type_char8)(0x80 |  (c       & 0x7F));

    return dst;
}

// This function guarantees that comparing 2 sort keys with binary comparison
// gives exactly the same result as comparing 2 strings with impl_case_collate_utf8
#ifdef __cplusplus
template<typename it_in_utf8, typename it_end_utf8, typename it_out_utf8>
#endif
uaix_static size_t impl_case_sortkey_utf8(it_in_utf8 first, it_end_utf8 last, it_out_utf8 result, bool caseless)
{
    it_in_utf8 src = first;
    it_out_utf8 dst = result;
    type_codept c = 0; // tag_can_be_uninitialized
#ifndef UNI_ALGO_DISABLE_FULL_CASE
    struct case_special_buffer buffer = {{0}}; // tag_can_be_uninitialized
    struct case_special_pair pair = {0, 0}; // tag_must_be_initialized
#endif

    // The algorithm must be consistent with impl_utf8collate

    if (!caseless)
    {
        while (src != last)
        {
            src = iter_utf8(src, last, &c, iter_replacement);

            c = stages_order(c);

            dst = codepoint_to_sortkey(c, dst);
        }

        return (size_t)(dst - result);
    }

#ifndef UNI_ALGO_DISABLE_FULL_CASE
    while (src != last || pair.count)
    {
        src = iter_fold_utf8(src, last, &c, &pair, &buffer);
#else
    while (src != last)
    {
        src = iter_utf8(src, last, &c, iter_replacement);
#endif
        c = stages_fold(c);
        c = stages_order(c);

        dst = codepoint_to_sortkey(c, dst);
    }

    return (size_t)(dst - result);
}

// This function guarantees that comparing 2 sort keys with binary comparison
// gives exactly the same result as comparing 2 strings with impl_case_collate_utf16
#ifdef __cplusplus
template<typename it_in_utf16, typename it_end_utf16, typename it_out_utf8>
#endif
uaix_static size_t impl_case_sortkey_utf16(it_in_utf16 first, it_end_utf16 last, it_out_utf8 result, bool caseless)
{
    it_in_utf16 src = first;
    it_out_utf8 dst = result;
    type_codept c = 0; // tag_can_be_uninitialized
#ifndef UNI_ALGO_DISABLE_FULL_CASE
    struct case_special_buffer buffer = {{0}}; // tag_can_be_uninitialized
    struct case_special_pair pair = {0, 0}; // tag_must_be_initialized
#endif

    // The algorithm must be consistent with impl_utf8collate

    if (!caseless)
    {
        while (src != last)
        {
            src = iter_utf16(src, last, &c, iter_replacement);

            c = stages_order(c);

            dst = codepoint_to_sortkey(c, dst);
        }

        return (size_t)(dst - result);
    }

#ifndef UNI_ALGO_DISABLE_FULL_CASE
    while (src != last || pair.count)
    {
        src = iter_fold_utf16(src, last, &c, &pair, &buffer);
#else
    while (src != last)
    {
        src = iter_utf16(src, last, &c, iter_replacement);
#endif
        c = stages_fold(c);
        c = stages_order(c);

        dst = codepoint_to_sortkey(c, dst);
    }

    return (size_t)(dst - result);
}

#ifdef __cplusplus
template<typename it_in_utf8, typename it_end_utf8, typename it_out_utf8>
#endif
uaix_static size_t impl_case_sortkey_loc_utf8(it_in_utf8 first, it_end_utf8 last, it_out_utf8 result, int mode, type_codept language)
{
    if (language == 0)
        return impl_case_sortkey_utf8(first, last, result, mode ? true : false);
    return 0;
}

#ifdef __cplusplus
template<typename it_in_utf16, typename it_end_utf16, typename it_out_utf8>
#endif
uaix_static size_t impl_case_sortkey_loc_utf16(it_in_utf16 first, it_end_utf16 last, it_out_utf8 result, int mode, type_codept language)
{
    if (language == 0)
        return impl_case_sortkey_utf16(first, last, result, mode ? true : false);
    return 0;
}

#endif // UNI_ALGO_DISABLE_COLLATE

#endif // UNI_ALGO_EXPERIMENTAL

#ifdef __cplusplus
template<typename it_in_utf8, typename it_end_utf8, typename it_out_utf8>
#endif
uaix_static size_t impl_case_map_loc_utf8(it_in_utf8 first, it_end_utf8 last, it_out_utf8 result, int mode, type_codept language)
{
    // This function is a simple wrapper for case-insensitive casemap
    // with the same number of parameters as locale case functions
    // to make it easier to use with C++ templates.

    if (language == 0)
        return impl_case_map_utf8(first, last, result, mode);
    return 0;
}

#ifdef __cplusplus
template<typename it_in_utf16, typename it_end_utf16, typename it_out_utf16>
#endif
uaix_static size_t impl_case_map_loc_utf16(it_in_utf16 first, it_end_utf16 last, it_out_utf16 result, int mode, type_codept language)
{
    if (language == 0)
        return impl_case_map_utf16(first, last, result, mode);
    return 0;
}

// Expose properties for a wrapper
// Must always be at the end of the file

uaix_always_inline
uaix_static type_codept impl_case_get_prop(type_codept c)
{
    // Treat all invalid as replacement character (U+FFFD)
    if (c > 0x10FFFF)
        c = 0xFFFD;

    return stages(c, stage1_case_prop, stage2_case_prop);
}

uaix_always_inline
uaix_static bool impl_case_is_lowercase_prop(type_codept prop)
{
    // The Unicode Standard: DerivedCoreProperties.txt -> Lowercase
    return (prop & prop_Lowercase) ? true : false;
}

uaix_always_inline
uaix_static bool impl_case_is_uppercase_prop(type_codept prop)
{
    // The Unicode Standard: DerivedCoreProperties.txt -> Uppercase
    return (prop & prop_Uppercase) ? true : false;
}

uaix_always_inline
uaix_static bool impl_case_is_cased_prop(type_codept prop)
{
    // The Unicode Standard: DerivedCoreProperties.txt -> Cased
    return (prop & prop_Cased) ? true : false;
}

uaix_always_inline
uaix_static bool impl_case_is_case_ignorable_prop(type_codept prop)
{
    // The Unicode Standard: DerivedCoreProperties.txt -> Case_Ignorable
    return (prop & prop_Cased_Ignorable) ? true : false;
}

uaix_always_inline
uaix_static bool impl_case_is_soft_dotted_prop(type_codept prop)
{
    // The Unicode Standard: PropList.txt -> Soft_Dotted
    return (prop & prop_Soft_Dotted) ? true : false;
}

uaix_always_inline
uaix_static type_codept impl_case_to_simple_lowercase(type_codept c)
{
    return (c <= 0x10FFFF && !(c >= 0xD800 && c <= 0xDFFF)) ? stages_lower(c) : 0xFFFD;
}

uaix_always_inline
uaix_static type_codept impl_case_to_simple_uppercase(type_codept c)
{
    return (c <= 0x10FFFF && !(c >= 0xD800 && c <= 0xDFFF)) ? stages_upper(c) : 0xFFFD;
}

uaix_always_inline
uaix_static type_codept impl_case_to_simple_casefold(type_codept c)
{
    return (c <= 0x10FFFF && !(c >= 0xD800 && c <= 0xDFFF)) ? stages_fold(c) : 0xFFFD;
}

#ifndef UNI_ALGO_DISABLE_SEGMENT_WORD
uaix_always_inline
uaix_static type_codept impl_case_to_simple_titlecase(type_codept c)
{
    return (c <= 0x10FFFF && !(c >= 0xD800 && c <= 0xDFFF)) ? stages_title(c) : 0xFFFD;
}
#endif // UNI_ALGO_DISABLE_SEGMENT_WORD

#ifndef UNI_ALGO_DISABLE_FULL_CASE

#ifdef __cplusplus
template<typename it_out_utf32>
#endif
uaix_always_inline_tmpl
uaix_static size_t impl_case_to_lowercase(type_codept c, it_out_utf32 dst)
{
    if (c == 0x0130) // tag_lowercase_special
    {
        *dst++ = 0x0069;
        *dst++ = 0x0307;
        return 2;
    }
    *dst = (type_char32)impl_case_to_simple_lowercase(c);
    return 1;

}

#ifdef __cplusplus
template<typename it_out_utf32>
#endif
uaix_always_inline_tmpl
uaix_static size_t impl_case_to_uppercase(type_codept c, it_out_utf32 dst)
{
    const size_t n = (c <= 0xFFFF) ? stages(c, stage1_special_upper, stage2_special_upper) : 0;
    if (n)
    {
        *dst++ = stage3_special_upper[n][1];
        *dst++ = stage3_special_upper[n][2];
        *dst++ = stage3_special_upper[n][3];
        return stage3_special_upper[n][0];
    }
    *dst = (type_char32)impl_case_to_simple_uppercase(c);
    return 1;
}

#ifdef __cplusplus
template<typename it_out_utf32>
#endif
uaix_always_inline_tmpl
uaix_static size_t impl_case_to_casefold(type_codept c, it_out_utf32 dst)
{
    const size_t n = (c <= 0xFFFF) ? stages(c, stage1_special_fold, stage2_special_fold) : 0;
    if (n)
    {
        *dst++ = stage3_special_fold[n][1];
        *dst++ = stage3_special_fold[n][2];
        *dst++ = stage3_special_fold[n][3];
        return stage3_special_fold[n][0];
    }
    *dst = (type_char32)impl_case_to_simple_casefold(c);
    return 1;
}

#ifndef UNI_ALGO_DISABLE_SEGMENT_WORD
#ifdef __cplusplus
template<typename it_out_utf32>
#endif
uaix_always_inline_tmpl
uaix_static size_t impl_case_to_titlecase(type_codept c, it_out_utf32 dst)
{
    const size_t n = (c <= 0xFFFF) ? stages(c, stage1_special_title, stage2_special_title) : 0;
    if (n)
    {
        *dst++ = stage3_special_title[n][1];
        *dst++ = stage3_special_title[n][2];
        *dst++ = stage3_special_title[n][3];
        return stage3_special_title[n][0];
    }
    *dst = impl_case_to_simple_titlecase(c);
    return 1;
}
#endif // UNI_ALGO_DISABLE_SEGMENT_WORD

#endif // UNI_ALGO_DISABLE_FULL_CASE

UNI_ALGO_IMPL_NAMESPACE_END

//!#include "internal_undefs.h"


// AMALGAMATION: uni_algo/impl/impl_case_locale.h


// The file is an extension for Case module and must be included after impl_case.h
// The file provides only 2 functions: impl_utf8_casemap_locale and impl_utf16_casemap_locale
// Many things in the file are generated so edit it with care
// See SpecialCasing.txt for data and The Unicode Standard 3.13 for rules

//!#include "internal_defines.h"

#ifdef UNI_ALGO_DISABLE_FULL_CASE
#error "The file cannot be used if full case mapping is disabled"
#endif

UNI_ALGO_IMPL_NAMESPACE_BEGIN

uaix_const type_codept case_map_language_lt = 0x6C740000;
uaix_const type_codept case_map_language_tr = 0x74720000;
uaix_const type_codept case_map_language_az = 0x617A0000;
uaix_const type_codept case_map_language_el = 0x656C0000;
uaix_const type_codept case_map_language_nl = 0x6E6C0000;

#ifdef __cplusplus
template<typename it_in_utf8>
#endif
uaix_static bool case_after_soft_dotted_utf8(it_in_utf8 first, it_in_utf8 src)
{
    /* After_Soft_Dotted special case from The Unicode Standard:
     * There is a Soft_Dotted character before C,
     * with no intervening character of combining class 0 or 230 (Above).
     * [\p{Soft_Dotted}] ([^\p{ccc=230} \p{ccc=0}])*
     */

    it_in_utf8 s = src;
    type_codept c = 0; // tag_can_be_uninitialized

    while (s != first)
    {
        s = iter_rev_utf8(first, s, &c, iter_replacement);

        const type_codept prop = stages_case_prop(c);

        if (prop & prop_Soft_Dotted)
            return true;
        if (!(prop & prop_CCC_NOT_0) || (prop & prop_CCC_230))
            return false;
    }

    return false;
}

#ifdef __cplusplus
template<typename it_in_utf8, typename it_end_utf8>
#endif
uaix_static bool case_more_above_utf8(it_in_utf8 src, it_end_utf8 last)
{
    /* More_Above special case from The Unicode Standard:
     * C is followed by a character of combining class 230 (Above)
     * with no intervening character of combining class 0 or 230 (Above).
     * [^\p{ccc=230}\p{ccc=0}]* [\p{ccc=230}]
     * NOTE: It seems the rule actually is [^\p{ccc=0}]* [\p{ccc=230}]
     * it passes all tests this way and the behaviour is the same as in ICU
     */

    it_in_utf8 s = src;
    type_codept c = 0; // tag_can_be_uninitialized

    while (s != last)
    {
        s = iter_utf8(s, last, &c, iter_replacement);

        const type_codept prop = stages_case_prop(c);

        if (prop & prop_CCC_230)
            return true;
        if (!(prop & prop_CCC_NOT_0))
            return false;
    }

    return false;
}

#ifdef __cplusplus
template<typename it_in_utf8, typename it_end_utf8>
#endif
uaix_static bool case_before_dot_utf8(it_in_utf8 src, it_end_utf8 last)
{
    /* Before_Dot special case from The Unicode Standard:
     * C is followed by combining dot above (U+0307).
     * Any sequence of characters with a combining class that is neither 0 nor 230
     * may intervene between the current character and the combining dot above.
     * ([^\p{ccc=230} \p{ccc=0}])* [\u0307]
     */

    it_in_utf8 s = src;
    type_codept c = 0; // tag_can_be_uninitialized

    while (s != last)
    {
        s = iter_utf8(s, last, &c, iter_replacement);

        if (c == 0x0307)
            return true;

        const type_codept prop = stages_case_prop(c);

        if (!(prop & prop_CCC_NOT_0) || (prop & prop_CCC_230))
            return false;
    }

    return false;
}

#ifdef __cplusplus
template<typename it_in_utf8>
#endif
uaix_static bool case_after_i_utf8(it_in_utf8 first, it_in_utf8 src)
{
    /* After_I special case from The Unicode Standard:
     * There is an uppercase I before C,
     * and there is no intervening combining character class 230 (Above) or 0.
     * [I] ([^\p{ccc=230} \p{ccc=0}])*
     */

    it_in_utf8 s = src;
    type_codept c = 0; // tag_can_be_uninitialized

    while (s != first)
    {
        s = iter_rev_utf8(first, s, &c, iter_replacement);

        if (c == 0x0049) // I
            return true;

        const type_codept prop = stages_case_prop(c);

        if (!(prop & prop_CCC_NOT_0) || (prop & prop_CCC_230))
            return false;
    }

    return false;
}

// BEGIN: GENERATED UTF-16 FUNCTIONS
#ifndef UNI_ALGO_DOC_GENERATED_UTF16

#ifdef __cplusplus
template<typename it_in_utf16>
#endif
uaix_static bool case_after_soft_dotted_utf16(it_in_utf16 first, it_in_utf16 src)
{
    it_in_utf16 s = src;
    type_codept c = 0; // tag_can_be_uninitialized

    while (s != first)
    {
        s = iter_rev_utf16(first, s, &c, iter_replacement);

        const type_codept prop = stages_case_prop(c);

        if (prop & prop_Soft_Dotted)
            return true;
        if (!(prop & prop_CCC_NOT_0) || (prop & prop_CCC_230))
            return false;
    }

    return false;
}

#ifdef __cplusplus
template<typename it_in_utf16, typename it_end_utf16>
#endif
uaix_static bool case_more_above_utf16(it_in_utf16 src, it_end_utf16 last)
{
    it_in_utf16 s = src;
    type_codept c = 0; // tag_can_be_uninitialized

    while (s != last)
    {
        s = iter_utf16(s, last, &c, iter_replacement);

        const type_codept prop = stages_case_prop(c);

        if (prop & prop_CCC_230)
            return true;
        if (!(prop & prop_CCC_NOT_0))
            return false;
    }

    return false;
}

#ifdef __cplusplus
template<typename it_in_utf16, typename it_end_utf16>
#endif
uaix_static bool case_before_dot_utf16(it_in_utf16 src, it_end_utf16 last)
{
    it_in_utf16 s = src;
    type_codept c = 0; // tag_can_be_uninitialized

    while (s != last)
    {
        s = iter_utf16(s, last, &c, iter_replacement);

        if (c == 0x0307)
            return true;

        const type_codept prop = stages_case_prop(c);

        if (!(prop & prop_CCC_NOT_0) || (prop & prop_CCC_230))
            return false;
    }

    return false;
}

#ifdef __cplusplus
template<typename it_in_utf16>
#endif
uaix_static bool case_after_i_utf16(it_in_utf16 first, it_in_utf16 src)
{
    it_in_utf16 s = src;
    type_codept c = 0; // tag_can_be_uninitialized

    while (s != first)
    {
        s = iter_rev_utf16(first, s, &c, iter_replacement);

        if (c == 0x0049) // I
            return true;

        const type_codept prop = stages_case_prop(c);

        if (!(prop & prop_CCC_NOT_0) || (prop & prop_CCC_230))
            return false;
    }

    return false;
}

#endif // UNI_ALGO_DOC_GENERATED_UTF16
// END: GENERATED UTF-16 FUNCTIONS

#ifdef __cplusplus
template<typename it_out_utf8, typename it_in_utf8>
#endif
uaix_always_inline_tmpl
uaix_static it_out_utf8 case_locale_upper_lt_utf8(type_codept c, it_out_utf8 dst,
                                                  it_in_utf8 first, it_in_utf8 prev)
{
    // SpecialCasing.txt # Lithuanian

    if (c == 0x0307 && case_after_soft_dotted_utf8(first, prev))
        return dst;

    // The next part is the same as in impl_case_map_utf8

    if (stages_special_upper_check(c))
    {
        struct case_special_buffer buffer = {{0}}; // tag_can_be_uninitialized
        const size_t size = stages_special_upper(c, &buffer);

        for (size_t i = 0; i < size; ++i)
            dst = codepoint_to_utf8(buffer.cps[i], dst);

        return dst;
    }

    c = stages_upper(c);

    dst = codepoint_to_utf8(c, dst);

    return dst;
}

#ifdef __cplusplus
template<typename it_out_utf8, typename it_in_utf8, typename it_end_utf8>
#endif
uaix_always_inline_tmpl
uaix_static it_out_utf8 case_locale_lower_lt_utf8(type_codept c, it_out_utf8 dst,
                                                  it_in_utf8 src, it_end_utf8 last,
                                                  it_in_utf8 first, it_in_utf8 prev)
{
    // SpecialCasing.txt # Lithuanian

    if (c == 0x0049 && case_more_above_utf8(src, last))
    {
        *dst++ = (type_char8)(type_codept)0x69;
        *dst++ = (type_char8)(type_codept)0xCC;
        *dst++ = (type_char8)(type_codept)0x87;
        return dst;
    }
    if (c == 0x004A && case_more_above_utf8(src, last))
    {
        *dst++ = (type_char8)(type_codept)0x6A;
        *dst++ = (type_char8)(type_codept)0xCC;
        *dst++ = (type_char8)(type_codept)0x87;
        return dst;
    }
    if (c == 0x012E && case_more_above_utf8(src, last))
    {
        *dst++ = (type_char8)(type_codept)0xC4;
        *dst++ = (type_char8)(type_codept)0xAF;
        *dst++ = (type_char8)(type_codept)0xCC;
        *dst++ = (type_char8)(type_codept)0x87;
        return dst;
    }
    if (c == 0x00CC)
    {
        *dst++ = (type_char8)(type_codept)0x69;
        *dst++ = (type_char8)(type_codept)0xCC;
        *dst++ = (type_char8)(type_codept)0x87;
        *dst++ = (type_char8)(type_codept)0xCC;
        *dst++ = (type_char8)(type_codept)0x80;
        return dst;
    }
    if (c == 0x00CD)
    {
        *dst++ = (type_char8)(type_codept)0x69;
        *dst++ = (type_char8)(type_codept)0xCC;
        *dst++ = (type_char8)(type_codept)0x87;
        *dst++ = (type_char8)(type_codept)0xCC;
        *dst++ = (type_char8)(type_codept)0x81;
        return dst;
    }
    if (c == 0x0128)
    {
        *dst++ = (type_char8)(type_codept)0x69;
        *dst++ = (type_char8)(type_codept)0xCC;
        *dst++ = (type_char8)(type_codept)0x87;
        *dst++ = (type_char8)(type_codept)0xCC;
        *dst++ = (type_char8)(type_codept)0x83;
        return dst;
    }

    // The next part is the same as in impl_case_map_utf8

    if (c == 0x0130) // tag_lowercase_special
    {
        *dst++ = (type_char8)(type_codept)0x69;
        *dst++ = (type_char8)(type_codept)0xCC;
        *dst++ = (type_char8)(type_codept)0x87;
        return dst;
    }
    if (c == 0x03A3) // Final_Sigma
    {
        if (!case_final_sigma_fwd_utf8(src, last) &&
            case_final_sigma_rev_utf8(first, prev))
        {
            *dst++ = (type_char8)(type_codept)0xCF;
            *dst++ = (type_char8)(type_codept)0x82;
            return dst;
        }
    }

    c = stages_lower(c);

    dst = codepoint_to_utf8(c, dst);

    return dst;
}

#ifdef __cplusplus
template<typename it_out_utf8>
#endif
uaix_always_inline_tmpl
uaix_static it_out_utf8 case_locale_upper_tr_az_utf8(type_codept c, it_out_utf8 dst)
{
    // SpecialCasing.txt # Turkish and Azeri

    if (c == 0x0069)
    {
        *dst++ = (type_char8)(type_codept)0xC4;
        *dst++ = (type_char8)(type_codept)0xB0;
        return dst;
    }

    // The next part is the same as in impl_case_map_utf8

    if (stages_special_upper_check(c))
    {
        struct case_special_buffer buffer = {{0}}; // tag_can_be_uninitialized
        const size_t size = stages_special_upper(c, &buffer);

        for (size_t i = 0; i < size; ++i)
            dst = codepoint_to_utf8(buffer.cps[i], dst);

        return dst;
    }

    c = stages_upper(c);

    dst = codepoint_to_utf8(c, dst);

    return dst;
}

#ifdef __cplusplus
template<typename it_out_utf8, typename it_in_utf8, typename it_end_utf8>
#endif
uaix_always_inline_tmpl
uaix_static it_out_utf8 case_locale_lower_tr_az_utf8(type_codept c, it_out_utf8 dst,
                                                     it_in_utf8 src, it_end_utf8 last,
                                                     it_in_utf8 first, it_in_utf8 prev)
{
    // SpecialCasing.txt # Turkish and Azeri

    if (c == 0x0130)
    {
        *dst++ = (type_char8)(type_codept)0x69;
        return dst;
    }
    if (c == 0x0307 && case_after_i_utf8(first, prev))
    {
        return dst;
    }
    if (c == 0x0049 && !case_before_dot_utf8(src, last))
    {
        *dst++ = (type_char8)(type_codept)0xC4;
        *dst++ = (type_char8)(type_codept)0xB1;
        return dst;
    }

    // The next part is the same as in impl_case_map_utf8

    if (c == 0x0130) // tag_lowercase_special
    {
        *dst++ = (type_char8)(type_codept)0x69;
        *dst++ = (type_char8)(type_codept)0xCC;
        *dst++ = (type_char8)(type_codept)0x87;
        return dst;
    }
    if (c == 0x03A3) // Final_Sigma
    {
        if (!case_final_sigma_fwd_utf8(src, last) &&
            case_final_sigma_rev_utf8(first, prev))
        {
            *dst++ = (type_char8)(type_codept)0xCF;
            *dst++ = (type_char8)(type_codept)0x82;
            return dst;
        }
    }

    c = stages_lower(c);

    dst = codepoint_to_utf8(c, dst);

    return dst;
}

#ifdef __cplusplus
template<typename it_out_utf16, typename it_in_utf16>
#endif
uaix_always_inline_tmpl
uaix_static it_out_utf16 case_locale_upper_lt_utf16(type_codept c, it_out_utf16 dst,
                                                    it_in_utf16 first, it_in_utf16 prev)
{
    // SpecialCasing.txt # Lithuanian

    if (c == 0x0307 && case_after_soft_dotted_utf16(first, prev))
        return dst;

    // The next part is the same as in impl_case_map_utf16

    if (stages_special_upper_check(c))
    {
        struct case_special_buffer buffer = {{0}}; // tag_can_be_uninitialized
        const size_t size = stages_special_upper(c, &buffer);

        for (size_t i = 0; i < size; ++i)
            dst = codepoint_to_utf16(buffer.cps[i], dst);

        return dst;
    }

    c = stages_upper(c);

    dst = codepoint_to_utf16(c, dst);

    return dst;
}

#ifdef __cplusplus
template<typename it_out_utf16, typename it_in_utf16, typename it_end_utf16>
#endif
uaix_always_inline_tmpl
uaix_static it_out_utf16 case_locale_lower_lt_utf16(type_codept c, it_out_utf16 dst,
                                                    it_in_utf16 src, it_end_utf16 last,
                                                    it_in_utf16 first, it_in_utf16 prev)
{
    // SpecialCasing.txt # Lithuanian

    if (c == 0x0049 && case_more_above_utf16(src, last))
    {
        *dst++ = (type_char16)0x0069;
        *dst++ = (type_char16)0x0307;
        return dst;
    }
    if (c == 0x004A && case_more_above_utf16(src, last))
    {
        *dst++ = (type_char16)0x006A;
        *dst++ = (type_char16)0x0307;
        return dst;
    }
    if (c == 0x012E && case_more_above_utf16(src, last))
    {
        *dst++ = (type_char16)0x012F;
        *dst++ = (type_char16)0x0307;
        return dst;
    }
    if (c == 0x00CC)
    {
        *dst++ = (type_char16)0x0069;
        *dst++ = (type_char16)0x0307;
        *dst++ = (type_char16)0x0300;
        return dst;
    }
    if (c == 0x00CD)
    {
        *dst++ = (type_char16)0x0069;
        *dst++ = (type_char16)0x0307;
        *dst++ = (type_char16)0x0301;
        return dst;
    }
    if (c == 0x0128)
    {
        *dst++ = (type_char16)0x0069;
        *dst++ = (type_char16)0x0307;
        *dst++ = (type_char16)0x0303;
        return dst;
    }

    // The next part is the same as in impl_case_map_utf16

    if (c == 0x0130) // tag_lowercase_special
    {
        *dst++ = (type_char16)0x0069;
        *dst++ = (type_char16)0x0307;
        return dst;
    }
    if (c == 0x03A3) // Final_Sigma
    {
        if (!case_final_sigma_fwd_utf16(src, last) &&
            case_final_sigma_rev_utf16(first, prev))
        {
            *dst++ = (type_char16)0x03C2;
            return dst;
        }
    }

    c = stages_lower(c);

    dst = codepoint_to_utf16(c, dst);

    return dst;
}

#ifdef __cplusplus
template<typename it_out_utf16>
#endif
uaix_always_inline_tmpl
uaix_static it_out_utf16 case_locale_upper_tr_az_utf16(type_codept c, it_out_utf16 dst)
{
    // SpecialCasing.txt # Turkish and Azeri

    if (c == 0x0069)
    {
        *dst++ = (type_char16)0x0130;
        return dst;
    }

    // The next part is the same as in impl_case_map_utf16

    if (stages_special_upper_check(c))
    {
        struct case_special_buffer buffer = {{0}}; // tag_can_be_uninitialized
        const size_t size = stages_special_upper(c, &buffer);

        for (size_t i = 0; i < size; ++i)
            dst = codepoint_to_utf16(buffer.cps[i], dst);

        return dst;
    }

    c = stages_upper(c);

    dst = codepoint_to_utf16(c, dst);

    return dst;
}

#ifdef __cplusplus
template<typename it_out_utf16, typename it_in_utf16, typename it_end_utf16>
#endif
uaix_always_inline_tmpl
uaix_static it_out_utf16 case_locale_lower_tr_az_utf16(type_codept c, it_out_utf16 dst,
                                                       it_in_utf16 src, it_end_utf16 last,
                                                       it_in_utf16 first, it_in_utf16 prev)
{
    // SpecialCasing.txt # Turkish and Azeri

    if (c == 0x0130)
    {
        *dst++ = (type_char16)0x0069;
        return dst;
    }
    if (c == 0x0307 && case_after_i_utf16(first, prev))
    {
        return dst;
    }
    if (c == 0x0049 && !case_before_dot_utf16(src, last))
    {
        *dst++ = (type_char16)0x0131;
        return dst;
    }

    // The next part is the same as in impl_case_map_utf16

    if (c == 0x0130) // tag_lowercase_special
    {
        *dst++ = (type_char16)0x0069;
        *dst++ = (type_char16)0x0307;
        return dst;
    }
    if (c == 0x03A3) // Final_Sigma
    {
        if (!case_final_sigma_fwd_utf16(src, last) &&
            case_final_sigma_rev_utf16(first, prev))
        {
            *dst++ = (type_char16)0x03C2;
            return dst;
        }
    }

    c = stages_lower(c);

    dst = codepoint_to_utf16(c, dst);

    return dst;
}

uaix_const uaix_array(type_codept, case_locale_el_map_0370_03FF, 144) =
{
    // U+0370..03FF
    0x0370,
    0x0370,
    0x0372,
    0x0372,
    0,
    0,
    0x0376,
    0x0376,
    0,
    0,
    0x037A,
    0x03FD,
    0x03FE,
    0x03FF,
    0,
    0x037F,
    0,
    0,
    0,
    0,
    0,
    0,
    0x0391 | 0x1000 | 0x4000,
    0,
    0x0395 | 0x1000 | 0x4000,
    0x0397 | 0x1000 | 0x4000,
    0x0399 | 0x1000 | 0x4000,
    0,
    0x039F | 0x1000 | 0x4000,
    0,
    0x03A5 | 0x1000 | 0x4000,
    0x03A9 | 0x1000 | 0x4000,
    0x0399 | 0x1000 | 0x4000 | 0x8000,
    0x0391 | 0x1000,
    0x0392,
    0x0393,
    0x0394,
    0x0395 | 0x1000,
    0x0396,
    0x0397 | 0x1000,
    0x0398,
    0x0399 | 0x1000,
    0x039A,
    0x039B,
    0x039C,
    0x039D,
    0x039E,
    0x039F | 0x1000,
    0x03A0,
    0x03A1,
    0,
    0x03A3,
    0x03A4,
    0x03A5 | 0x1000,
    0x03A6,
    0x03A7,
    0x03A8,
    0x03A9 | 0x1000,
    0x0399 | 0x1000 | 0x8000,
    0x03A5 | 0x1000 | 0x8000,
    0x0391 | 0x1000 | 0x4000,
    0x0395 | 0x1000 | 0x4000,
    0x0397 | 0x1000 | 0x4000,
    0x0399 | 0x1000 | 0x4000,
    0x03A5 | 0x1000 | 0x4000 | 0x8000,
    0x0391 | 0x1000,
    0x0392,
    0x0393,
    0x0394,
    0x0395 | 0x1000,
    0x0396,
    0x0397 | 0x1000,
    0x0398,
    0x0399 | 0x1000,
    0x039A,
    0x039B,
    0x039C,
    0x039D,
    0x039E,
    0x039F | 0x1000,
    0x03A0,
    0x03A1,
    0x03A3,
    0x03A3,
    0x03A4,
    0x03A5 | 0x1000,
    0x03A6,
    0x03A7,
    0x03A8,
    0x03A9 | 0x1000,
    0x0399 | 0x1000 | 0x8000,
    0x03A5 | 0x1000 | 0x8000,
    0x039F | 0x1000 | 0x4000,
    0x03A5 | 0x1000 | 0x4000,
    0x03A9 | 0x1000 | 0x4000,
    0x03CF,
    0x0392,
    0x0398,
    0x03D2,
    0x03D2 | 0x4000,
    0x03D2 | 0x8000,
    0x03A6,
    0x03A0,
    0x03CF,
    0x03D8,
    0x03D8,
    0x03DA,
    0x03DA,
    0x03DC,
    0x03DC,
    0x03DE,
    0x03DE,
    0x03E0,
    0x03E0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0x039A,
    0x03A1,
    0x03F9,
    0x037F,
    0x03F4,
    0x0395 | 0x1000,
    0,
    0x03F7,
    0x03F7,
    0x03F9,
    0x03FA,
    0x03FA,
    0x03FC,
    0x03FD,
    0x03FE,
    0x03FF,
};

uaix_const uaix_array(type_codept, case_locale_el_map_1F00_1FFF, 256) =
{
    // U+1F00..1FFF
    0x0391 | 0x1000,
    0x0391 | 0x1000,
    0x0391 | 0x1000 | 0x4000,
    0x0391 | 0x1000 | 0x4000,
    0x0391 | 0x1000 | 0x4000,
    0x0391 | 0x1000 | 0x4000,
    0x0391 | 0x1000 | 0x4000,
    0x0391 | 0x1000 | 0x4000,
    0x0391 | 0x1000,
    0x0391 | 0x1000,
    0x0391 | 0x1000 | 0x4000,
    0x0391 | 0x1000 | 0x4000,
    0x0391 | 0x1000 | 0x4000,
    0x0391 | 0x1000 | 0x4000,
    0x0391 | 0x1000 | 0x4000,
    0x0391 | 0x1000 | 0x4000,
    0x0395 | 0x1000,
    0x0395 | 0x1000,
    0x0395 | 0x1000 | 0x4000,
    0x0395 | 0x1000 | 0x4000,
    0x0395 | 0x1000 | 0x4000,
    0x0395 | 0x1000 | 0x4000,
    0,
    0,
    0x0395 | 0x1000,
    0x0395 | 0x1000,
    0x0395 | 0x1000 | 0x4000,
    0x0395 | 0x1000 | 0x4000,
    0x0395 | 0x1000 | 0x4000,
    0x0395 | 0x1000 | 0x4000,
    0,
    0,
    0x0397 | 0x1000,
    0x0397 | 0x1000,
    0x0397 | 0x1000 | 0x4000,
    0x0397 | 0x1000 | 0x4000,
    0x0397 | 0x1000 | 0x4000,
    0x0397 | 0x1000 | 0x4000,
    0x0397 | 0x1000 | 0x4000,
    0x0397 | 0x1000 | 0x4000,
    0x0397 | 0x1000,
    0x0397 | 0x1000,
    0x0397 | 0x1000 | 0x4000,
    0x0397 | 0x1000 | 0x4000,
    0x0397 | 0x1000 | 0x4000,
    0x0397 | 0x1000 | 0x4000,
    0x0397 | 0x1000 | 0x4000,
    0x0397 | 0x1000 | 0x4000,
    0x0399 | 0x1000,
    0x0399 | 0x1000,
    0x0399 | 0x1000 | 0x4000,
    0x0399 | 0x1000 | 0x4000,
    0x0399 | 0x1000 | 0x4000,
    0x0399 | 0x1000 | 0x4000,
    0x0399 | 0x1000 | 0x4000,
    0x0399 | 0x1000 | 0x4000,
    0x0399 | 0x1000,
    0x0399 | 0x1000,
    0x0399 | 0x1000 | 0x4000,
    0x0399 | 0x1000 | 0x4000,
    0x0399 | 0x1000 | 0x4000,
    0x0399 | 0x1000 | 0x4000,
    0x0399 | 0x1000 | 0x4000,
    0x0399 | 0x1000 | 0x4000,
    0x039F | 0x1000,
    0x039F | 0x1000,
    0x039F | 0x1000 | 0x4000,
    0x039F | 0x1000 | 0x4000,
    0x039F | 0x1000 | 0x4000,
    0x039F | 0x1000 | 0x4000,
    0,
    0,
    0x039F | 0x1000,
    0x039F | 0x1000,
    0x039F | 0x1000 | 0x4000,
    0x039F | 0x1000 | 0x4000,
    0x039F | 0x1000 | 0x4000,
    0x039F | 0x1000 | 0x4000,
    0,
    0,
    0x03A5 | 0x1000,
    0x03A5 | 0x1000,
    0x03A5 | 0x1000 | 0x4000,
    0x03A5 | 0x1000 | 0x4000,
    0x03A5 | 0x1000 | 0x4000,
    0x03A5 | 0x1000 | 0x4000,
    0x03A5 | 0x1000 | 0x4000,
    0x03A5 | 0x1000 | 0x4000,
    0,
    0x03A5 | 0x1000,
    0,
    0x03A5 | 0x1000 | 0x4000,
    0,
    0x03A5 | 0x1000 | 0x4000,
    0,
    0x03A5 | 0x1000 | 0x4000,
    0x03A9 | 0x1000,
    0x03A9 | 0x1000,
    0x03A9 | 0x1000 | 0x4000,
    0x03A9 | 0x1000 | 0x4000,
    0x03A9 | 0x1000 | 0x4000,
    0x03A9 | 0x1000 | 0x4000,
    0x03A9 | 0x1000 | 0x4000,
    0x03A9 | 0x1000 | 0x4000,
    0x03A9 | 0x1000,
    0x03A9 | 0x1000,
    0x03A9 | 0x1000 | 0x4000,
    0x03A9 | 0x1000 | 0x4000,
    0x03A9 | 0x1000 | 0x4000,
    0x03A9 | 0x1000 | 0x4000,
    0x03A9 | 0x1000 | 0x4000,
    0x03A9 | 0x1000 | 0x4000,
    0x0391 | 0x1000 | 0x4000,
    0x0391 | 0x1000 | 0x4000,
    0x0395 | 0x1000 | 0x4000,
    0x0395 | 0x1000 | 0x4000,
    0x0397 | 0x1000 | 0x4000,
    0x0397 | 0x1000 | 0x4000,
    0x0399 | 0x1000 | 0x4000,
    0x0399 | 0x1000 | 0x4000,
    0x039F | 0x1000 | 0x4000,
    0x039F | 0x1000 | 0x4000,
    0x03A5 | 0x1000 | 0x4000,
    0x03A5 | 0x1000 | 0x4000,
    0x03A9 | 0x1000 | 0x4000,
    0x03A9 | 0x1000 | 0x4000,
    0,
    0,
    0x0391 | 0x1000 | 0x2000,
    0x0391 | 0x1000 | 0x2000,
    0x0391 | 0x1000 | 0x2000 | 0x4000,
    0x0391 | 0x1000 | 0x2000 | 0x4000,
    0x0391 | 0x1000 | 0x2000 | 0x4000,
    0x0391 | 0x1000 | 0x2000 | 0x4000,
    0x0391 | 0x1000 | 0x2000 | 0x4000,
    0x0391 | 0x1000 | 0x2000 | 0x4000,
    0x0391 | 0x1000 | 0x2000,
    0x0391 | 0x1000 | 0x2000,
    0x0391 | 0x1000 | 0x2000 | 0x4000,
    0x0391 | 0x1000 | 0x2000 | 0x4000,
    0x0391 | 0x1000 | 0x2000 | 0x4000,
    0x0391 | 0x1000 | 0x2000 | 0x4000,
    0x0391 | 0x1000 | 0x2000 | 0x4000,
    0x0391 | 0x1000 | 0x2000 | 0x4000,
    0x0397 | 0x1000 | 0x2000,
    0x0397 | 0x1000 | 0x2000,
    0x0397 | 0x1000 | 0x2000 | 0x4000,
    0x0397 | 0x1000 | 0x2000 | 0x4000,
    0x0397 | 0x1000 | 0x2000 | 0x4000,
    0x0397 | 0x1000 | 0x2000 | 0x4000,
    0x0397 | 0x1000 | 0x2000 | 0x4000,
    0x0397 | 0x1000 | 0x2000 | 0x4000,
    0x0397 | 0x1000 | 0x2000,
    0x0397 | 0x1000 | 0x2000,
    0x0397 | 0x1000 | 0x2000 | 0x4000,
    0x0397 | 0x1000 | 0x2000 | 0x4000,
    0x0397 | 0x1000 | 0x2000 | 0x4000,
    0x0397 | 0x1000 | 0x2000 | 0x4000,
    0x0397 | 0x1000 | 0x2000 | 0x4000,
    0x0397 | 0x1000 | 0x2000 | 0x4000,
    0x03A9 | 0x1000 | 0x2000,
    0x03A9 | 0x1000 | 0x2000,
    0x03A9 | 0x1000 | 0x2000 | 0x4000,
    0x03A9 | 0x1000 | 0x2000 | 0x4000,
    0x03A9 | 0x1000 | 0x2000 | 0x4000,
    0x03A9 | 0x1000 | 0x2000 | 0x4000,
    0x03A9 | 0x1000 | 0x2000 | 0x4000,
    0x03A9 | 0x1000 | 0x2000 | 0x4000,
    0x03A9 | 0x1000 | 0x2000,
    0x03A9 | 0x1000 | 0x2000,
    0x03A9 | 0x1000 | 0x2000 | 0x4000,
    0x03A9 | 0x1000 | 0x2000 | 0x4000,
    0x03A9 | 0x1000 | 0x2000 | 0x4000,
    0x03A9 | 0x1000 | 0x2000 | 0x4000,
    0x03A9 | 0x1000 | 0x2000 | 0x4000,
    0x03A9 | 0x1000 | 0x2000 | 0x4000,
    0x0391 | 0x1000,
    0x0391 | 0x1000,
    0x0391 | 0x1000 | 0x2000 | 0x4000,
    0x0391 | 0x1000 | 0x2000,
    0x0391 | 0x1000 | 0x2000 | 0x4000,
    0,
    0x0391 | 0x1000 | 0x4000,
    0x0391 | 0x1000 | 0x2000 | 0x4000,
    0x0391 | 0x1000,
    0x0391 | 0x1000,
    0x0391 | 0x1000 | 0x4000,
    0x0391 | 0x1000 | 0x4000,
    0x0391 | 0x1000 | 0x2000,
    0,
    0x0399 | 0x1000,
    0,
    0,
    0,
    0x0397 | 0x1000 | 0x2000 | 0x4000,
    0x0397 | 0x1000 | 0x2000,
    0x0397 | 0x1000 | 0x2000 | 0x4000,
    0,
    0x0397 | 0x1000 | 0x4000,
    0x0397 | 0x1000 | 0x2000 | 0x4000,
    0x0395 | 0x1000 | 0x4000,
    0x0395 | 0x1000 | 0x4000,
    0x0397 | 0x1000 | 0x4000,
    0x0397 | 0x1000 | 0x4000,
    0x0397 | 0x1000 | 0x2000,
    0,
    0,
    0,
    0x0399 | 0x1000,
    0x0399 | 0x1000,
    0x0399 | 0x1000 | 0x4000 | 0x8000,
    0x0399 | 0x1000 | 0x4000 | 0x8000,
    0,
    0,
    0x0399 | 0x1000 | 0x4000,
    0x0399 | 0x1000 | 0x4000 | 0x8000,
    0x0399 | 0x1000,
    0x0399 | 0x1000,
    0x0399 | 0x1000 | 0x4000,
    0x0399 | 0x1000 | 0x4000,
    0,
    0,
    0,
    0,
    0x03A5 | 0x1000,
    0x03A5 | 0x1000,
    0x03A5 | 0x1000 | 0x4000 | 0x8000,
    0x03A5 | 0x1000 | 0x4000 | 0x8000,
    0x03A1,
    0x03A1,
    0x03A5 | 0x1000 | 0x4000,
    0x03A5 | 0x1000 | 0x4000 | 0x8000,
    0x03A5 | 0x1000,
    0x03A5 | 0x1000,
    0x03A5 | 0x1000 | 0x4000,
    0x03A5 | 0x1000 | 0x4000,
    0x03A1,
    0,
    0,
    0,
    0,
    0,
    0x03A9 | 0x1000 | 0x2000 | 0x4000,
    0x03A9 | 0x1000 | 0x2000,
    0x03A9 | 0x1000 | 0x2000 | 0x4000,
    0,
    0x03A9 | 0x1000 | 0x4000,
    0x03A9 | 0x1000 | 0x2000 | 0x4000,
    0x039F | 0x1000 | 0x4000,
    0x039F | 0x1000 | 0x4000,
    0x03A9 | 0x1000 | 0x4000,
    0x03A9 | 0x1000 | 0x4000,
    0x03A9 | 0x1000 | 0x2000,
    0,
    0,
    0,
};

uaix_always_inline
uaix_static type_codept case_greek_upper(type_codept c, bool* const prev_vowel_with_accent, bool* const maybe_eta_with_tonos)
{
    // The data and the algorithm is based on: http://site.icu-project.org/design/case/greek-upper

    const type_codept has_vowel = 0x1000;
    const type_codept has_ypogegrammeni = 0x2000;
    const type_codept has_accent = 0x4000;
    const type_codept has_dialytika = 0x8000;

    type_codept data = 0; // tag_can_be_uninitialized

    // Unicode ranges for Greek are U+0370..03FF and U+1F00..1FFF and one U+2126
    // Ignore other code points
    if (c < 0x0370 || c > 0x2126 || (c > 0x03FF && c < 0x1F00))
        data = 0; // NOLINT(bugprone-branch-clone)
    else if (c <= 0x03FF)
        data = case_locale_el_map_0370_03FF[c - 0x0370];
    else if (c <= 0x1FFF)
        data = case_locale_el_map_1F00_1FFF[c - 0x1F00];
    else if (c == 0x2126)
        data = 0x03A9 | has_vowel;
    else
        data = 0; // NOLINT(bugprone-branch-clone)

    if (data)
    {
        // Get a code point without accents in upper case
        type_codept upper = data & 0x03FF;

        if ((data & has_vowel) &&
            (upper == 0x0399 || upper == 0x03A5) &&
            *prev_vowel_with_accent)
            data |= has_dialytika;

        *prev_vowel_with_accent =
            (data & (has_vowel | has_accent | has_dialytika)) == (has_vowel | has_accent);

        // If Eta (U+0397) is alone it must be replaced with Eta with tonos (U+0389)
        // It can be checked with Final_Sigma "word boundary" rules
        *maybe_eta_with_tonos =
            upper == 0x0397 && (data & has_accent) && !(data & has_ypogegrammeni);

        // Iota and Upsilon must be replaced with Iota and Upsilon with dialytika
        // if previous vowel has accent
        if (data & has_dialytika)
        {
            if (upper == 0x0399)
                upper = 0x03AA;
            else if (upper == 0x03A5)
                upper = 0x03AB;
        }

        return upper;
    }

    *prev_vowel_with_accent = false;
    *maybe_eta_with_tonos = false;

    return 0;
}

#ifdef __cplusplus
template<typename it_in_utf8, typename it_end_utf8, typename it_out_utf8>
#endif
uaix_static size_t case_upper_el_utf8(it_in_utf8 first, it_end_utf8 last, it_out_utf8 result)
{
    it_in_utf8 src = first;
    it_out_utf8 dst = result;
    type_codept c = 0; // tag_can_be_uninitialized
    bool prev_vowel_with_accent = false; // tag_must_be_initialized
    bool maybe_eta_with_tonos = false; // tag_must_be_initialized

    while (src != last)
    {
        it_in_utf8 prev = src;

        src = iter_utf8(src, last, &c, iter_replacement);

        const type_codept upper = case_greek_upper(c, &prev_vowel_with_accent, &maybe_eta_with_tonos);
        if (upper)
        {
            // Use Final_Sigma function here because Eta follows the same "word boundary" rules
            if (maybe_eta_with_tonos &&
                !case_final_sigma_fwd_utf8(src, last) &&
                !case_final_sigma_rev_utf8(first, prev))
            {
                *dst++ = (type_char8)(type_codept)0xCE;
                *dst++ = (type_char8)(type_codept)0x89;
                continue;
            }

            c = upper;
        }
        else
        {
            if (stages_special_upper_check(c))
            {
                struct case_special_buffer buffer = {{0}};
                const size_t size = stages_special_upper(c, &buffer);

                for (size_t i = 0; i < size; ++i)
                    dst = codepoint_to_utf8(buffer.cps[i], dst);

                continue;
            }

            c = stages_upper(c);
        }

        dst = codepoint_to_utf8(c, dst);
    }

    return (size_t)(dst - result);
}

#ifdef __cplusplus
template<typename it_in_utf16, typename it_end_utf16, typename it_out_utf16>
#endif
uaix_static size_t case_upper_el_utf16(it_in_utf16 first, it_end_utf16 last, it_out_utf16 result)
{
    it_in_utf16 src = first;
    it_out_utf16 dst = result;
    type_codept c = 0; // tag_can_be_uninitialized
    bool after_vowel_with_accent = false; // tag_must_be_initialized
    bool maybe_eta_with_tonos = false; // tag_must_be_initialized

    while (src != last)
    {
        it_in_utf16 prev = src;

        src = iter_utf16(src, last, &c, iter_replacement);

        const type_codept upper = case_greek_upper(c, &after_vowel_with_accent, &maybe_eta_with_tonos);
        if (upper)
        {
            // Use Final_Sigma function here because Eta follows the same "word boundary" rules
            if (maybe_eta_with_tonos &&
                !case_final_sigma_fwd_utf16(src, last) &&
                !case_final_sigma_rev_utf16(first, prev))
            {
                *dst++ = (type_char16)0x0389;
                continue;
            }

            c = upper;
        }
        else
        {
            if (stages_special_upper_check(c))
            {
                struct case_special_buffer buffer = {{0}};
                const size_t size = stages_special_upper(c, &buffer);

                for (size_t i = 0; i < size; ++i)
                    dst = codepoint_to_utf16(buffer.cps[i], dst);

                continue;
            }

            c = stages_upper(c);
        }

        dst = codepoint_to_utf16(c, dst);
    }

    return (size_t)(dst - result);
}

#ifndef UNI_ALGO_DISABLE_SEGMENT_WORD

#ifdef __cplusplus
template<typename it_in_utf8, typename it_end_utf8, typename it_out_utf8>
#endif
uaix_static size_t case_title_locale_utf8(it_in_utf8 first, it_end_utf8 last, it_out_utf8 result, type_codept language)
{
    // The function is the same as case_title_utf8 except LOCALE BEGIN - LOCALE END parts

    it_in_utf8 src = first;
    it_in_utf8 brk = first;
    it_in_utf8 prev_brk = first;
    it_out_utf8 dst = result;
    type_codept c = 0; // tag_can_be_uninitialized
    bool found_break = false; // tag_must_be_initialized
    bool make_lower = false; // tag_must_be_initialized

    type_codept word_prop = 0; // Not used here
    struct impl_segment_word_state state = {0,0,0,0,0,0,0}; // tag_can_be_uninitialized
    impl_segment_word_state_reset(&state);

    while (src != last)
    {
        it_in_utf8 prev = src;
        src = iter_utf8(src, last, &c, iter_replacement);

        if (!found_break)
        {
            // Find break (if at the end then force break)
            if (segment_word_utf8(&state, c, &word_prop, src, last) || src == last)
            {
                brk = src;
                src = prev_brk;
                prev_brk = prev;
                found_break = true;
                make_lower = false;
            }
            continue;
        }
        else if (brk == src) // Found previous break
        {
            found_break = false;
            // If not at the end then find next break else output last code point
            if (src != last)
                continue;
        }

        if (!make_lower)
        {
            // If Cased then make it title else output as is
            if (stages_case_prop(c) & prop_Cased)
            {
                // Make lower all code points after title
                make_lower = true;

                // LOCALE BEGIN

                if (language == case_map_language_tr || language == case_map_language_az)
                {
                    if (c == 0x0069)
                    {
                        *dst++ = (type_char8)(type_codept)0xC4;
                        *dst++ = (type_char8)(type_codept)0xB0;
                        continue;
                    }
                }
                else if (language == case_map_language_nl)
                {
                    // i or I with j or J
                    if ((c == 0x0069 || c == 0x0049) && src != last &&
                        ((type_codept)*src == 0x006A || (type_codept)*src == 0x004A))
                    {
                        ++src;
                        *dst++ = (type_char8)(type_codept)0x49; // I
                        *dst++ = (type_char8)(type_codept)0x4A; // J
                        continue;
                    }
                }
                // This path is not possible for lt
                /*else if (locale == case_map_language_lt)
                {
                    if (c == 0x0307 && case_after_soft_dotted_utf16(first, prev))
                        continue;
                }*/

                // LOCALE END

                if (stages_special_title_check(c))
                {
                    struct case_special_buffer buffer = {{0}};
                    const size_t size = stages_special_title(c, &buffer);

                    for (size_t i = 0; i < size; ++i)
                        dst = codepoint_to_utf8(buffer.cps[i], dst);

                    continue;
                }

                c = stages_title(c);
            }
        }
        else
        {
            // LOCALE BEGIN

            if (language == case_map_language_lt)
            {
                dst = case_locale_lower_lt_utf8(c, dst, src, last, first, prev);
                continue;
            }
            if (language == case_map_language_tr || language == case_map_language_az)
            {
                dst = case_locale_lower_tr_az_utf8(c, dst, src, last, first, prev);
                continue;
            }

            // LOCALE END

            if (c == 0x0130) // tag_lowercase_special
            {
                *dst++ = (type_char8)(type_codept)0x69;
                *dst++ = (type_char8)(type_codept)0xCC;
                *dst++ = (type_char8)(type_codept)0x87;
                continue;
            }
            if (c == 0x03A3) // Final_Sigma
            {
                if (!case_final_sigma_fwd_utf8(src, last) &&
                    case_final_sigma_rev_utf8(first, prev))
                {
                    *dst++ = (type_char8)(type_codept)0xCF;
                    *dst++ = (type_char8)(type_codept)0x82;
                    continue;
                }
            }

            c = stages_lower(c);
        }

        dst = codepoint_to_utf8(c, dst);
    }

    return (size_t)(dst - result);
}

#ifdef __cplusplus
template<typename it_in_utf16, typename it_end_utf16, typename it_out_utf16>
#endif
uaix_static size_t case_title_locale_utf16(it_in_utf16 first, it_end_utf16 last, it_out_utf16 result, type_codept language)
{
    // The function is the same as case_title_utf16 except LOCALE BEGIN - LOCALE END parts

    it_in_utf16 src = first;
    it_in_utf16 brk = first;
    it_in_utf16 prev_brk = first;
    it_out_utf16 dst = result;
    type_codept c = 0; // tag_can_be_uninitialized
    bool found_break = false; // tag_must_be_initialized
    bool make_lower = false; // tag_must_be_initialized

    type_codept word_prop = 0; // Not used here
    struct impl_segment_word_state state = {0,0,0,0,0,0,0}; // tag_can_be_uninitialized
    impl_segment_word_state_reset(&state);

    while (src != last)
    {
        it_in_utf16 prev = src;
        src = iter_utf16(src, last, &c, iter_replacement);

        if (!found_break)
        {
            // Find break (if at the end then force break)
            if (segment_word_utf16(&state, c, &word_prop, src, last) || src == last)
            {
                brk = src;
                src = prev_brk;
                prev_brk = prev;
                found_break = true;
                make_lower = false;
            }
            continue;
        }
        else if (brk == src) // Found previous break
        {
            found_break = false;
            // If not at the end then find next break else output last code point
            if (src != last)
                continue;
        }

        if (!make_lower)
        {
            // If Cased then make it title else output as is
            if (stages_case_prop(c) & prop_Cased)
            {
                // Make lower all code points after title
                make_lower = true;

                // LOCALE BEGIN

                if (language == case_map_language_tr || language == case_map_language_az)
                {
                    if (c == 0x0069)
                    {
                        *dst++ = (type_char16)0x0130;
                        continue;
                    }
                }
                else if (language == case_map_language_nl)
                {
                    // i or I with j or J
                    if ((c == 0x0069 || c == 0x0049) && src != last &&
                        ((type_codept)*src == 0x006A || (type_codept)*src == 0x004A))
                    {
                        ++src;
                        *dst++ = (type_char16)0x0049; // I
                        *dst++ = (type_char16)0x004A; // J
                        continue;
                    }
                }
                // This path is not possible for lt
                /*else if (locale == case_map_language_lt)
                {
                    if (c == 0x0307 && case_after_soft_dotted_utf16(first, prev))
                        continue;
                }*/

                // LOCALE END

                if (stages_special_title_check(c))
                {
                    struct case_special_buffer buffer = {{0}};
                    const size_t size = stages_special_title(c, &buffer);

                    for (size_t i = 0; i < size; ++i)
                        dst = codepoint_to_utf16(buffer.cps[i], dst);

                    continue;
                }

                c = stages_title(c);
            }
        }
        else
        {
            // LOCALE BEGIN

            if (language == case_map_language_lt)
            {
                dst = case_locale_lower_lt_utf16(c, dst, src, last, first, prev);
                continue;
            }
            if (language == case_map_language_tr || language == case_map_language_az)
            {
                dst = case_locale_lower_tr_az_utf16(c, dst, src, last, first, prev);
                continue;
            }

            // LOCALE END

            if (c == 0x0130) // tag_lowercase_special
            {
                *dst++ = (type_char16)0x0069;
                *dst++ = (type_char16)0x0307;
                continue;
            }
            if (c == 0x03A3) // Final_Sigma
            {
                if (!case_final_sigma_fwd_utf16(src, last) &&
                    case_final_sigma_rev_utf16(first, prev))
                {
                    *dst++ = (type_char16)0x03C2;
                    continue;
                }
            }

            c = stages_lower(c);
        }

        dst = codepoint_to_utf16(c, dst);
    }

    return (size_t)(dst - result);
}

#endif // UNI_ALGO_DISABLE_SEGMENT_WORD

#ifdef __cplusplus
template<typename it_in_utf8, typename it_end_utf8, typename it_out_utf8>
#endif
uaix_static size_t impl_case_map_locale_utf8(it_in_utf8 first, it_end_utf8 last, it_out_utf8 result, int mode, type_codept language)
{
    it_in_utf8 src = first;
    it_out_utf8 dst = result;
    type_codept c = 0; // tag_can_be_uninitialized

    if (language == case_map_language_lt)
    {
        if (mode == impl_case_map_mode_lowercase)
        {
            while (src != last)
            {
                it_in_utf8 prev = src;

                src = iter_utf8(src, last, &c, iter_replacement);

                dst = case_locale_lower_lt_utf8(c, dst, src, last, first, prev);
            }

            return (size_t)(dst - result);
        }
        if (mode == impl_case_map_mode_uppercase)
        {
            while (src != last)
            {
                it_in_utf8 prev = src;

                src = iter_utf8(src, last, &c, iter_replacement);

                dst = case_locale_upper_lt_utf8(c, dst, first, prev);
            }

            return (size_t)(dst - result);
        }
#ifndef UNI_ALGO_DISABLE_SEGMENT_WORD
        if (mode == impl_case_map_mode_titlecase)
            return case_title_locale_utf8(first, last, result, language);
#endif
    }
    else if (language == case_map_language_tr || language == case_map_language_az)
    {
        if (mode == impl_case_map_mode_lowercase)
        {
            while (src != last)
            {
                it_in_utf8 prev = src;

                src = iter_utf8(src, last, &c, iter_replacement);

                dst = case_locale_lower_tr_az_utf8(c, dst, src, last, first, prev);
            }

            return (size_t)(dst - result);
        }
        if (mode == impl_case_map_mode_uppercase)
        {
            while (src != last)
            {
                src = iter_utf8(src, last, &c, iter_replacement);

                dst = case_locale_upper_tr_az_utf8(c, dst);
            }

            return (size_t)(dst - result);
        }
#ifndef UNI_ALGO_DISABLE_SEGMENT_WORD
        if (mode == impl_case_map_mode_titlecase)
            return case_title_locale_utf8(first, last, result, language);
#endif
    }
    else if (language == case_map_language_el)
    {
        if (mode == impl_case_map_mode_uppercase)
            return case_upper_el_utf8(first, last, result);
    }
#ifndef UNI_ALGO_DISABLE_SEGMENT_WORD
    else if (language == case_map_language_nl)
    {
        if (mode == impl_case_map_mode_titlecase)
            return case_title_locale_utf8(first, last, result, language);
    }
#endif

    return impl_case_map_utf8(first, last, result, mode);
}

#ifdef __cplusplus
template<typename it_in_utf16, typename it_end_utf16, typename it_out_utf16>
#endif
uaix_static size_t impl_case_map_locale_utf16(it_in_utf16 first, it_end_utf16 last, it_out_utf16 result, int mode, type_codept language)
{
    it_in_utf16 src = first;
    it_out_utf16 dst = result;
    type_codept c = 0; // tag_can_be_uninitialized

    if (language == case_map_language_lt)
    {
        if (mode == impl_case_map_mode_lowercase)
        {
            while (src != last)
            {
                it_in_utf16 prev = src;

                src = iter_utf16(src, last, &c, iter_replacement);

                dst = case_locale_lower_lt_utf16(c, dst, src, last, first, prev);
            }

            return (size_t)(dst - result);
        }
        if (mode == impl_case_map_mode_uppercase)
        {
            while (src != last)
            {
                it_in_utf16 prev = src;

                src = iter_utf16(src, last, &c, iter_replacement);

                dst = case_locale_upper_lt_utf16(c, dst, first, prev);
            }

            return (size_t)(dst - result);
        }
#ifndef UNI_ALGO_DISABLE_SEGMENT_WORD
        if (mode == impl_case_map_mode_titlecase)
            return case_title_locale_utf16(first, last, result, language);
#endif
    }
    else if (language == case_map_language_tr || language == case_map_language_az)
    {
        if (mode == impl_case_map_mode_lowercase)
        {
            while (src != last)
            {
                it_in_utf16 prev = src;

                src = iter_utf16(src, last, &c, iter_replacement);

                dst = case_locale_lower_tr_az_utf16(c, dst, src, last, first, prev);
            }

            return (size_t)(dst - result);
        }
        if (mode == impl_case_map_mode_uppercase)
        {
            while (src != last)
            {
                src = iter_utf16(src, last, &c, iter_replacement);

                dst = case_locale_upper_tr_az_utf16(c, dst);
            }

            return (size_t)(dst - result);
        }
#ifndef UNI_ALGO_DISABLE_SEGMENT_WORD
        if (mode == impl_case_map_mode_titlecase)
            return case_title_locale_utf16(first, last, result, language);
#endif
    }
    else if (language == case_map_language_el)
    {
        if (mode == impl_case_map_mode_uppercase)
            return case_upper_el_utf16(first, last, result);
    }
#ifndef UNI_ALGO_DISABLE_SEGMENT_WORD
    else if (language == case_map_language_nl)
    {
        if (mode == impl_case_map_mode_titlecase)
            return case_title_locale_utf16(first, last, result, language);
    }
#endif

    return impl_case_map_utf16(first, last, result, mode);
}

UNI_ALGO_IMPL_NAMESPACE_END

//!#include "internal_undefs.h"


// AMALGAMATION: uni_algo/impl/impl_script.h


//!#include "internal_defines.h"
//!#include "internal_stages.h"

#ifndef UNI_ALGO_STATIC_DATA
//!#include "data/extern_script.h"
#else
//!#include "data/data_script.h"
#endif

UNI_ALGO_IMPL_NAMESPACE_BEGIN

uaix_always_inline
uaix_static type_codept impl_script_get_script(type_codept c)
{
    // https://www.unicode.org/reports/tr24/tr24-34.html#Script

    // Treat all invalid as replacement character (U+FFFD)
    if (c > 0x10FFFF)
        return 0x5A797979; // Zyyy (Common script)

    const size_t index = stages(c, stage1_script, stage2_script);

    if (index == 0)
        return 0x5A7A7A7A; // Zzzz (Unknown script)

    return stage3_script[index];
}

uaix_always_inline
uaix_static bool impl_script_has_script(type_codept c, type_codept script)
{
    // https://www.unicode.org/reports/tr24/tr24-34.html#Script_Extensions

    // Treat all invalid as replacement character (U+FFFD)
    if (c > 0x10FFFF)
        return (script == 0x5A797979) ? true : false; // Zyyy (Common script)

    // First try ScriptExtensions Unicode data
    size_t index = stages(c, stage1_script_ext, stage2_script_ext);

    if (index != 0)
    {
        // Linear search here, there are very few code points
        // with more than 5 scripts so no point to use binary search.
        const size_t size = stage3_script_ext[index];
        for (size_t i = 0; i < size; ++i)
        {
            if (script == stage3_script_ext[index + i + 1])
                return true;
        }
    }

    // Then try Scripts Unicode data
    index = stages(c, stage1_script, stage2_script);

    if (index == 0)
        return (script == 0x5A7A7A7A) ? true : false; // Zzzz (Unknown script)

    return (script == stage3_script[index]) ? true : false;
}

UNI_ALGO_IMPL_NAMESPACE_END

//!#include "internal_undefs.h"


// AMALGAMATION: uni_algo/impl/impl_prop.h


//!#include "internal_defines.h"
//!#include "internal_stages.h"

#ifndef UNI_ALGO_STATIC_DATA
//!#include "data/extern_prop.h"
#else
//!#include "data/data_prop.h"
#endif

UNI_ALGO_IMPL_NAMESPACE_BEGIN

// https://www.unicode.org/reports/tr44/#Property_APIs
// Some recomendations but mostly useless except maybe default values

// These values are stable it is guaranteed that
// they will never change and a wrapper can rely on that
// https://www.unicode.org/reports/tr44/#General_Category_Values
uaix_const type_codept impl_General_Category_Lu = 1;  // Uppercase_Letter
uaix_const type_codept impl_General_Category_Ll = 2;  // Lowercase_Letter
uaix_const type_codept impl_General_Category_Lt = 3;  // Titlecase_Letter
//                           Lu | Ll | Lt -> LC       // Cased_Letter
uaix_const type_codept impl_General_Category_Lm = 4;  // Modifier_Letter
uaix_const type_codept impl_General_Category_Lo = 5;  // Other_Letter
//                 Lu | Ll | Lt | Lm | Lo -> L        // Letter
uaix_const type_codept impl_General_Category_Mn = 6;  // Nonspacing_Mark
uaix_const type_codept impl_General_Category_Mc = 7;  // Spacing_Mark
uaix_const type_codept impl_General_Category_Me = 8;  // Enclosing_Mark
//                           Mn | Mc | Me -> M        // Mark
uaix_const type_codept impl_General_Category_Nd = 9;  // Decimal_Number
uaix_const type_codept impl_General_Category_Nl = 10; // Letter_Number
uaix_const type_codept impl_General_Category_No = 11; // Other_Number
//                           Nd | Nl | No -> N        // Number
uaix_const type_codept impl_General_Category_Pc = 12; // Connector_Punctuation
uaix_const type_codept impl_General_Category_Pd = 13; // Dash_Punctuation
uaix_const type_codept impl_General_Category_Ps = 14; // Open_Punctuation
uaix_const type_codept impl_General_Category_Pe = 15; // Close_Punctuation
uaix_const type_codept impl_General_Category_Pi = 16; // Initial_Punctuation
uaix_const type_codept impl_General_Category_Pf = 17; // Final_Punctuation
uaix_const type_codept impl_General_Category_Po = 18; // Other_Punctuation
//       Pc | Pd | Ps | Pe | Pi | Pf | Po -> P        // Punctuation
uaix_const type_codept impl_General_Category_Sm = 19; // Math_Symbol
uaix_const type_codept impl_General_Category_Sc = 20; // Currency_Symbol
uaix_const type_codept impl_General_Category_Sk = 21; // Modifier_Symbol
uaix_const type_codept impl_General_Category_So = 22; // Other_Symbol
//                      Sm | Sc | Sk | So -> S        // Symbol
uaix_const type_codept impl_General_Category_Zs = 23; // Space_Separator
uaix_const type_codept impl_General_Category_Zl = 24; // Line_Separator
uaix_const type_codept impl_General_Category_Zp = 25; // Paragraph_Separator
//                           Zs | Zl | Zp -> Z        // Separator
uaix_const type_codept impl_General_Category_Cc = 26; // Control
uaix_const type_codept impl_General_Category_Cf = 27; // Format
uaix_const type_codept impl_General_Category_Cs = 28; // Surrogate
uaix_const type_codept impl_General_Category_Co = 29; // Private_Use
uaix_const type_codept impl_General_Category_Cn = 0;  // Unassigned
//                 Cc | Cf | Cs | Co | Cn -> C        // Other

// General_Category data uses 5 bits so start with that for other data
uaix_const type_codept prop_Alphabetic              = 1 << 5;
uaix_const type_codept prop_White_Space             = 1 << 6;
uaix_const type_codept prop_Noncharacter_Code_Point = 1 << 7;

uaix_const type_codept impl_prop_replacement_char = 0xFFFD;   // REPLACEMENT CHARACTER
uaix_const type_codept impl_prop_max_value        = 0x10FFFF; // The last possible code point
uaix_const type_codept impl_prop_total_number     = 0x110000; // Total number of code points

uaix_always_inline
uaix_static type_codept impl_prop_get_prop(type_codept c)
{
    // Treat all invalid as replacement character (U+FFFD)
    if (c > 0x10FFFF)
        c = 0xFFFD;

    return stages(c, stage1_prop, stage2_prop);
}

uaix_always_inline
uaix_static type_codept impl_prop_get_gc_prop(type_codept prop)
{
    return (prop & 0x1F); // First 5 bits
}

// https://www.unicode.org/glossary/#code_point_type
// https://www.unicode.org/versions/Unicode14.0.0/ch02.pdf#M9.61673.TableTitle.Table.22.Types.of.Code.Points
// Seven fundamental classes of code points in The Unicode Standard:
// Graphic, Format, Control, Private-Use, Surrogate, Noncharacter, Reserved.
// Note that reserved code points also called unassigned code points in The Unicode Standard
// but they are not the same as code points with General_Category_Cn (General_Category_Unassigned)
// in a wrapper it always better to use word reserved to avoid confusion.
// https://www.unicode.org/glossary/#unassigned_code_point
// Unassigned Code Point. Synonym for reserved code point.

// Graphic: (General_Category >= General_Category_Lu && General_Category <= General_Category_Zs)
// Format: (General_Category_Zl || General_Category_Zp || General_Category_Cf)
// Reserved: (General_Category_Cn && !Noncharacter_Code_Point)
// Noncharacter: (Noncharacter_Code_Point)
// Control: (General_Category_Cc)
// Private-use: (General_Category_Co)
// Surrogate: (General_Category_Cs)

// Helpers for: Graphic, Format, Reserved

uaix_always_inline
uaix_static bool impl_prop_is_reserved_prop(type_codept prop)
{
    // https://www.unicode.org/glossary/#reserved_code_point

    // General_Category_Cn (General_Category_Unassigned) includes noncharacters
    // so we need to exclude them to get reserved (unassigned) code points

    if (impl_prop_get_gc_prop(prop) == impl_General_Category_Cn &&
        !(prop & prop_Noncharacter_Code_Point))
        return true;

    return false;
}

uaix_always_inline
uaix_static bool impl_prop_is_graphic_prop(type_codept prop)
{
    // https://www.unicode.org/glossary/#graphic_character

    const type_codept gc = impl_prop_get_gc_prop(prop);

    if (gc >= impl_General_Category_Lu &&
        gc <= impl_General_Category_Zs)
        return true;

    return false;
}

uaix_always_inline
uaix_static bool impl_prop_is_format_prop(type_codept prop)
{
    // https://www.unicode.org/glossary/#format_character
    // https://www.unicode.org/versions/Unicode14.0.0/ch02.pdf#M9.61673.TableTitle.Table.22.Types.of.Code.Points

    const type_codept gc = impl_prop_get_gc_prop(prop);

    if (gc == impl_General_Category_Zl ||
        gc == impl_General_Category_Zp ||
        gc == impl_General_Category_Cf)
        return true;

    return false;
}

uaix_always_inline
uaix_static bool impl_prop_is_noncharacter_prop(type_codept prop)
{
    // The Unicode Standard: PropList.txt -> Noncharacter_Code_Point
    // the same as: https://www.unicode.org/glossary/#noncharacter

    return (prop & prop_Noncharacter_Code_Point) ? true : false;
}

uaix_always_inline
uaix_static bool impl_prop_is_white_space_prop(type_codept prop)
{
    // The Unicode Standard: PropList.txt -> White_Space

    return (prop & prop_White_Space) ? true : false;
}

uaix_always_inline
uaix_static bool impl_prop_is_alphabetic_prop(type_codept prop)
{
    // The Unicode Standard: DerivedCoreProperties.txt -> Alphabetic

    return (prop & prop_Alphabetic) ? true : false;
}

// Some properties can be also checked without table lookup

uaix_always_inline
uaix_static bool impl_prop_is_noncharacter(type_codept c)
{
    // https://www.unicode.org/glossary/#noncharacter
    // https://www.unicode.org/faq/private_use.html#nonchar5
    // https://www.unicode.org/policies/stability_policy.html#Property_Value
    // The Noncharacter_Code_Point property is an immutable code point property,
    // which means that its property values for all Unicode code points will never change.

    // PropList.txt -> Noncharacter_Code_Point
    // FDD0..FDEF
    // FFFE..FFFF
    // 1FFFE..1FFFF
    // 2FFFE..2FFFF
    // 3FFFE..3FFFF
    // 4FFFE..4FFFF
    // 5FFFE..5FFFF
    // 6FFFE..6FFFF
    // 7FFFE..7FFFF
    // 8FFFE..8FFFF
    // 9FFFE..9FFFF
    // AFFFE..AFFFF
    // BFFFE..BFFFF
    // CFFFE..CFFFF
    // DFFFE..DFFFF
    // EFFFE..EFFFF
    // FFFFE..FFFFF
    // 10FFFE..10FFFF

    // This can be checked without table lookup

    if (c <= 0x10FFFF)
    {
        if ((c >= 0xFDD0 && c <= 0xFDEF) || (c & 0xFFFE) == 0xFFFE)
            return true;
    }

    return false;

    // About FDD0..FDEF
    // http://www.unicode.org/faq/private_use.html#nonchar4b
    // and The Unicode Standard: 23.7 Noncharacters
}

uaix_always_inline
uaix_static bool impl_prop_is_valid(type_codept c)
{
    // https://www.unicode.org/glossary/#code_point
    if (c <= 0x10FFFF)
        return true;

    return false;
}

uaix_always_inline
uaix_static bool impl_prop_is_valid_scalar(type_codept c)
{
    // https://www.unicode.org/glossary/#unicode_scalar_value
    if (c <= 0x10FFFF && !(c >= 0xD800 && c <= 0xDFFF))
        return true;

    return false;
}

uaix_always_inline
uaix_static bool impl_prop_is_supplementary(type_codept c)
{
    // https://www.unicode.org/glossary/#supplementary_code_point
    // Note that invalid code points (c > U+10FFFF) will return false
    // it is consistent with treat all invalid as replacement character (U+FFFD)
    // the same for other functions in this file
    if (c >= 0x10000 && c <= 0x10FFFF)
        return true;

    return false;
}

uaix_always_inline
uaix_static bool impl_prop_is_surrogate(type_codept c)
{
    // https://www.unicode.org/policies/stability_policy.html#Property_Value
    // The General_Category property value Surrogate (Cs) is immutable:
    // the set of code points with that value will never change.

    // https://www.unicode.org/glossary/#surrogate_code_point
    if (c >= 0xD800 && c <= 0xDFFF)
        return true;

    return false;
}

uaix_always_inline
uaix_static bool impl_prop_is_private_use(type_codept c)
{
    // https://www.unicode.org/policies/stability_policy.html#Property_Value
    // The General_Category property value Private_Use (Co) is immutable:
    // the set of code points with that value will never change.

    // https://www.unicode.org/glossary/#private_use_code_point
    if ((c >= 0xE000 && c <= 0xF8FF) ||
        (c >= 0xF0000 && c <= 0xFFFFD) ||
        (c >= 0x100000 && c <= 0x10FFFD))
        return true;

    return false;
}

uaix_always_inline
uaix_static bool impl_prop_is_control(type_codept c)
{
    // https://www.unicode.org/policies/stability_policy.html#Property_Value
    // The General_Category property value Control (Cc) is immutable:
    // the set of code points with that value will never change.

    // https://www.unicode.org/glossary/#control_codes
    if ((/*c >= 0x0000 &&*/ c <= 0x001F) ||
        (c >= 0x007F && c <= 0x009F))
        return true;

    return false;
}

UNI_ALGO_IMPL_NAMESPACE_END

//!#include "internal_undefs.h"


// AMALGAMATION: uni_algo/impl/impl_norm.h


//!#include "impl_iter.h"

#ifndef UNI_ALGO_DISABLE_PROP
//!#include "impl_prop.h"
#endif

//!#include "internal_defines.h"
//!#include "internal_stages.h"

#ifndef UNI_ALGO_STATIC_DATA
//!#include "data/extern_norm.h"
#else
//!#include "data/data_norm.h"
#endif

UNI_ALGO_IMPL_NAMESPACE_BEGIN

// The buffer must not be less than 4(3)+30+18=52(51)
// 4 is 4 starters, check norm_decomp_return why 4(3)
// 30 is the max number of non-starters
// 18 is max decomposition (we use the end of the buffer to store the next decomposed code point)
// Use 70 just because it means we need 70*4+70=350 bytes on stack for any normalization
// TODO: 70 is too much, now we have better safe facilities to guarantee that the size of the buffer will be enough in future Unicode versions
// and smaller buffer gives a bit better performance for some strange reason (CPU cache maybe? Needs more testing).
#ifdef __cplusplus
uaix_const size_t norm_buffer_size = 70; // tag_unicode_unstable_value
#else // tag_synchronize
#define norm_buffer_size 70
#endif

uaix_const size_t impl_max_norm_non_starters    = 30; // tag_unicode_stable_value
// Quote "...sequences of non-starters longer than 30 characters in length..." from:
// https://unicode.org/reports/tr15/#Stream_Safe_Text_Format

uaix_const size_t impl_max_norm_decomp_canon    = 4;  // tag_unicode_unstable_value
uaix_const size_t impl_max_norm_decomp_compat   = 18; // tag_unicode_unstable_value
// Quote "A canonical mapping ... pair of characters, but is never longer than two characters"
// and quote "Compatibility mappings are guaranteed to be no longer than 18 characters" from:
// https://www.unicode.org/reports/tr44/#Character_Decomposition_Mappings
// but these values are for full decomposition so they are unstable
// because in theory they may change in Unicode but it is very unlikely.

// http://www.unicode.org/faq/normalization.html#12
// The length of a destination (result) string must be premultiplied with one of these
// Example: destination_length = source_length * impl_x_function_name
uaix_const size_t impl_x_norm_to_nfc_utf8       = 3;  // tag_unicode_stable_value
uaix_const size_t impl_x_norm_to_nfd_utf8       = 3;  // tag_unicode_unstable_value
#ifndef UNI_ALGO_DISABLE_NFKC_NFKD
uaix_const size_t impl_x_norm_to_nfkc_utf8      = 11; // tag_unicode_unstable_value
uaix_const size_t impl_x_norm_to_nfkd_utf8      = 11; // tag_unicode_unstable_value
#endif
uaix_const size_t impl_x_norm_to_nfc_utf16      = 3;  // tag_unicode_stable_value
uaix_const size_t impl_x_norm_to_nfd_utf16      = 4;  // tag_unicode_unstable_value
#ifndef UNI_ALGO_DISABLE_NFKC_NFKD
uaix_const size_t impl_x_norm_to_nfkc_utf16     = 18; // tag_unicode_unstable_value
uaix_const size_t impl_x_norm_to_nfkd_utf16     = 18; // tag_unicode_unstable_value
#endif
#ifndef UNI_ALGO_DISABLE_PROP
uaix_const size_t impl_x_norm_to_unaccent_utf8  = 3;  // tag_unicode_stable_value
uaix_const size_t impl_x_norm_to_unaccent_utf16 = 3;  // tag_unicode_stable_value
#endif
// Only Decomposition_Mapping of NFC is Unicode stable value for strings.
// https://www.unicode.org/policies/stability_policy.html#Property_Value

// Return values for normalization detection functions
uaix_const int impl_norm_is_yes                 = 0;
uaix_const int impl_norm_is_ill_formed          = 8;
uaix_const int impl_norm_is_not_canonical_order = 16;
uaix_const int impl_norm_is_not_stream_safe     = 32;
//uaix_const int impl_norm_is_no                = 1; // Reserved
//uaix_const int impl_norm_is_maybe             = 2; // Reserved
uaix_const int norm_is_no_or_maybe              = 3; // Can be changed in the future. Must never be used in a wrapper.

struct norm_buffer
{
    uaix_array(type_codept, cps, norm_buffer_size);
    uaix_array(unsigned char, ccc, norm_buffer_size);
};

struct norm_multi
{
    size_t size;
    size_t last_qc;
    size_t count_ns;
};

uaix_always_inline
uaix_static size_t stages_decomp_nfd(type_codept c)
{
    // return offset to decomposed code points in NFD
    return stages(c, stage1_decomp_nfd, stage2_decomp_nfd);
}

uaix_always_inline
uaix_static size_t stages_decomp_nfd_number(size_t offset)
{
    // return number of decomposed code points in NFD
    return stage3_decomp_nfd[offset];
}

uaix_always_inline
uaix_static type_codept stages_decomp_nfd_cp(size_t offset, size_t i)
{
    // return code point by index in NFD
    return stage3_decomp_nfd[offset + i + 1];
}

#ifndef UNI_ALGO_DISABLE_NFKC_NFKD

uaix_always_inline
uaix_static size_t stages_decomp_nfkd(type_codept c)
{
    // return offset to decomposed code points in NFKD
    return stages(c, stage1_decomp_nfkd, stage2_decomp_nfkd);
}

uaix_always_inline
uaix_static size_t stages_decomp_nfkd_number(size_t offset)
{
    // return number of decomposed code points in NFKD
    return stage3_decomp_nfkd[offset];
}

uaix_always_inline
uaix_static type_codept stages_decomp_nfkd_cp(size_t offset, size_t i)
{
    // return code point by index in NFKD
    return stage3_decomp_nfkd[offset + i + 1];
}

#endif // UNI_ALGO_DISABLE_NFKC_NFKD

uaix_always_inline
uaix_static type_codept stages_comp(type_codept c1, type_codept c2)
{
    // NOTE: The approach with two-dimensional array is used here as recommended in:
    // 14.1.2 Optimizing Tables for NFC Composition
    // https://unicode.org/reports/tr15/#NFC_Table_Optimization
    // but two-dimensional array is packed into optimized one-dimensional array
    // to reduce the size of the data.

    const size_t i1 = stages(c1, stage1_comp_cp1, stage2_comp_cp1);
    if (i1 != 0)
    {
        const size_t i2 = stages(c2, stage1_comp_cp2, stage2_comp_cp2);
        if (i2 != 0 && i2 >= stage3_comp[i1] && i2 <= stage3_comp[i1 + 1])
            return stage3_comp[i1 + 2 + (i2 - stage3_comp[i1])];
    }
    return 0;

    // REMINDER: For reference this is the old version that use
    // two-dimensional table instead of packed composition table.
    // Also see function new_generator_unicodedata_compose in gen/gen.h
/*
    const size_t i1 = stages(c1, stage1_comp_cp1, stage2_comp_cp1);
    if (i1 != 0)
    {
        const size_t i2 = stages(c2, stage1_comp_cp2, stage2_comp_cp2);
        if (i2 != 0)
            return stage3_comp[i1][i2];
    }
    return 0;
*/
}

uaix_always_inline
uaix_static unsigned char stages_ccc(type_codept c)
{
    /* ccc_qc format: zzyydcbaxxxxxxxx (16-bit)
     * xxxxxxxx (bit 0 - 7) - Canonical_Combining_Class (0 - 254)
     * a (bit 8)  - NFC_Quick_Check=No || NFC_Quick_Check=Maybe (0, 1)
     * b (bit 9)  - NFD_Quick_Check=No (0, 1)
     * c (bit 10) - NFKC_Quick_Check=No || NFKC_Quick_Check=Maybe (0, 1)
     * d (bit 11) - NFKD_Quick_Check=No (0, 1)
     * yy (bit 12, 13) - Trailing non-starters in NFKD (for Stream-Safe Text Process) (0 - 3)
     * zz (bit 14, 15) - Initial non-starters in NFKD (for Stream-Safe Text Process) (0 - 2)
     * Note 1: there cannot be both initial and trailing only one of those
     * Note 2: we merge Maybe and No together just because we need some space for bits
     * for initial/trailing non-starters, we don't need Maybe in this algorithm anyway
     */

    const type_codept ccc_qc = stages(c, stage1_ccc_qc, stage2_ccc_qc);
    return (unsigned char)(ccc_qc & 0xFF);
}

uaix_const type_codept norm_bit_nfc  = 8;
uaix_const type_codept norm_bit_nfd  = 9;
#ifndef UNI_ALGO_DISABLE_NFKC_NFKD
uaix_const type_codept norm_bit_nfkc = 10;
uaix_const type_codept norm_bit_nfkd = 11;
#endif

uaix_const type_codept norm_bound_nfc  = 0x0300;
uaix_const type_codept norm_bound_nfd  = 0x00C0;
#ifndef UNI_ALGO_DISABLE_NFKC_NFKD
uaix_const type_codept norm_bound_nfkc = 0x00A0;
uaix_const type_codept norm_bound_nfkd = 0x00A0;
#endif

uaix_always_inline
uaix_static bool stages_ccc_qc_yes(type_codept ccc_qc, type_codept bit)
{
    // Canonical_Combining_Class=0 && Quick_Check=Yes (!Quick_Check=No && !Quick_Check=Maybe)
    return (ccc_qc & 0xFF) == 0 && !(ccc_qc & (type_codept)1 << bit);
}

uaix_always_inline
uaix_static bool stages_ccc_qc_detect(type_codept ccc_qc, type_codept bit)
{
    // Quick_Check=Yes (!Quick_Check=No && !Quick_Check=Maybe)
    return !(ccc_qc & (type_codept)1 << bit);
}

uaix_always_inline
uaix_static bool stages_ccc_qc_ns(type_codept ccc_qc, size_t* const count_ns)
{
    // https://unicode.org/reports/tr15/#Stream_Safe_Text_Format

    if (ccc_qc >> 14) // Initial non-starters in NFKD
    {
        *count_ns += ccc_qc >> 14;
        if (*count_ns > impl_max_norm_non_starters)
            return false;
    }
    else
    {
        *count_ns = ccc_qc >> 12; // Trailing non-starters in NFKD
    }
    return true;
}

uaix_always_inline
uaix_static bool stages_qc_yes_ns(type_codept c, size_t* const count_ns, type_codept norm_bit)
{
    /* Note that we always use NFKD lower bound in this
     * function because we need to count initial/trailing
     * non-starters in NFKD for Stream-Safe Text Process.
     * This disallow us to use NFC lower bound for example,
     * that is much higher, to achive a better performance,
     * but it cannot be done other way.
     * Note that we can still use real lower bounds
     * in normalization detection functions.
     * NOTE: Lower bound means everything below that has
     * Quick_Check=Yes and Canonical_Combining_Class=0.
     */

    if (c >= norm_bound_nfkd) // NFKD lower bound
    {
        const type_codept ccc_qc = stages(c, stage1_ccc_qc, stage2_ccc_qc);
        if (!stages_ccc_qc_ns(ccc_qc, count_ns))
            return false;
        return stages_ccc_qc_yes(ccc_qc, norm_bit);
    }
    *count_ns = 0;
    return true;
}

uaix_always_inline
uaix_static bool stages_qc_yes(type_codept c, type_codept norm_bit)
{
    const type_codept ccc_qc = stages(c, stage1_ccc_qc, stage2_ccc_qc);
    return stages_ccc_qc_yes(ccc_qc, norm_bit);
}

uaix_always_inline
uaix_static bool stages_ccc_qc_order(type_codept ccc_qc, unsigned char* const last_ccc)
{
    // https://unicode.org/reports/tr15/#Detecting_Normalization_Forms
    // Note: "if (Character.isSupplementaryCodePoint(ch)) ++i;"
    // check is irrelevant it's because Java uses UTF-16 internally.

    const unsigned char ccc = (ccc_qc & 0xFF);

    if (*last_ccc > ccc && ccc != 0)
    {
        *last_ccc = ccc;
        return false;
    }
    *last_ccc = ccc;
    return true;
}

uaix_always_inline
uaix_static void norm_order(struct norm_buffer* const buffer, size_t size)
{
    // Canonical Ordering Algorithm

    if (size > 0)
    {
        size_t last = size - 1;

        while (last > 0)
        {
            size_t new_last = 0; // tag_must_be_initialized

            for (size_t curr = 0; curr < last; ++curr)
            {
                const size_t next = curr + 1;

                if (buffer->ccc[next] > 0 && buffer->ccc[next] < buffer->ccc[curr])
                {
                    // Swap

                    const type_codept   temp_cps = buffer->cps[curr];
                    buffer->cps[curr] = buffer->cps[next];
                    buffer->cps[next] = temp_cps;

                    const unsigned char temp_ccc = buffer->ccc[curr];
                    buffer->ccc[curr] = buffer->ccc[next];
                    buffer->ccc[next] = temp_ccc;

                    new_last = curr;
                }
            }

            last = new_last;
        }
    }
}

uaix_always_inline
uaix_static size_t norm_decomp_hangul(type_codept c, size_t i, struct norm_buffer* const buffer)
{
    const type_codept SBase = 0xAC00;
    const type_codept LBase = 0x1100;
    const type_codept VBase = 0x1161;
    const type_codept TBase = 0x11A7;
    const type_codept TCount = 28;
    const type_codept NCount = 588;
    const type_codept SCount = 11172;

    if (c >= SBase && c < SBase + SCount)
    {
        const type_codept SIndex = c - SBase;
        const type_codept LPart = LBase + SIndex / NCount;
        const type_codept VPart = VBase + (SIndex % NCount) / TCount;
        const type_codept TPart = TBase + SIndex % TCount;

        buffer->cps[i] = LPart;
        buffer->ccc[i] = 0;

        buffer->cps[i + 1] = VPart;
        buffer->ccc[i + 1] = 0;

        if (TPart != TBase)
        {
            buffer->cps[i + 2] = TPart;
            buffer->ccc[i + 2] = 0;

            return 3;
        }

        return 2;
    }

    return 0;
}

uaix_always_inline
uaix_static size_t norm_comp_hangul(size_t i, struct norm_buffer* const buffer, size_t size)
{
    // Note: CCC=255 is used to mark composed code points

    const type_codept SBase = 0xAC00;
    const type_codept LBase = 0x1100;
    const type_codept VBase = 0x1161;
    const type_codept TBase = 0x11A7;
    const type_codept LCount = 19;
    const type_codept VCount = 21;
    const type_codept TCount = 28;
    const type_codept SCount = 11172;

    const type_codept c1 = buffer->cps[i];

    if (c1 >= LBase && c1 < LBase + LCount) // L+V+T
    {
        if (i + 1 < size)
        {
            const type_codept c2 = buffer->cps[i + 1];

            if (c2 >= VBase && c2 < VBase + VCount)
            {
                const type_codept LIndex = c1 - LBase;
                const type_codept VIndex = c2 - VBase;

                buffer->cps[i] = SBase + (LIndex * VCount + VIndex) * TCount;
                buffer->ccc[i + 1] = 255;

                if (i + 2 < size)
                {
                    const type_codept c3 = buffer->cps[i + 2];

                    if (c3 > TBase && c3 < TBase + TCount)
                    {
                        buffer->cps[i] += c3 - TBase;
                        buffer->ccc[i + 2] = 255;

                        return 2;
                    }
                }

                return 1;
            }
        }
    }
    else if (c1 >= SBase && c1 < SBase + SCount && ((c1 - SBase) % TCount) == 0) // LV+T
    {
        if (i + 1 < size)
        {
            const type_codept c2 = buffer->cps[i + 1];

            if (c2 > TBase && c2 < TBase + TCount)
            {
                buffer->cps[i] += c2 - TBase;
                buffer->ccc[i + 1] = 255;

                return 1;
            }

        }
    }

    return 0;
}

uaix_always_inline
uaix_static void norm_comp(struct norm_buffer* const buffer, size_t size)
{
    // Note: CCC=255 is used to mark composed code points

    if (size > 0)
    {
        size_t starter = 0; // tag_must_be_initialized

        for (size_t i = 0; i < size - 1; ++i)
        {
            const size_t hangul = norm_comp_hangul(i, buffer, size);
            if (hangul)
            {
                i += hangul;
                continue;
            }

            if (buffer->ccc[i] == 0)
                starter = i;

            // If there is a starter and non-blocked non-starter
            if (starter == i || !(buffer->ccc[i] != 255 && buffer->ccc[i] >= buffer->ccc[i + 1]))
            {
                const type_codept c = stages_comp(buffer->cps[starter], buffer->cps[i + 1]);
                if (c != 0)
                {
                    buffer->cps[starter] = c;
                    buffer->ccc[i + 1] = 255;
                }
            }
        }
    }
}

uaix_always_inline
uaix_static bool norm_decomp_return(struct norm_buffer* const buffer, struct norm_multi* const m)
{
    // UNUSED: buffer->cps, m->count_ns

    // Flush the buffer by Quick_Check=Yes boundary.
    if (m->last_qc > 0)
        return true;

    // More than 4 starters cannot compose together so flush the buffer.
    // In other words flush the buffer by CCC=0 boundary at this point.
    // Note 1: actually 3 starters (Hanguls L+V+T and 0CCB) but use 4 (max canonical decomposition) just in case.
    // Note 2: this check only matters for NFC/NFKC because in NFD/NFKD such cases are not possible.
    if (m->size > impl_max_norm_decomp_canon && buffer->ccc[m->size - 1] == 0)
    {
        m->last_qc = m->size - 1;
        return true;
    }

    // This must never happen so flush the buffer and stop to make it noticeable in tests.
    // 18 is max compatibility decomposition so the next turn can exhaust the buffer.
    // NOTE: C++ safe layer can prevent this error even without this check.
    if (m->size + impl_max_norm_decomp_compat > norm_buffer_size)
    {
#ifdef UNI_ALGO_TEST_ASSERT
        uaix_assert(false);
#endif
        m->last_qc = m->size;
        return true;
    }

    return false;
}

uaix_always_inline
uaix_static void norm_decomp_count_ns(struct norm_buffer* const buffer, struct norm_multi* const m)
{
    // Insert U+034F COMBINING GRAPHEME JOINER (CGJ) if there is more than 30 non-starters

    if (m->count_ns > impl_max_norm_non_starters)
    {
        m->count_ns -= impl_max_norm_non_starters;
        buffer->cps[m->size] = 0x034F;
        buffer->ccc[m->size] = 0;
        m->last_qc = m->size;
        ++m->size;
    }
}

uaix_always_inline
uaix_static bool norm_decomp_nfc(type_codept c, struct norm_buffer* const buffer, struct norm_multi* const m)
{
    norm_decomp_count_ns(buffer, m);

    // Need to decompose the first code point when NFC/NFKC,
    // it can be still composed if we drop here from fast loop
    if (m->size == 1)
    {
        const size_t offset = stages_decomp_nfd(buffer->cps[0]);
        if (offset)
        {
            m->size = 0;
            const size_t number = stages_decomp_nfd_number(offset);
            for (size_t i = 0; i < number; ++i, ++m->size)
            {
                buffer->cps[m->size] = stages_decomp_nfd_cp(offset, i);
                buffer->ccc[m->size] = stages_ccc(buffer->cps[m->size]);
                if (stages_qc_yes(buffer->cps[m->size], norm_bit_nfc))
                    m->last_qc = m->size;
            }
        }
    }

    // Do not decompose Hanguls like we do in norm_decomp_nfd, LV+T cases are handled in norm_comp

    // This additional quick check branch is almost irrelevant but in NFC/NFKC
    // in some cases we can stuck in slow loop a bit longer than needed and
    // we need the check to avoid it. This does not affect behaviour.
    // Test string: "\x005A\x0301\x0179\x0179\x0179\x0179\x0179"
    if (stages_qc_yes(c, norm_bit_nfc))
    {
        buffer->cps[m->size] = c;
        buffer->ccc[m->size] = stages_ccc(c);
        m->last_qc = m->size;
        ++m->size;
    }
    else
    {
        const size_t offset = stages_decomp_nfd(c);
        if (offset == 0)
        {
            buffer->cps[m->size] = c;
            buffer->ccc[m->size] = stages_ccc(c);
            if (stages_qc_yes(c, norm_bit_nfc))
                m->last_qc = m->size;
            ++m->size;
        }
        else
        {
            const size_t number = stages_decomp_nfd_number(offset);
            for (size_t i = 0; i < number; ++i, ++m->size)
            {
                buffer->cps[m->size] = stages_decomp_nfd_cp(offset, i);
                buffer->ccc[m->size] = stages_ccc(buffer->cps[m->size]);
                if (stages_qc_yes(buffer->cps[m->size], norm_bit_nfc))
                    m->last_qc = m->size;
            }
        }
    }

    return norm_decomp_return(buffer, m);
}

uaix_always_inline
uaix_static bool norm_decomp_nfd(type_codept c, struct norm_buffer* const buffer, struct norm_multi* const m)
{
    // Almost the same as norm_decomp_nfc but decompose everything

    norm_decomp_count_ns(buffer, m);

    const size_t hangul = norm_decomp_hangul(c, m->size, buffer);
    if (hangul)
    {
        m->last_qc = m->size;
        m->size += hangul;
    }
    else
    {
        const size_t offset = stages_decomp_nfd(c);
        if (offset == 0)
        {
            buffer->cps[m->size] = c;
            buffer->ccc[m->size] = stages_ccc(c);
            if (stages_qc_yes(c, norm_bit_nfd))
                m->last_qc = m->size;
            ++m->size;
        }
        else
        {
            const size_t number = stages_decomp_nfd_number(offset);
            for (size_t i = 0; i < number; ++i, ++m->size)
            {
                buffer->cps[m->size] = stages_decomp_nfd_cp(offset, i);
                buffer->ccc[m->size] = stages_ccc(buffer->cps[m->size]);
                if (stages_qc_yes(buffer->cps[m->size], norm_bit_nfd))
                    m->last_qc = m->size;
            }
        }
    }

    return norm_decomp_return(buffer, m);
}

#ifndef UNI_ALGO_DISABLE_NFKC_NFKD

uaix_always_inline
uaix_static bool norm_decomp_nfkc(type_codept c, struct norm_buffer* const buffer, struct norm_multi* const m)
{
    // The same as norm_decomp_nfc but uses NFKC data

    norm_decomp_count_ns(buffer, m);

    if (m->size == 1)
    {
        const size_t offset = stages_decomp_nfkd(buffer->cps[0]);
        if (offset)
        {
            m->size = 0;
            const size_t number = stages_decomp_nfkd_number(offset);
            for (size_t i = 0; i < number; ++i, ++m->size)
            {
                buffer->cps[m->size] = stages_decomp_nfkd_cp(offset, i);
                buffer->ccc[m->size] = stages_ccc(buffer->cps[m->size]);
                if (stages_qc_yes(buffer->cps[m->size], norm_bit_nfkc))
                    m->last_qc = m->size;
            }
        }
    }

    if (stages_qc_yes(c, norm_bit_nfkc))
    {
        buffer->cps[m->size] = c;
        buffer->ccc[m->size] = stages_ccc(c);
        m->last_qc = m->size;
        ++m->size;
    }
    else
    {
        const size_t offset = stages_decomp_nfkd(c);
        if (offset == 0)
        {
            buffer->cps[m->size] = c;
            buffer->ccc[m->size] = stages_ccc(c);
            if (stages_qc_yes(c, norm_bit_nfkc))
                m->last_qc = m->size;
            ++m->size;
        }
        else
        {
            const size_t number = stages_decomp_nfkd_number(offset);
            for (size_t i = 0; i < number; ++i, ++m->size)
            {
                buffer->cps[m->size] = stages_decomp_nfkd_cp(offset, i);
                buffer->ccc[m->size] = stages_ccc(buffer->cps[m->size]);
                if (stages_qc_yes(buffer->cps[m->size], norm_bit_nfkc))
                    m->last_qc = m->size;
            }
        }
    }

    return norm_decomp_return(buffer, m);
}

uaix_always_inline
uaix_static bool norm_decomp_nfkd(type_codept c, struct norm_buffer* const buffer, struct norm_multi* const m)
{
    // The same as norm_decomp_nfd but uses NFKD data

    norm_decomp_count_ns(buffer, m);

    const size_t hangul = norm_decomp_hangul(c, m->size, buffer);
    if (hangul)
    {
        m->last_qc = m->size;
        m->size += hangul;
    }
    else
    {
        const size_t offset = stages_decomp_nfkd(c);
        if (offset == 0)
        {
            buffer->cps[m->size] = c;
            buffer->ccc[m->size] = stages_ccc(c);
            if (stages_qc_yes(c, norm_bit_nfkd))
                m->last_qc = m->size;
            ++m->size;
        }
        else
        {
            const size_t number = stages_decomp_nfkd_number(offset);
            for (size_t i = 0; i < number; ++i, ++m->size)
            {
                buffer->cps[m->size] = stages_decomp_nfkd_cp(offset, i);
                buffer->ccc[m->size] = stages_ccc(buffer->cps[m->size]);
                if (stages_qc_yes(buffer->cps[m->size], norm_bit_nfkd))
                    m->last_qc = m->size;
            }
        }
    }

    return norm_decomp_return(buffer, m);
}

#endif // UNI_ALGO_DISABLE_NFKC_NFKD

#ifndef UNI_ALGO_DISABLE_PROP

uaix_always_inline
uaix_static bool norm_decomp_unaccent(type_codept c, struct norm_buffer* const buffer, struct norm_multi* const m)
{
    // Ignore Hanguls, decompose to NFD, skip Nonspacing Mark
    // The full algorithm is: NFD -> remove Nonspacing Mark -> NFC

    norm_decomp_count_ns(buffer, m);

    const size_t offset = stages_decomp_nfd(c);
    if (offset == 0)
    {
        if (impl_prop_get_gc_prop(impl_prop_get_prop(c)) != impl_General_Category_Mn)
        {
            buffer->cps[m->size] = c;
            buffer->ccc[m->size] = stages_ccc(c);
            if (stages_qc_yes(c, norm_bit_nfd))
                m->last_qc = m->size;
            ++m->size;
        }
    }
    else
    {
        const size_t number = stages_decomp_nfd_number(offset);
        for (size_t i = 0; i < number; ++i)
        {
            const type_codept cp = stages_decomp_nfd_cp(offset, i);
            if (impl_prop_get_gc_prop(impl_prop_get_prop(cp)) != impl_General_Category_Mn)
            {
                buffer->cps[m->size] = cp;
                buffer->ccc[m->size] = stages_ccc(cp);
                if (stages_qc_yes(cp, norm_bit_nfd))
                    m->last_qc = m->size;
                ++m->size;
            }
        }
    }

    return norm_decomp_return(buffer, m);
}

#endif // UNI_ALGO_DISABLE_PROP

uaix_always_inline
uaix_static void norm_proc_buffer(struct norm_buffer* const buffer, struct norm_multi* const m)
{
    // UNUSED: m->count_ns

    // Move the last decomposed code point that between last_qc and size to the start
    // last_qc is last Quick_Check=Yes mark

    for (size_t i = 0, j = m->last_qc; j < m->size; ++i, ++j)
    {
        buffer->cps[i] = buffer->cps[j];
        buffer->ccc[i] = buffer->ccc[j];
    }
    m->size = m->size - m->last_qc;
    m->last_qc = 0;
}

#ifdef __cplusplus
template<typename it_in_utf8, typename it_end_utf8, typename it_out_utf8>
#endif
uaix_static size_t impl_norm_to_nfc_utf8(it_in_utf8 first, it_end_utf8 last, it_out_utf8 result)
{
    it_in_utf8 src = first;
    it_out_utf8 dst = result;

    type_codept c = 0; // tag_can_be_uninitialized

    struct norm_buffer buffer = {{0}, {0}}; // tag_can_be_uninitialized
    struct norm_multi m = {0, 0, 0}; // tag_must_be_initialized

    /* while (src != last) is the fast loop, any slow down there reduces the performance drastically,
     * so everything moved outside this loop and we drop there if we actually need to do something.
     * Note that we always need to read 1 code point ahead in the algorithm that supports streams
     * so our fast loop is not that fast, probably it can be optimized a bit more but it's fine. Anyway
     * it's impossible to achieve the same speed of the fast loop as in an algorithm that doesn't support streams.
     * ifs are written like that to avoid unnecessary jumps so it gives the best performance.
     * __builtin_expect is used because it achieves a better performance in GCC.
     * Other normalization functions are based on this function.
     */

    do
    {
        while (src != last)
        {
            src = iter_utf8(src, last, &c, iter_replacement);
            if (uaix_likely(stages_qc_yes_ns(c, &m.count_ns, norm_bit_nfc)))
            {
                if (uaix_likely(m.size == 1))
                {
                    dst = codepoint_to_utf8(buffer.cps[0], dst);
                    m.size = 0;
                }
                if (uaix_likely(m.size == 0))
                {
                    buffer.cps[0] = c;
                    buffer.ccc[0] = 0;
                    m.size = 1;
                    continue; // Fast loop ends here
                }
            }
            if (norm_decomp_nfc(c, &buffer, &m))
                break;
        }

        if (m.last_qc == 0) // The end of the data if we are here without last_qc
            m.last_qc = m.size;

        norm_order(&buffer, m.last_qc);
        norm_comp(&buffer, m.last_qc);

        for (size_t i = 0; i < m.last_qc; ++i)
        {
            if (buffer.ccc[i] != 255)
                dst = codepoint_to_utf8(buffer.cps[i], dst);
        }

        norm_proc_buffer(&buffer, &m);
    }
    while (m.size > 0);

    return (size_t)(dst - result);
}

#ifdef __cplusplus
template<typename it_in_utf8, typename it_end_utf8, typename it_out_utf8>
#endif
uaix_static size_t impl_norm_to_nfd_utf8(it_in_utf8 first, it_end_utf8 last, it_out_utf8 result)
{
    // The same as impl_utf8_nfc but without composition and uses decomposition data

    it_in_utf8 src = first;
    it_out_utf8 dst = result;

    type_codept c = 0; // tag_can_be_uninitialized

    struct norm_buffer buffer = {{0}, {0}}; // tag_can_be_uninitialized
    struct norm_multi m = {0, 0, 0}; // tag_must_be_initialized

    do
    {
        while (src != last)
        {
            src = iter_utf8(src, last, &c, iter_replacement);
            if (uaix_likely(stages_qc_yes_ns(c, &m.count_ns, norm_bit_nfd)))
            {
                if (uaix_likely(m.size == 1))
                {
                    dst = codepoint_to_utf8(buffer.cps[0], dst);
                    m.size = 0;
                }
                if (uaix_likely(m.size == 0))
                {
                    buffer.cps[0] = c;
                    buffer.ccc[0] = 0;
                    m.size = 1;
                    continue;
                }
            }
            if (norm_decomp_nfd(c, &buffer, &m))
                break;
        }

        if (m.last_qc == 0)
            m.last_qc = m.size;

        norm_order(&buffer, m.last_qc);

        for (size_t i = 0; i < m.last_qc; ++i)
            dst = codepoint_to_utf8(buffer.cps[i], dst);

        norm_proc_buffer(&buffer, &m);
    }
    while (m.size > 0);

    return (size_t)(dst - result);
}

#ifndef UNI_ALGO_DISABLE_NFKC_NFKD

#ifdef __cplusplus
template<typename it_in_utf8, typename it_end_utf8, typename it_out_utf8>
#endif
uaix_static size_t impl_norm_to_nfkc_utf8(it_in_utf8 first, it_end_utf8 last, it_out_utf8 result)
{
    // The same as impl_utf8_nfc but uses NFKC data

    it_in_utf8 src = first;
    it_out_utf8 dst = result;

    type_codept c = 0; // tag_can_be_uninitialized

    struct norm_buffer buffer = {{0}, {0}}; // tag_can_be_uninitialized
    struct norm_multi m = {0, 0, 0}; // tag_must_be_initialized

    do
    {
        while (src != last)
        {
            src = iter_utf8(src, last, &c, iter_replacement);
            if (uaix_likely(stages_qc_yes_ns(c, &m.count_ns, norm_bit_nfkc)))
            {
                if (uaix_likely(m.size == 1))
                {
                    dst = codepoint_to_utf8(buffer.cps[0], dst);
                    m.size = 0;
                }
                if (uaix_likely(m.size == 0))
                {
                    buffer.cps[0] = c;
                    buffer.ccc[0] = 0;
                    m.size = 1;
                    continue;
                }
            }
            if (norm_decomp_nfkc(c, &buffer, &m))
                break;
        }

        if (m.last_qc == 0)
            m.last_qc = m.size;

        norm_order(&buffer, m.last_qc);
        norm_comp(&buffer, m.last_qc);

        for (size_t i = 0; i < m.last_qc; ++i)
        {
            if (buffer.ccc[i] != 255)
                dst = codepoint_to_utf8(buffer.cps[i], dst);
        }

        norm_proc_buffer(&buffer, &m);
    }
    while (m.size > 0);

    return (size_t)(dst - result);
}

#ifdef __cplusplus
template<typename it_in_utf8, typename it_end_utf8, typename it_out_utf8>
#endif
uaix_static size_t impl_norm_to_nfkd_utf8(it_in_utf8 first, it_end_utf8 last, it_out_utf8 result)
{
    // The same as impl_utf8_nfd but uses NFKD data

    it_in_utf8 src = first;
    it_out_utf8 dst = result;

    type_codept c = 0; // tag_can_be_uninitialized

    struct norm_buffer buffer = {{0}, {0}}; // tag_can_be_uninitialized
    struct norm_multi m = {0, 0, 0}; // tag_must_be_initialized

    do
    {
        while (src != last)
        {
            src = iter_utf8(src, last, &c, iter_replacement);
            if (uaix_likely(stages_qc_yes_ns(c, &m.count_ns, norm_bit_nfkd)))
            {
                if (uaix_likely(m.size == 1))
                {
                    dst = codepoint_to_utf8(buffer.cps[0], dst);
                    m.size = 0;
                }
                if (uaix_likely(m.size == 0))
                {
                    buffer.cps[0] = c;
                    buffer.ccc[0] = 0;
                    m.size = 1;
                    continue;
                }
            }
            if (norm_decomp_nfkd(c, &buffer, &m))
                break;
        }

        if (m.last_qc == 0)
            m.last_qc = m.size;

        norm_order(&buffer, m.last_qc);

        for (size_t i = 0; i < m.last_qc; ++i)
            dst = codepoint_to_utf8(buffer.cps[i], dst);

        norm_proc_buffer(&buffer, &m);
    }
    while (m.size > 0);

    return (size_t)(dst - result);
}

#endif // UNI_ALGO_DISABLE_NFKC_NFKD

#ifndef UNI_ALGO_DISABLE_PROP

#ifdef __cplusplus
template<typename it_in_utf8, typename it_end_utf8, typename it_out_utf8>
#endif
uaix_static size_t impl_norm_to_unaccent_utf8(it_in_utf8 first, it_end_utf8 last, it_out_utf8 result)
{
    it_in_utf8 src = first;
    it_out_utf8 dst = result;

    type_codept c = 0; // tag_can_be_uninitialized

    struct norm_buffer buffer = {{0}, {0}}; // tag_can_be_uninitialized
    struct norm_multi m = {0, 0, 0}; // tag_must_be_initialized

    // Algorithm: NFD -> remove Nonspacing Mark -> NFC

    do
    {
        while (src != last)
        {
            src = iter_utf8(src, last, &c, iter_replacement);
            if (uaix_likely(stages_qc_yes_ns(c, &m.count_ns, norm_bit_nfd)))
            {
                if (uaix_likely(m.size == 1))
                {
                    dst = codepoint_to_utf8(buffer.cps[0], dst);
                    m.size = 0;
                }
                if (uaix_likely(m.size == 0))
                {
                    buffer.cps[0] = c;
                    buffer.ccc[0] = 0;
                    m.size = 1;
                    continue;
                }
            }
            if (norm_decomp_unaccent(c, &buffer, &m))
                break;
        }

        if (m.last_qc == 0)
            m.last_qc = m.size;

        norm_order(&buffer, m.last_qc);
        norm_comp(&buffer, m.last_qc);

        for (size_t i = 0; i < m.last_qc; ++i)
        {
            if (buffer.ccc[i] != 255)
                dst = codepoint_to_utf8(buffer.cps[i], dst);
        }

        norm_proc_buffer(&buffer, &m);
    }
    while (m.size > 0);

    return (size_t)(dst - result);
}

#endif // UNI_ALGO_DISABLE_PROP

#ifdef __cplusplus
template<typename it_in_utf8, typename it_end_utf8>
#endif
uaix_static int norm_detect_utf8(it_in_utf8 first, it_end_utf8 last, type_codept norm_bit, type_codept norm_bound)
{
    it_in_utf8 src = first;

    type_codept c = 0; // tag_can_be_uninitialized
    unsigned char last_ccc = 0; // tag_must_be_initialized

    while (src != last)
    {
        src = iter_utf8(src, last, &c, iter_error);
        if (c == iter_error)
            return impl_norm_is_ill_formed;
        if (c < norm_bound)
            last_ccc = 0;
        else
        {
            const type_codept ccc_qc = stages(c, stage1_ccc_qc, stage2_ccc_qc);
            if (!stages_ccc_qc_detect(ccc_qc, norm_bit))
                return norm_is_no_or_maybe;
            if (!stages_ccc_qc_order(ccc_qc, &last_ccc))
                return impl_norm_is_not_canonical_order;
        }
    }
    return impl_norm_is_yes;
}

#ifdef __cplusplus
template<typename it_in_utf8, typename it_end_utf8>
#endif
uaix_static int norm_detect_css_utf8(it_in_utf8 first, it_end_utf8 last, type_codept norm_bit, type_codept norm_bound)
{
    it_in_utf8 src = first;

    type_codept c = 0; // tag_can_be_uninitialized
    unsigned char last_ccc = 0; // tag_must_be_initialized
    size_t count_ns = 0; // tag_must_be_initialized

    while (src != last)
    {
        src = iter_utf8(src, last, &c, iter_error);
        if (c == iter_error)
            return impl_norm_is_ill_formed;
        if (c < norm_bound)
        {
            last_ccc = 0;
            count_ns = 0;
        }
        else
        {
            const type_codept ccc_qc = stages(c, stage1_ccc_qc, stage2_ccc_qc);
            if (!stages_ccc_qc_detect(ccc_qc, norm_bit))
                return norm_is_no_or_maybe;
            if (!stages_ccc_qc_order(ccc_qc, &last_ccc))
                return impl_norm_is_not_canonical_order;
            if (!stages_ccc_qc_ns(ccc_qc, &count_ns))
                return impl_norm_is_not_stream_safe;
        }
    }
    return impl_norm_is_yes;
}

#ifdef __cplusplus
template<typename it_in_utf8, typename it_end_utf8>
#endif
uaix_static int impl_norm_is_nfc_utf8(it_in_utf8 first, it_end_utf8 last, bool check_stream_safe)
{
    if (!check_stream_safe)
        return norm_detect_utf8(first, last, norm_bit_nfc, norm_bound_nfc);
    return norm_detect_css_utf8(first, last, norm_bit_nfc, norm_bound_nfc);
}

#ifdef __cplusplus
template<typename it_in_utf8, typename it_end_utf8>
#endif
uaix_static int impl_norm_is_nfd_utf8(it_in_utf8 first, it_end_utf8 last, bool check_stream_safe)
{
    if (!check_stream_safe)
        return norm_detect_utf8(first, last, norm_bit_nfd, norm_bound_nfd);
    return norm_detect_css_utf8(first, last, norm_bit_nfd, norm_bound_nfd);
}

#ifndef UNI_ALGO_DISABLE_NFKC_NFKD

#ifdef __cplusplus
template<typename it_in_utf8, typename it_end_utf8>
#endif
uaix_static int impl_norm_is_nfkc_utf8(it_in_utf8 first, it_end_utf8 last, bool check_stream_safe)
{
    if (!check_stream_safe)
        return norm_detect_utf8(first, last, norm_bit_nfkc, norm_bound_nfkc);
    return norm_detect_css_utf8(first, last, norm_bit_nfkc, norm_bound_nfkc);
}

#ifdef __cplusplus
template<typename it_in_utf8, typename it_end_utf8>
#endif
uaix_static int impl_norm_is_nfkd_utf8(it_in_utf8 first, it_end_utf8 last, bool check_stream_safe)
{
    if (!check_stream_safe)
        return norm_detect_utf8(first, last, norm_bit_nfkd, norm_bound_nfkd);
    return norm_detect_css_utf8(first, last, norm_bit_nfkd, norm_bound_nfkd);
}

#endif // UNI_ALGO_DISABLE_NFKC_NFKD

// BEGIN: GENERATED UTF-16 FUNCTIONS
#ifndef UNI_ALGO_DOC_GENERATED_UTF16

#ifdef __cplusplus
template<typename it_in_utf16, typename it_end_utf16, typename it_out_utf16>
#endif
uaix_static size_t impl_norm_to_nfc_utf16(it_in_utf16 first, it_end_utf16 last, it_out_utf16 result)
{
    it_in_utf16 src = first;
    it_out_utf16 dst = result;

    type_codept c = 0; // tag_can_be_uninitialized

    struct norm_buffer buffer = {{0}, {0}}; // tag_can_be_uninitialized
    struct norm_multi m = {0, 0, 0}; // tag_must_be_initialized

    do
    {
        while (src != last)
        {
            src = iter_utf16(src, last, &c, iter_replacement);
            if (uaix_likely(stages_qc_yes_ns(c, &m.count_ns, norm_bit_nfc)))
            {
                if (uaix_likely(m.size == 1))
                {
                    dst = codepoint_to_utf16(buffer.cps[0], dst);
                    m.size = 0;
                }
                if (uaix_likely(m.size == 0))
                {
                    buffer.cps[0] = c;
                    buffer.ccc[0] = 0;
                    m.size = 1;
                    continue; // Fast loop ends here
                }
            }
            if (norm_decomp_nfc(c, &buffer, &m))
                break;
        }

        if (m.last_qc == 0) // The end of the data if we are here without last_qc
            m.last_qc = m.size;

        norm_order(&buffer, m.last_qc);
        norm_comp(&buffer, m.last_qc);

        for (size_t i = 0; i < m.last_qc; ++i)
        {
            if (buffer.ccc[i] != 255)
                dst = codepoint_to_utf16(buffer.cps[i], dst);
        }

        norm_proc_buffer(&buffer, &m);
    }
    while (m.size > 0);

    return (size_t)(dst - result);
}

#ifdef __cplusplus
template<typename it_in_utf16, typename it_end_utf16, typename it_out_utf16>
#endif
uaix_static size_t impl_norm_to_nfd_utf16(it_in_utf16 first, it_end_utf16 last, it_out_utf16 result)
{
    it_in_utf16 src = first;
    it_out_utf16 dst = result;

    type_codept c = 0; // tag_can_be_uninitialized

    struct norm_buffer buffer = {{0}, {0}}; // tag_can_be_uninitialized
    struct norm_multi m = {0, 0, 0}; // tag_must_be_initialized

    do
    {
        while (src != last)
        {
            src = iter_utf16(src, last, &c, iter_replacement);
            if (uaix_likely(stages_qc_yes_ns(c, &m.count_ns, norm_bit_nfd)))
            {
                if (uaix_likely(m.size == 1))
                {
                    dst = codepoint_to_utf16(buffer.cps[0], dst);
                    m.size = 0;
                }
                if (uaix_likely(m.size == 0))
                {
                    buffer.cps[0] = c;
                    buffer.ccc[0] = 0;
                    m.size = 1;
                    continue;
                }
            }
            if (norm_decomp_nfd(c, &buffer, &m))
                break;
        }

        if (m.last_qc == 0)
            m.last_qc = m.size;

        norm_order(&buffer, m.last_qc);

        for (size_t i = 0; i < m.last_qc; ++i)
            dst = codepoint_to_utf16(buffer.cps[i], dst);

        norm_proc_buffer(&buffer, &m);
    }
    while (m.size > 0);

    return (size_t)(dst - result);
}

#ifndef UNI_ALGO_DISABLE_NFKC_NFKD

#ifdef __cplusplus
template<typename it_in_utf16, typename it_end_utf16, typename it_out_utf16>
#endif
uaix_static size_t impl_norm_to_nfkc_utf16(it_in_utf16 first, it_end_utf16 last, it_out_utf16 result)
{
    it_in_utf16 src = first;
    it_out_utf16 dst = result;

    type_codept c = 0; // tag_can_be_uninitialized

    struct norm_buffer buffer = {{0}, {0}}; // tag_can_be_uninitialized
    struct norm_multi m = {0, 0, 0}; // tag_must_be_initialized

    do
    {
        while (src != last)
        {
            src = iter_utf16(src, last, &c, iter_replacement);
            if (uaix_likely(stages_qc_yes_ns(c, &m.count_ns, norm_bit_nfkc)))
            {
                if (uaix_likely(m.size == 1))
                {
                    dst = codepoint_to_utf16(buffer.cps[0], dst);
                    m.size = 0;
                }
                if (uaix_likely(m.size == 0))
                {
                    buffer.cps[0] = c;
                    buffer.ccc[0] = 0;
                    m.size = 1;
                    continue;
                }
            }
            if (norm_decomp_nfkc(c, &buffer, &m))
                break;
        }

        if (m.last_qc == 0)
            m.last_qc = m.size;

        norm_order(&buffer, m.last_qc);
        norm_comp(&buffer, m.last_qc);

        for (size_t i = 0; i < m.last_qc; ++i)
        {
            if (buffer.ccc[i] != 255)
                dst = codepoint_to_utf16(buffer.cps[i], dst);
        }

        norm_proc_buffer(&buffer, &m);
    }
    while (m.size > 0);

    return (size_t)(dst - result);
}

#ifdef __cplusplus
template<typename it_in_utf16, typename it_end_utf16, typename it_out_utf16>
#endif
uaix_static size_t impl_norm_to_nfkd_utf16(it_in_utf16 first, it_end_utf16 last, it_out_utf16 result)
{
    it_in_utf16 src = first;
    it_out_utf16 dst = result;

    type_codept c = 0; // tag_can_be_uninitialized

    struct norm_buffer buffer = {{0}, {0}}; // tag_can_be_uninitialized
    struct norm_multi m = {0, 0, 0}; // tag_must_be_initialized

    do
    {
        while (src != last)
        {
            src = iter_utf16(src, last, &c, iter_replacement);
            if (uaix_likely(stages_qc_yes_ns(c, &m.count_ns, norm_bit_nfkd)))
            {
                if (uaix_likely(m.size == 1))
                {
                    dst = codepoint_to_utf16(buffer.cps[0], dst);
                    m.size = 0;
                }
                if (uaix_likely(m.size == 0))
                {
                    buffer.cps[0] = c;
                    buffer.ccc[0] = 0;
                    m.size = 1;
                    continue;
                }
            }
            if (norm_decomp_nfkd(c, &buffer, &m))
                break;
        }

        if (m.last_qc == 0)
            m.last_qc = m.size;

        norm_order(&buffer, m.last_qc);

        for (size_t i = 0; i < m.last_qc; ++i)
            dst = codepoint_to_utf16(buffer.cps[i], dst);

        norm_proc_buffer(&buffer, &m);
    }
    while (m.size > 0);

    return (size_t)(dst - result);
}

#endif // UNI_ALGO_DISABLE_NFKC_NFKD

#ifndef UNI_ALGO_DISABLE_PROP

#ifdef __cplusplus
template<typename it_in_utf16, typename it_end_utf16, typename it_out_utf16>
#endif
uaix_static size_t impl_norm_to_unaccent_utf16(it_in_utf16 first, it_end_utf16 last, it_out_utf16 result)
{
    it_in_utf16 src = first;
    it_out_utf16 dst = result;

    type_codept c = 0; // tag_can_be_uninitialized

    struct norm_buffer buffer = {{0}, {0}}; // tag_can_be_uninitialized
    struct norm_multi m = {0, 0, 0}; // tag_must_be_initialized

    do
    {
        while (src != last)
        {
            src = iter_utf16(src, last, &c, iter_replacement);
            if (uaix_likely(stages_qc_yes_ns(c, &m.count_ns, norm_bit_nfd)))
            {
                if (uaix_likely(m.size == 1))
                {
                    dst = codepoint_to_utf16(buffer.cps[0], dst);
                    m.size = 0;
                }
                if (uaix_likely(m.size == 0))
                {
                    buffer.cps[0] = c;
                    buffer.ccc[0] = 0;
                    m.size = 1;
                    continue;
                }
            }
            if (norm_decomp_unaccent(c, &buffer, &m))
                break;
        }

        if (m.last_qc == 0)
            m.last_qc = m.size;

        norm_order(&buffer, m.last_qc);
        norm_comp(&buffer, m.last_qc);

        for (size_t i = 0; i < m.last_qc; ++i)
        {
            if (buffer.ccc[i] != 255)
                dst = codepoint_to_utf16(buffer.cps[i], dst);
        }

        norm_proc_buffer(&buffer, &m);
    }
    while (m.size > 0);

    return (size_t)(dst - result);
}

#endif // UNI_ALGO_DISABLE_PROP

#ifdef __cplusplus
template<typename it_in_utf16, typename it_end_utf16>
#endif
uaix_static int norm_detect_utf16(it_in_utf16 first, it_end_utf16 last, type_codept norm_bit, type_codept norm_bound)
{
    it_in_utf16 src = first;

    type_codept c = 0; // tag_can_be_uninitialized
    unsigned char last_ccc = 0; // tag_must_be_initialized

    while (src != last)
    {
        src = iter_utf16(src, last, &c, iter_error);
        if (c == iter_error)
            return impl_norm_is_ill_formed;
        if (c < norm_bound)
            last_ccc = 0;
        else
        {
            const type_codept ccc_qc = stages(c, stage1_ccc_qc, stage2_ccc_qc);
            if (!stages_ccc_qc_detect(ccc_qc, norm_bit))
                return norm_is_no_or_maybe;
            if (!stages_ccc_qc_order(ccc_qc, &last_ccc))
                return impl_norm_is_not_canonical_order;
        }
    }
    return impl_norm_is_yes;
}

#ifdef __cplusplus
template<typename it_in_utf16, typename it_end_utf16>
#endif
uaix_static int norm_detect_css_utf16(it_in_utf16 first, it_end_utf16 last, type_codept norm_bit, type_codept norm_bound)
{
    it_in_utf16 src = first;

    type_codept c = 0; // tag_can_be_uninitialized
    unsigned char last_ccc = 0; // tag_must_be_initialized
    size_t count_ns = 0; // tag_must_be_initialized

    while (src != last)
    {
        src = iter_utf16(src, last, &c, iter_error);
        if (c == iter_error)
            return impl_norm_is_ill_formed;
        if (c < norm_bound)
        {
            last_ccc = 0;
            count_ns = 0;
        }
        else
        {
            const type_codept ccc_qc = stages(c, stage1_ccc_qc, stage2_ccc_qc);
            if (!stages_ccc_qc_detect(ccc_qc, norm_bit))
                return norm_is_no_or_maybe;
            if (!stages_ccc_qc_order(ccc_qc, &last_ccc))
                return impl_norm_is_not_canonical_order;
            if (!stages_ccc_qc_ns(ccc_qc, &count_ns))
                return impl_norm_is_not_stream_safe;
        }
    }
    return impl_norm_is_yes;
}

#ifdef __cplusplus
template<typename it_in_utf16, typename it_end_utf16>
#endif
uaix_static int impl_norm_is_nfc_utf16(it_in_utf16 first, it_end_utf16 last, bool check_stream_safe)
{
    if (!check_stream_safe)
        return norm_detect_utf16(first, last, norm_bit_nfc, norm_bound_nfc);
    return norm_detect_css_utf16(first, last, norm_bit_nfc, norm_bound_nfc);
}

#ifdef __cplusplus
template<typename it_in_utf16, typename it_end_utf16>
#endif
uaix_static int impl_norm_is_nfd_utf16(it_in_utf16 first, it_end_utf16 last, bool check_stream_safe)
{
    if (!check_stream_safe)
        return norm_detect_utf16(first, last, norm_bit_nfd, norm_bound_nfd);
    return norm_detect_css_utf16(first, last, norm_bit_nfd, norm_bound_nfd);
}

#ifndef UNI_ALGO_DISABLE_NFKC_NFKD

#ifdef __cplusplus
template<typename it_in_utf16, typename it_end_utf16>
#endif
uaix_static int impl_norm_is_nfkc_utf16(it_in_utf16 first, it_end_utf16 last, bool check_stream_safe)
{
    if (!check_stream_safe)
        return norm_detect_utf16(first, last, norm_bit_nfkc, norm_bound_nfkc);
    return norm_detect_css_utf16(first, last, norm_bit_nfkc, norm_bound_nfkc);
}

#ifdef __cplusplus
template<typename it_in_utf16, typename it_end_utf16>
#endif
uaix_static int impl_norm_is_nfkd_utf16(it_in_utf16 first, it_end_utf16 last, bool check_stream_safe)
{
    if (!check_stream_safe)
        return norm_detect_utf16(first, last, norm_bit_nfkd, norm_bound_nfkd);
    return norm_detect_css_utf16(first, last, norm_bit_nfkd, norm_bound_nfkd);
}

#endif // UNI_ALGO_DISABLE_NFKC_NFKD

#endif // UNI_ALGO_DOC_GENERATED_UTF16
// END: GENERATED UTF-16 FUNCTIONS

// Functions for normalization iterators that use the same algorithms

struct impl_norm_iter_state
{
    size_t pos; // Iterator position

    struct norm_multi m;
    struct norm_buffer buffer;
};

uaix_inline void impl_norm_iter_state_reset(struct impl_norm_iter_state* const s)
{
    s->pos = 0;

    s->m.size = 0;
    s->m.last_qc = 0;
    s->m.count_ns = 0;
}

uaix_always_inline
uaix_static bool inline_norm_iter_ready(struct impl_norm_iter_state* const s)
{
    return s->pos == 0 ? false : true;
}

uaix_always_inline
uaix_static bool norm_state_fast_1(struct impl_norm_iter_state* const s, type_codept c)
{
    s->pos = 0;

    s->m.size = 2;
    s->m.last_qc = 1;

    s->buffer.cps[1] = c;
    s->buffer.ccc[1] = 0;

    return true;
}

uaix_always_inline
uaix_static bool norm_state_fast_0(struct impl_norm_iter_state* const s, type_codept c)
{
    s->m.size = 1;

    s->buffer.cps[0] = c;
    s->buffer.ccc[0] = 0;

    return false;
}

uaix_always_inline
uaix_static bool inline_norm_iter_nfc(struct impl_norm_iter_state* const s, type_codept c)
{
    // Note that we cannot implement a fast loop inside the normalization iterators
    // but we can use the same idea to make them a bit faster.

    c = (c <= 0x10FFFF && !(c >= 0xD800 && c <= 0xDFFF)) ? c : 0xFFFD;

    if (stages_qc_yes_ns(c, &s->m.count_ns, norm_bit_nfc))
    {
        if (s->m.size == 1)
            return norm_state_fast_1(s, c);
        if (s->m.size == 0)
            return norm_state_fast_0(s, c);
    }
    if (!norm_decomp_nfc(c, &s->buffer, &s->m))
        return false;

    return true;
}

uaix_always_inline
uaix_static bool inline_norm_iter_nfd(struct impl_norm_iter_state* const s, type_codept c)
{
    c = (c <= 0x10FFFF && !(c >= 0xD800 && c <= 0xDFFF)) ? c : 0xFFFD;

    if (stages_qc_yes_ns(c, &s->m.count_ns, norm_bit_nfd))
    {
        if (s->m.size == 1)
            return norm_state_fast_1(s, c);
        if (s->m.size == 0)
            return norm_state_fast_0(s, c);
    }
    if (!norm_decomp_nfd(c, &s->buffer, &s->m))
        return false;

    return true;
}

#ifndef UNI_ALGO_DISABLE_NFKC_NFKD

uaix_always_inline
uaix_static bool inline_norm_iter_nfkc(struct impl_norm_iter_state* const s, type_codept c)
{
    c = (c <= 0x10FFFF && !(c >= 0xD800 && c <= 0xDFFF)) ? c : 0xFFFD;

    if (stages_qc_yes_ns(c, &s->m.count_ns, norm_bit_nfkc))
    {
        if (s->m.size == 1)
            return norm_state_fast_1(s, c);
        if (s->m.size == 0)
            return norm_state_fast_0(s, c);
    }
    if (!norm_decomp_nfkc(c, &s->buffer, &s->m))
        return false;

    return true;
}

uaix_always_inline
uaix_static bool inline_norm_iter_nfkd(struct impl_norm_iter_state* const s, type_codept c)
{
    c = (c <= 0x10FFFF && !(c >= 0xD800 && c <= 0xDFFF)) ? c : 0xFFFD;

    if (stages_qc_yes_ns(c, &s->m.count_ns, norm_bit_nfkd))
    {
        if (s->m.size == 1)
            return norm_state_fast_1(s, c);
        if (s->m.size == 0)
            return norm_state_fast_0(s, c);
    }
    if (!norm_decomp_nfkd(c, &s->buffer, &s->m))
        return false;

    return true;
}

#endif // UNI_ALGO_DISABLE_NFKC_NFKD

uaix_always_inline
uaix_static bool inline_norm_iter_next_comp(struct impl_norm_iter_state* const s, type_codept* const codepoint)
{
    // The function must be used together with inline_norm_iter_nfc or inline_norm_iter_nfkc

    if (s->m.size == 0) // The end of the data
        return false;

    if (s->m.last_qc == 0) // This is the last buffer
        s->m.last_qc = s->m.size;

    // Reorder and compose the buffer if this is the first iteration on this buffer
    if (s->pos == 0)
    {
        norm_order(&s->buffer, s->m.last_qc);
        norm_comp(&s->buffer, s->m.last_qc);
    }

    // Skip all CCC=255 and get the next code point
    bool found = false;
    for (; s->pos < s->m.last_qc; ++s->pos)
    {
        if (s->buffer.ccc[s->pos] != 255)
        {
            if (found) break;
            *codepoint = s->buffer.cps[s->pos];
            found = true;
        }
    }

    // This is the last iteration on this buffer, request more data
    if (s->pos == s->m.last_qc)
    {
        norm_proc_buffer(&s->buffer, &s->m);
        s->pos = 0;
    }

    return true;
}

uaix_always_inline
uaix_static bool inline_norm_iter_next_decomp(struct impl_norm_iter_state* const s, type_codept* const codepoint)
{
    // The function must be used together with inline_norm_iter_nfd or inline_norm_iter_nfkd

    if (s->m.size == 0) // The end of the data
        return false;

    if (s->m.last_qc == 0) // This is the last buffer
        s->m.last_qc = s->m.size;

    // Reorder the buffer if this is the first iteration on this buffer
    if (s->pos == 0)
        norm_order(&s->buffer, s->m.last_qc);

    // Get the next code point
    if (s->pos < s->m.last_qc)
    {
        *codepoint = s->buffer.cps[s->pos];
        ++s->pos;
    }

    // This is the last iteration on this buffer, request more data
    if (s->pos == s->m.last_qc)
    {
        norm_proc_buffer(&s->buffer, &s->m);
        s->pos = 0;
    }

    return true;
}

// Expose properties for a wrapper
// Must always be at the end of the file

uaix_always_inline
uaix_static type_codept impl_norm_get_prop(type_codept c)
{
    // Treat all invalid as replacement character (U+FFFD)
    if (c > 0x10FFFF)
        c = 0xFFFD;

    return stages(c, stage1_ccc_qc, stage2_ccc_qc);
}

uaix_always_inline
uaix_static unsigned char impl_norm_get_ccc_prop(type_codept prop)
{
    // The Unicode Standard: UnicodeData.txt -> Canonical_Combining_Class
    return (unsigned char)(prop & 0xFF);
}

uaix_always_inline
uaix_static bool impl_norm_is_nfc_qc_yes_prop(type_codept prop)
{
    // The Unicode Standard: DerivedNormalizationProps.txt -> NFC_Quick_Check=Yes
    return (prop & (type_codept)1 << norm_bit_nfc) ? false : true;
}

uaix_always_inline
uaix_static bool impl_norm_is_nfd_qc_yes_prop(type_codept prop)
{
    // The Unicode Standard: DerivedNormalizationProps.txt -> NFD_Quick_Check=Yes
    return (prop & (type_codept)1 << norm_bit_nfd) ? false : true;
}

#ifndef UNI_ALGO_DISABLE_NFKC_NFKD

uaix_always_inline
uaix_static bool impl_norm_is_nfkc_qc_yes_prop(type_codept prop)
{
    // The Unicode Standard: DerivedNormalizationProps.txt -> NFKC_Quick_Check=Yes
    return (prop & (type_codept)1 << norm_bit_nfkc) ? false : true;
}

uaix_always_inline
uaix_static bool impl_norm_is_nfkd_qc_yes_prop(type_codept prop)
{
    // The Unicode Standard: DerivedNormalizationProps.txt -> NFKD_Quick_Check=Yes
    return (prop & (type_codept)1 << norm_bit_nfkd) ? false : true;
}

#endif // UNI_ALGO_DISABLE_NFKC_NFKD

uaix_always_inline
uaix_static type_codept norm_to_comp_hangul(type_codept c1, type_codept c2)
{
    // Simplified version of norm_comp_hangul

    const type_codept SBase = 0xAC00;
    const type_codept LBase = 0x1100;
    const type_codept VBase = 0x1161;
    const type_codept TBase = 0x11A7;
    const type_codept LCount = 19;
    const type_codept VCount = 21;
    const type_codept TCount = 28;
    const type_codept SCount = 11172;

    if (c1 >= LBase && c1 < LBase + LCount) // L+V
    {
        if (c2 >= VBase && c2 < VBase + VCount)
        {
            const type_codept LIndex = c1 - LBase;
            const type_codept VIndex = c2 - VBase;

            return (SBase + (LIndex * VCount + VIndex) * TCount);
        }
    }
    else if (c1 >= SBase && c1 < SBase + SCount && ((c1 - SBase) % TCount) == 0) // LV+T
    {
        if (c2 > TBase && c2 < TBase + TCount)
            return (c1 + (c2 - TBase));
    }
    return 0;
}

#if 0
uaix_always_inline
uaix_static type_codept impl_norm_to_compose_hangul(type_codept c1, type_codept c2)
{
    if (c1 <= 0x10FFFF && c2 <= 0x10FFFF)
    {
        type_codept c = norm_to_comp_hangul(c1, c2);
        return (c != 0) ? c : 0xFFFD;
    }
    return 0xFFFD;
}
#endif

uaix_always_inline
uaix_static type_codept impl_norm_to_compose(type_codept c1, type_codept c2)
{
    if (c1 <= 0x10FFFF && c2 <= 0x10FFFF)
    {
        type_codept c = norm_to_comp_hangul(c1, c2);
        if (c != 0)
            return c;

        c = stages_comp(c1, c2);
        return (c != 0) ? c : 0xFFFD;
    }
    return 0xFFFD;
}

#ifdef __cplusplus
template<typename it_out_utf32>
#endif
uaix_always_inline_tmpl
uaix_static size_t norm_to_decomp_hangul(type_codept c, it_out_utf32 dst)
{
    // Simplified version of norm_decomp_hangul

    const type_codept SBase = 0xAC00;
    const type_codept LBase = 0x1100;
    const type_codept VBase = 0x1161;
    const type_codept TBase = 0x11A7;
    const type_codept TCount = 28;
    const type_codept NCount = 588;
    const type_codept SCount = 11172;

    if (c >= SBase && c < SBase + SCount)
    {
        const type_codept SIndex = c - SBase;
        const type_codept LPart = LBase + SIndex / NCount;
        const type_codept VPart = VBase + (SIndex % NCount) / TCount;
        const type_codept TPart = TBase + SIndex % TCount;

        *dst++ = (type_char32)LPart;
        *dst++ = (type_char32)VPart;

        if (TPart != TBase)
        {
            *dst++ = (type_char32)TPart;
            return 3;
        }
        return 2;
    }
    return 0;
}

#ifdef __cplusplus
template<typename it_out_utf32>
#endif
uaix_always_inline_tmpl
uaix_static size_t impl_norm_to_decompose_hangul(type_codept c, it_out_utf32 dst)
{
    if (c <= 0x10FFFF && !(c >= 0xD800 && c <= 0xDFFF))
    {
        const size_t hangul = norm_to_decomp_hangul(c, dst);
        if (hangul)
            return hangul;

        *dst = (type_char32)c;
    }
    else
        *dst = 0xFFFD;

    return 1;
}

#ifdef __cplusplus
template<typename it_out_utf32>
#endif
uaix_always_inline_tmpl
uaix_static size_t impl_norm_to_decompose(type_codept c, it_out_utf32 dst)
{
    if (c <= 0x10FFFF && !(c >= 0xD800 && c <= 0xDFFF))
    {
        const size_t hangul = norm_to_decomp_hangul(c, dst);
        if (hangul)
            return hangul;

        const size_t offset = stages_decomp_nfd(c);
        if (offset)
        {
            const size_t number = stages_decomp_nfd_number(offset);
            for (size_t i = 0; i < number; ++i)
                *dst++ = (type_char32)stages_decomp_nfd_cp(offset, i);

            return number;
        }

        *dst = (type_char32)c;
    }
    else
        *dst = 0xFFFD;

    return 1;
}

#ifndef UNI_ALGO_DISABLE_NFKC_NFKD

#ifdef __cplusplus
template<typename it_out_utf32>
#endif
uaix_always_inline_tmpl
uaix_static size_t impl_norm_to_decompose_compat(type_codept c, it_out_utf32 dst)
{
    if (c <= 0x10FFFF && !(c >= 0xD800 && c <= 0xDFFF))
    {
        const size_t hangul = norm_to_decomp_hangul(c, dst);
        if (hangul)
            return hangul;

        const size_t offset = stages_decomp_nfkd(c);
        if (offset)
        {
            const size_t number = stages_decomp_nfkd_number(offset);
            for (size_t i = 0; i < number; ++i)
                *dst++ = (type_char32)stages_decomp_nfkd_cp(offset, i);

            return number;
        }

        *dst = (type_char32)c;
    }
    else
        *dst = 0xFFFD;

    return 1;
}

#endif // UNI_ALGO_DISABLE_NFKC_NFKD

UNI_ALGO_IMPL_NAMESPACE_END

//!#include "internal_undefs.h"


// AMALGAMATION: uni_algo/impl/internal_undefs.h

/* Unicode Algorithms Implementation by Marl Gigical.
 * License: Public Domain or MIT - sign whatever you want.
 * See LICENSE.txt */

// IMPORTANT: This file must never be used by a wrapper

// Internal undefs, must be used together with internal_defines.h

#undef uaix_always_inline
#undef uaix_always_inline_tmpl
#undef uaix_likely
#undef uaix_unlikely
#undef uaix_static
#undef uaix_inline
#undef uaix_const
#undef uaix_const_data
#undef uaix_array
#undef uaix_array2
#undef uaix_array_brace_ellison
#undef uaix_data_array
#undef uaix_data_array2

#ifdef __cplusplus
#  if defined(__GNUC__) || defined(__clang__)
#    pragma GCC diagnostic pop
#  endif
#endif

// AMALGAMATION: uni_algo/version.h


// UNI_ALGO_CPP_LIB_VERSION
// Describes the library version number in XYYYZZZ format such that:
// (VERSION % 1000) is the patch version 0..255,
// (VERSION / 1000 % 1000) is the minor version 0..255,
// (VERSION / 1000000) is the major version 0..255.

// UNI_ALGO_UNICODE_VERSION
// Describes Unicode version number in XYYYZZZ format such that:
// (VERSION % 1000) is the update version 0..255,
// (VERSION / 1000 % 1000) is the minor version 0..255,
// (VERSION / 1000000) is the major version 1..255.

// Note that una::version namespace can be used to get these values.

// For example to make your program compile only with the library version 1.2.3 or higher use:
// static_assert(una::version::library >= una::version::library_v{1, 2, 3});
// And to get version components use: una::version::library.major()/minor()/patch()

//!#include "impl/impl_cpp_lib_version.h"
//!#include "impl/impl_unicode_version.h"

namespace una::version {

class library_v
{
private:
    const unsigned short ver_major = 0;
    const unsigned char ver_minor = 0;
    const unsigned char ver_patch = 0;
public:
    constexpr library_v() = delete;
    constexpr library_v(int major, int minor, int patch) noexcept
        : ver_major{static_cast<unsigned short>(major)},
          ver_minor{static_cast<unsigned char>(minor)},
          ver_patch{static_cast<unsigned char>(patch)} {}
    constexpr int major() const noexcept { return ver_major; }
    constexpr int minor() const noexcept { return ver_minor; }
    constexpr int patch() const noexcept { return ver_patch; }
    friend constexpr bool operator==(const library_v& x, const library_v& y) noexcept
    {
        return x.major() == y.major() &&
               x.minor() == y.minor() &&
               x.patch() == y.patch();
    }
    friend constexpr bool operator!=(const library_v& x, const library_v& y) noexcept { return !(x == y); }
    friend constexpr bool operator<(const library_v& x, const library_v& y) noexcept
    {
        return x.major() != y.major() ? x.major() < y.major() :
               x.minor() != y.minor() ? x.minor() < y.minor() :
               x.patch() != y.patch() ? x.patch() < y.patch() : false;
    }
    friend constexpr bool operator>(const library_v& x, const library_v& y) noexcept { return y < x; }
    friend constexpr bool operator<=(const library_v& x, const library_v& y) noexcept { return !(x > y); }
    friend constexpr bool operator>=(const library_v& x, const library_v& y) noexcept { return !(x < y); }
};

class unicode_v
{
private:
    const unsigned short ver_major = 0;
    const unsigned char ver_minor = 0;
    const unsigned char ver_update = 0;
public:
    constexpr unicode_v() = delete;
    constexpr unicode_v(int major, int minor, int update) noexcept
        : ver_major{static_cast<unsigned short>(major)},
          ver_minor{static_cast<unsigned char>(minor)},
          ver_update{static_cast<unsigned char>(update)} {}
    constexpr int major() const noexcept { return ver_major; }
    constexpr int minor() const noexcept { return ver_minor; }
    constexpr int update() const noexcept { return ver_update; }
    friend constexpr bool operator==(const unicode_v& x, const unicode_v& y) noexcept
    {
        return x.major() == y.major() &&
               x.minor() == y.minor() &&
               x.update() == y.update();
    }
    friend constexpr bool operator!=(const unicode_v& x, const unicode_v& y) noexcept { return !(x == y); }
    friend constexpr bool operator<(const unicode_v& x, const unicode_v& y) noexcept
    {
        return x.major() != y.major() ? x.major() < y.major() :
               x.minor() != y.minor() ? x.minor() < y.minor() :
               x.update() != y.update() ? x.update() < y.update() : false;
    }
    friend constexpr bool operator>(const unicode_v& x, const unicode_v& y) noexcept { return y < x; }
    friend constexpr bool operator<=(const unicode_v& x, const unicode_v& y) noexcept { return !(x > y); }
    friend constexpr bool operator>=(const unicode_v& x, const unicode_v& y) noexcept { return !(x < y); }
};

inline constexpr library_v library{UNI_ALGO_CPP_LIB_VERSION / 1000000,
                                   UNI_ALGO_CPP_LIB_VERSION / 1000 % 1000,
                                   UNI_ALGO_CPP_LIB_VERSION % 1000};

inline constexpr unicode_v unicode{UNI_ALGO_UNICODE_VERSION / 1000000,
                                   UNI_ALGO_UNICODE_VERSION / 1000 % 1000,
                                   UNI_ALGO_UNICODE_VERSION % 1000};

} // namespace una::version


// AMALGAMATION: uni_algo/internal/error.h


#include <cassert>
#ifdef UNI_ALGO_EXPERIMENTAL
#include <string_view>
#endif

//!#include "../config.h"

namespace una {

class error
{
public:
    enum class code : unsigned short
    {
        success = 0,
        ill_formed_utf = 1,
        not_normalized = 2,
        not_stream_safe = 3,
    };
private:
    std::size_t error_pos = detail::impl_npos;
    error::code error_code = error::code::success;
public:
    constexpr error() noexcept = default;
    constexpr explicit error(error::code ec) noexcept : error_code{ec} {}
    constexpr explicit error(error::code ec, std::size_t pos) noexcept : error_pos{pos}, error_code{ec} {}
    constexpr explicit operator bool() const noexcept { return error_code != error::code::success; }
    constexpr void reset() noexcept { error_code = error::code::success; error_pos = detail::impl_npos; }
    constexpr bool has_pos() const noexcept { return error_pos != detail::impl_npos; }
    constexpr std::size_t pos() const noexcept { assert(operator bool()); assert(has_pos()); return error_pos; }
    constexpr error::code get_code() const noexcept { return error_code; }
    friend constexpr bool operator==(const error& x, const error::code& y) noexcept { return x.error_code == y; }
    friend constexpr bool operator!=(const error& x, const error::code& y) noexcept { return x.error_code != y; }
    friend constexpr bool operator==(const error::code& x, const error& y) noexcept { return x == y.error_code; }
    friend constexpr bool operator!=(const error::code& x, const error& y) noexcept { return x != y.error_code; }
#ifdef UNI_ALGO_EXPERIMENTAL
    constexpr std::string_view to_string_view() const noexcept
    {
        switch(error_code)
        {
            case code::success: return "success";
            case code::ill_formed_utf: return "ill-formed UTF";
            case code::not_normalized: return "not normalized";
            case code::not_stream_safe: return "not stream-safe";
            default: return "invalid error code";
        }
    }
#endif // UNI_ALGO_EXPERIMENTAL
};

} // namespace una


// AMALGAMATION: uni_algo/internal/found.h


#include <cassert>

//!#include "../config.h"

namespace una {

class found
{
private:
    std::size_t found_pos = detail::impl_npos;
    std::size_t found_end = detail::impl_npos;
public:
    constexpr found() noexcept = default;
    constexpr explicit found(std::size_t pos, std::size_t end_pos) noexcept : found_pos{pos}, found_end{end_pos} {}
    constexpr explicit operator bool() const noexcept { return found_pos != detail::impl_npos; }
    constexpr void reset() noexcept { found_pos = detail::impl_npos; found_end = detail::impl_npos; }
    constexpr std::size_t pos() const noexcept { assert(operator bool()); return found_pos; }
    constexpr std::size_t end_pos() const noexcept { assert(operator bool()); return found_end; }
public:
    friend constexpr bool operator==(const found& x, const found& y) noexcept
    { return x.found_pos == y.found_pos && x.found_end == y.found_end; }
    friend constexpr bool operator!=(const found& x, const found& y) noexcept { return !(x == y); }
};

} // namespace una


// AMALGAMATION: uni_algo/internal/ranges_core.h


// In Clang with libstdc++ std::ranges implementation doesn't work properly
// but it defines __cpp_lib_ranges so always force our own implementation of ranges in this case.
// Works fine when Clang with libc++ or MSVC STL (TODO: Not sure about MSVC STL need to test)
// TODO: maybe move the define to config later so it will be easier to test in other compilers too
#if defined(__clang__) && defined(__GLIBCXX__)
#  ifndef UNI_ALGO_FORCE_CPP17_RANGES
#  define UNI_ALGO_FORCE_CPP17_RANGES
#  endif
#endif

#include <iterator>
#include <utility> // std::forward
#include <memory> // std::addressof
#include <cassert>
#ifdef UNI_ALGO_LOG_CPP_ITER
#include <iostream>
#endif

//!#include "../config.h"

#if defined(__cpp_lib_ranges) && !defined(UNI_ALGO_FORCE_CPP17_RANGES)
#include <ranges>
#else
#include <string_view>
#endif

namespace una {

struct sentinel_t {};
inline constexpr sentinel_t sentinel;

namespace detail::rng {

// Inheritance from std::ranges::view_base must be used for compatibility
// with std::ranges  when a std::view on the right side of operator|
// https://tristanbrindle.com/posts/rvalue-ranges-and-views
#if !defined(__cpp_lib_ranges) || defined(UNI_ALGO_FORCE_CPP17_RANGES)
struct view_base {};
#else
using view_base = std::ranges::view_base;
#endif

#if !defined(__cpp_lib_ranges) || defined(UNI_ALGO_FORCE_CPP17_RANGES)
template<class Iter>
using iter_value_t = typename std::iterator_traits<Iter>::value_type;
template<class Iter>
using iter_pointer_t = typename std::iterator_traits<Iter>::pointer;
template<class Iter>
using iter_reference_t = typename std::iterator_traits<Iter>::reference;
template<class Iter>
using iter_difference_t = typename std::iterator_traits<Iter>::difference_type;
#else
template<class Iter>
using iter_value_t = std::iter_value_t<Iter>;
template<class Iter>
using iter_pointer_t = std::add_pointer_t<std::iter_reference_t<Iter>>;
template<class Iter>
using iter_reference_t = std::iter_reference_t<Iter>;
template<class Iter>
using iter_difference_t = std::iter_difference_t<Iter>;
#endif

template<class Range>
using iterator_t = decltype(std::begin(std::declval<Range&>())); // std::ranges::iterator_t<Range>
template<class Range>
using sentinel_t = decltype(std::end(std::declval<Range&>())); // std::ranges::sentinel_t<Range>

template<class Range>
using range_value_t = iter_value_t<iterator_t<Range>>; // std::ranges::range_value_t<Range>

#if !defined(__cpp_lib_ranges) || defined(UNI_ALGO_FORCE_CPP17_RANGES)
template<class Iter>
using iter_tag = typename std::iterator_traits<Iter>::iterator_category;
#else
// Bidirectional as highest should be good enough for all use cases in Unicode
// Commented code below is an example of random access as highest
template<class Iter>
using iter_tag = typename std::conditional_t<std::bidirectional_iterator<Iter>,
    std::bidirectional_iterator_tag, std::conditional_t<std::forward_iterator<Iter>,
    std::forward_iterator_tag, std::input_iterator_tag>>;

//template<class Iter>
//using iter_tag = typename std::conditional_t<std::random_access_iterator<Iter>,
//    std::random_access_iterator_tag, std::conditional_t<std::bidirectional_iterator<Iter>,
//    std::bidirectional_iterator_tag, std::conditional_t<std::forward_iterator<Iter>,
//    std::forward_iterator_tag, std::input_iterator_tag>>>;
#endif

// "has_member" helpers that are mostly used to disable/enable functions

template <typename T, typename = void>
struct has_member_begin : std::false_type {};
template <typename T>
struct has_member_begin<T, std::void_t<decltype(std::begin(std::declval<T&>()))>> : std::true_type {};

template <typename T, typename = void>
struct has_member_allocate : std::false_type {};
template <typename T>
struct has_member_allocate<T, std::void_t<decltype(std::declval<T&>().allocate(0))>> : std::true_type {};

template <typename T, typename = void>
struct has_member_data : std::false_type {};
template <typename T>
struct has_member_data<T, std::void_t<decltype(std::data(std::declval<T&>()))>> : std::true_type {};

// "is" helpers

#if !defined(__cpp_lib_ranges) || defined(UNI_ALGO_FORCE_CPP17_RANGES)
template<class Iter>
using is_iter_bidi_or_better = std::conditional_t<
    std::is_convertible_v<typename std::iterator_traits<Iter>::iterator_category, std::bidirectional_iterator_tag>,
    std::true_type, std::false_type>;
template<class Range>
using is_range_contiguous = std::conditional_t<has_member_data<Range>::value, std::true_type, std::false_type>;
#else
template<class Iter>
using is_iter_bidi_or_better = std::conditional_t<std::bidirectional_iterator<Iter>, std::true_type, std::false_type>;
template<class Range>
using is_range_contiguous = std::conditional_t<std::ranges::contiguous_range<Range>, std::true_type, std::false_type>;
#endif

// In C++17 std::string_view doesn't have iterators pair constructor
// so we use this a bit ugly approach to make it work. It is only used in text segmentation ranges.
// This helper function requeries contiguous range, but no checks here must be checked where used.
#if !defined(__cpp_lib_ranges) || defined(UNI_ALGO_FORCE_CPP17_RANGES)
template<class StringViewResult, class Range, class Iter>
constexpr StringViewResult to_string_view(const Range& range, Iter it_begin, Iter it_pos)
{
    return StringViewResult{std::data(range) + (it_begin - std::begin(range)),
                            static_cast<std::size_t>(it_pos - it_begin)};
}
#else
template<class StringViewResult, class Range, class Iter>
constexpr StringViewResult to_string_view(const Range&, Iter it_begin, Iter it_pos)
{
    return StringViewResult{it_begin, it_pos};
}
#endif

// Non-propagating cache from C++23 Standard (26.7.4)
// TODO: std::optional here instead of value/bool would be better, but as I remember std::optional
// is not constexpr in old compilers where we need it to be. But our constexpr library already
// requires pretty fresh compilers so it can be fine, need to recheck it and use it if possible.
template<class T>
class cache {
private:
    T val;
    bool has_val = false;

public:
    cache() = default;
    ~cache() = default;
    constexpr cache(const cache&) noexcept {}
    constexpr cache(cache&& other) noexcept { other.has_val = false; }

    constexpr cache& operator=(const cache& other) noexcept
    {
        if (std::addressof(other) != this)
            val.has_val = false;
        return *this;
    }

    constexpr cache& operator=(cache&& other) noexcept
    {
        has_val = false;
        other.has_val = false;
        return *this;
    }

    constexpr bool has_value() const noexcept { return has_val; }

    // No need this, use get_value instead
    //constexpr T& operator*() noexcept { return val; }
    //constexpr const T& operator*() const noexcept { return val; }

    constexpr T& get_value() noexcept { return val; }
    constexpr const T& get_value() const noexcept { return val; }
    constexpr void set_value(const T& value) noexcept
    {
        val = value;
        has_val = true;
    }
};

} // namespace detail::rng

namespace ranges {

// For C++17 we implement very simple ref_view that will be used together with una::views::all_t/una::views::all
// It has the similar design as std::views::ref_view so in C++20 we just use that
#if !defined(__cpp_lib_ranges) || defined(UNI_ALGO_FORCE_CPP17_RANGES)
template<class Range>
class ref_view : public detail::rng::view_base
{
private:
    Range* range = nullptr;
public:
    uaiw_constexpr ref_view() = default;
    // NOLINTNEXTLINE(google-explicit-constructor, hicpp-explicit-conversions)
    uaiw_constexpr ref_view(Range& r) : range{std::addressof(r)} {}
    //uaiw_constexpr Range& base() const { return *range; }
    uaiw_constexpr auto begin() const { return std::begin(*range); }
    uaiw_constexpr auto end() const { return std::end(*range); }
    template<class T = void, class = std::enable_if_t<detail::rng::has_member_data<Range>::value, T>>
    uaiw_constexpr auto data() const { return std::data(*range); }
};
#else
template<class R>
using ref_view = std::ranges::ref_view<R>;
#endif

// std::owning_view is available in C++20 starting with __cpp_lib_ranges >= 202110L
// but we still enable our owning_view only in C++17 so in C++20 inside all view sometimes
// std::owning_view will be used and sometimes std::ranges::subrange it shouldn't create any problems.
#if !defined(__cpp_lib_ranges) || defined(UNI_ALGO_FORCE_CPP17_RANGES) || (__cpp_lib_ranges >= 202110L)
#if !defined(__cpp_lib_ranges) || defined(UNI_ALGO_FORCE_CPP17_RANGES)
// https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2415r2.html
template<class Range>
class owning_view : public detail::rng::view_base
{
private:
    Range range = Range{};
public:
    uaiw_constexpr owning_view() = default;
    uaiw_constexpr ~owning_view() = default;
    // NOLINTNEXTLINE(google-explicit-constructor, hicpp-explicit-conversions)
    uaiw_constexpr owning_view(Range&& r) : range{std::move(r)} {}
    //uaiw_constexpr Range& base() & noexcept { return range; }
    //uaiw_constexpr const Range& base() const & noexcept { return range; }
    //uaiw_constexpr Range&& base() && noexcept { return std::move(range); }
    //uaiw_constexpr const Range&& base() const && noexcept { return std::move(range); }
    uaiw_constexpr owning_view(owning_view&&) noexcept = default;
    uaiw_constexpr owning_view& operator=(owning_view&&) noexcept = default;
    uaiw_constexpr owning_view(const owning_view&) = default;
    uaiw_constexpr owning_view& operator=(const owning_view&) = default;
    uaiw_constexpr auto begin() { return std::begin(range); }
    uaiw_constexpr auto end() { return std::end(range); }
    uaiw_constexpr auto begin() const { return std::begin(range); }
    uaiw_constexpr auto end() const { return std::end(range); }
    template<class T = void, class = std::enable_if_t<detail::rng::has_member_data<Range>::value, T>>
    uaiw_constexpr auto data() { return std::data(range); }
    template<class T = void, class = std::enable_if_t<detail::rng::has_member_data<Range>::value, T>>
    uaiw_constexpr auto data() const { return std::data(range); }
};
#else
template<class R>
using owning_view = std::ranges::owning_view<R>;
#endif
#endif

} // namespace ranges

namespace detail::rng {

// For C++17 we implement very simply view adaptors that support operator|
// The design is based on this article:
// https://mariusbancila.ro/blog/2020/06/06/a-custom-cpp20-range-view/
// For adaptors without parameters adaptor_closure object from this article is enough so we just call them adaptor
// and for adaptors with parameters both adaptor and adaptor_closure objects are needed
// For C++20 we still use them because C++ Commitee just want people to suffer and custom adaptors still not available
// For C++23 where such adaptors will be available we want to use them
// They will be called: std::ranges::range_adaptor_closure
// https://stackoverflow.com/questions/71689137/what-is-the-best-way-to-drop-last-element-using-c20-ranges
// https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2387r3.html
// Our adaptors support this:
// auto range = str | una::views::utf8 | una::views::filter(f)
// But do not support this:
// auto range = una::views::utf8 | una::views::filter(f)

/* ALL_VIEW */

#if !defined(__cpp_lib_ranges) || defined(UNI_ALGO_FORCE_CPP17_RANGES)
struct adaptor_all
{
    //uaiw_constexpr adaptor_closure_all() {}
    template<class R>
    uaiw_constexpr auto operator()(R&& r) const
    {
        // The design of all view is "pretty simple"
        // for known ranges (our ranges) or std::string_view we just std::forward them directly
        // for unknown ranges (std::string etc.) we use ref_view as a proxy
        // and for rvalues we use owning_view as a proxy
        // this is the similar design as std::ranges

        using range_v = detail::rng::range_value_t<R>;

        // Check if the range is our range or std::ranges::view
        // Note that the better check in C++20 will look like this:
        // if constexpr (std::ranges::view<std::decay_t<R>>)
        // but in C++20 it is just better to use all view/ref_view/owning_view provided by the standard library
        // std::decay_t is important here to handle some corner cases properly
        // see: test/test_ranges.h -> test_ranges_static_assert()
        if constexpr (std::is_base_of_v<detail::rng::view_base, std::decay_t<R>> ||
                //std::is_base_of_v<std::ranges::view_interface<std::decay_t<R>>, std::decay_t<R>> || // view_interface check
                std::is_same_v<std::basic_string_view<range_v>, std::decay_t<R>>)
            return std::forward<R>(r);
        else if constexpr (std::is_lvalue_reference_v<R>)
            return ranges::ref_view{std::forward<R>(r)};
        else
            return ranges::owning_view{std::forward<R>(r)};

        // view_interface check is needed because std::ranges::view_interface in not derived from std::view_base anymore
        // https://cplusplus.github.io/LWG/issue3549
        // but we don't use this crappy all view in C++20 so we don't care
    }
};
template <class R>
uaiw_constexpr auto operator|(R&& r, const adaptor_all& a) { return a(std::forward<R>(r)); }
#endif

} // namespace detail::rng

namespace ranges::views {

// In C++17 use our simple all view that uses our simple ref_view/owning_view
// In C++20 use facilities provided by the standard library
#if !defined(__cpp_lib_ranges) || defined(UNI_ALGO_FORCE_CPP17_RANGES)
inline constexpr detail::rng::adaptor_all all;
template<class Range>
using all_t = decltype(all(std::declval<Range>()));
#else
inline constexpr auto all = std::views::all;
template<class Range>
using all_t = std::views::all_t<Range>;
#endif

} // namespace ranges::views

namespace views = ranges::views;

} // namespace una


// AMALGAMATION: uni_algo/internal/ranges_translit.h


#include <array>
#include <string_view>
#include <functional>

//!#include "ranges_core.h"

namespace una {

namespace detail::translit {

// This class behaves the same as std::u32string
// but it never allocates so the size is static.
struct buffer
{
private:
    std::array<char32_t, 16> internal_array{};
    std::size_t internal_size = 0;

public:
    using value_type      = char32_t;
    using size_type       = std::size_t;
    using difference_type = std::ptrdiff_t;
    using reference       = value_type&;
    using const_reference = const value_type&;
    using pointer         = value_type*;
    using const_pointer   = const value_type*;
    using iterator        = decltype(internal_array)::iterator; // value_type*;
    using const_iterator  = decltype(internal_array)::const_iterator; // const value_type*;

    static const size_type npos = static_cast<size_type>(-1);

    buffer() = default;
    constexpr explicit buffer(std::u32string_view view) // Use only for testing
    {
        if (view.size() <= internal_array.max_size())
        {
            for (std::size_t i = 0; i < view.size(); ++i)
                internal_array[i] = view[i];
            internal_size = view.size();
        }
    }
    constexpr reference operator[](size_type pos) noexcept
    { return internal_array[pos]; }
    constexpr const_reference operator[](size_type pos) const noexcept
    { return internal_array[pos]; }
    constexpr size_type size() const noexcept
    { return internal_size; }
    constexpr size_type max_size() const noexcept
    { return internal_array.max_size(); }
    constexpr bool empty() const noexcept
    { return internal_size == 0; }
    constexpr pointer data() noexcept
    { return internal_array.data(); }
    constexpr const_pointer data() const noexcept
    { return internal_array.data(); }
    constexpr iterator begin() noexcept
    { return internal_array.begin(); }
    constexpr const_iterator begin() const noexcept
    { return internal_array.begin(); }
    constexpr iterator end() noexcept
    { return internal_array.begin() + static_cast<std::ptrdiff_t>(internal_size); }
    constexpr const_iterator end() const noexcept
    { return internal_array.begin() + static_cast<std::ptrdiff_t>(internal_size); }
    constexpr reference front() noexcept
    { return internal_array[0]; }
    constexpr const_reference front() const noexcept
    { return internal_array[0]; }
    constexpr reference back() noexcept
    { return internal_array[internal_size - 1]; }
    constexpr const_reference back() const noexcept
    { return internal_array[internal_size - 1]; }
    // NOLINTNEXTLINE(google-explicit-constructor, hicpp-explicit-conversions)
    constexpr operator std::u32string_view() const noexcept
    { return std::u32string_view{data(), size()}; }
    constexpr void clear() noexcept
    { internal_size = 0; }
    constexpr void pop_back() noexcept
    { internal_size--; }
    constexpr void push_back(value_type c) noexcept
    {
        if (size() < max_size())
            internal_array[internal_size++] = c;
        // else std::u32string throws
    }
    constexpr void resize(size_type count, value_type c) noexcept
    {
        if (count > max_size())
            return; // std::u32string throws

        for (size_type i = size(); i < count; ++i)
            internal_array[i] = c;

        internal_size = count;
    }
    constexpr void resize(size_type count) noexcept { resize(count, 0); }
    constexpr buffer& erase(size_type pos = 0, size_type count = npos) noexcept
    {
        if (count == 0)
            return *this;
        if (pos > size())
            return *this; // std::u32string throws
        if (count > size() - pos)
            count = size() - pos;

        internal_size -= count;

        for (size_type i = pos; i < size(); ++i)
            internal_array[i] = internal_array[i + count];

        return *this;
    }
    constexpr buffer& insert(size_type pos, size_type count, value_type c) noexcept
    {
        if (count == 0)
            return *this;
        if (pos > size())
            return *this; // std::u32string throws
        if (count + size() > max_size())
            return *this; // std::u32string throws

        internal_size += count;

        for (size_type i = size() - 1; i >= pos + count; --i)
            internal_array[i] = internal_array[i - count];

        for (size_type i = pos; i < pos + count; ++i)
            internal_array[i] = c;

        return *this;
    }
    constexpr buffer& replace(size_type pos, size_type count1, size_type count2, value_type c) noexcept
    {
        if (count1 == 0 && count2 == 0)
            return *this;
        if (pos > size())
            return *this; // std::u32string throws
        if (count1 > size() - pos)
            count1 = size() - pos;
        if (count1 < count2 && (count2 - count1) + size() > max_size())
            return *this; // std::u32string throws

        if (count1 > count2)
        {
            const size_type count = count1 - count2;
            internal_size -= count;
            for (size_type i = pos; i < size(); ++i)
                internal_array[i] = internal_array[i + count];
        }
        else if (count1 < count2)
        {
            const size_type count = count2 - count1;
            internal_size += count;
            for (size_type i = size() - 1; i >= pos + count; --i)
                internal_array[i] = internal_array[i - count];
        }
        for (size_type i = pos; i < pos + count2; ++i)
            internal_array[i] = c;

        return *this;
    }
    // Use std::enable_if_t to fix the ambiguous overload with the previous replace function
    template <class ArrayLike>
    typename std::enable_if_t<!std::is_integral_v<ArrayLike>, buffer&>
    constexpr replace(size_type pos1, size_type count1, const ArrayLike& array,
                      size_type pos2, size_type count2 = npos) noexcept
    {
        if (count1 == 0 && count2 == 0)
            return *this;
        if (pos1 > size() || pos2 > array.size())
            return *this; // std::u32string throws
        if (count1 > size() - pos1)
            count1 = size() - pos1;
        if (count2 > array.size() - pos2)
            count2 = array.size() - pos2;
        if (count1 < count2 && (count2 - count1) + size() > max_size())
            return *this; // std::u32string throws

        if (count1 > count2)
        {
            const size_type count = count1 - count2;
            internal_size -= count;
            for (size_type i = pos1; i < size(); ++i)
                internal_array[i] = internal_array[i + count];
        }
        else if (count1 < count2)
        {
            const size_type count = count2 - count1;
            internal_size += count;
            for (size_type i = size() - 1; i >= pos1 + count; --i)
                internal_array[i] = internal_array[i - count];
        }
        for (size_type i = pos1, j = pos2; i < pos1 + count2; ++i, ++j)
            internal_array[i] = array[j];

        return *this;
    }
    template <class ArrayLike>
    typename std::enable_if_t<!std::is_integral_v<ArrayLike>, buffer&>
    constexpr replace(size_type pos, size_type count, const ArrayLike& array) noexcept
    {
        return replace(pos, count, array, 0, array.size());
    }
    friend constexpr bool operator==(const buffer& x, const buffer& y) noexcept
    {
        if (x.size() == y.size())
        {
            for (size_type i = 0; i < x.size(); ++i)
                if (x[i] != y[i]) return false;
            return true;
        }
        return false;
    }
    friend constexpr bool operator!=(const buffer& x, const buffer& y) noexcept { return !(x == y); }
};

} // namespace detail::translit

namespace detail::rng {

// See ext/translit/macedonian_to_latin_docs.h for an example how to use it.

template<class Range, class Func>
class translit_view : public detail::rng::view_base
{
private:
    template<class Iter, class Sent>
    class translit
    {
        // Translit view is internal so skip static assert. For a reference it looks like this:
        //static_assert(std::is_integral_v<detail::rng::iter_value_t<Iter>> &&
        //              sizeof(detail::rng::iter_value_t<Iter>) >= sizeof(char32_t),
        //              "translit view requires char32_t range");

    private:
        translit_view* parent = nullptr;
        Iter it_pos;

        bool stream_end = false;

        detail::translit::buffer data;
        std::size_t skip = 1;

        uaiw_constexpr void iter_func_translit()
        {
            do
            {
                if (!data.empty() && skip)
                    data.erase(0, 1);

                for (; data.size() < parent->buf_size && it_pos != std::end(parent->range); ++it_pos)
                    data.push_back(*it_pos);

                if (data.empty())
                {
                    stream_end = true;
                    return;
                }

                if (skip > 1)
                    --skip;
                else
                    skip = std::invoke(parent->func_translit, data);
            }
            while (skip == 0);
        }

    public:
        using iterator_category = std::input_iterator_tag;
        using value_type        = char32_t;
        using pointer           = void;
        using reference         = char32_t;
        using difference_type   = detail::rng::iter_difference_t<Iter>;

        uaiw_constexpr translit() = default;
        uaiw_constexpr explicit translit(translit_view& p, Iter begin, Sent)
            : parent{std::addressof(p)}, it_pos{begin}
        {
            iter_func_translit();
        }
        uaiw_constexpr reference operator*() const noexcept { return data[0]; }
        uaiw_constexpr translit& operator++()
        {
            iter_func_translit();

            return *this;
        }
        uaiw_constexpr translit operator++(int)
        {
            translit tmp = *this;
            operator++();
            return tmp;
        }
        friend uaiw_constexpr bool operator==(const translit& x, const translit& y) { return x.stream_end == y.stream_end; }
        friend uaiw_constexpr bool operator!=(const translit& x, const translit& y) { return x.stream_end != y.stream_end; }
        friend uaiw_constexpr bool operator==(const translit& x, una::sentinel_t) { return x.stream_end; }
        friend uaiw_constexpr bool operator!=(const translit& x, una::sentinel_t) { return !x.stream_end; }
        friend uaiw_constexpr bool operator==(una::sentinel_t, const translit& x) { return x.stream_end; }
        friend uaiw_constexpr bool operator!=(una::sentinel_t, const translit& x) { return !x.stream_end; }
    };

    using iter_t = detail::rng::iterator_t<Range>;
    using sent_t = detail::rng::sentinel_t<Range>;

    Range range = Range{};
    Func func_translit;
    std::size_t buf_size = 1;
    detail::rng::cache<translit<iter_t, sent_t>> cached_begin;

public:
    uaiw_constexpr translit_view() = default;
    uaiw_constexpr translit_view(Range r, Func fun, std::size_t size)
        : range{std::move(r)}, func_translit{std::move(fun)}, buf_size{size} {}
    //uaiw_constexpr Range base() const& { return range; }
    //uaiw_constexpr Range base() && { return std::move(range); }
    uaiw_constexpr auto begin()
    {
        if (cached_begin.has_value())
            return cached_begin.get_value();

        cached_begin.set_value(translit<iter_t, sent_t>{*this, std::begin(range), std::end(range)});

        return cached_begin.get_value();
    }
    uaiw_constexpr auto end()
    {
        return una::sentinel;
    }
};

template<class Range, class Func>
translit_view(Range&&, Func, std::size_t) -> translit_view<views::all_t<Range>, Func>;

} // namespace detail::rng

} // namespace una


// AMALGAMATION: uni_algo/conv.h


#include <string>
#include <string_view>
#include <cassert>

//!#include "config.h"
//!#include "internal/safe_layer.h"
//!#include "internal/error.h"

//!#include "impl/impl_conv.h"

namespace una {

namespace detail {

// Implementation details
// There were 2 possible ways to implement the conversion: using resize or using back_inserter,
// back_inserter was always 10-30% slower in tests even with reserve so it uses resize approach.
// Also it doesn't use 2-pass approach: calculate converted string size and then the actual conversion.
// This is obviously at least 50% slower, so it uses 1-pass with shrink_to_fit after.

template<typename Dst, typename Alloc, typename Src, size_t SizeX,
#if defined(UNI_ALGO_FORCE_CPP_ITERATORS)
    size_t(*FnUTF)(typename Src::const_iterator, typename Src::const_iterator, typename Dst::iterator, size_t*)>
#elif defined(UNI_ALGO_FORCE_C_POINTERS)
    size_t(*FnUTF)(typename Src::const_pointer, typename Src::const_pointer, typename Dst::pointer, size_t*)>
#else // Safe layer
    size_t(*FnUTF)(safe::in<typename Src::const_pointer>, safe::end<typename Src::const_pointer>, safe::out<typename Dst::pointer>, size_t*)>
#endif
uaiw_constexpr Dst t_utf(const Alloc& alloc, const Src& src)
{
    Dst dst{alloc};

    const std::size_t length = src.size();

    if (length)
    {
        if (length > dst.max_size() / SizeX) // Overflow protection
        {
#if defined(__cpp_exceptions) || defined(__EXCEPTIONS) || (_HAS_EXCEPTIONS != 0)
            throw std::bad_alloc();
#else
            std::abort();
#endif
        }

#if defined(UNI_ALGO_FORCE_CPP_ITERATORS)
        dst.resize(length * SizeX);
        dst.resize(FnUTF(src.cbegin(), src.cend(), dst.begin(), nullptr));
#elif defined(UNI_ALGO_FORCE_C_POINTERS)
        dst.resize(length * SizeX);
        dst.resize(FnUTF(src.data(), src.data() + src.size(), dst.data(), nullptr));
#else // Safe layer
#  if !defined(__cpp_lib_string_resize_and_overwrite)
        dst.resize(length * SizeX);
        dst.resize(FnUTF(safe::in{src.data(), src.size()}, safe::end{src.data() + src.size()}, safe::out{dst.data(), dst.size()}, nullptr));
#  else
        dst.resize_and_overwrite(length * SizeX, [&src](typename Dst::pointer p, std::size_t n) noexcept -> std::size_t {
            return FnUTF(safe::in{src.data(), src.size()}, safe::end{src.data() + src.size()}, safe::out{p, n}, nullptr);
        });
#  endif
#endif

#ifndef UNI_ALGO_NO_SHRINK_TO_FIT
        dst.shrink_to_fit();
#endif
    }

    return dst;
}

template<typename Dst, typename Alloc, typename Src, size_t SizeX,
#if defined(UNI_ALGO_FORCE_CPP_ITERATORS)
    size_t(*FnUTF)(typename Src::const_iterator, typename Src::const_iterator, typename Dst::iterator, size_t*)>
#elif defined(UNI_ALGO_FORCE_C_POINTERS)
    size_t(*FnUTF)(typename Src::const_pointer, typename Src::const_pointer, typename Dst::pointer, size_t*)>
#else // Safe layer
    size_t(*FnUTF)(safe::in<typename Src::const_pointer>, safe::end<typename Src::const_pointer>, safe::out<typename Dst::pointer>, size_t*)>
#endif
uaiw_constexpr Dst t_utf(const Alloc& alloc, const Src& src, una::error& error)
{
    error.reset();

    Dst dst{alloc};

    const std::size_t length = src.size();

    if (length)
    {
        if (length > dst.max_size() / SizeX) // Overflow protection
        {
#if defined(__cpp_exceptions) || defined(__EXCEPTIONS) || (_HAS_EXCEPTIONS != 0)
            throw std::bad_alloc();
#else
            std::abort();
#endif
        }

        std::size_t err = impl_npos;

#if defined(UNI_ALGO_FORCE_CPP_ITERATORS)
        dst.resize(length * SizeX);
        dst.resize(FnUTF(src.cbegin(), src.cend(), dst.begin(), &err));
#elif defined(UNI_ALGO_FORCE_C_POINTERS)
        dst.resize(length * SizeX);
        dst.resize(FnUTF(src.data(), src.data() + src.size(), dst.data(), &err));
#else // Safe layer
#  if !defined(__cpp_lib_string_resize_and_overwrite)
        dst.resize(length * SizeX);
        dst.resize(FnUTF(safe::in{src.data(), src.size()}, safe::end{src.data() + src.size()}, safe::out{dst.data(), dst.size()}, &err));
#  else
        dst.resize_and_overwrite(length * SizeX, [&src, &err](typename Dst::pointer p, std::size_t n) noexcept -> std::size_t {
            return FnUTF(safe::in{src.data(), src.size()}, safe::end{src.data() + src.size()}, safe::out{p, n}, &err);
        });
#  endif
#endif

        if (err != impl_npos)
        {
            error = una::error{una::error::code::ill_formed_utf, err};

            // Return valid part of a string if the define is defined
#ifndef UNI_ALGO_STRICT_CONV_RET_VALID_PART
            dst.clear();
#endif
        }

#ifndef UNI_ALGO_NO_SHRINK_TO_FIT
        dst.shrink_to_fit();
#endif
    }

    return dst;
}

// Validation

#if defined(UNI_ALGO_FORCE_CPP_ITERATORS)
template<typename Src, bool(*FnValid)(typename Src::const_iterator, typename Src::const_iterator, size_t*)>
#elif defined(UNI_ALGO_FORCE_C_POINTERS)
template<typename Src, bool(*FnValid)(typename Src::const_pointer, typename Src::const_pointer, size_t*)>
#else // Safe layer
template<typename Src, bool(*FnValid)(safe::in<typename Src::const_pointer>, safe::end<typename Src::const_pointer>, size_t*)>
#endif
uaiw_constexpr bool t_valid(const Src& src)
{
#if defined(UNI_ALGO_FORCE_CPP_ITERATORS)
    return FnValid(src.cbegin(), src.cend(), nullptr);
#elif defined(UNI_ALGO_FORCE_C_POINTERS)
    return FnValid(src.data(), src.data() + src.size(), nullptr);
#else // Safe layer
    return FnValid(safe::in{src.data(), src.size()}, safe::end{src.data() + src.size()}, nullptr);
#endif
}

#if defined(UNI_ALGO_FORCE_CPP_ITERATORS)
template<typename Src, bool(*FnValid)(typename Src::const_iterator, typename Src::const_iterator, size_t*)>
#elif defined(UNI_ALGO_FORCE_C_POINTERS)
template<typename Src, bool(*FnValid)(typename Src::const_pointer, typename Src::const_pointer, size_t*)>
#else // Safe layer
template<typename Src, bool(*FnValid)(safe::in<typename Src::const_pointer>, safe::end<typename Src::const_pointer>, size_t*)>
#endif
uaiw_constexpr bool t_valid(const Src& src, una::error& error)
{
    size_t err = detail::impl_npos;

#if defined(UNI_ALGO_FORCE_CPP_ITERATORS)
    const bool ret = FnValid(src.cbegin(), src.cend(), &err);
#elif defined(UNI_ALGO_FORCE_C_POINTERS)
    const bool ret = FnValid(src.data(), src.data() + src.size(), &err);
#else // Safe layer
    const bool ret = FnValid(safe::in{src.data(), src.size()}, safe::end{src.data() + src.size()}, &err);
#endif

    error = ret ? una::error{} : una::error{una::error::code::ill_formed_utf, err};

    return ret;
}

} // namespace detail

// Template functions

template<typename UTF8, typename UTF16, typename Alloc = std::allocator<UTF16>>
uaiw_constexpr std::basic_string<UTF16, std::char_traits<UTF16>, Alloc>
utf8to16(std::basic_string_view<UTF8> source, const Alloc& alloc = Alloc())
{
    static_assert(std::is_integral_v<UTF8>);
    static_assert(std::is_integral_v<UTF16> && sizeof(UTF16) >= sizeof(char16_t));

    return detail::t_utf<std::basic_string<UTF16, std::char_traits<UTF16>, Alloc>, Alloc, std::basic_string_view<UTF8>,
            detail::impl_x_utf8to16, detail::impl_utf8to16>(alloc, source);
}
template<typename UTF16, typename UTF8, typename Alloc = std::allocator<UTF8>>
uaiw_constexpr std::basic_string<UTF8, std::char_traits<UTF8>, Alloc>
utf16to8(std::basic_string_view<UTF16> source, const Alloc& alloc = Alloc())
{
    static_assert(std::is_integral_v<UTF8>);
    static_assert(std::is_integral_v<UTF16> && sizeof(UTF16) >= sizeof(char16_t));

    return detail::t_utf<std::basic_string<UTF8, std::char_traits<UTF8>, Alloc>, Alloc, std::basic_string_view<UTF16>,
            detail::impl_x_utf16to8, detail::impl_utf16to8>(alloc, source);
}
template<typename UTF8, typename UTF32, typename Alloc = std::allocator<UTF32>>
uaiw_constexpr std::basic_string<UTF32, std::char_traits<UTF32>, Alloc>
utf8to32(std::basic_string_view<UTF8> source, const Alloc& alloc = Alloc())
{
    static_assert(std::is_integral_v<UTF8>);
    static_assert(std::is_integral_v<UTF32> && sizeof(UTF32) >= sizeof(char32_t));

    return detail::t_utf<std::basic_string<UTF32, std::char_traits<UTF32>, Alloc>, Alloc, std::basic_string_view<UTF8>,
            detail::impl_x_utf8to32, detail::impl_utf8to32>(alloc, source);
}
template<typename UTF32, typename UTF8, typename Alloc = std::allocator<UTF8>>
uaiw_constexpr std::basic_string<UTF8, std::char_traits<UTF8>, Alloc>
utf32to8(std::basic_string_view<UTF32> source, const Alloc& alloc = Alloc())
{
    static_assert(std::is_integral_v<UTF8>);
    static_assert(std::is_integral_v<UTF32> && sizeof(UTF32) >= sizeof(char32_t));

    return detail::t_utf<std::basic_string<UTF8, std::char_traits<UTF8>, Alloc>, Alloc, std::basic_string_view<UTF32>,
            detail::impl_x_utf32to8, detail::impl_utf32to8>(alloc, source);
}
template<typename UTF16, typename UTF32, typename Alloc = std::allocator<UTF32>>
uaiw_constexpr std::basic_string<UTF32, std::char_traits<UTF32>, Alloc>
utf16to32(std::basic_string_view<UTF16> source, const Alloc& alloc = Alloc())
{
    static_assert(std::is_integral_v<UTF16> && sizeof(UTF16) >= sizeof(char16_t));
    static_assert(std::is_integral_v<UTF32> && sizeof(UTF32) >= sizeof(char32_t));

    return detail::t_utf<std::basic_string<UTF32, std::char_traits<UTF32>, Alloc>, Alloc, std::basic_string_view<UTF16>,
            detail::impl_x_utf16to32, detail::impl_utf16to32>(alloc, source);
}
template<typename UTF32, typename UTF16, typename Alloc = std::allocator<UTF16>>
uaiw_constexpr std::basic_string<UTF16, std::char_traits<UTF16>, Alloc>
utf32to16(std::basic_string_view<UTF32> source, const Alloc& alloc = Alloc())
{
    static_assert(std::is_integral_v<UTF16> && sizeof(UTF16) >= sizeof(char16_t));
    static_assert(std::is_integral_v<UTF32> && sizeof(UTF32) >= sizeof(char32_t));

    return detail::t_utf<std::basic_string<UTF16, std::char_traits<UTF16>, Alloc>, Alloc, std::basic_string_view<UTF32>,
            detail::impl_x_utf32to16, detail::impl_utf32to16>(alloc, source);
}

// Short non-template functions for std::string, std::wstring, std::u16string, std::u32string

inline uaiw_constexpr std::u16string utf8to16u(std::string_view source)
{
    return utf8to16<char, char16_t>(source);
}
inline uaiw_constexpr std::string utf16to8(std::u16string_view source)
{
    return utf16to8<char16_t, char>(source);
}
inline uaiw_constexpr std::u32string utf8to32u(std::string_view source)
{
    return utf8to32<char, char32_t>(source);
}
inline uaiw_constexpr std::string utf32to8(std::u32string_view source)
{
    return utf32to8<char32_t, char>(source);
}
inline uaiw_constexpr std::u32string utf16to32u(std::u16string_view source)
{
    return utf16to32<char16_t, char32_t>(source);
}
inline uaiw_constexpr std::u16string utf32to16u(std::u32string_view source)
{
    return utf32to16<char32_t, char16_t>(source);
}

#if WCHAR_MAX >= 0x7FFF && WCHAR_MAX <= 0xFFFF // 16-bit wchar_t
inline uaiw_constexpr std::wstring utf8to16(std::string_view source)
{
    return utf8to16<char, wchar_t>(source);
}
inline uaiw_constexpr std::string utf16to8(std::wstring_view source)
{
    return utf16to8<wchar_t, char>(source);
}
inline uaiw_constexpr std::u32string utf16to32u(std::wstring_view source)
{
    return utf16to32<wchar_t, char32_t>(source);
}
inline uaiw_constexpr std::wstring utf32to16(std::u32string_view source)
{
    return utf32to16<char32_t, wchar_t>(source);
}
#elif WCHAR_MAX >= 0x7FFFFFFF // 32-bit wchar_t
inline uaiw_constexpr std::wstring utf8to32(std::string_view source)
{
    return utf8to32<char, wchar_t>(source);
}
inline uaiw_constexpr std::string utf32to8(std::wstring_view source)
{
    return utf32to8<wchar_t, char>(source);
}
inline uaiw_constexpr std::wstring utf16to32(std::u16string_view source)
{
    return utf16to32<char16_t, wchar_t>(source);
}
inline uaiw_constexpr std::u16string utf32to16u(std::wstring_view source)
{
    return utf32to16<wchar_t, char16_t>(source);
}
#endif // WCHAR_MAX >= 0x7FFFFFFF

namespace strict {

// Template functions

template<typename UTF8, typename UTF16, typename Alloc = std::allocator<UTF16>>
uaiw_constexpr std::basic_string<UTF16, std::char_traits<UTF16>, Alloc>
utf8to16(std::basic_string_view<UTF8> source, una::error& error, const Alloc& alloc = Alloc())
{
    static_assert(std::is_integral_v<UTF8>);
    static_assert(std::is_integral_v<UTF16> && sizeof(UTF16) >= sizeof(char16_t));

    return detail::t_utf<std::basic_string<UTF16, std::char_traits<UTF16>, Alloc>, Alloc, std::basic_string_view<UTF8>,
            detail::impl_x_utf8to16, detail::impl_utf8to16>(alloc, source, error);
}
template<typename UTF16, typename UTF8, typename Alloc = std::allocator<UTF8>>
uaiw_constexpr std::basic_string<UTF8, std::char_traits<UTF8>, Alloc>
utf16to8(std::basic_string_view<UTF16> source, una::error& error, const Alloc& alloc = Alloc())
{
    static_assert(std::is_integral_v<UTF8>);
    static_assert(std::is_integral_v<UTF16> && sizeof(UTF16) >= sizeof(char16_t));

    return detail::t_utf<std::basic_string<UTF8, std::char_traits<UTF8>, Alloc>, Alloc, std::basic_string_view<UTF16>,
            detail::impl_x_utf16to8, detail::impl_utf16to8>(alloc, source, error);
}
template<typename UTF8, typename UTF32, typename Alloc = std::allocator<UTF32>>
uaiw_constexpr std::basic_string<UTF32, std::char_traits<UTF32>, Alloc>
utf8to32(std::basic_string_view<UTF8> source, una::error& error, const Alloc& alloc = Alloc())
{
    static_assert(std::is_integral_v<UTF8>);
    static_assert(std::is_integral_v<UTF32> && sizeof(UTF32) >= sizeof(char32_t));

    return detail::t_utf<std::basic_string<UTF32, std::char_traits<UTF32>, Alloc>, Alloc, std::basic_string_view<UTF8>,
            detail::impl_x_utf8to32, detail::impl_utf8to32>(alloc, source, error);
}
template<typename UTF32, typename UTF8, typename Alloc = std::allocator<UTF8>>
uaiw_constexpr std::basic_string<UTF8, std::char_traits<UTF8>, Alloc>
utf32to8(std::basic_string_view<UTF32> source, una::error& error, const Alloc& alloc = Alloc())
{
    static_assert(std::is_integral_v<UTF8>);
    static_assert(std::is_integral_v<UTF32> && sizeof(UTF32) >= sizeof(char32_t));

    return detail::t_utf<std::basic_string<UTF8, std::char_traits<UTF8>, Alloc>, Alloc, std::basic_string_view<UTF32>,
            detail::impl_x_utf32to8, detail::impl_utf32to8>(alloc, source, error);
}
template<typename UTF16, typename UTF32, typename Alloc = std::allocator<UTF32>>
uaiw_constexpr std::basic_string<UTF32, std::char_traits<UTF32>, Alloc>
utf16to32(std::basic_string_view<UTF16> source, una::error& error, const Alloc& alloc = Alloc())
{
    static_assert(std::is_integral_v<UTF16> && sizeof(UTF16) >= sizeof(char16_t));
    static_assert(std::is_integral_v<UTF32> && sizeof(UTF32) >= sizeof(char32_t));

    return detail::t_utf<std::basic_string<UTF32, std::char_traits<UTF32>, Alloc>, Alloc, std::basic_string_view<UTF16>,
            detail::impl_x_utf16to32, detail::impl_utf16to32>(alloc, source, error);
}
template<typename UTF32, typename UTF16, typename Alloc = std::allocator<UTF16>>
uaiw_constexpr std::basic_string<UTF16, std::char_traits<UTF16>, Alloc>
utf32to16(std::basic_string_view<UTF32> source, una::error& error, const Alloc& alloc = Alloc())
{
    static_assert(std::is_integral_v<UTF16> && sizeof(UTF16) >= sizeof(char16_t));
    static_assert(std::is_integral_v<UTF32> && sizeof(UTF32) >= sizeof(char32_t));

    return detail::t_utf<std::basic_string<UTF16, std::char_traits<UTF16>, Alloc>, Alloc, std::basic_string_view<UTF32>,
            detail::impl_x_utf32to16, detail::impl_utf32to16>(alloc, source, error);
}

// Short non-template functions for std::string, std::wstring, std::u16string, std::u32string

inline uaiw_constexpr std::u16string utf8to16u(std::string_view source, una::error& error)
{
    return utf8to16<char, char16_t>(source, error);
}
inline uaiw_constexpr std::string utf16to8(std::u16string_view source, una::error& error)
{
    return utf16to8<char16_t, char>(source, error);
}
inline uaiw_constexpr std::u32string utf8to32u(std::string_view source, una::error& error)
{
    return utf8to32<char, char32_t>(source, error);
}
inline uaiw_constexpr std::string utf32to8(std::u32string_view source, una::error& error)
{
    return utf32to8<char32_t, char>(source, error);
}
inline uaiw_constexpr std::u32string utf16to32u(std::u16string_view source, una::error& error)
{
    return utf16to32<char16_t, char32_t>(source, error);
}
inline uaiw_constexpr std::u16string utf32to16u(std::u32string_view source, una::error& error)
{
    return utf32to16<char32_t, char16_t>(source, error);
}

#if WCHAR_MAX >= 0x7FFF && WCHAR_MAX <= 0xFFFF // 16-bit wchar_t
inline uaiw_constexpr std::wstring utf8to16(std::string_view source, una::error& error)
{
    return utf8to16<char, wchar_t>(source, error);
}
inline uaiw_constexpr std::string utf16to8(std::wstring_view source, una::error& error)
{
    return utf16to8<wchar_t, char>(source, error);
}
inline uaiw_constexpr std::u32string utf16to32u(std::wstring_view source, una::error& error)
{
    return utf16to32<wchar_t, char32_t>(source, error);
}
inline uaiw_constexpr std::wstring utf32to16(std::u32string_view source, una::error& error)
{
    return utf32to16<char32_t, wchar_t>(source, error);
}
#elif WCHAR_MAX >= 0x7FFFFFFF // 32-bit wchar_t
inline uaiw_constexpr std::wstring utf8to32(std::string_view source, una::error& error)
{
    return utf8to32<char, wchar_t>(source, error);
}
inline uaiw_constexpr std::string utf32to8(std::wstring_view source, una::error& error)
{
    return utf32to8<wchar_t, char>(source, error);
}
inline uaiw_constexpr std::wstring utf16to32(std::u16string_view source, una::error& error)
{
    return utf16to32<char16_t, wchar_t>(source, error);
}
inline uaiw_constexpr std::u16string utf32to16u(std::wstring_view source, una::error& error)
{
    return utf32to16<wchar_t, char16_t>(source, error);
}
#endif // WCHAR_MAX >= 0x7FFFFFFF

} // namespace strict

template<typename UTF8>
uaiw_constexpr bool is_valid_utf8(std::basic_string_view<UTF8> source)
{
    static_assert(std::is_integral_v<UTF8>);

    return detail::t_valid<std::basic_string_view<UTF8>, detail::impl_is_valid_utf8>(source);
}

template<typename UTF16>
uaiw_constexpr bool is_valid_utf16(std::basic_string_view<UTF16> source)
{
    static_assert(std::is_integral_v<UTF16> && sizeof(UTF16) >= sizeof(char16_t));

    return detail::t_valid<std::basic_string_view<UTF16>, detail::impl_is_valid_utf16>(source);
}

template<typename UTF32>
uaiw_constexpr bool is_valid_utf32(std::basic_string_view<UTF32> source)
{
    static_assert(std::is_integral_v<UTF32> && sizeof(UTF32) >= sizeof(char32_t));

    return detail::t_valid<std::basic_string_view<UTF32>, detail::impl_is_valid_utf32>(source);
}

template<typename UTF8>
uaiw_constexpr bool is_valid_utf8(std::basic_string_view<UTF8> source, una::error& error)
{
    static_assert(std::is_integral_v<UTF8>);

    return detail::t_valid<std::basic_string_view<UTF8>, detail::impl_is_valid_utf8>(source, error);
}

template<typename UTF16>
uaiw_constexpr bool is_valid_utf16(std::basic_string_view<UTF16> source, una::error& error)
{
    static_assert(std::is_integral_v<UTF16> && sizeof(UTF16) >= sizeof(char16_t));

    return detail::t_valid<std::basic_string_view<UTF16>, detail::impl_is_valid_utf16>(source, error);
}

template<typename UTF32>
uaiw_constexpr bool is_valid_utf32(std::basic_string_view<UTF32> source, una::error& error)
{
    static_assert(std::is_integral_v<UTF32> && sizeof(UTF32) >= sizeof(char32_t));

    return detail::t_valid<std::basic_string_view<UTF32>, detail::impl_is_valid_utf32>(source, error);
}

inline uaiw_constexpr bool is_valid_utf8(std::string_view source)
{
    return is_valid_utf8<char>(source);
}
inline uaiw_constexpr bool is_valid_utf16(std::u16string_view source)
{
    return is_valid_utf16<char16_t>(source);
}
inline uaiw_constexpr bool is_valid_utf32(std::u32string_view source)
{
    return is_valid_utf32<char32_t>(source);
}
inline uaiw_constexpr bool is_valid_utf8(std::string_view source, una::error& error)
{
    return is_valid_utf8<char>(source, error);
}
inline uaiw_constexpr bool is_valid_utf16(std::u16string_view source, una::error& error)
{
    return is_valid_utf16<char16_t>(source, error);
}
inline uaiw_constexpr bool is_valid_utf32(std::u32string_view source, una::error& error)
{
    return is_valid_utf32<char32_t>(source, error);
}
#if WCHAR_MAX >= 0x7FFF && WCHAR_MAX <= 0xFFFF // 16-bit wchar_t
inline uaiw_constexpr bool is_valid_utf16(std::wstring_view source)
{
    return is_valid_utf16<wchar_t>(source);
}
inline uaiw_constexpr bool is_valid_utf16(std::wstring_view source, una::error& error)
{
    return is_valid_utf16<wchar_t>(source, error);
}
#elif WCHAR_MAX >= 0x7FFFFFFF // 32-bit wchar_t
inline uaiw_constexpr bool is_valid_utf32(std::wstring_view source)
{
    return is_valid_utf32<wchar_t>(source);
}
inline uaiw_constexpr bool is_valid_utf32(std::wstring_view source, una::error& error)
{
    return is_valid_utf32<wchar_t>(source, error);
}
#endif // WCHAR_MAX >= 0x7FFFFFFF


#ifdef __cpp_lib_char8_t

inline uaiw_constexpr std::u16string utf8to16u(std::u8string_view source)
{
    return utf8to16<char8_t, char16_t>(source);
}
inline uaiw_constexpr std::u8string utf16to8u(std::u16string_view source)
{
    return utf16to8<char16_t, char8_t>(source);
}
inline uaiw_constexpr std::u32string utf8to32u(std::u8string_view source)
{
    return utf8to32<char8_t, char32_t>(source);
}
inline uaiw_constexpr std::u8string utf32to8u(std::u32string_view source)
{
    return utf32to8<char32_t, char8_t>(source);
}

inline uaiw_constexpr bool is_valid_utf8(std::u8string_view source)
{
    return is_valid_utf8<char8_t>(source);
}
inline uaiw_constexpr bool is_valid_utf8(std::u8string_view source, una::error& error)
{
    return is_valid_utf8<char8_t>(source, error);
}

#if WCHAR_MAX >= 0x7FFF && WCHAR_MAX <= 0xFFFF // 16-bit wchar_t
inline uaiw_constexpr std::wstring utf8to16(std::u8string_view source)
{
    return utf8to16<char8_t, wchar_t>(source);
}
inline uaiw_constexpr std::u8string utf16to8u(std::wstring_view source)
{
    return utf16to8<wchar_t, char8_t>(source);
}
#elif WCHAR_MAX >= 0x7FFFFFFF // 32-bit wchar_t
inline uaiw_constexpr std::wstring utf8to32(std::u8string_view source)
{
    return utf8to32<char8_t, wchar_t>(source);
}
inline uaiw_constexpr std::u8string utf32to8u(std::wstring_view source)
{
    return utf32to8<wchar_t, char8_t>(source);
}
#endif // WCHAR_MAX >= 0x7FFFFFFF

namespace strict {

inline uaiw_constexpr std::u16string utf8to16u(std::u8string_view source, una::error& error)
{
    return utf8to16<char8_t, char16_t>(source, error);
}
inline uaiw_constexpr std::u8string utf16to8u(std::u16string_view source, una::error& error)
{
    return utf16to8<char16_t, char8_t>(source, error);
}
inline uaiw_constexpr std::u32string utf8to32u(std::u8string_view source, una::error& error)
{
    return utf8to32<char8_t, char32_t>(source, error);
}
inline uaiw_constexpr std::u8string utf32to8u(std::u32string_view source, una::error& error)
{
    return utf32to8<char32_t, char8_t>(source, error);
}

#if WCHAR_MAX >= 0x7FFF && WCHAR_MAX <= 0xFFFF // 16-bit wchar_t
inline uaiw_constexpr std::wstring utf8to16(std::u8string_view source, una::error& error)
{
    return utf8to16<char8_t, wchar_t>(source, error);
}
inline uaiw_constexpr std::u8string utf16to8u(std::wstring_view source, una::error& error)
{
    return utf16to8<wchar_t, char8_t>(source, error);
}
#elif WCHAR_MAX >= 0x7FFFFFFF // 32-bit wchar_t
inline uaiw_constexpr std::wstring utf8to32(std::u8string_view source, una::error& error)
{
    return utf8to32<char8_t, wchar_t>(source, error);
}
inline uaiw_constexpr std::u8string utf32to8u(std::wstring_view source, una::error& error)
{
    return utf32to8<wchar_t, char8_t>(source, error);
}
#endif // WCHAR_MAX >= 0x7FFFFFFF

} // namespace strict

#endif // __cpp_lib_char8_t

} // namespace una


// AMALGAMATION: uni_algo/locale.h


#include <string>
#include <string_view>
#include <cassert>

//!#include "config.h"

//!#include "impl/impl_locale.h"

// DESIGN:
// Locale tags can contain too many values so using enum classes for them is no go.
// So we use our own "enum strings" that are similar in usage:
// una::locale::language{"en"} instead of una::locale::language::en
// That allow us to use them with all possible language/script/region tags.
// They are constexpr so it's possible to use them in all places
// where enum classes can be used for example in switch case.

namespace una {

// Forward declaration for system locale stuff
#ifndef UNI_ALGO_DISABLE_SYSTEM_LOCALE
#ifndef UNI_ALGO_STATIC_DATA
class locale;

namespace detail {

UNI_ALGO_DLL const una::locale& locale_system();
#ifdef UNI_ALGO_EXPERIMENTAL
UNI_ALGO_DLL const una::locale& locale_thread();
UNI_ALGO_DLL void locale_thread_reinit();
#endif // UNI_ALGO_EXPERIMENTAL

} // namespace detail
#endif // UNI_ALGO_STATIC_DATA
#endif // UNI_ALGO_DISABLE_SYSTEM_LOCALE

// Forward declaration for locale friend helper
namespace detail {
class locale_friend;
} // namespace detail

class locale
{
public:
    class language
    {
        friend class locale;
    private:
        // Use char32_t for value because that is what low-level uses
        char32_t value = 0;
        constexpr explicit language(char32_t v) noexcept : value{v} {}
        constexpr void set_value(char32_t v) noexcept { value = v; }
        constexpr char32_t get_value() const noexcept { return value; }
    public:
        constexpr language() = default;
        template <std::size_t N> // NOLINTNEXTLINE(cppcoreguidelines-avoid-c-arrays, modernize-avoid-c-arrays, hicpp-avoid-c-arrays)
        constexpr explicit language(const char (&s)[N]) noexcept : value{detail::impl_locate_from_tag(s, N ? N - 1 : 0)} {}
        uaiw_constexpr explicit language(std::string_view s) noexcept : value{detail::impl_locate_from_tag(s, s.size())} {}

        // Enable emplicit conversion to make this class work in switch case
        // NOLINTNEXTLINE(google-explicit-constructor, hicpp-explicit-conversions)
        constexpr operator char32_t() const noexcept { return value; }

        friend constexpr bool operator==(const language& x, const language& y) noexcept { return x.value == y.value; }
        friend constexpr bool operator!=(const language& x, const language& y) noexcept { return x.value != y.value; }

        // Remove comparison operators because implicit conversion made them
        friend bool operator==(const language&, char32_t) = delete;
        friend bool operator==(char32_t, const language&) = delete;
        friend bool operator!=(const language&, char32_t) = delete;
        friend bool operator!=(char32_t, const language&) = delete;
        friend bool operator<=(const language&, char32_t) = delete;
        friend bool operator<=(char32_t, const language&) = delete;
        friend bool operator>=(const language&, char32_t) = delete;
        friend bool operator>=(char32_t, const language&) = delete;
        friend bool operator<(const language&, char32_t) = delete;
        friend bool operator<(char32_t, const language&) = delete;
        friend bool operator>(const language&, char32_t) = delete;
        friend bool operator>(char32_t, const language&) = delete;
    };
    class region
    {
        friend class locale;
    private:
        char32_t value = 0;
        constexpr explicit region(char32_t v) noexcept : value{v} {}
        constexpr void set_value(char32_t v) noexcept { value = v; }
        constexpr char32_t get_value() const noexcept { return value; }
    public:
        constexpr region() = default;
        template <std::size_t N> // NOLINTNEXTLINE(cppcoreguidelines-avoid-c-arrays, modernize-avoid-c-arrays, hicpp-avoid-c-arrays)
        constexpr explicit region(const char (&s)[N]) noexcept : value{detail::impl_locate_from_tag(s, N ? N - 1 : 0)} {}
        uaiw_constexpr explicit region(std::string_view s) noexcept : value{detail::impl_locate_from_tag(s, s.size())} {}
        // NOLINTNEXTLINE(google-explicit-constructor, hicpp-explicit-conversions)
        constexpr operator char32_t() const noexcept { return value; }

        friend constexpr bool operator==(const region& x, const region& y) noexcept { return x.value == y.value; }
        friend constexpr bool operator!=(const region& x, const region& y) noexcept { return x.value != y.value; }

        friend bool operator==(const region&, char32_t) = delete;
        friend bool operator==(char32_t, const region&) = delete;
        friend bool operator!=(const region&, char32_t) = delete;
        friend bool operator!=(char32_t, const region&) = delete;
        friend bool operator<=(const region&, char32_t) = delete;
        friend bool operator<=(char32_t, const region&) = delete;
        friend bool operator>=(const region&, char32_t) = delete;
        friend bool operator>=(char32_t, const region&) = delete;
        friend bool operator<(const region&, char32_t) = delete;
        friend bool operator<(char32_t, const region&) = delete;
        friend bool operator>(const region&, char32_t) = delete;
        friend bool operator>(char32_t, const region&) = delete;
    };
    class script
    {
        friend class locale;
        friend class detail::locale_friend;
    private:
        char32_t value = 0;
        constexpr explicit script(char32_t v) noexcept : value{v} {}
        constexpr void set_value(char32_t v) noexcept { value = v; }
        constexpr char32_t get_value() const noexcept { return value; }
    public:
        constexpr script() = default;
        template <std::size_t N> // NOLINTNEXTLINE(cppcoreguidelines-avoid-c-arrays, modernize-avoid-c-arrays, hicpp-avoid-c-arrays)
        constexpr explicit script(const char (&s)[N]) noexcept : value{detail::impl_locate_from_tag(s, N ? N - 1 : 0)} {}
        uaiw_constexpr explicit script(std::string_view s) noexcept : value{detail::impl_locate_from_tag(s, s.size())} {}
        // NOLINTNEXTLINE(google-explicit-constructor, hicpp-explicit-conversions)
        constexpr operator char32_t() const noexcept { return value; }

        friend constexpr bool operator==(const script& x, const script& y) noexcept { return x.value == y.value; }
        friend constexpr bool operator!=(const script& x, const script& y) noexcept { return x.value != y.value; }

        friend bool operator==(const script&, char32_t) = delete;
        friend bool operator==(char32_t, const script&) = delete;
        friend bool operator!=(const script&, char32_t) = delete;
        friend bool operator!=(char32_t, const script&) = delete;
        friend bool operator<=(const script&, char32_t) = delete;
        friend bool operator<=(char32_t, const script&) = delete;
        friend bool operator>=(const script&, char32_t) = delete;
        friend bool operator>=(char32_t, const script&) = delete;
        friend bool operator<(const script&, char32_t) = delete;
        friend bool operator<(char32_t, const script&) = delete;
        friend bool operator>(const script&, char32_t) = delete;
        friend bool operator>(char32_t, const script&) = delete;
    };
private:
    language lang; //{detail::impl_locale_language_und};
    script scpt; //{detail::impl_locale_script_Zzzz};
    region regn; //{detail::impl_locale_region_ZZ};

public:
    constexpr locale() = default;
    // NOLINTNEXTLINE(google-explicit-constructor, hicpp-explicit-conversions)
    constexpr locale(language l) noexcept : lang{l} {}
    constexpr locale(language l, region r) noexcept : lang{l}, regn{r} {}
    constexpr locale(language l, script s) noexcept : lang{l}, scpt{s} {}
    constexpr locale(language l, script s, region r) noexcept : lang{l}, scpt{s}, regn{r} {}
    constexpr language get_language() const noexcept { return lang; }
    constexpr script get_script() const noexcept { return scpt; }
    constexpr region get_region() const noexcept { return regn; }
    constexpr bool is_empty() const noexcept
    {
        return lang.get_value() == 0 &&
               scpt.get_value() == 0 &&
               regn.get_value() == 0;
    }
#ifndef UNI_ALGO_DISABLE_SYSTEM_LOCALE
#ifndef UNI_ALGO_STATIC_DATA
    static locale system() { return detail::locale_system(); }
#ifdef UNI_ALGO_EXPERIMENTAL
    static locale thread() { return detail::locale_thread(); }
    static void thread_reinit() { detail::locale_thread_reinit(); }
#endif // UNI_ALGO_EXPERIMENTAL
#endif // UNI_ALGO_STATIC_DATA
#endif // UNI_ALGO_DISABLE_SYSTEM_LOCALE
#ifdef UNI_ALGO_EXPERIMENTAL
    uaiw_constexpr void normalize() noexcept
    {
        lang.set_value(detail::impl_locale_norm_language(lang.get_value(), 0));
        if (lang.get_value() == 0)
        {
            scpt.set_value(0);
            regn.set_value(0);
        }
        scpt.set_value(detail::impl_locale_norm_script(scpt.get_value(), 0));
        regn.set_value(detail::impl_locale_norm_region(regn.get_value(), 0));
    }
#endif // UNI_ALGO_EXPERIMENTAL
    uaiw_constexpr std::string to_string() const
    {
        std::string result;
        result.resize(4 + 1 + 4 + 1 + 4);

        std::size_t size = 0;

        // REMINDER 1: Uncomment "size &&" parts to output empty string if ill-formed locale
        // REMINDER 2: Uncomment "if (size)" parts to not prepend ill-formed locale with '-'
        size += detail::impl_locate_to_tag(lang.get_value(), result.begin() + static_cast<std::ptrdiff_t>(size));
        if (/*size && */scpt.get_value())
        {
            /*if (size) */result[size++] = '-';
            size += detail::impl_locate_to_tag(scpt.get_value(), result.begin() + static_cast<std::ptrdiff_t>(size));
        }
        if (/*size && */regn.get_value())
        {
            /*if (size) */result[size++] = '-';
            size += detail::impl_locate_to_tag(regn.get_value(), result.begin() + static_cast<std::ptrdiff_t>(size));
        }

        result.resize(size);
        return result;
    }
private:
    template <typename T>
    uaiw_constexpr void parse(std::basic_string_view<T> s)
    {
        // Examples:
        // en-ZZ
        // und-ZZ
        // en-Zzzz-ZZ
        // und-Zzzz-ZZ

        if (s.size() < 2)
            return;

        bool has_lang = false;
        bool has_scpt = false;
        bool has_regn = false;

        bool found = false;
        for (std::size_t i = 0, prev = 0; i <= s.size(); ++i)
        {
            // Be aware that i <= s.size() so we parse last char too to simplify the algo
            // don't forget to check that

            if (i == s.size() || s[i] == '-' || s[i] == '_' || s[i] == '.')
            {
                if (found) // Multiple -_
                    break;

                const std::basic_string_view<T> x = s.substr(prev, i - prev);

                //std::cout << x << '\n'; // Test

                if (!has_lang)
                {
                    has_lang = true;
                    if (x.size() == 2 || x.size() == 3)
                        lang.set_value(detail::impl_locale_from_language(x, x.size(), 0));
                    else
                        break;
                }
                else if (!has_scpt && x.size() == 4)
                {
                    has_scpt = true;
                    scpt.set_value(detail::impl_locale_from_script(x, x.size(), 0));
                }
                else if (!has_regn)
                {
                    has_regn = true;
                    if (x.size() == 2 || x.size() == 3)
                        regn.set_value(detail::impl_locale_from_region(x, x.size(), 0));
                    break;
                }

                if (i != s.size() && s[i] == '.')
                    break;

                found = true;
                prev = i;
            }
            else if (found)
            {
                found = false;
                prev = i;
            }
        }
    }
public:
    uaiw_constexpr explicit locale(std::string_view s) { parse<char>(s); }
    uaiw_constexpr explicit locale(std::wstring_view s) { parse<wchar_t>(s); }

    // NOTE: Comparison of locale objects is incorrect usage in most cases
#ifdef UNI_ALGO_EXPERIMENTAL
    friend constexpr bool operator==(const locale& x, const locale& y) noexcept
    {
        return x.lang == y.lang &&
               x.scpt == y.scpt &&
               x.regn == y.regn;
    }
    friend constexpr bool operator!=(const locale& x, const locale& y) noexcept { return !(x == y); }
#endif // UNI_ALGO_EXPERIMENTAL
    friend constexpr bool operator==(const language& x, const locale& y) noexcept { return x == y.lang; }
    friend constexpr bool operator!=(const language& x, const locale& y) noexcept { return x != y.lang; }
    friend constexpr bool operator==(const locale& x, const language& y) noexcept { return x.lang == y; }
    friend constexpr bool operator!=(const locale& x, const language& y) noexcept { return x.lang != y; }
    friend constexpr bool operator==(const region& x, const locale& y) noexcept { return x == y.regn; }
    friend constexpr bool operator!=(const region& x, const locale& y) noexcept { return x != y.regn; }
    friend constexpr bool operator==(const locale& x, const region& y) noexcept { return x.regn == y; }
    friend constexpr bool operator!=(const locale& x, const region& y) noexcept { return x.regn != y; }
    friend constexpr bool operator==(const script& x, const locale& y) noexcept { return x == y.scpt; }
    friend constexpr bool operator!=(const script& x, const locale& y) noexcept { return x != y.scpt; }
    friend constexpr bool operator==(const locale& x, const script& y) noexcept { return x.scpt == y; }
    friend constexpr bool operator!=(const locale& x, const script& y) noexcept { return x.scpt != y; }
};

// Locale friend helper
namespace detail {
class locale_friend
{
public:
    static constexpr una::locale::script script_from_value(char32_t v) noexcept { return una::locale::script{v}; }
};
} // namespace detail

} // namespace una


// AMALGAMATION: uni_algo/case.h


#ifdef UNI_ALGO_DISABLE_CASE
#error "Case module is disabled via define UNI_ALGO_DISABLE_CASE"
#endif

#include <string>
#include <string_view>
#include <cassert>

//!#include "config.h"
//!#include "internal/safe_layer.h"
//!#include "internal/found.h"

// Clang-Tidy thinks that locale.h form C is included here
// NOLINTNEXTLINE(modernize-deprecated-headers, hicpp-deprecated-headers)
//!#include "locale.h"

//!#include "impl/impl_case.h"
#ifndef UNI_ALGO_DISABLE_FULL_CASE
//!#include "impl/impl_case_locale.h"
#endif

namespace una {

namespace detail {

template<typename Dst, typename Alloc, typename Src, size_t SizeX,
#if defined(UNI_ALGO_FORCE_CPP_ITERATORS)
    size_t(*FnMap)(typename Src::const_iterator, typename Src::const_iterator, typename Dst::iterator, int, type_codept)>
#elif defined(UNI_ALGO_FORCE_C_POINTERS)
    size_t(*FnMap)(typename Src::const_pointer, typename Src::const_pointer, typename Dst::pointer, int, type_codept)>
#else // Safe layer
    size_t(*FnMap)(safe::in<typename Src::const_pointer>, safe::end<typename Src::const_pointer>, safe::out<typename Dst::pointer>, int, type_codept)>
#endif
uaiw_constexpr Dst t_map(const Alloc& alloc, const Src& src, int mode, type_codept loc = 0)
{
    Dst dst{alloc};

    const std::size_t length = src.size();

    if (length)
    {
        if (length > dst.max_size() / SizeX) // Overflow protection
        {
#if defined(__cpp_exceptions) || defined(__EXCEPTIONS) || (_HAS_EXCEPTIONS != 0)
            throw std::bad_alloc();
#else
            std::abort();
#endif
        }

#if defined(UNI_ALGO_FORCE_CPP_ITERATORS)
        dst.resize(length * SizeX);
        dst.resize(FnMap(src.cbegin(), src.cend(), dst.begin(), mode, loc));
#elif defined(UNI_ALGO_FORCE_C_POINTERS)
        dst.resize(length * SizeX);
        dst.resize(FnMap(src.data(), src.data() + src.size(), dst.data(), mode, loc));
#else // Safe layer
#  if !defined(__cpp_lib_string_resize_and_overwrite)
        dst.resize(length * SizeX);
        dst.resize(FnMap(safe::in{src.data(), src.size()}, safe::end{src.data() + src.size()}, safe::out{dst.data(), dst.size()}, mode, loc));
#  else
        dst.resize_and_overwrite(length * SizeX, [&src, mode, loc](typename Dst::pointer p, std::size_t n) noexcept -> std::size_t {
            return FnMap(safe::in{src.data(), src.size()}, safe::end{src.data() + src.size()}, safe::out{p, n}, mode, loc);
        });
#  endif
#endif

#ifndef UNI_ALGO_NO_SHRINK_TO_FIT
        dst.shrink_to_fit();
#endif
    }

    return dst;
}

#if defined(UNI_ALGO_FORCE_CPP_ITERATORS)
template<typename Src, int(*FnComp)(typename Src::const_iterator, typename Src::const_iterator,
                                    typename Src::const_iterator, typename Src::const_iterator, bool)>
#elif defined(UNI_ALGO_FORCE_C_POINTERS)
template<typename Src, int(*FnComp)(typename Src::const_pointer, typename Src::const_pointer,
                                    typename Src::const_pointer, typename Src::const_pointer, bool)>
#else // Safe layer
template<typename Src, int(*FnComp)(safe::in<typename Src::const_pointer>, safe::end<typename Src::const_pointer>,
                                    safe::in<typename Src::const_pointer>, safe::end<typename Src::const_pointer>, bool)>
#endif
uaiw_constexpr int t_comp(const Src& src1, const Src& src2, bool caseless)
{
#if defined(UNI_ALGO_FORCE_CPP_ITERATORS)
    return FnComp(src1.cbegin(), src1.cend(),
                  src2.cbegin(), src2.cend(), caseless);
#elif defined(UNI_ALGO_FORCE_C_POINTERS)
    return FnComp(src1.data(), src1.data() + src1.size(),
                  src2.data(), src2.data() + src2.size(), caseless);
#else // Safe layer
    return FnComp(safe::in{src1.data(), src1.size()}, safe::end{src1.data() + src1.size()},
                  safe::in{src2.data(), src2.size()}, safe::end{src2.data() + src2.size()}, caseless);
#endif
}

#if defined(UNI_ALGO_FORCE_CPP_ITERATORS)
template<typename Src, bool(*FnFind)(typename Src::const_iterator, typename Src::const_iterator,
                                     typename Src::const_iterator, typename Src::const_iterator, bool, size_t*, size_t*)>
#elif defined(UNI_ALGO_FORCE_C_POINTERS)
template<typename Src, bool(*FnFind)(typename Src::const_pointer, typename Src::const_pointer,
                                     typename Src::const_pointer, typename Src::const_pointer, bool, size_t*, size_t*)>
#else // Safe layer
template<typename Src, bool(*FnFind)(safe::in<typename Src::const_pointer>, safe::end<typename Src::const_pointer>,
                                     safe::in<typename Src::const_pointer>, safe::end<typename Src::const_pointer>, bool, size_t*, size_t*)>
#endif
uaiw_constexpr una::found t_find(const Src& src1, const Src& src2, bool caseless)
{
    size_t found_pos = detail::impl_npos;
    size_t found_end = detail::impl_npos;

#if defined(UNI_ALGO_FORCE_CPP_ITERATORS)
    const bool ret = FnFind(src1.cbegin(), src1.cend(),
                            src2.cbegin(), src2.cend(), caseless, &found_pos, &found_end);
#elif defined(UNI_ALGO_FORCE_C_POINTERS)
    const bool ret = FnFind(src1.data(), src1.data() + src1.size(),
                            src2.data(), src2.data() + src2.size(), caseless, &found_pos, &found_end);
#else // Safe layer
    const bool ret = FnFind(safe::in{src1.data(), src1.size()}, safe::end{src1.data() + src1.size()},
                            safe::in{src2.data(), src2.size()}, safe::end{src2.data() + src2.size()}, caseless, &found_pos, &found_end);
#endif

    return ret ? una::found{found_pos, found_end} : una::found{};
}

} // namespace detail

namespace cases {

template<typename UTF8, typename Alloc = std::allocator<UTF8>>
uaiw_constexpr std::basic_string<UTF8, std::char_traits<UTF8>, Alloc>
to_lowercase_utf8(std::basic_string_view<UTF8> source, const Alloc& alloc = Alloc())
{
    static_assert(std::is_integral_v<UTF8>);

    return detail::t_map<std::basic_string<UTF8, std::char_traits<UTF8>, Alloc>, Alloc, std::basic_string_view<UTF8>,
            detail::impl_x_case_map_utf8, detail::impl_case_map_loc_utf8>(alloc, source,
            detail::impl_case_map_mode_lowercase);
}
template<typename UTF16, typename Alloc = std::allocator<UTF16>>
uaiw_constexpr std::basic_string<UTF16, std::char_traits<UTF16>, Alloc>
to_lowercase_utf16(std::basic_string_view<UTF16> source, const Alloc& alloc = Alloc())
{
    static_assert(std::is_integral_v<UTF16> && sizeof(UTF16) >= sizeof(char16_t));

    return detail::t_map<std::basic_string<UTF16, std::char_traits<UTF16>, Alloc>, Alloc, std::basic_string_view<UTF16>,
            detail::impl_x_case_map_utf16, detail::impl_case_map_loc_utf16>(alloc, source,
            detail::impl_case_map_mode_lowercase);
}
template<typename UTF8, typename Alloc = std::allocator<UTF8>>
uaiw_constexpr std::basic_string<UTF8, std::char_traits<UTF8>, Alloc>
to_uppercase_utf8(std::basic_string_view<UTF8> source, const Alloc& alloc = Alloc())
{
    static_assert(std::is_integral_v<UTF8>);

    return detail::t_map<std::basic_string<UTF8, std::char_traits<UTF8>, Alloc>, Alloc, std::basic_string_view<UTF8>,
            detail::impl_x_case_map_utf8, detail::impl_case_map_loc_utf8>(alloc, source,
            detail::impl_case_map_mode_uppercase);
}
template<typename UTF16, typename Alloc = std::allocator<UTF16>>
uaiw_constexpr std::basic_string<UTF16, std::char_traits<UTF16>, Alloc>
to_uppercase_utf16(std::basic_string_view<UTF16> source, const Alloc& alloc = Alloc())
{
    static_assert(std::is_integral_v<UTF16> && sizeof(UTF16) >= sizeof(char16_t));

    return detail::t_map<std::basic_string<UTF16, std::char_traits<UTF16>, Alloc>, Alloc, std::basic_string_view<UTF16>,
            detail::impl_x_case_map_utf16, detail::impl_case_map_loc_utf16>(alloc, source,
            detail::impl_case_map_mode_uppercase);
}
template<typename UTF8, typename Alloc = std::allocator<UTF8>>
uaiw_constexpr std::basic_string<UTF8, std::char_traits<UTF8>, Alloc>
to_casefold_utf8(std::basic_string_view<UTF8> source, const Alloc& alloc = Alloc())
{
    static_assert(std::is_integral_v<UTF8>);

    return detail::t_map<std::basic_string<UTF8, std::char_traits<UTF8>, Alloc>, Alloc, std::basic_string_view<UTF8>,
            detail::impl_x_case_map_utf8, detail::impl_case_map_loc_utf8>(alloc, source,
            detail::impl_case_map_mode_casefold);
}
template<typename UTF16, typename Alloc = std::allocator<UTF16>>
uaiw_constexpr std::basic_string<UTF16, std::char_traits<UTF16>, Alloc>
to_casefold_utf16(std::basic_string_view<UTF16> source, const Alloc& alloc = Alloc())
{
    static_assert(std::is_integral_v<UTF16> && sizeof(UTF16) >= sizeof(char16_t));

    return detail::t_map<std::basic_string<UTF16, std::char_traits<UTF16>, Alloc>, Alloc, std::basic_string_view<UTF16>,
            detail::impl_x_case_map_utf16, detail::impl_case_map_loc_utf16>(alloc, source,
            detail::impl_case_map_mode_casefold);
}

inline uaiw_constexpr std::string to_lowercase_utf8(std::string_view source)
{
    return to_lowercase_utf8<char>(source);
}
inline uaiw_constexpr std::string to_uppercase_utf8(std::string_view source)
{
    return to_uppercase_utf8<char>(source);
}
inline uaiw_constexpr std::string to_casefold_utf8(std::string_view source)
{
    return to_casefold_utf8<char>(source);
}
inline uaiw_constexpr std::u16string to_lowercase_utf16(std::u16string_view source)
{
    return to_lowercase_utf16<char16_t>(source);
}
inline uaiw_constexpr std::u16string to_uppercase_utf16(std::u16string_view source)
{
    return to_uppercase_utf16<char16_t>(source);
}
inline uaiw_constexpr std::u16string to_casefold_utf16(std::u16string_view source)
{
    return to_casefold_utf16<char16_t>(source);
}
#if WCHAR_MAX >= 0x7FFF && WCHAR_MAX <= 0xFFFF // 16-bit wchar_t
inline uaiw_constexpr std::wstring to_lowercase_utf16(std::wstring_view source)
{
    return to_lowercase_utf16<wchar_t>(source);
}
inline uaiw_constexpr std::wstring to_uppercase_utf16(std::wstring_view source)
{
    return to_uppercase_utf16<wchar_t>(source);
}
inline uaiw_constexpr std::wstring to_casefold_utf16(std::wstring_view source)
{
    return to_casefold_utf16<wchar_t>(source);
}
#endif // WCHAR_MAX >= 0x7FFF && WCHAR_MAX <= 0xFFFF

#ifndef UNI_ALGO_DISABLE_FULL_CASE
template<typename UTF8, typename Alloc = std::allocator<UTF8>>
uaiw_constexpr std::basic_string<UTF8, std::char_traits<UTF8>, Alloc>
to_lowercase_utf8(std::basic_string_view<UTF8> source, const una::locale& locale, const Alloc& alloc = Alloc())
{
    static_assert(std::is_integral_v<UTF8>);

    return detail::t_map<std::basic_string<UTF8, std::char_traits<UTF8>, Alloc>, Alloc, std::basic_string_view<UTF8>,
            detail::impl_x_case_map_utf8, detail::impl_case_map_locale_utf8>(alloc, source,
            detail::impl_case_map_mode_lowercase, static_cast<char32_t>(locale.get_language()));
}
template<typename UTF16, typename Alloc = std::allocator<UTF16>>
uaiw_constexpr std::basic_string<UTF16, std::char_traits<UTF16>, Alloc>
to_lowercase_utf16(std::basic_string_view<UTF16> source, const una::locale& locale, const Alloc& alloc = Alloc())
{
    static_assert(std::is_integral_v<UTF16> && sizeof(UTF16) >= sizeof(char16_t));

    return detail::t_map<std::basic_string<UTF16, std::char_traits<UTF16>, Alloc>, Alloc, std::basic_string_view<UTF16>,
            detail::impl_x_case_map_utf16, detail::impl_case_map_locale_utf16>(alloc, source,
            detail::impl_case_map_mode_lowercase, static_cast<char32_t>(locale.get_language()));
}
template<typename UTF8, typename Alloc = std::allocator<UTF8>>
uaiw_constexpr std::basic_string<UTF8, std::char_traits<UTF8>, Alloc>
to_uppercase_utf8(std::basic_string_view<UTF8> source, const una::locale& locale, const Alloc& alloc = Alloc())
{
    static_assert(std::is_integral_v<UTF8>);

    return detail::t_map<std::basic_string<UTF8, std::char_traits<UTF8>, Alloc>, Alloc, std::basic_string_view<UTF8>,
            detail::impl_x_case_map_utf8, detail::impl_case_map_locale_utf8>(alloc, source,
            detail::impl_case_map_mode_uppercase, static_cast<char32_t>(locale.get_language()));
}
template<typename UTF16, typename Alloc = std::allocator<UTF16>>
uaiw_constexpr std::basic_string<UTF16, std::char_traits<UTF16>, Alloc>
to_uppercase_utf16(std::basic_string_view<UTF16> source, const una::locale& locale, const Alloc& alloc = Alloc())
{
    static_assert(std::is_integral_v<UTF16> && sizeof(UTF16) >= sizeof(char16_t));

    return detail::t_map<std::basic_string<UTF16, std::char_traits<UTF16>, Alloc>, Alloc, std::basic_string_view<UTF16>,
            detail::impl_x_case_map_utf16, detail::impl_case_map_locale_utf16>(alloc, source,
            detail::impl_case_map_mode_uppercase, static_cast<char32_t>(locale.get_language()));
}
inline uaiw_constexpr std::string to_lowercase_utf8(std::string_view source, const una::locale& locale)
{
    return to_lowercase_utf8<char>(source, locale);
}
inline uaiw_constexpr std::string to_uppercase_utf8(std::string_view source, const una::locale& locale)
{
    return to_uppercase_utf8<char>(source, locale);
}
inline uaiw_constexpr std::u16string to_lowercase_utf16(std::u16string_view source, const una::locale& locale)
{
    return to_lowercase_utf16<char16_t>(source, locale);
}
inline uaiw_constexpr std::u16string to_uppercase_utf16(std::u16string_view source, const una::locale& locale)
{
    return to_uppercase_utf16<char16_t>(source, locale);
}
#if WCHAR_MAX >= 0x7FFF && WCHAR_MAX <= 0xFFFF // 16-bit wchar_t
inline uaiw_constexpr std::wstring to_lowercase_utf16(std::wstring_view source, const una::locale& locale)
{
    return to_lowercase_utf16<wchar_t>(source, locale);
}
inline uaiw_constexpr std::wstring to_uppercase_utf16(std::wstring_view source, const una::locale& locale)
{
    return to_uppercase_utf16<wchar_t>(source, locale);
}
#endif // WCHAR_MAX >= 0x7FFF && WCHAR_MAX <= 0xFFFF
#endif // UNI_ALGO_DISABLE_FULL_CASE

#ifndef UNI_ALGO_DISABLE_SEGMENT_WORD
template<typename UTF8, typename Alloc = std::allocator<UTF8>>
uaiw_constexpr std::basic_string<UTF8, std::char_traits<UTF8>, Alloc>
to_titlecase_utf8(std::basic_string_view<UTF8> source, const Alloc& alloc = Alloc())
{
    static_assert(std::is_integral_v<UTF8>);

    return detail::t_map<std::basic_string<UTF8, std::char_traits<UTF8>, Alloc>, Alloc, std::basic_string_view<UTF8>,
            detail::impl_x_case_map_utf8, detail::impl_case_map_loc_utf8>(alloc, source,
            detail::impl_case_map_mode_titlecase);
}
template<typename UTF16, typename Alloc = std::allocator<UTF16>>
uaiw_constexpr std::basic_string<UTF16, std::char_traits<UTF16>, Alloc>
to_titlecase_utf16(std::basic_string_view<UTF16> source, const Alloc& alloc = Alloc())
{
    static_assert(std::is_integral_v<UTF16> && sizeof(UTF16) >= sizeof(char16_t));

    return detail::t_map<std::basic_string<UTF16, std::char_traits<UTF16>, Alloc>, Alloc, std::basic_string_view<UTF16>,
            detail::impl_x_case_map_utf16, detail::impl_case_map_loc_utf16>(alloc, source,
            detail::impl_case_map_mode_titlecase);
}
inline uaiw_constexpr std::string to_titlecase_utf8(std::string_view source)
{
    return to_titlecase_utf8<char>(source);
}
inline uaiw_constexpr std::u16string to_titlecase_utf16(std::u16string_view source)
{
    return to_titlecase_utf16<char16_t>(source);
}
#if WCHAR_MAX >= 0x7FFF && WCHAR_MAX <= 0xFFFF // 16-bit wchar_t
inline uaiw_constexpr std::wstring to_titlecase_utf16(std::wstring_view source)
{
    return to_titlecase_utf16<wchar_t>(source);
}
#endif // WCHAR_MAX >= 0x7FFF && WCHAR_MAX <= 0xFFFF
#ifndef UNI_ALGO_DISABLE_FULL_CASE
template<typename UTF8, typename Alloc = std::allocator<UTF8>>
uaiw_constexpr std::basic_string<UTF8, std::char_traits<UTF8>, Alloc>
to_titlecase_utf8(std::basic_string_view<UTF8> source, const una::locale& locale, const Alloc& alloc = Alloc())
{
    static_assert(std::is_integral_v<UTF8>);

    return detail::t_map<std::basic_string<UTF8, std::char_traits<UTF8>, Alloc>, Alloc, std::basic_string_view<UTF8>,
            detail::impl_x_case_map_utf8, detail::impl_case_map_locale_utf8>(alloc, source,
            detail::impl_case_map_mode_titlecase, static_cast<char32_t>(locale.get_language()));
}
template<typename UTF16, typename Alloc = std::allocator<UTF16>>
uaiw_constexpr std::basic_string<UTF16, std::char_traits<UTF16>, Alloc>
to_titlecase_utf16(std::basic_string_view<UTF16> source, const una::locale& locale, const Alloc& alloc = Alloc())
{
    static_assert(std::is_integral_v<UTF16> && sizeof(UTF16) >= sizeof(char16_t));

    return detail::t_map<std::basic_string<UTF16, std::char_traits<UTF16>, Alloc>, Alloc, std::basic_string_view<UTF16>,
            detail::impl_x_case_map_utf16, detail::impl_case_map_locale_utf16>(alloc, source,
            detail::impl_case_map_mode_titlecase, static_cast<char32_t>(locale.get_language()));
}
inline uaiw_constexpr std::string to_titlecase_utf8(std::string_view source, const una::locale& locale)
{
    return to_titlecase_utf8<char>(source, locale);
}
inline uaiw_constexpr std::u16string to_titlecase_utf16(std::u16string_view source, const una::locale& locale)
{
    return to_titlecase_utf16<char16_t>(source, locale);
}
#if WCHAR_MAX >= 0x7FFF && WCHAR_MAX <= 0xFFFF // 16-bit wchar_t
inline uaiw_constexpr std::wstring to_titlecase_utf16(std::wstring_view source, const una::locale& locale)
{
    return to_titlecase_utf16<wchar_t>(source, locale);
}
#endif // WCHAR_MAX >= 0x7FFF && WCHAR_MAX <= 0xFFFF
#endif // UNI_ALGO_DISABLE_FULL_CASE
#endif // UNI_ALGO_DISABLE_SEGMENT_WORD

} // namespace cases

namespace casesens {

template<typename UTF8>
uaiw_constexpr int compare_utf8(std::basic_string_view<UTF8> string1, std::basic_string_view<UTF8> string2)
{
    static_assert(std::is_integral_v<UTF8>);

    return detail::t_comp<std::basic_string_view<UTF8>, detail::impl_case_compare_utf8>(string1, string2, false);
}

template<typename UTF16>
uaiw_constexpr int compare_utf16(std::basic_string_view<UTF16> string1, std::basic_string_view<UTF16> string2)
{
    static_assert(std::is_integral_v<UTF16> && sizeof(UTF16) >= sizeof(char16_t));

    return detail::t_comp<std::basic_string_view<UTF16>, detail::impl_case_compare_utf16>(string1, string2, false);
}

#ifndef UNI_ALGO_DISABLE_COLLATE
template<typename UTF8>
uaiw_constexpr int collate_utf8(std::basic_string_view<UTF8> string1, std::basic_string_view<UTF8> string2)
{
    static_assert(std::is_integral_v<UTF8>);

    return detail::t_comp<std::basic_string_view<UTF8>, detail::impl_case_collate_utf8>(string1, string2, false);
}

template<typename UTF16>
uaiw_constexpr int collate_utf16(std::basic_string_view<UTF16> string1, std::basic_string_view<UTF16> string2)
{
    static_assert(std::is_integral_v<UTF16> && sizeof(UTF16) >= sizeof(char16_t));

    return detail::t_comp<std::basic_string_view<UTF16>, detail::impl_case_collate_utf16>(string1, string2, false);
}
#endif // UNI_ALGO_DISABLE_COLLATE

template<typename UTF8>
uaiw_constexpr una::found find_utf8(std::basic_string_view<UTF8> string1, std::basic_string_view<UTF8> string2)
{
    static_assert(std::is_integral_v<UTF8>);

    return detail::t_find<std::basic_string_view<UTF8>, detail::impl_case_find_utf8>(string1, string2, false);
}

template<typename UTF16>
uaiw_constexpr una::found find_utf16(std::basic_string_view<UTF16> string1, std::basic_string_view<UTF16> string2)
{
    static_assert(std::is_integral_v<UTF16> && sizeof(UTF16) >= sizeof(char16_t));

    return detail::t_find<std::basic_string_view<UTF16>, detail::impl_case_find_utf16>(string1, string2, false);
}

inline uaiw_constexpr int compare_utf8(std::string_view string1, std::string_view string2)
{
    return compare_utf8<char>(string1, string2);
}
#ifndef UNI_ALGO_DISABLE_COLLATE
inline uaiw_constexpr int collate_utf8(std::string_view string1, std::string_view string2)
{
    return collate_utf8<char>(string1, string2);
}
#endif // UNI_ALGO_DISABLE_COLLATE
inline uaiw_constexpr una::found find_utf8(std::string_view string1, std::string_view string2)
{
    return find_utf8<char>(string1, string2);
}
inline uaiw_constexpr int compare_utf16(std::u16string_view string1, std::u16string_view string2)
{
    return compare_utf16<char16_t>(string1, string2);
}
#ifndef UNI_ALGO_DISABLE_COLLATE
inline uaiw_constexpr int collate_utf16(std::u16string_view string1, std::u16string_view string2)
{
    return collate_utf16<char16_t>(string1, string2);
}
#endif // UNI_ALGO_DISABLE_COLLATE
inline uaiw_constexpr una::found find_utf16(std::u16string_view string1, std::u16string_view string2)
{
    return find_utf16<char16_t>(string1, string2);
}
#if WCHAR_MAX >= 0x7FFF && WCHAR_MAX <= 0xFFFF // 16-bit wchar_t
inline uaiw_constexpr int compare_utf16(std::wstring_view string1, std::wstring_view string2)
{
    return compare_utf16<wchar_t>(string1, string2);
}
#ifndef UNI_ALGO_DISABLE_COLLATE
inline uaiw_constexpr int collate_utf16(std::wstring_view string1, std::wstring_view string2)
{
    return collate_utf16<wchar_t>(string1, string2);
}
#endif // UNI_ALGO_DISABLE_COLLATE
inline uaiw_constexpr una::found find_utf16(std::wstring_view string1, std::wstring_view string2)
{
    return find_utf16<wchar_t>(string1, string2);
}
#endif // WCHAR_MAX >= 0x7FFF && WCHAR_MAX <= 0xFFFF

#ifdef UNI_ALGO_EXPERIMENTAL
#ifndef UNI_ALGO_DISABLE_COLLATE
template<typename UTF8, typename Alloc = std::allocator<char>>
uaiw_constexpr std::basic_string<char, std::char_traits<char>, Alloc>
sortkey_utf8(std::basic_string_view<UTF8> source, const Alloc& alloc = Alloc())
{
    static_assert(std::is_integral_v<UTF8>);

    return detail::t_map<std::basic_string<char, std::char_traits<char>, Alloc>, Alloc, std::basic_string_view<UTF8>,
            detail::impl_x_case_sortkey_utf8, detail::impl_case_sortkey_loc_utf8>(alloc, source, false);
}
template<typename UTF16, typename Alloc = std::allocator<char>>
uaiw_constexpr std::basic_string<char, std::char_traits<char>, Alloc>
sortkey_utf16(std::basic_string_view<UTF16> source, const Alloc& alloc = Alloc())
{
    static_assert(std::is_integral_v<UTF16> && sizeof(UTF16) >= sizeof(char16_t));

    return detail::t_map<std::basic_string<char, std::char_traits<char>, Alloc>, Alloc, std::basic_string_view<UTF16>,
            detail::impl_x_case_sortkey_utf16, detail::impl_case_sortkey_loc_utf16>(alloc, source, false);
}
inline uaiw_constexpr std::string sortkey_utf8(std::string_view source)
{
    return sortkey_utf8<char>(source);
}
inline uaiw_constexpr std::string sortkey_utf16(std::u16string_view source)
{
    return sortkey_utf16<char16_t>(source);
}
inline uaiw_constexpr std::string sortkey_utf16(std::wstring_view source)
{
    return sortkey_utf16<wchar_t>(source);
}
#endif // UNI_ALGO_DISABLE_COLLATE
#endif // UNI_ALGO_EXPERIMENTAL

} // namespace casesens

namespace caseless {

template<typename UTF8>
uaiw_constexpr int compare_utf8(std::basic_string_view<UTF8> string1, std::basic_string_view<UTF8> string2)
{
    static_assert(std::is_integral_v<UTF8>);

    return detail::t_comp<std::basic_string_view<UTF8>, detail::impl_case_compare_utf8>(string1, string2, true);
}

template<typename UTF16>
uaiw_constexpr int compare_utf16(std::basic_string_view<UTF16> string1, std::basic_string_view<UTF16> string2)
{
    static_assert(std::is_integral_v<UTF16> && sizeof(UTF16) >= sizeof(char16_t));

    return detail::t_comp<std::basic_string_view<UTF16>, detail::impl_case_compare_utf16>(string1, string2, true);
}

#ifndef UNI_ALGO_DISABLE_COLLATE
template<typename UTF8>
uaiw_constexpr int collate_utf8(std::basic_string_view<UTF8> string1, std::basic_string_view<UTF8> string2)
{
    static_assert(std::is_integral_v<UTF8>);

    return detail::t_comp<std::basic_string_view<UTF8>, detail::impl_case_collate_utf8>(string1, string2, true);
}

template<typename UTF16>
uaiw_constexpr int collate_utf16(std::basic_string_view<UTF16> string1, std::basic_string_view<UTF16> string2)
{
    static_assert(std::is_integral_v<UTF16> && sizeof(UTF16) >= sizeof(char16_t));

    return detail::t_comp<std::basic_string_view<UTF16>, detail::impl_case_collate_utf16>(string1, string2, true);
}
#endif // UNI_ALGO_DISABLE_COLLATE

template<typename UTF8>
uaiw_constexpr una::found find_utf8(std::basic_string_view<UTF8> string1, std::basic_string_view<UTF8> string2)
{
    static_assert(std::is_integral_v<UTF8>);

    return detail::t_find<std::basic_string_view<UTF8>, detail::impl_case_find_utf8>(string1, string2, true);
}

template<typename UTF16>
uaiw_constexpr una::found find_utf16(std::basic_string_view<UTF16> string1, std::basic_string_view<UTF16> string2)
{
    static_assert(std::is_integral_v<UTF16> && sizeof(UTF16) >= sizeof(char16_t));

    return detail::t_find<std::basic_string_view<UTF16>, detail::impl_case_find_utf16>(string1, string2, true);
}

inline uaiw_constexpr int compare_utf8(std::string_view string1, std::string_view string2)
{
    return compare_utf8<char>(string1, string2);
}
#ifndef UNI_ALGO_DISABLE_COLLATE
inline uaiw_constexpr int collate_utf8(std::string_view string1, std::string_view string2)
{
    return collate_utf8<char>(string1, string2);
}
#endif // UNI_ALGO_DISABLE_COLLATE
inline uaiw_constexpr una::found find_utf8(std::string_view string1, std::string_view string2)
{
    return find_utf8<char>(string1, string2);
}
inline uaiw_constexpr int compare_utf16(std::u16string_view string1, std::u16string_view string2)
{
    return compare_utf16<char16_t>(string1, string2);
}
#ifndef UNI_ALGO_DISABLE_COLLATE
inline uaiw_constexpr int collate_utf16(std::u16string_view string1, std::u16string_view string2)
{
    return collate_utf16<char16_t>(string1, string2);
}
#endif // UNI_ALGO_DISABLE_COLLATE
inline uaiw_constexpr una::found find_utf16(std::u16string_view string1, std::u16string_view string2)
{
    return find_utf16<char16_t>(string1, string2);
}
#if WCHAR_MAX >= 0x7FFF && WCHAR_MAX <= 0xFFFF // 16-bit wchar_t
inline uaiw_constexpr int compare_utf16(std::wstring_view string1, std::wstring_view string2)
{
    return compare_utf16<wchar_t>(string1, string2);
}
#ifndef UNI_ALGO_DISABLE_COLLATE
inline uaiw_constexpr int collate_utf16(std::wstring_view string1, std::wstring_view string2)
{
    return collate_utf16<wchar_t>(string1, string2);
}
#endif // UNI_ALGO_DISABLE_COLLATE
inline uaiw_constexpr una::found find_utf16(std::wstring_view string1, std::wstring_view string2)
{
    return find_utf16<wchar_t>(string1, string2);
}
#endif // WCHAR_MAX >= 0x7FFF && WCHAR_MAX <= 0xFFFF

#ifdef UNI_ALGO_EXPERIMENTAL

#ifndef UNI_ALGO_DISABLE_COLLATE
template<typename UTF8, typename Alloc = std::allocator<char>>
uaiw_constexpr std::basic_string<char, std::char_traits<char>, Alloc>
sortkey_utf8(std::basic_string_view<UTF8> source, const Alloc& alloc = Alloc())
{
    static_assert(std::is_integral_v<UTF8>);

    return detail::t_map<std::basic_string<char, std::char_traits<char>, Alloc>, Alloc, std::basic_string_view<UTF8>,
            detail::impl_x_case_sortkey_utf8, detail::impl_case_sortkey_loc_utf8>(alloc, source, true);
}
template<typename UTF16, typename Alloc = std::allocator<char>>
uaiw_constexpr std::basic_string<char, std::char_traits<char>, Alloc>
sortkey_utf16(std::basic_string_view<UTF16> source, const Alloc& alloc = Alloc())
{
    static_assert(std::is_integral_v<UTF16> && sizeof(UTF16) >= sizeof(char16_t));

    return detail::t_map<std::basic_string<char, std::char_traits<char>, Alloc>, Alloc, std::basic_string_view<UTF16>,
            detail::impl_x_case_sortkey_utf16, detail::impl_case_sortkey_loc_utf16>(alloc, source, true);
}
inline uaiw_constexpr std::string sortkey_utf8(std::string_view source)
{
    return sortkey_utf8<char>(source);
}
inline uaiw_constexpr std::string sortkey_utf16(std::u16string_view source)
{
    return sortkey_utf16<char16_t>(source);
}
inline uaiw_constexpr std::string sortkey_utf16(std::wstring_view source)
{
    return sortkey_utf16<wchar_t>(source);
}
#endif // UNI_ALGO_DISABLE_COLLATE

template<typename UTF8>
uaiw_constexpr bool like_utf8(std::basic_string_view<UTF8> string1, std::basic_string_view<UTF8> string2, char32_t escape = 0)
{
#if defined(UNI_ALGO_FORCE_CPP_ITERATORS)
    return detail::impl_case_like_utf8(string1.cbegin(), string1.cend(),
                                       string2.cbegin(), string2.cend(), true, '%', '_', escape);
#elif defined(UNI_ALGO_FORCE_C_POINTERS)
    return detail::impl_case_like_utf8(string1.data(), string1.data() + string1.size(),
                                       string2.data(), string2.data() + string2.size(), true, '%', '_', escape);
#else // Safe layer
    namespace safe = detail::safe;
    return detail::impl_case_like_utf8(safe::in{string1.data(), string1.size()}, safe::end{string1.data() + string1.size()},
                                       safe::in{string2.data(), string2.size()}, safe::end{string2.data() + string2.size()}, true, '%', '_', escape);
#endif
}
inline uaiw_constexpr bool like_utf8(std::string_view string1, std::string_view string2, char32_t escape = 0)
{
    return like_utf8<char>(string1, string2, escape);
}

#endif // UNI_ALGO_EXPERIMENTAL

} // namespace caseless

#ifdef __cpp_lib_char8_t

namespace cases {

inline uaiw_constexpr std::u8string to_lowercase_utf8(std::u8string_view source)
{
    return to_lowercase_utf8<char8_t>(source);
}
inline uaiw_constexpr std::u8string to_uppercase_utf8(std::u8string_view source)
{
    return to_uppercase_utf8<char8_t>(source);
}
inline uaiw_constexpr std::u8string to_casefold_utf8(std::u8string_view source)
{
    return to_casefold_utf8<char8_t>(source);
}
inline uaiw_constexpr std::u8string to_lowercase_utf8(std::u8string_view source, const una::locale& locale)
{
    return to_lowercase_utf8<char8_t>(source, locale);
}
inline uaiw_constexpr std::u8string to_uppercase_utf8(std::u8string_view source, const una::locale& locale)
{
    return to_uppercase_utf8<char8_t>(source, locale);
}
#ifndef UNI_ALGO_DISABLE_SEGMENT_WORD
#ifndef UNI_ALGO_DISABLE_FULL_CASE
inline uaiw_constexpr std::u8string to_titlecase_utf8(std::u8string_view source)
{
    return to_titlecase_utf8<char8_t>(source);
}
inline uaiw_constexpr std::u8string to_titlecase_utf8(std::u8string_view source, const una::locale& locale)
{
    return to_titlecase_utf8<char8_t>(source, locale);
}
#endif // UNI_ALGO_DISABLE_FULL_CASE
#endif // UNI_ALGO_DISABLE_SEGMENT_WORD

} // namespace cases

namespace casesens {

inline uaiw_constexpr int compare_utf8(std::u8string_view string1, std::u8string_view string2)
{
    return compare_utf8<char8_t>(string1, string2);
}
#ifndef UNI_ALGO_DISABLE_COLLATE
inline uaiw_constexpr int collate_utf8(std::u8string_view string1, std::u8string_view string2)
{
    return collate_utf8<char8_t>(string1, string2);
}
#endif // UNI_ALGO_DISABLE_COLLATE
inline uaiw_constexpr una::found find_utf8(std::u8string_view string1, std::u8string_view string2)
{
    return find_utf8<char8_t>(string1, string2);
}

} // namespace casesens

namespace caseless {

inline uaiw_constexpr int compare_utf8(std::u8string_view string1, std::u8string_view string2)
{
    return compare_utf8<char8_t>(string1, string2);
}
#ifndef UNI_ALGO_DISABLE_COLLATE
inline uaiw_constexpr int collate_utf8(std::u8string_view string1, std::u8string_view string2)
{
    return collate_utf8<char8_t>(string1, string2);
}
#endif // UNI_ALGO_DISABLE_COLLATE
inline uaiw_constexpr una::found find_utf8(std::u8string_view string1, std::u8string_view string2)
{
    return find_utf8<char8_t>(string1, string2);
}

} // namespace caseless

#endif // __cpp_lib_char8_t

// ----------
// PROPERTIES
// ----------

namespace codepoint {

class prop_case
{
private:
    detail::type_codept data = 0;

public:
    uaiw_constexpr prop_case() = delete;
    uaiw_constexpr explicit prop_case(char32_t c) noexcept : data{detail::impl_case_get_prop(c)} {}

    uaiw_constexpr bool Lowercase() const noexcept
    {
        // The Unicode Standard: DerivedCoreProperties.txt -> Lowercase
        return detail::impl_case_is_lowercase_prop(data);
    }
    uaiw_constexpr bool Uppercase() const noexcept
    {
        // The Unicode Standard: DerivedCoreProperties.txt -> Uppercase
        return detail::impl_case_is_uppercase_prop(data);
    }
    uaiw_constexpr bool Cased() const noexcept
    {
        // The Unicode Standard: DerivedCoreProperties.txt -> Cased
        return detail::impl_case_is_cased_prop(data);
    }
    uaiw_constexpr bool Case_Ignorable() const noexcept
    {
        // The Unicode Standard: DerivedCoreProperties.txt -> Case_Ignorable
        return detail::impl_case_is_case_ignorable_prop(data);
    }
    uaiw_constexpr bool Soft_Dotted() const noexcept
    {
        // The Unicode Standard: PropList.txt -> Soft_Dotted
        return detail::impl_case_is_soft_dotted_prop(data);
    }
};

inline uaiw_constexpr bool is_lowercase(char32_t c) noexcept
{
    return prop_case{c}.Lowercase();
}

inline uaiw_constexpr bool is_lowercase(const prop_case& p) noexcept
{
    return p.Lowercase();
}

inline uaiw_constexpr bool is_uppercase(char32_t c) noexcept
{
    return prop_case{c}.Uppercase();
}

inline uaiw_constexpr bool is_uppercase(const prop_case& p) noexcept
{
    return p.Uppercase();
}

inline uaiw_constexpr char32_t to_simple_lowercase(char32_t c) noexcept
{
    return detail::impl_case_to_simple_lowercase(c);
}

inline uaiw_constexpr char32_t to_simple_uppercase(char32_t c) noexcept
{
    return detail::impl_case_to_simple_uppercase(c);
}

inline uaiw_constexpr char32_t to_simple_casefold(char32_t c) noexcept
{
    return detail::impl_case_to_simple_casefold(c);
}

#ifndef UNI_ALGO_DISABLE_SEGMENT_WORD
inline uaiw_constexpr char32_t to_simple_titlecase(char32_t c) noexcept
{
    return detail::impl_case_to_simple_titlecase(c);
}
#endif // UNI_ALGO_DISABLE_SEGMENT_WORD

#ifndef UNI_ALGO_DISABLE_FULL_CASE

inline uaiw_constexpr std::u32string to_lowercase_u32(char32_t c)
{
    std::u32string dst;
    dst.resize(detail::impl_max_case_expand);
#if defined(UNI_ALGO_FORCE_CPP_ITERATORS)
    dst.resize(detail::impl_case_to_lowercase(c, dst.begin()));
#elif defined(UNI_ALGO_FORCE_C_POINTERS)
    dst.resize(detail::impl_case_to_lowercase(c, dst.data()));
#else // Safe layer
    dst.resize(detail::impl_case_to_lowercase(c, detail::safe::out{dst.data(), dst.size()}));
#endif
    return dst;
}

inline uaiw_constexpr std::u32string to_uppercase_u32(char32_t c)
{
    std::u32string dst;
    dst.resize(detail::impl_max_case_expand);
#if defined(UNI_ALGO_FORCE_CPP_ITERATORS)
    dst.resize(detail::impl_case_to_uppercase(c, dst.begin()));
#elif defined(UNI_ALGO_FORCE_C_POINTERS)
    dst.resize(detail::impl_case_to_uppercase(c, dst.data()));
#else // Safe layer
    dst.resize(detail::impl_case_to_uppercase(c, detail::safe::out{dst.data(), dst.size()}));
#endif
    return dst;
}

inline uaiw_constexpr std::u32string to_casefold_u32(char32_t c)
{
    std::u32string dst;
    dst.resize(detail::impl_max_case_expand);
#if defined(UNI_ALGO_FORCE_CPP_ITERATORS)
    dst.resize(detail::impl_case_to_casefold(c, dst.begin()));
#elif defined(UNI_ALGO_FORCE_C_POINTERS)
    dst.resize(detail::impl_case_to_casefold(c, dst.data()));
#else // Safe layer
    dst.resize(detail::impl_case_to_casefold(c, detail::safe::out{dst.data(), dst.size()}));
#endif
    return dst;
}

#ifndef UNI_ALGO_DISABLE_SEGMENT_WORD
inline uaiw_constexpr std::u32string to_titlecase_u32(char32_t c)
{
    std::u32string dst;
    dst.resize(detail::impl_max_case_expand);
#if defined(UNI_ALGO_FORCE_CPP_ITERATORS)
    dst.resize(detail::impl_case_to_titlecase(c, dst.begin()));
#elif defined(UNI_ALGO_FORCE_C_POINTERS)
    dst.resize(detail::impl_case_to_titlecase(c, dst.data()));
#else // Safe layer
    dst.resize(detail::impl_case_to_titlecase(c, detail::safe::out{dst.data(), dst.size()}));
#endif
    return dst;
}
#endif // UNI_ALGO_DISABLE_SEGMENT_WORD

#endif // UNI_ALGO_DISABLE_FULL_CASE

} // namespace codepoint

} // namespace una


// AMALGAMATION: uni_algo/script.h


#ifdef UNI_ALGO_DISABLE_SCRIPT
#error "Script module is disabled via define UNI_ALGO_DISABLE_SCRIPT"
#endif

//!#include "config.h"
//!#include "internal/safe_layer.h"

// Clang-Tidy thinks that locale.h form C is included here
// NOLINTNEXTLINE(modernize-deprecated-headers, hicpp-deprecated-headers)
//!#include "locale.h"

//!#include "impl/impl_script.h"

namespace una::codepoint {

inline uaiw_constexpr una::locale::script get_script(char32_t c) noexcept
{
    return detail::locale_friend::script_from_value(detail::impl_script_get_script(c));
}

inline uaiw_constexpr bool has_script(char32_t c, una::locale::script script) noexcept
{
    return detail::impl_script_has_script(c, static_cast<char32_t>(script));
}

} // namespace una::codepoint


// AMALGAMATION: uni_algo/prop.h


#ifdef UNI_ALGO_DISABLE_PROP
#error "Property module is disabled via define UNI_ALGO_DISABLE_PROP"
#endif

//!#include "config.h"
//!#include "internal/safe_layer.h"

//!#include "impl/impl_prop.h"

namespace una::codepoint {

// REPLACEMENT CHARACTER U+FFFD
inline constexpr char32_t replacement_char = detail::impl_prop_replacement_char;
// The last possible code point U+10FFFF
inline constexpr char32_t max_value = detail::impl_prop_max_value;
// Total number of code points 0x110000
inline constexpr char32_t total_number = detail::impl_prop_total_number;

enum class general_category : unsigned char {Cn = 0,
                                             Lu,Ll,Lt,Lm,Lo,
                                             Mn,Mc,Me,
                                             Nd,Nl,No,
                                             Pc,Pd,Ps,Pe,Pi,Pf,Po,
                                             Sm,Sc,Sk,So,
                                             Zs,Zl,Zp,
                                             Cc,Cf,Cs,Co};

class prop
{
    friend uaiw_constexpr general_category get_general_category(const prop& p) noexcept;

private:
    detail::type_codept data = 0;

public:
    uaiw_constexpr prop() = delete;
    uaiw_constexpr explicit prop(char32_t c) noexcept : data{detail::impl_prop_get_prop(c)} {}
    // TODO: We can cheat here to make the size of the class smaller because
    // we know that low-level uses only 8-bit for this property but I'm not sure it's worth it
    // data{static_cast<unsigned char>(detail::impl_prop_get_prop(c))}
    // and make data unsigned char
    // And No, I don't want to change low-level for this I want low-level always to return
    // property data in type_codept because everything related to code point uses it there.
    // --- Added later ---
    // Actually it might be better to redesign the low-level for this and use different types for properties there,
    // there are some parts of the low-level where it will make structs smaller too for example text segmentation.
    // Or it might be better to fix problems with structs with casts and keep property type always 32-bit for consistency.

    // https://www.unicode.org/reports/tr44/#General_Category_Values

    uaiw_constexpr bool General_Category_Lu() const noexcept { return detail::impl_prop_get_gc_prop(data) == detail::impl_General_Category_Lu; }
    uaiw_constexpr bool General_Category_Ll() const noexcept { return detail::impl_prop_get_gc_prop(data) == detail::impl_General_Category_Ll; }
    uaiw_constexpr bool General_Category_Lt() const noexcept { return detail::impl_prop_get_gc_prop(data) == detail::impl_General_Category_Lt; }
    uaiw_constexpr bool General_Category_Lm() const noexcept { return detail::impl_prop_get_gc_prop(data) == detail::impl_General_Category_Lm; }
    uaiw_constexpr bool General_Category_Lo() const noexcept { return detail::impl_prop_get_gc_prop(data) == detail::impl_General_Category_Lo; }

    uaiw_constexpr bool General_Category_Mn() const noexcept { return detail::impl_prop_get_gc_prop(data) == detail::impl_General_Category_Mn; }
    uaiw_constexpr bool General_Category_Mc() const noexcept { return detail::impl_prop_get_gc_prop(data) == detail::impl_General_Category_Mc; }
    uaiw_constexpr bool General_Category_Me() const noexcept { return detail::impl_prop_get_gc_prop(data) == detail::impl_General_Category_Me; }

    uaiw_constexpr bool General_Category_Nd() const noexcept { return detail::impl_prop_get_gc_prop(data) == detail::impl_General_Category_Nd; }
    uaiw_constexpr bool General_Category_Nl() const noexcept { return detail::impl_prop_get_gc_prop(data) == detail::impl_General_Category_Nl; }
    uaiw_constexpr bool General_Category_No() const noexcept { return detail::impl_prop_get_gc_prop(data) == detail::impl_General_Category_No; }

    uaiw_constexpr bool General_Category_Pc() const noexcept { return detail::impl_prop_get_gc_prop(data) == detail::impl_General_Category_Pc; }
    uaiw_constexpr bool General_Category_Pd() const noexcept { return detail::impl_prop_get_gc_prop(data) == detail::impl_General_Category_Pd; }
    uaiw_constexpr bool General_Category_Ps() const noexcept { return detail::impl_prop_get_gc_prop(data) == detail::impl_General_Category_Ps; }
    uaiw_constexpr bool General_Category_Pe() const noexcept { return detail::impl_prop_get_gc_prop(data) == detail::impl_General_Category_Pe; }
    uaiw_constexpr bool General_Category_Pi() const noexcept { return detail::impl_prop_get_gc_prop(data) == detail::impl_General_Category_Pi; }
    uaiw_constexpr bool General_Category_Pf() const noexcept { return detail::impl_prop_get_gc_prop(data) == detail::impl_General_Category_Pf; }
    uaiw_constexpr bool General_Category_Po() const noexcept { return detail::impl_prop_get_gc_prop(data) == detail::impl_General_Category_Po; }

    uaiw_constexpr bool General_Category_Sm() const noexcept { return detail::impl_prop_get_gc_prop(data) == detail::impl_General_Category_Sm; }
    uaiw_constexpr bool General_Category_Sc() const noexcept { return detail::impl_prop_get_gc_prop(data) == detail::impl_General_Category_Sc; }
    uaiw_constexpr bool General_Category_Sk() const noexcept { return detail::impl_prop_get_gc_prop(data) == detail::impl_General_Category_Sk; }
    uaiw_constexpr bool General_Category_So() const noexcept { return detail::impl_prop_get_gc_prop(data) == detail::impl_General_Category_So; }

    uaiw_constexpr bool General_Category_Zs() const noexcept { return detail::impl_prop_get_gc_prop(data) == detail::impl_General_Category_Zs; }
    uaiw_constexpr bool General_Category_Zl() const noexcept { return detail::impl_prop_get_gc_prop(data) == detail::impl_General_Category_Zl; }
    uaiw_constexpr bool General_Category_Zp() const noexcept { return detail::impl_prop_get_gc_prop(data) == detail::impl_General_Category_Zp; }

    uaiw_constexpr bool General_Category_Cc() const noexcept { return detail::impl_prop_get_gc_prop(data) == detail::impl_General_Category_Cc; }
    uaiw_constexpr bool General_Category_Cf() const noexcept { return detail::impl_prop_get_gc_prop(data) == detail::impl_General_Category_Cf; }
    uaiw_constexpr bool General_Category_Cs() const noexcept { return detail::impl_prop_get_gc_prop(data) == detail::impl_General_Category_Cs; }
    uaiw_constexpr bool General_Category_Co() const noexcept { return detail::impl_prop_get_gc_prop(data) == detail::impl_General_Category_Co; }
    uaiw_constexpr bool General_Category_Cn() const noexcept { return detail::impl_prop_get_gc_prop(data) == detail::impl_General_Category_Cn; }

    uaiw_constexpr bool General_Category_LC() const noexcept
    {
        const detail::type_codept gc = detail::impl_prop_get_gc_prop(data);
        return gc >= detail::impl_General_Category_Lu && gc <= detail::impl_General_Category_Lt;
    }
    uaiw_constexpr bool General_Category_L() const noexcept
    {
        const detail::type_codept gc = detail::impl_prop_get_gc_prop(data);
        return gc >= detail::impl_General_Category_Lu && gc <= detail::impl_General_Category_Lo;
    }
    uaiw_constexpr bool General_Category_M() const noexcept
    {
        const detail::type_codept gc = detail::impl_prop_get_gc_prop(data);
        return gc >= detail::impl_General_Category_Mn && gc <= detail::impl_General_Category_Me;
    }
    uaiw_constexpr bool General_Category_N() const noexcept
    {
        const detail::type_codept gc = detail::impl_prop_get_gc_prop(data);
        return gc >= detail::impl_General_Category_Nd && gc <= detail::impl_General_Category_No;
    }
    uaiw_constexpr bool General_Category_P() const noexcept
    {
        const detail::type_codept gc = detail::impl_prop_get_gc_prop(data);
        return gc >= detail::impl_General_Category_Pc && gc <= detail::impl_General_Category_Po;
    }
    uaiw_constexpr bool General_Category_S() const noexcept
    {
        const detail::type_codept gc = detail::impl_prop_get_gc_prop(data);
        return gc >= detail::impl_General_Category_Sm && gc <= detail::impl_General_Category_So;
    }
    uaiw_constexpr bool General_Category_Z() const noexcept
    {
        const detail::type_codept gc = detail::impl_prop_get_gc_prop(data);
        return gc >= detail::impl_General_Category_Zs && gc <= detail::impl_General_Category_Zp;
    }
    uaiw_constexpr bool General_Category_C() const noexcept
    {
        const detail::type_codept gc = detail::impl_prop_get_gc_prop(data);
        return (gc >= detail::impl_General_Category_Cc && gc <= detail::impl_General_Category_Co) ||
                gc == detail::impl_General_Category_Cn;
    }

    // https://www.unicode.org/glossary/#code_point_type
    // Seven fundamental classes of code points in The Unicode Standard:
    // Graphic, Format, Control, Private-Use, Surrogate, Noncharacter, Reserved.

    uaiw_constexpr bool Noncharacter_Code_Point() const noexcept
    {
        // https://www.unicode.org/glossary/#noncharacter
        return detail::impl_prop_is_noncharacter_prop(data);
    }
    uaiw_constexpr bool Surrogate() const noexcept
    {
        // https://www.unicode.org/glossary/#surrogate_code_point
        return General_Category_Cs();
    }
    uaiw_constexpr bool Private_Use() const noexcept
    {
        // https://www.unicode.org/glossary/#private_use_code_point
        return General_Category_Co();
    }
    uaiw_constexpr bool Control() const noexcept
    {
        // https://www.unicode.org/glossary/#control_codes
        return General_Category_Cc();
    }
    uaiw_constexpr bool Graphic() const noexcept
    {
        // https://www.unicode.org/glossary/#graphic_character
        return detail::impl_prop_is_graphic_prop(data);
    }
    uaiw_constexpr bool Format() const noexcept
    {
        // https://www.unicode.org/glossary/#format_character
        return detail::impl_prop_is_format_prop(data);
    }
    uaiw_constexpr bool Reserved() const noexcept
    {
        // https://www.unicode.org/glossary/#reserved_code_point
        return detail::impl_prop_is_reserved_prop(data);
    }

    // Other properties

    uaiw_constexpr bool White_Space() const noexcept
    {
        // The Unicode Standard: PropList.txt -> White_Space
        return detail::impl_prop_is_white_space_prop(data);
    }
    uaiw_constexpr bool Alphabetic() const noexcept
    {
        // The Unicode Standard: DerivedCoreProperties.txt -> Alphabetic
        return detail::impl_prop_is_alphabetic_prop(data);
    }
    uaiw_constexpr bool Numeric() const noexcept
    {
        // Code points with General_Category=Number (Nd | Nl | No)
        return General_Category_N();
    }

#ifdef UNI_ALGO_EXPERIMENTAL
    // This might be usefull for tests
    //uaiw_constexpr unsigned char General_Category() const noexcept { return static_cast<unsigned char>(detail::impl_prop_get_gc_prop(data)); }
#endif
};

inline uaiw_constexpr general_category get_general_category(char32_t c) noexcept
{
    return static_cast<general_category>(detail::impl_prop_get_gc_prop(detail::impl_prop_get_prop(c)));
}

inline uaiw_constexpr general_category get_general_category(const prop& p) noexcept
{
    return static_cast<general_category>(detail::impl_prop_get_gc_prop(p.data));
}

inline uaiw_constexpr bool is_alphabetic(char32_t c) noexcept
{
    return prop{c}.Alphabetic();
}

inline uaiw_constexpr bool is_alphabetic(const prop& p) noexcept
{
    return p.Alphabetic();
}

inline uaiw_constexpr bool is_numeric(char32_t c) noexcept
{
    return prop{c}.Numeric();
}

inline uaiw_constexpr bool is_numeric(const prop& p) noexcept
{
    return p.Numeric();
}

inline uaiw_constexpr bool is_alphanumeric(char32_t c) noexcept
{
    const prop p{c};

    return p.Alphabetic() || p.Numeric();
}

inline uaiw_constexpr bool is_alphanumeric(const prop& p) noexcept
{
    return p.Alphabetic() || p.Numeric();
}

inline uaiw_constexpr bool is_whitespace(char32_t c) noexcept
{
    return prop{c}.White_Space();
}

inline uaiw_constexpr bool is_whitespace(const prop& p) noexcept
{
    return p.White_Space();
}

inline uaiw_constexpr bool is_reserved(char32_t c) noexcept
{
    // https://www.unicode.org/glossary/#reserved_code_point
    return prop{c}.Reserved();
}

inline uaiw_constexpr bool is_reserved(const prop& p) noexcept
{
    // https://www.unicode.org/glossary/#reserved_code_point
    return p.Reserved();
}

inline uaiw_constexpr bool is_valid(char32_t c) noexcept
{
    // https://www.unicode.org/glossary/#code_point
    return detail::impl_prop_is_valid(c);
}

inline uaiw_constexpr bool is_valid_scalar(char32_t c) noexcept
{
    // https://www.unicode.org/glossary/#unicode_scalar_value
    return detail::impl_prop_is_valid_scalar(c);
}

inline uaiw_constexpr bool is_supplementary(char32_t c) noexcept
{
    // https://www.unicode.org/glossary/#supplementary_code_point
    return detail::impl_prop_is_supplementary(c);
}

inline uaiw_constexpr bool is_noncharacter(char32_t c) noexcept
{
    // https://www.unicode.org/glossary/#noncharacter
    return detail::impl_prop_is_noncharacter(c);
}

inline uaiw_constexpr bool is_noncharacter(const prop& p) noexcept
{
    // https://www.unicode.org/glossary/#noncharacter
    return p.Noncharacter_Code_Point();
}

inline uaiw_constexpr bool is_surrogate(char32_t c) noexcept
{
    // https://www.unicode.org/glossary/#surrogate_code_point
    return detail::impl_prop_is_surrogate(c);
}

inline uaiw_constexpr bool is_surrogate(const prop& p) noexcept
{
    // https://www.unicode.org/glossary/#surrogate_code_point
    return p.Surrogate();
}

inline uaiw_constexpr bool is_private_use(char32_t c) noexcept
{
    // https://www.unicode.org/glossary/#private_use_code_point
    return detail::impl_prop_is_private_use(c);
}

inline uaiw_constexpr bool is_private_use(const prop& p) noexcept
{
    // https://www.unicode.org/glossary/#private_use_code_point
    return p.Private_Use();
}

inline uaiw_constexpr bool is_control(char32_t c) noexcept
{
    // https://www.unicode.org/glossary/#control_codes
    return detail::impl_prop_is_control(c);
}

inline uaiw_constexpr bool is_control(const prop& p) noexcept
{
    // https://www.unicode.org/glossary/#control_codes
    return p.Control();
}

} // namespace una::codepoint


// AMALGAMATION: uni_algo/norm.h


#ifdef UNI_ALGO_DISABLE_NORM
#error "Normalization module is disabled via define UNI_ALGO_DISABLE_NORM"
#endif

#include <string>
#include <string_view>
#include <iterator> // std::back_insert_iterator

//!#include "config.h"
//!#include "internal/safe_layer.h"
//!#include "internal/error.h"

//!#include "impl/impl_norm.h"

namespace una {

namespace detail {

template<typename Dst, typename Alloc, typename Src, size_t SizeX,
#if defined(UNI_ALGO_FORCE_CPP_ITERATORS)
    size_t(*FnNorm)(typename Src::const_iterator, typename Src::const_iterator, typename Dst::iterator)>
#elif defined(UNI_ALGO_FORCE_C_POINTERS)
    size_t(*FnNorm)(typename Src::const_pointer, typename Src::const_pointer, typename Dst::pointer)>
#else // Safe layer
    size_t(*FnNorm)(safe::in<typename Src::const_pointer>, safe::end<typename Src::const_pointer>, safe::out<typename Dst::pointer>)>
#endif
uaiw_constexpr Dst t_norm(const Alloc& alloc, const Src& src)
{
    Dst dst{alloc};

    const std::size_t length = src.size();

    if (length)
    {
        if (length > dst.max_size() / SizeX) // Overflow protection
        {
#if defined(__cpp_exceptions) || defined(__EXCEPTIONS) || (_HAS_EXCEPTIONS != 0)
            throw std::bad_alloc();
#else
            std::abort();
#endif
        }

#if defined(UNI_ALGO_FORCE_CPP_ITERATORS)
        dst.resize(length * SizeX);
        dst.resize(FnNorm(src.cbegin(), src.cend(), dst.begin()));
#elif defined(UNI_ALGO_FORCE_C_POINTERS)
        dst.resize(length * SizeX);
        dst.resize(FnNorm(src.data(), src.data() + src.size(), dst.data()));
#else // Safe layer
#  if !defined(__cpp_lib_string_resize_and_overwrite)
        dst.resize(length * SizeX);
        dst.resize(FnNorm(safe::in{src.data(), src.size()}, safe::end{src.data() + src.size()}, safe::out{dst.data(), dst.size()}));
#  else
        dst.resize_and_overwrite(length * SizeX, [&src](typename Dst::pointer p, std::size_t n) noexcept -> std::size_t {
            return FnNorm(safe::in{src.data(), src.size()}, safe::end{src.data() + src.size()}, safe::out{p, n});
        });
#  endif
#endif

#ifndef UNI_ALGO_NO_SHRINK_TO_FIT
        dst.shrink_to_fit();
#endif
    }

    return dst;
}

// For NFKC and NFKD it is ineffective to preallocate a string because max decomposition is 11/18
// in these forms, so we are using back_inserter for these normalization forms.
// Our functions are designed to work with most C++ iterators but sometimes proxy iterators are needed.
// In this case we need a simple proxy output iterator where operator-() is no-op.
// See impl/example/cpp_proxy_iterator.h
template<class Iter>
class proxy_it_out
{
private:
    Iter it;
public:
    uaiw_constexpr explicit proxy_it_out(Iter iter) : it{iter} {}
    uaiw_constexpr decltype(*it) operator*() { return *it; }
    uaiw_constexpr std::size_t operator-(const proxy_it_out&) { return 0; } // no-op
    uaiw_constexpr proxy_it_out& operator++(int) { return *this; } // no-op (by default in C++ output iterators)
    // Test
    /*uaiw_constexpr std::size_t operator-(const proxy_it_out& rhs) { return it - rhs.it; }
    uaiw_constexpr proxy_it_out operator++(int)
    {
        proxy_it_out temp(*this);
        ++it;
        return temp;
    }*/
};

#ifndef UNI_ALGO_DISABLE_NFKC_NFKD

template<typename Dst, typename Alloc, typename Src,
#if defined(UNI_ALGO_FORCE_CPP_ITERATORS)
    size_t(*FnNorm)(typename Src::const_iterator, typename Src::const_iterator, proxy_it_out<std::back_insert_iterator<Dst>>)>
#elif defined(UNI_ALGO_FORCE_C_POINTERS)
    size_t(*FnNorm)(typename Src::const_pointer, typename Src::const_pointer, proxy_it_out<std::back_insert_iterator<Dst>>)>
#else // Safe layer
    size_t(*FnNorm)(safe::in<typename Src::const_pointer>, safe::end<typename Src::const_pointer>, proxy_it_out<std::back_insert_iterator<Dst>>)>
#endif
uaiw_constexpr Dst t_norm2(const Alloc& alloc, const Src& src)
{
    Dst dst{alloc};

    const std::size_t length = src.size();

    if (length)
    {
        if (length > dst.max_size() / 3) // Overflow protection
        {
#if defined(__cpp_exceptions) || defined(__EXCEPTIONS) || (_HAS_EXCEPTIONS != 0)
            throw std::bad_alloc();
#else
            std::abort();
#endif
        }

        dst.reserve(length * 3 / 2);

        const proxy_it_out<std::back_insert_iterator<Dst>> it_out{std::back_inserter(dst)};

#if defined(UNI_ALGO_FORCE_CPP_ITERATORS)
        FnNorm(src.cbegin(), src.cend(), it_out);
#elif defined(UNI_ALGO_FORCE_C_POINTERS)
        FnNorm(src.data(), src.data() + src.size(), it_out);
#else // Safe layer
        FnNorm(safe::in{src.data(), src.size()}, safe::end{src.data() + src.size()}, it_out);
#endif

#ifndef UNI_ALGO_NO_SHRINK_TO_FIT
        dst.shrink_to_fit();
#endif
    }

    return dst;
}

#endif // UNI_ALGO_DISABLE_NFKC_NFKD

// Normalization detection

#if defined(UNI_ALGO_FORCE_CPP_ITERATORS)
template<typename Src, int(*FnDetect)(typename Src::const_iterator, typename Src::const_iterator, bool)>
#elif defined(UNI_ALGO_FORCE_C_POINTERS)
template<typename Src, int(*FnDetect)(typename Src::const_pointer, typename Src::const_pointer, bool)>
#else // Safe layer
template<typename Src, int(*FnDetect)(safe::in<typename Src::const_pointer>, safe::end<typename Src::const_pointer>, bool)>
#endif
uaiw_constexpr bool t_detect(const Src& src)
{
#if defined(UNI_ALGO_FORCE_CPP_ITERATORS)
    return FnDetect(src.cbegin(), src.cend(), true) == detail::impl_norm_is_yes;
#elif defined(UNI_ALGO_FORCE_C_POINTERS)
    return FnDetect(src.data(), src.data() + src.size(), true) == detail::impl_norm_is_yes;
#else // Safe layer
    return FnDetect(safe::in{src.data(), src.size()}, safe::end{src.data() + src.size()}, true) == detail::impl_norm_is_yes;
#endif
}

#if defined(UNI_ALGO_FORCE_CPP_ITERATORS)
template<typename Src, int(*FnDetect)(typename Src::const_iterator, typename Src::const_iterator, bool)>
#elif defined(UNI_ALGO_FORCE_C_POINTERS)
template<typename Src, int(*FnDetect)(typename Src::const_pointer, typename Src::const_pointer, bool)>
#else // Safe layer
template<typename Src, int(*FnDetect)(safe::in<typename Src::const_pointer>, safe::end<typename Src::const_pointer>, bool)>
#endif
uaiw_constexpr bool t_detect(const Src& src, una::error& error)
{
#if defined(UNI_ALGO_FORCE_CPP_ITERATORS)
    const int ret = FnDetect(src.cbegin(), src.cend(), true);
#elif defined(UNI_ALGO_FORCE_C_POINTERS)
    const int ret = FnDetect(src.data(), src.data() + src.size(), true);
#else // Safe layer
    const int ret = FnDetect(safe::in{src.data(), src.size()}, safe::end{src.data() + src.size()}, true);
#endif

    if (ret == detail::impl_norm_is_yes)
    {
        error.reset();
        return true;
    }
    else if (ret == detail::impl_norm_is_ill_formed)
        error = una::error{una::error::code::ill_formed_utf};
    else if (ret == detail::impl_norm_is_not_stream_safe)
        error = una::error{una::error::code::not_stream_safe};
    else
        error = una::error{una::error::code::not_normalized};

    return false;
}

} // namespace detail

namespace norm {

template<typename UTF8, typename Alloc = std::allocator<UTF8>>
uaiw_constexpr std::basic_string<UTF8, std::char_traits<UTF8>, Alloc>
to_nfc_utf8(std::basic_string_view<UTF8> source, const Alloc& alloc = Alloc())
{
    static_assert(std::is_integral_v<UTF8>);

    return detail::t_norm<std::basic_string<UTF8, std::char_traits<UTF8>, Alloc>, Alloc, std::basic_string_view<UTF8>,
            detail::impl_x_norm_to_nfc_utf8, detail::impl_norm_to_nfc_utf8>(alloc, source);
}

template<typename UTF8, typename Alloc = std::allocator<UTF8>>
uaiw_constexpr std::basic_string<UTF8, std::char_traits<UTF8>, Alloc>
to_nfd_utf8(std::basic_string_view<UTF8> source, const Alloc& alloc = Alloc())
{
    static_assert(std::is_integral_v<UTF8>);

    return detail::t_norm<std::basic_string<UTF8, std::char_traits<UTF8>, Alloc>, Alloc, std::basic_string_view<UTF8>,
            detail::impl_x_norm_to_nfd_utf8, detail::impl_norm_to_nfd_utf8>(alloc, source);
}

#ifndef UNI_ALGO_DISABLE_NFKC_NFKD
template<typename UTF8, typename Alloc = std::allocator<UTF8>>
uaiw_constexpr std::basic_string<UTF8, std::char_traits<UTF8>, Alloc>
to_nfkc_utf8(std::basic_string_view<UTF8> source, const Alloc& alloc = Alloc())
{
    static_assert(std::is_integral_v<UTF8>);

    return detail::t_norm2<std::basic_string<UTF8, std::char_traits<UTF8>, Alloc>, Alloc, std::basic_string_view<UTF8>,
            detail::impl_norm_to_nfkc_utf8>(alloc, source);
}

template<typename UTF8, typename Alloc = std::allocator<UTF8>>
uaiw_constexpr std::basic_string<UTF8, std::char_traits<UTF8>, Alloc>
to_nfkd_utf8(std::basic_string_view<UTF8> source, const Alloc& alloc = Alloc())
{
    static_assert(std::is_integral_v<UTF8>);

    return detail::t_norm2<std::basic_string<UTF8, std::char_traits<UTF8>, Alloc>, Alloc, std::basic_string_view<UTF8>,
            detail::impl_norm_to_nfkd_utf8>(alloc, source);
}
#endif // UNI_ALGO_DISABLE_NFKC_NFKD

#ifndef UNI_ALGO_DISABLE_PROP
template<typename UTF8, typename Alloc = std::allocator<UTF8>>
uaiw_constexpr std::basic_string<UTF8, std::char_traits<UTF8>, Alloc>
to_unaccent_utf8(std::basic_string_view<UTF8> source, const Alloc& alloc = Alloc())
{
    static_assert(std::is_integral_v<UTF8>);

    return detail::t_norm<std::basic_string<UTF8, std::char_traits<UTF8>, Alloc>, Alloc, std::basic_string_view<UTF8>,
            detail::impl_x_norm_to_unaccent_utf8, detail::impl_norm_to_unaccent_utf8>(alloc, source);
}
#endif // UNI_ALGO_DISABLE_PROP

template<typename UTF16, typename Alloc = std::allocator<UTF16>>
uaiw_constexpr std::basic_string<UTF16, std::char_traits<UTF16>, Alloc>
to_nfc_utf16(std::basic_string_view<UTF16> source, const Alloc& alloc = Alloc())
{
    static_assert(std::is_integral_v<UTF16> && sizeof(UTF16) >= sizeof(char16_t));

    return detail::t_norm<std::basic_string<UTF16, std::char_traits<UTF16>, Alloc>, Alloc, std::basic_string_view<UTF16>,
            detail::impl_x_norm_to_nfc_utf16, detail::impl_norm_to_nfc_utf16>(alloc, source);
}

template<typename UTF16, typename Alloc = std::allocator<UTF16>>
uaiw_constexpr std::basic_string<UTF16, std::char_traits<UTF16>, Alloc>
to_nfd_utf16(std::basic_string_view<UTF16> source, const Alloc& alloc = Alloc())
{
    static_assert(std::is_integral_v<UTF16> && sizeof(UTF16) >= sizeof(char16_t));

    return detail::t_norm<std::basic_string<UTF16, std::char_traits<UTF16>, Alloc>, Alloc, std::basic_string_view<UTF16>,
            detail::impl_x_norm_to_nfd_utf16, detail::impl_norm_to_nfd_utf16>(alloc, source);
}

#ifndef UNI_ALGO_DISABLE_NFKC_NFKD
template<typename UTF16, typename Alloc = std::allocator<UTF16>>
uaiw_constexpr std::basic_string<UTF16, std::char_traits<UTF16>, Alloc>
to_nfkc_utf16(std::basic_string_view<UTF16> source, const Alloc& alloc = Alloc())
{
    static_assert(std::is_integral_v<UTF16> && sizeof(UTF16) >= sizeof(char16_t));

    return detail::t_norm2<std::basic_string<UTF16, std::char_traits<UTF16>, Alloc>, Alloc, std::basic_string_view<UTF16>,
            detail::impl_norm_to_nfkc_utf16>(alloc, source);
}

template<typename UTF16, typename Alloc = std::allocator<UTF16>>
uaiw_constexpr std::basic_string<UTF16, std::char_traits<UTF16>, Alloc>
to_nfkd_utf16(std::basic_string_view<UTF16> source, const Alloc& alloc = Alloc())
{
    static_assert(std::is_integral_v<UTF16> && sizeof(UTF16) >= sizeof(char16_t));

    return detail::t_norm2<std::basic_string<UTF16, std::char_traits<UTF16>, Alloc>, Alloc, std::basic_string_view<UTF16>,
            detail::impl_norm_to_nfkd_utf16>(alloc, source);
}
#endif // UNI_ALGO_DISABLE_NFKC_NFKD

#ifndef UNI_ALGO_DISABLE_PROP
template<typename UTF16, typename Alloc = std::allocator<UTF16>>
uaiw_constexpr std::basic_string<UTF16, std::char_traits<UTF16>, Alloc>
to_unaccent_utf16(std::basic_string_view<UTF16> source, const Alloc& alloc = Alloc())
{
    static_assert(std::is_integral_v<UTF16> && sizeof(UTF16) >= sizeof(char16_t));

    return detail::t_norm<std::basic_string<UTF16, std::char_traits<UTF16>, Alloc>, Alloc, std::basic_string_view<UTF16>,
            detail::impl_x_norm_to_unaccent_utf16, detail::impl_norm_to_unaccent_utf16>(alloc, source);
}
#endif // UNI_ALGO_DISABLE_PROP

template<typename UTF8>
uaiw_constexpr bool is_nfc_utf8(std::basic_string_view<UTF8> source)
{
    static_assert(std::is_integral_v<UTF8>);

    return detail::t_detect<std::basic_string_view<UTF8>, detail::impl_norm_is_nfc_utf8>(source);
}

template<typename UTF8>
uaiw_constexpr bool is_nfd_utf8(std::basic_string_view<UTF8> source)
{
    static_assert(std::is_integral_v<UTF8>);

    return detail::t_detect<std::basic_string_view<UTF8>, detail::impl_norm_is_nfd_utf8>(source);
}

#ifndef UNI_ALGO_DISABLE_NFKC_NFKD
template<typename UTF8>
uaiw_constexpr bool is_nfkc_utf8(std::basic_string_view<UTF8> source)
{
    static_assert(std::is_integral_v<UTF8>);

    return detail::t_detect<std::basic_string_view<UTF8>, detail::impl_norm_is_nfkc_utf8>(source);
}

template<typename UTF8>
uaiw_constexpr bool is_nfkd_utf8(std::basic_string_view<UTF8> source)
{
    static_assert(std::is_integral_v<UTF8>);

    return detail::t_detect<std::basic_string_view<UTF8>, detail::impl_norm_is_nfkd_utf8>(source);
}
#endif // UNI_ALGO_DISABLE_NFKC_NFKD

template<typename UTF16>
uaiw_constexpr bool is_nfc_utf16(std::basic_string_view<UTF16> source)
{
    static_assert(std::is_integral_v<UTF16> && sizeof(UTF16) >= sizeof(char16_t));

    return detail::t_detect<std::basic_string_view<UTF16>, detail::impl_norm_is_nfc_utf16>(source);
}

template<typename UTF16>
uaiw_constexpr bool is_nfd_utf16(std::basic_string_view<UTF16> source)
{
    static_assert(std::is_integral_v<UTF16> && sizeof(UTF16) >= sizeof(char16_t));

    return detail::t_detect<std::basic_string_view<UTF16>, detail::impl_norm_is_nfd_utf16>(source);
}

#ifndef UNI_ALGO_DISABLE_NFKC_NFKD
template<typename UTF16>
uaiw_constexpr bool is_nfkc_utf16(std::basic_string_view<UTF16> source)
{
    static_assert(std::is_integral_v<UTF16> && sizeof(UTF16) >= sizeof(char16_t));

    return detail::t_detect<std::basic_string_view<UTF16>, detail::impl_norm_is_nfkc_utf16>(source);
}

template<typename UTF16>
uaiw_constexpr bool is_nfkd_utf16(std::basic_string_view<UTF16> source)
{
    static_assert(std::is_integral_v<UTF16> && sizeof(UTF16) >= sizeof(char16_t));

    return detail::t_detect<std::basic_string_view<UTF16>, detail::impl_norm_is_nfkd_utf16>(source);
}
#endif // UNI_ALGO_DISABLE_NFKC_NFKD

template<typename UTF8>
uaiw_constexpr bool is_nfc_utf8(std::basic_string_view<UTF8> source, una::error& error)
{
    static_assert(std::is_integral_v<UTF8>);

    return detail::t_detect<std::basic_string_view<UTF8>, detail::impl_norm_is_nfc_utf8>(source, error);
}

template<typename UTF8>
uaiw_constexpr bool is_nfd_utf8(std::basic_string_view<UTF8> source, una::error& error)
{
    static_assert(std::is_integral_v<UTF8>);

    return detail::t_detect<std::basic_string_view<UTF8>, detail::impl_norm_is_nfd_utf8>(source, error);
}

#ifndef UNI_ALGO_DISABLE_NFKC_NFKD
template<typename UTF8>
uaiw_constexpr bool is_nfkc_utf8(std::basic_string_view<UTF8> source, una::error& error)
{
    static_assert(std::is_integral_v<UTF8>);

    return detail::t_detect<std::basic_string_view<UTF8>, detail::impl_norm_is_nfkc_utf8>(source, error);
}

template<typename UTF8>
uaiw_constexpr bool is_nfkd_utf8(std::basic_string_view<UTF8> source, una::error& error)
{
    static_assert(std::is_integral_v<UTF8>);

    return detail::t_detect<std::basic_string_view<UTF8>, detail::impl_norm_is_nfkd_utf8>(source, error);
}
#endif // UNI_ALGO_DISABLE_NFKC_NFKD

template<typename UTF16>
uaiw_constexpr bool is_nfc_utf16(std::basic_string_view<UTF16> source, una::error& error)
{
    static_assert(std::is_integral_v<UTF16> && sizeof(UTF16) >= sizeof(char16_t));

    return detail::t_detect<std::basic_string_view<UTF16>, detail::impl_norm_is_nfc_utf16>(source, error);
}

template<typename UTF16>
uaiw_constexpr bool is_nfd_utf16(std::basic_string_view<UTF16> source, una::error& error)
{
    static_assert(std::is_integral_v<UTF16> && sizeof(UTF16) >= sizeof(char16_t));

    return detail::t_detect<std::basic_string_view<UTF16>, detail::impl_norm_is_nfd_utf16>(source, error);
}

#ifndef UNI_ALGO_DISABLE_NFKC_NFKD
template<typename UTF16>
uaiw_constexpr bool is_nfkc_utf16(std::basic_string_view<UTF16> source, una::error& error)
{
    static_assert(std::is_integral_v<UTF16> && sizeof(UTF16) >= sizeof(char16_t));

    return detail::t_detect<std::basic_string_view<UTF16>, detail::impl_norm_is_nfkc_utf16>(source, error);
}

template<typename UTF16>
uaiw_constexpr bool is_nfkd_utf16(std::basic_string_view<UTF16> source, una::error& error)
{
    static_assert(std::is_integral_v<UTF16> && sizeof(UTF16) >= sizeof(char16_t));

    return detail::t_detect<std::basic_string_view<UTF16>, detail::impl_norm_is_nfkd_utf16>(source, error);
}
#endif // UNI_ALGO_DISABLE_NFKC_NFKD

#ifdef UNI_ALGO_EXPERIMENTAL

template<typename Iter, typename Sent, typename Dest>
uaiw_constexpr void to_nfc_utf8(Iter first, Sent last, Dest result)
{
    detail::proxy_it_out it_out(result);
    detail::impl_norm_to_nfc_utf8(first, last, it_out);
}

template<typename Iter, typename Sent, typename Dest>
uaiw_constexpr void to_nfd_utf8(Iter first, Sent last, Dest result)
{
    detail::proxy_it_out it_out(result);
    detail::impl_norm_to_nfd_utf8(first, last, it_out);
}

#ifndef UNI_ALGO_DISABLE_NFKC_NFKD
template<typename Iter, typename Sent, typename Dest>
uaiw_constexpr void to_nfkc_utf8(Iter first, Sent last, Dest result)
{
    detail::proxy_it_out it_out(result);
    detail::impl_norm_to_nfkc_utf8(first, last, it_out);
}

template<typename Iter, typename Sent, typename Dest>
uaiw_constexpr void to_nfkd_utf8(Iter first, Sent last, Dest result)
{
    detail::proxy_it_out it_out(result);
    detail::impl_norm_to_nfkd_utf8(first, last, it_out);
}
#endif // UNI_ALGO_DISABLE_NFKC_NFKD

#endif // UNI_ALGO_EXPERIMENTAL

inline uaiw_constexpr std::string to_nfc_utf8(std::string_view source)
{
    return to_nfc_utf8<char>(source);
}
inline uaiw_constexpr std::string to_nfd_utf8(std::string_view source)
{
    return to_nfd_utf8<char>(source);
}
#ifndef UNI_ALGO_DISABLE_NFKC_NFKD
inline uaiw_constexpr std::string to_nfkc_utf8(std::string_view source)
{
    return to_nfkc_utf8<char>(source);
}
inline uaiw_constexpr std::string to_nfkd_utf8(std::string_view source)
{
    return to_nfkd_utf8<char>(source);
}
#endif // UNI_ALGO_DISABLE_NFKC_NFKD
#ifndef UNI_ALGO_DISABLE_PROP
inline uaiw_constexpr std::string to_unaccent_utf8(std::string_view source)
{
    return to_unaccent_utf8<char>(source);
}
#endif // UNI_ALGO_DISABLE_PROP

inline uaiw_constexpr std::u16string to_nfc_utf16(std::u16string_view source)
{
    return to_nfc_utf16<char16_t>(source);
}
inline uaiw_constexpr std::u16string to_nfd_utf16(std::u16string_view source)
{
    return to_nfd_utf16<char16_t>(source);
}
#ifndef UNI_ALGO_DISABLE_NFKC_NFKD
inline uaiw_constexpr std::u16string to_nfkc_utf16(std::u16string_view source)
{
    return to_nfkc_utf16<char16_t>(source);
}
inline uaiw_constexpr std::u16string to_nfkd_utf16(std::u16string_view source)
{
    return to_nfkd_utf16<char16_t>(source);
}
#endif // UNI_ALGO_DISABLE_NFKC_NFKD
#ifndef UNI_ALGO_DISABLE_PROP
inline uaiw_constexpr std::u16string to_unaccent_utf16(std::u16string_view source)
{
    return to_unaccent_utf16<char16_t>(source);
}
#endif // UNI_ALGO_DISABLE_PROP

inline uaiw_constexpr bool is_nfc_utf8(std::string_view source)
{
    return is_nfc_utf8<char>(source);
}
inline uaiw_constexpr bool is_nfd_utf8(std::string_view source)
{
    return is_nfd_utf8<char>(source);
}
#ifndef UNI_ALGO_DISABLE_NFKC_NFKD
inline uaiw_constexpr bool is_nfkc_utf8(std::string_view source)
{
    return is_nfkc_utf8<char>(source);
}
inline uaiw_constexpr bool is_nfkd_utf8(std::string_view source)
{
    return is_nfkd_utf8<char>(source);
}
#endif // UNI_ALGO_DISABLE_NFKC_NFKD

inline uaiw_constexpr bool is_nfc_utf16(std::u16string_view source)
{
    return is_nfc_utf16<char16_t>(source);
}
inline uaiw_constexpr bool is_nfd_utf16(std::u16string_view source)
{
    return is_nfd_utf16<char16_t>(source);
}
#ifndef UNI_ALGO_DISABLE_NFKC_NFKD
inline uaiw_constexpr bool is_nfkc_utf16(std::u16string_view source)
{
    return is_nfkc_utf16<char16_t>(source);
}
inline uaiw_constexpr bool is_nfkd_utf16(std::u16string_view source)
{
    return is_nfkd_utf16<char16_t>(source);
}
#endif // UNI_ALGO_DISABLE_NFKC_NFKD

inline uaiw_constexpr bool is_nfc_utf8(std::string_view source, una::error& error)
{
    return is_nfc_utf8<char>(source, error);
}
inline uaiw_constexpr bool is_nfd_utf8(std::string_view source, una::error& error)
{
    return is_nfd_utf8<char>(source, error);
}
#ifndef UNI_ALGO_DISABLE_NFKC_NFKD
inline uaiw_constexpr bool is_nfkc_utf8(std::string_view source, una::error& error)
{
    return is_nfkc_utf8<char>(source, error);
}
inline uaiw_constexpr bool is_nfkd_utf8(std::string_view source, una::error& error)
{
    return is_nfkd_utf8<char>(source, error);
}
#endif // UNI_ALGO_DISABLE_NFKC_NFKD

inline uaiw_constexpr bool is_nfc_utf16(std::u16string_view source, una::error& error)
{
    return is_nfc_utf16<char16_t>(source, error);
}
inline uaiw_constexpr bool is_nfd_utf16(std::u16string_view source, una::error& error)
{
    return is_nfd_utf16<char16_t>(source, error);
}
#ifndef UNI_ALGO_DISABLE_NFKC_NFKD
inline uaiw_constexpr bool is_nfkc_utf16(std::u16string_view source, una::error& error)
{
    return is_nfkc_utf16<char16_t>(source, error);
}
inline uaiw_constexpr bool is_nfkd_utf16(std::u16string_view source, una::error& error)
{
    return is_nfkd_utf16<char16_t>(source, error);
}
#endif // UNI_ALGO_DISABLE_NFKC_NFKD

#if WCHAR_MAX >= 0x7FFF && WCHAR_MAX <= 0xFFFF // 16-bit wchar_t
inline uaiw_constexpr std::wstring to_nfc_utf16(std::wstring_view source)
{
    return to_nfc_utf16<wchar_t>(source);
}
inline uaiw_constexpr std::wstring to_nfd_utf16(std::wstring_view source)
{
    return to_nfd_utf16<wchar_t>(source);
}
#ifndef UNI_ALGO_DISABLE_NFKC_NFKD
inline uaiw_constexpr std::wstring to_nfkc_utf16(std::wstring_view source)
{
    return to_nfkc_utf16<wchar_t>(source);
}
inline uaiw_constexpr std::wstring to_nfkd_utf16(std::wstring_view source)
{
    return to_nfkd_utf16<wchar_t>(source);
}
#endif // UNI_ALGO_DISABLE_NFKC_NFKD
#ifndef UNI_ALGO_DISABLE_PROP
inline uaiw_constexpr std::wstring to_unaccent_utf16(std::wstring_view source)
{
    return to_unaccent_utf16<wchar_t>(source);
}
#endif // UNI_ALGO_DISABLE_PROP

inline uaiw_constexpr bool is_nfc_utf16(std::wstring_view source)
{
    return is_nfc_utf16<wchar_t>(source);
}
inline uaiw_constexpr bool is_nfd_utf16(std::wstring_view source)
{
    return is_nfd_utf16<wchar_t>(source);
}
#ifndef UNI_ALGO_DISABLE_NFKC_NFKD
inline uaiw_constexpr bool is_nfkc_utf16(std::wstring_view source)
{
    return is_nfkc_utf16<wchar_t>(source);
}
inline uaiw_constexpr bool is_nfkd_utf16(std::wstring_view source)
{
    return is_nfkd_utf16<wchar_t>(source);
}
#endif // UNI_ALGO_DISABLE_NFKC_NFKD

inline uaiw_constexpr bool is_nfc_utf16(std::wstring_view source, una::error& error)
{
    return is_nfc_utf16<wchar_t>(source, error);
}
inline uaiw_constexpr bool is_nfd_utf16(std::wstring_view source, una::error& error)
{
    return is_nfd_utf16<wchar_t>(source, error);
}
#ifndef UNI_ALGO_DISABLE_NFKC_NFKD
inline uaiw_constexpr bool is_nfkc_utf16(std::wstring_view source, una::error& error)
{
    return is_nfkc_utf16<wchar_t>(source, error);
}
inline uaiw_constexpr bool is_nfkd_utf16(std::wstring_view source, una::error& error)
{
    return is_nfkd_utf16<wchar_t>(source, error);
}
#endif // UNI_ALGO_DISABLE_NFKC_NFKD

#endif // WCHAR_MAX >= 0x7FFF && WCHAR_MAX <= 0xFFFF

#ifdef __cpp_lib_char8_t

inline uaiw_constexpr std::u8string to_nfc_utf8(std::u8string_view source)
{
    return to_nfc_utf8<char8_t>(source);
}
inline uaiw_constexpr std::u8string to_nfd_utf8(std::u8string_view source)
{
    return to_nfd_utf8<char8_t>(source);
}
#ifndef UNI_ALGO_DISABLE_NFKC_NFKD
inline uaiw_constexpr std::u8string to_nfkc_utf8(std::u8string_view source)
{
    return to_nfkc_utf8<char8_t>(source);
}
inline uaiw_constexpr std::u8string to_nfkd_utf8(std::u8string_view source)
{
    return to_nfkd_utf8<char8_t>(source);
}
#endif // UNI_ALGO_DISABLE_NFKC_NFKD
#ifndef UNI_ALGO_DISABLE_PROP
inline uaiw_constexpr std::u8string to_unaccent_utf8(std::u8string_view source)
{
    return to_unaccent_utf8<char8_t>(source);
}
#endif // UNI_ALGO_DISABLE_PROP

inline uaiw_constexpr bool is_nfc_utf8(std::u8string_view source)
{
    return is_nfc_utf8<char8_t>(source);
}
inline uaiw_constexpr bool is_nfd_utf8(std::u8string_view source)
{
    return is_nfd_utf8<char8_t>(source);
}
#ifndef UNI_ALGO_DISABLE_NFKC_NFKD
inline uaiw_constexpr bool is_nfkc_utf8(std::u8string_view source)
{
    return is_nfkc_utf8<char8_t>(source);
}
inline uaiw_constexpr bool is_nfkd_utf8(std::u8string_view source)
{
    return is_nfkd_utf8<char8_t>(source);
}
#endif // UNI_ALGO_DISABLE_NFKC_NFKD

inline uaiw_constexpr bool is_nfc_utf8(std::u8string_view source, una::error& error)
{
    return is_nfc_utf8<char8_t>(source, error);
}
inline uaiw_constexpr bool is_nfd_utf8(std::u8string_view source, una::error& error)
{
    return is_nfd_utf8<char8_t>(source, error);
}
#ifndef UNI_ALGO_DISABLE_NFKC_NFKD
inline uaiw_constexpr bool is_nfkc_utf8(std::u8string_view source, una::error& error)
{
    return is_nfkc_utf8<char8_t>(source, error);
}
inline uaiw_constexpr bool is_nfkd_utf8(std::u8string_view source, una::error& error)
{
    return is_nfkd_utf8<char8_t>(source, error);
}
#endif // UNI_ALGO_DISABLE_NFKC_NFKD

#endif // __cpp_lib_char8_t

} // namespace norm

// ----------
// PROPERTIES
// ----------

namespace codepoint {

class prop_norm
{
private:
    detail::type_codept data = 0;

public:
    uaiw_constexpr prop_norm() = delete;
    uaiw_constexpr explicit prop_norm(char32_t c) noexcept : data{detail::impl_norm_get_prop(c)} {}

    uaiw_constexpr unsigned char Canonical_Combining_Class() const noexcept
    {
        // The Unicode Standard: UnicodeData.txt -> Canonical_Combining_Class
        return detail::impl_norm_get_ccc_prop(data);
    }
    uaiw_constexpr bool NFC_Quick_Check_Yes() const noexcept
    {
        // The Unicode Standard: DerivedNormalizationProps.txt -> NFC_Quick_Check=Yes
        return detail::impl_norm_is_nfc_qc_yes_prop(data);
    }
    uaiw_constexpr bool NFD_Quick_Check_Yes() const noexcept
    {
        // The Unicode Standard: DerivedNormalizationProps.txt -> NFD_Quick_Check=Yes
        return detail::impl_norm_is_nfd_qc_yes_prop(data);
    }
#ifndef UNI_ALGO_DISABLE_NFKC_NFKD
    uaiw_constexpr bool NFKC_Quick_Check_Yes() const noexcept
    {
        // The Unicode Standard: DerivedNormalizationProps.txt -> NFKC_Quick_Check=Yes
        return detail::impl_norm_is_nfkc_qc_yes_prop(data);
    }
    uaiw_constexpr bool NFKD_Quick_Check_Yes() const noexcept
    {
        // The Unicode Standard: DerivedNormalizationProps.txt -> NFKD_Quick_Check=Yes
        return detail::impl_norm_is_nfkd_qc_yes_prop(data);
    }
#endif // UNI_ALGO_DISABLE_NFKC_NFKD
};

inline uaiw_constexpr char32_t to_compose(char32_t c1, char32_t c2) noexcept
{
    return detail::impl_norm_to_compose(c1, c2);
}

inline uaiw_constexpr std::u32string to_decompose_u32(char32_t c)
{
    std::u32string dst;
    dst.resize(detail::impl_max_norm_decomp_canon);
#if defined(UNI_ALGO_FORCE_CPP_ITERATORS)
    dst.resize(detail::impl_norm_to_decompose(c, dst.begin()));
#elif defined(UNI_ALGO_FORCE_C_POINTERS)
    dst.resize(detail::impl_norm_to_decompose(c, dst.data()));
#else // Safe layer
    dst.resize(detail::impl_norm_to_decompose(c, detail::safe::out{dst.data(), dst.size()}));
#endif
    return dst;
}

#ifndef UNI_ALGO_DISABLE_NFKC_NFKD
inline uaiw_constexpr std::u32string to_decompose_compat_u32(char32_t c)
{
    std::u32string dst;
    dst.resize(detail::impl_max_norm_decomp_compat);
#if defined(UNI_ALGO_FORCE_CPP_ITERATORS)
    dst.resize(detail::impl_norm_to_decompose_compat(c, dst.begin()));
#elif defined(UNI_ALGO_FORCE_C_POINTERS)
    dst.resize(detail::impl_norm_to_decompose_compat(c, dst.data()));
#else // Safe layer
    dst.resize(detail::impl_norm_to_decompose_compat(c, detail::safe::out{dst.data(), dst.size()}));
#endif
    return dst;
}
#endif // UNI_ALGO_DISABLE_NFKC_NFKD

#ifdef UNI_ALGO_EXPERIMENTAL
inline uaiw_constexpr std::u32string to_decompose_hangul_u32(char32_t c)
{
    std::u32string dst;
    dst.resize(detail::impl_max_norm_decomp_canon);
#if defined(UNI_ALGO_FORCE_CPP_ITERATORS)
    dst.resize(detail::impl_norm_to_decompose_hangul(c, dst.begin()));
#elif defined(UNI_ALGO_FORCE_C_POINTERS)
    dst.resize(detail::impl_norm_to_decompose_hangul(c, dst.data()));
#else // Safe layer
    dst.resize(detail::impl_norm_to_decompose_hangul(c, detail::safe::out{dst.data(), dst.size()}));
#endif
    return dst;
}
#endif // UNI_ALGO_EXPERIMENTAL

} // namespace codepoint

} // namespace una


// AMALGAMATION: uni_algo/ranges.h


#include <functional>
#include <cassert>

//!#include "config.h"
//!#include "internal/ranges_core.h"

namespace una {

namespace ranges {

template<class Range>
class reverse_view : public detail::rng::view_base
{
    // There is a problem with std::views::reverse it is implemented using
    // std::reverse_iterator and operator* looks like this { Iterator tmp = current; return *--tmp; }
    // it is supper ineffective for complex bidirectional algos and that is what our utf8_view/utf16_view are
    // so we need O(1) operator* so we need to reimplement reverse view.
    // Note that our reverse view is always bidirectional so there are no optimizations
    // if Range is random access because we expect utf8_view/utf16_view before this view.
    // It means it still works even if Range is random access but with worse performance compared to std::views::reverse
private:
    template<class Iter, class Sent>
    class reverse
    {
        static_assert(detail::rng::is_iter_bidi_or_better<Iter>::value,
                      "reverse view requires bidirectional or better range");

    private:
        reverse_view* parent = nullptr;
        Iter it_pos = Iter{};
        bool past_begin = true;

    public:
        using iterator_category = std::bidirectional_iterator_tag;
        using value_type        = detail::rng::iter_value_t<Iter>;
        using pointer           = detail::rng::iter_pointer_t<Iter>;
        using reference         = detail::rng::iter_reference_t<Iter>;
        using difference_type   = detail::rng::iter_difference_t<Iter>;

        uaiw_constexpr reverse() = default;
        uaiw_constexpr explicit reverse(reverse_view& p, Iter begin, Sent end)
            : parent{std::addressof(p)}, it_pos{end}
        {
            if (begin != end)
            {
                --it_pos;
                past_begin = false;
            }
        }
        uaiw_constexpr reference operator*() const { return *it_pos; }
        uaiw_constexpr pointer operator->() const { return it_pos; }
        uaiw_constexpr reverse& operator++()
        {
            if (it_pos != std::begin(parent->range))
                --it_pos;
            else
                past_begin = true;

            return *this;
        }
        uaiw_constexpr reverse operator++(int)
        {
            reverse tmp = *this;
            operator++();
            return tmp;
        }
        uaiw_constexpr reverse& operator--()
        {
#if 0
            if (past_begin)
                past_begin = false;
            else
            {
                assert(it_pos != std::end(parent->range));
                if (it_pos != std::end(parent->range))
                    ++it_pos;
            }
#else
            if (past_begin)
                past_begin = false;
            else
                ++it_pos;
#endif
            return *this;
        }
        uaiw_constexpr reverse operator--(int)
        {
            reverse tmp = *this;
            operator--();
            return tmp;
        }
        friend uaiw_constexpr bool operator==(const reverse& x, const reverse& y)
        { return x.it_pos == y.it_pos && x.past_begin == y.past_begin; }
        friend uaiw_constexpr bool operator!=(const reverse& x, const reverse& y)
        { return x.it_pos != y.it_pos || x.past_begin != y.past_begin; }
        friend uaiw_constexpr bool operator==(const reverse& x, una::sentinel_t) { return x.past_begin; }
        friend uaiw_constexpr bool operator!=(const reverse& x, una::sentinel_t) { return !x.past_begin; }
        friend uaiw_constexpr bool operator==(una::sentinel_t, const reverse& x) { return x.past_begin; }
        friend uaiw_constexpr bool operator!=(una::sentinel_t, const reverse& x) { return !x.past_begin; }
    };

    using iter_t = detail::rng::iterator_t<Range>;
    using sent_t = detail::rng::sentinel_t<Range>;

    Range range = Range{};
    detail::rng::cache<reverse<iter_t, iter_t>> cached_begin;

public:
    uaiw_constexpr reverse_view() = default;
    uaiw_constexpr explicit reverse_view(Range r) : range{std::move(r)} {}
    //uaiw_constexpr Range base() const& { return range; }
    //uaiw_constexpr Range base() && { return std::move(range); }
    uaiw_constexpr auto begin()
    {
        if (cached_begin.has_value())
            return cached_begin.get_value();

        if constexpr (std::is_same_v<iter_t, sent_t>)
            cached_begin.set_value(reverse<iter_t, iter_t>{*this, std::begin(range), std::end(range)});
        else
        {
            // This is to handle case when Range is bidirectional and not std::ranges::common_range
            // for example std::views::take(x) produces such range and our una::views::take(x) too
            // this is the same how std::ranges handles such case
            // auto it = std::ranges::next(std::ranges::begin(range), std::ranges::end(range));
            auto it = std::begin(range);
            for (auto end = std::end(range); it != end; ++it);
            cached_begin.set_value(reverse<iter_t, iter_t>{*this, std::begin(range), it});

            // std::string_view{"12345678900"} | una::views::utf8
            // | una::views::reverse | std::views::take(7) | una::views::reverse
            // | una::views::drop(2) | una::views::reverse -> 00987 (48 48 57 56 55)
        }

        return cached_begin.get_value();
    }
    uaiw_constexpr auto end()
    {
        return reverse<iter_t, iter_t>{*this, std::begin(range), std::begin(range)};
    }
};

template<class Range, class Pred>
class filter_view : public detail::rng::view_base
{
    // Our filter view is almost the same as std::views::filter
    // so the performance should be the same
private:
    template<class Iter, class Sent>
    class filter
    {
    private:
        filter_view* parent = nullptr;
        Iter it_pos = Iter{};

        using iter_tag = detail::rng::iter_tag<Iter>;

        using is_bidirectional_or_better = std::is_convertible<iter_tag, std::bidirectional_iterator_tag>;
        using is_forward_or_better       = std::is_convertible<iter_tag, std::forward_iterator_tag>;

    public:
        using iterator_category = std::conditional_t<is_bidirectional_or_better::value,
            std::bidirectional_iterator_tag, std::conditional_t<is_forward_or_better::value,
            std::forward_iterator_tag, std::input_iterator_tag>>;
        using value_type        = detail::rng::iter_value_t<Iter>;
        using pointer           = detail::rng::iter_pointer_t<Iter>;
        using reference         = detail::rng::iter_reference_t<Iter>;
        using difference_type   = detail::rng::iter_difference_t<Iter>;

        uaiw_constexpr filter() = default;
        uaiw_constexpr explicit filter(filter_view& p, Iter begin, Sent end)
            : parent{std::addressof(p)}, it_pos{begin}
        {
            if (begin != end)
                while(!std::invoke(parent->func_filter, *it_pos) && ++it_pos != end);
        }
        uaiw_constexpr reference operator*() const { return *it_pos; }
        uaiw_constexpr pointer operator->() const { return it_pos; }
        uaiw_constexpr filter& operator++()
        {
            if (it_pos != std::end(parent->range))
                while(++it_pos != std::end(parent->range) && !std::invoke(parent->func_filter, *it_pos));

            return *this;
        }
        uaiw_constexpr filter operator++(int)
        {
            filter tmp = *this;
            operator++();
            return tmp;
        }
        template<class T = filter&> typename std::enable_if_t<is_bidirectional_or_better::value, T>
        uaiw_constexpr operator--()
        {
#if 0
            assert(it_pos != std::begin(parent->range));
            if (it_pos != std::begin(parent->range))
                while (--it_pos != std::begin(parent->range) && !std::invoke(parent->func_filter, *it_pos));
#else
            do --it_pos;
            while (!std::invoke(parent->func_filter, *it_pos));
#endif
            return *this;
        }
        template<class T = filter> typename std::enable_if_t<is_bidirectional_or_better::value, T>
        uaiw_constexpr operator--(int)
        {
            filter tmp = *this;
            operator--();
            return tmp;
        }
        friend uaiw_constexpr bool operator==(const filter& x, const filter& y) { return x.it_pos == y.it_pos; }
        friend uaiw_constexpr bool operator!=(const filter& x, const filter& y) { return x.it_pos != y.it_pos; }
    private:
        static uaiw_constexpr bool friend_compare_sentinel(const filter& x) { return x.it_pos == std::end(x.parent->range); }
    public:
        friend uaiw_constexpr bool operator==(const filter& x, una::sentinel_t) { return friend_compare_sentinel(x); }
        friend uaiw_constexpr bool operator!=(const filter& x, una::sentinel_t) { return !friend_compare_sentinel(x); }
        friend uaiw_constexpr bool operator==(una::sentinel_t, const filter& x) { return friend_compare_sentinel(x); }
        friend uaiw_constexpr bool operator!=(una::sentinel_t, const filter& x) { return !friend_compare_sentinel(x); }
    };

    using iter_t = detail::rng::iterator_t<Range>;
    using sent_t = detail::rng::sentinel_t<Range>;

    Range range = Range{};
    Pred func_filter;
    detail::rng::cache<filter<iter_t, sent_t>> cached_begin;

public:
    uaiw_constexpr filter_view() = default;
    uaiw_constexpr filter_view(Range r, Pred pred) : range{std::move(r)}, func_filter{std::move(pred)} {}
    //uaiw_constexpr Range base() const& { return range; }
    //uaiw_constexpr Range base() && { return std::move(range); }
    //uaiw_constexpr const Pred& pred() const { return func_filter; }
    uaiw_constexpr auto begin()
    {
        if (cached_begin.has_value())
            return cached_begin.get_value();

        cached_begin.set_value(filter<iter_t, sent_t>{*this, std::begin(range), std::end(range)});

        return cached_begin.get_value();
    }
    uaiw_constexpr auto end()
    {
        if constexpr (std::is_same_v<iter_t, sent_t>)
            return filter<iter_t, sent_t>{*this, std::end(range), std::end(range)};
        else
            return una::sentinel;
    }
};

template<class Range, class Func>
class transform_view : public detail::rng::view_base
{
    // Our transform_view view is always bidirectional or worse so there are no optimizations
    // if Range is random access because we expect utf8_view/utf16_view before this view.
    // It means it still works even if Range is random access but with worse performance compared to std::views::transform
private:
    template<class Iter, class Sent>
    class transform
    {
    private:
        transform_view* parent = nullptr;
        Iter it_pos = Iter{};

        using iter_tag = detail::rng::iter_tag<Iter>;

        using is_bidirectional_or_better = std::is_convertible<iter_tag, std::bidirectional_iterator_tag>;
        using is_forward_or_better       = std::is_convertible<iter_tag, std::forward_iterator_tag>;

    public:
        using iterator_category = std::conditional_t<is_bidirectional_or_better::value,
            std::bidirectional_iterator_tag, std::conditional_t<is_forward_or_better::value,
            std::forward_iterator_tag, std::input_iterator_tag>>;
        //using value_type        = std::remove_cvref_t<std::invoke_result_t<Func&, typename std::iterator_traits<Iter>::reference>>;
        using value_type        = std::remove_cv_t<std::remove_reference_t<
            std::invoke_result_t<Func&, detail::rng::iter_reference_t<Iter>>>>;
        using pointer           = void;
        using reference         = value_type;
        using difference_type   = detail::rng::iter_difference_t<Iter>;

        uaiw_constexpr transform() = default;
        uaiw_constexpr explicit transform(transform_view& p, Iter begin, Sent)
            : parent{std::addressof(p)}, it_pos{begin} {}
        uaiw_constexpr reference operator*() const { return std::invoke(parent->func_transform, *it_pos); }
        uaiw_constexpr transform& operator++()
        {
            if (it_pos != std::end(parent->range))
                ++it_pos;

            return *this;
        }
        uaiw_constexpr transform operator++(int)
        {
            transform tmp = *this;
            operator++();
            return tmp;
        }
        template<class T = transform&> typename std::enable_if_t<is_bidirectional_or_better::value, T>
        uaiw_constexpr operator--()
        {
#if 0
            assert(it_pos != std::begin(parent->range));
            if (it_pos != std::begin(parent->range))
                --it_pos;
#else
            --it_pos;
#endif
            return *this;
        }
        template<class T = transform> typename std::enable_if_t<is_bidirectional_or_better::value, T>
        uaiw_constexpr operator--(int)
        {
            transform tmp = *this;
            operator--();
            return tmp;
        }
        friend uaiw_constexpr bool operator==(const transform& x, const transform& y) { return x.it_pos == y.it_pos; }
        friend uaiw_constexpr bool operator!=(const transform& x, const transform& y) { return x.it_pos != y.it_pos; }
    private:
        static uaiw_constexpr bool friend_compare_sentinel(const transform& x) { return x.it_pos == std::end(x.parent->range); }
    public:
        friend uaiw_constexpr bool operator==(const transform& x, una::sentinel_t) { return friend_compare_sentinel(x); }
        friend uaiw_constexpr bool operator!=(const transform& x, una::sentinel_t) { return !friend_compare_sentinel(x); }
        friend uaiw_constexpr bool operator==(una::sentinel_t, const transform& x) { return friend_compare_sentinel(x); }
        friend uaiw_constexpr bool operator!=(una::sentinel_t, const transform& x) { return !friend_compare_sentinel(x); }
    };

    using iter_t = detail::rng::iterator_t<Range>;
    using sent_t = detail::rng::sentinel_t<Range>;

    Range range = Range{};
    Func func_transform;

public:
    uaiw_constexpr transform_view() = default;
    uaiw_constexpr transform_view(Range r, Func fun) : range{std::move(r)}, func_transform{std::move(fun)} {}
    //uaiw_constexpr Range base() const& { return range; }
    //uaiw_constexpr Range base() && { return std::move(range); }
    uaiw_constexpr auto begin()
    {
        return transform<iter_t, sent_t>{*this, std::begin(range), std::end(range)};
    }
    uaiw_constexpr auto end()
    {
        if constexpr (std::is_same_v<iter_t, sent_t>)
            return transform<iter_t, sent_t>{*this, std::end(range), std::end(range)};
        else
            return una::sentinel;
    }
};

template<class Range>
class take_view : public detail::rng::view_base
{
    // Our take view is always bidirectional or worse so there are no optimizations
    // if Range is random access because we expect utf8_view/utf16_view before this view.
    // It means it still works even if Range is random access but with worse performance compared to std::views::take
    // Take iterator is simplified version of std::counted_iterator
private:
    template<class Iter, class Sent>
    class take
    {
    private:
        take_view* parent = nullptr;
        Iter it_pos = Iter{};
        std::size_t count = 0;

        using iter_tag = detail::rng::iter_tag<Iter>;

        using is_bidirectional_or_better = std::is_convertible<iter_tag, std::bidirectional_iterator_tag>;
        using is_forward_or_better       = std::is_convertible<iter_tag, std::forward_iterator_tag>;

    public:
        using iterator_category = std::conditional_t<is_bidirectional_or_better::value,
            std::bidirectional_iterator_tag, std::conditional_t<is_forward_or_better::value,
            std::forward_iterator_tag, std::input_iterator_tag>>;
        using value_type        = detail::rng::iter_value_t<Iter>;
        using pointer           = detail::rng::iter_pointer_t<Iter>;
        using reference         = detail::rng::iter_reference_t<Iter>;
        using difference_type   = detail::rng::iter_difference_t<Iter>;

        uaiw_constexpr take() = default;
        uaiw_constexpr explicit take(take_view& p, Iter begin, Sent, std::size_t n)
            : parent{std::addressof(p)}, it_pos{begin}, count{n} {}
        uaiw_constexpr reference operator*() const { return *it_pos; }
        uaiw_constexpr pointer operator->() const { return it_pos; }
        uaiw_constexpr take& operator++()
        {
            if (count != 0 && it_pos != std::end(parent->range))
            {
                ++it_pos;
                --count;
            }

            return *this;
        }
        uaiw_constexpr take operator++(int)
        {
            take tmp = *this;
            operator++();
            return tmp;
        }
        template<class T = take&> typename std::enable_if_t<is_bidirectional_or_better::value, T>
        uaiw_constexpr operator--()
        {
#if 0
            assert(it_pos != std::begin(parent->range));
            if (it_pos != std::begin(parent->range))
            {
                --it_pos;
                ++count;
            }
#else
            --it_pos;
            ++count;
#endif
            return *this;
        }
        template<class T = take> typename std::enable_if_t<is_bidirectional_or_better::value, T>
        uaiw_constexpr operator--(int)
        {
            take tmp = *this;
            operator--();
            return tmp;
        }
        friend uaiw_constexpr bool operator==(const take& x, const take& y) { return x.it_pos == y.it_pos; }
        friend uaiw_constexpr bool operator!=(const take& x, const take& y) { return x.it_pos != y.it_pos; }
    private:
        static uaiw_constexpr bool friend_compare_sentinel(const take& x) { return x.count == 0 || x.it_pos == std::end(x.parent->range); }
    public:
        friend uaiw_constexpr bool operator==(const take& x, una::sentinel_t) { return friend_compare_sentinel(x); }
        friend uaiw_constexpr bool operator!=(const take& x, una::sentinel_t) { return !friend_compare_sentinel(x); }
        friend uaiw_constexpr bool operator==(una::sentinel_t, const take& x) { return friend_compare_sentinel(x); }
        friend uaiw_constexpr bool operator!=(una::sentinel_t, const take& x) { return !friend_compare_sentinel(x); }
    };

    using iter_t = detail::rng::iterator_t<Range>;
    using sent_t = detail::rng::sentinel_t<Range>;

    Range range = Range{};
    std::size_t count = 0;

public:
    uaiw_constexpr take_view() = default;
    uaiw_constexpr take_view(Range r, std::size_t n) : range{std::move(r)}, count{n} {}
    //uaiw_constexpr Range base() const& { return range; }
    //uaiw_constexpr Range base() && { return std::move(range); }
    uaiw_constexpr auto begin()
    {
        return take<iter_t, sent_t>{*this, std::begin(range), std::end(range), count};
    }
    uaiw_constexpr auto end()
    {
        return una::sentinel;
    }
};

template<class Range>
class drop_view : public detail::rng::view_base
{
    // Our drop view is always bidirectional or worse so there are no optimizations
    // if Range is random access because we expect utf8_view/utf16_view before this view.
    // It means it still works even if Range is random access but with worse performance compared to std::views::drop
private:
    template<class Iter, class Sent>
    class drop
    {
    private:
        drop_view* parent = nullptr;
        Iter it_pos = Iter{};

        using iter_tag = detail::rng::iter_tag<Iter>;

        using is_bidirectional_or_better = std::is_convertible<iter_tag, std::bidirectional_iterator_tag>;
        using is_forward_or_better       = std::is_convertible<iter_tag, std::forward_iterator_tag>;

    public:
        using iterator_category = std::conditional_t<is_bidirectional_or_better::value,
            std::bidirectional_iterator_tag, std::conditional_t<is_forward_or_better::value,
            std::forward_iterator_tag, std::input_iterator_tag>>;
        using value_type        = detail::rng::iter_value_t<Iter>;
        using pointer           = detail::rng::iter_pointer_t<Iter>;
        using reference         = detail::rng::iter_reference_t<Iter>;
        using difference_type   = detail::rng::iter_difference_t<Iter>;

        uaiw_constexpr drop() = default;
        uaiw_constexpr explicit drop(drop_view& p, Iter begin, Sent end, std::size_t cnt = 0)
            : parent{std::addressof(p)}, it_pos{begin}
        {
            if (begin != end && cnt > 0)
                //while (cnt--) ++it_pos;
                while (cnt-- && ++it_pos != end);
        }
        uaiw_constexpr reference operator*() const { return *it_pos; }
        uaiw_constexpr pointer operator->() const { return it_pos; }
        uaiw_constexpr drop& operator++()
        {
            if (it_pos != std::end(parent->range))
                ++it_pos;

            return *this;
        }
        uaiw_constexpr drop operator++(int)
        {
            drop tmp = *this;
            operator++();
            return tmp;
        }
        template<class T = drop&> typename std::enable_if_t<is_bidirectional_or_better::value, T>
        uaiw_constexpr operator--()
        {
#if 0
            assert(it_pos != std::begin(parent->range));
            if (it_pos != std::begin(parent->range))
                --it_pos;
#else
            --it_pos;
#endif
            return *this;
        }
        template<class T = drop> typename std::enable_if_t<is_bidirectional_or_better::value, T>
        uaiw_constexpr operator--(int)
        {
            drop tmp = *this;
            operator--();
            return tmp;
        }
        friend uaiw_constexpr bool operator==(const drop& x, const drop& y) { return x.it_pos == y.it_pos; }
        friend uaiw_constexpr bool operator!=(const drop& x, const drop& y) { return x.it_pos != y.it_pos; }
    private:
        static uaiw_constexpr bool friend_compare_sentinel(const drop& x) { return x.it_pos == std::end(x.parent->range); }
    public:
        friend uaiw_constexpr bool operator==(const drop& x, una::sentinel_t) { return friend_compare_sentinel(x); }
        friend uaiw_constexpr bool operator!=(const drop& x, una::sentinel_t) { return !friend_compare_sentinel(x); }
        friend uaiw_constexpr bool operator==(una::sentinel_t, const drop& x) { return friend_compare_sentinel(x); }
        friend uaiw_constexpr bool operator!=(una::sentinel_t, const drop& x) { return !friend_compare_sentinel(x); }
    };

    using iter_t = detail::rng::iterator_t<Range>;
    using sent_t = detail::rng::sentinel_t<Range>;

    Range range = Range{};
    std::size_t count = 0;
    detail::rng::cache<drop<iter_t, sent_t>> cached_begin;

public:
    uaiw_constexpr drop_view() = default;
    uaiw_constexpr drop_view(Range r, std::size_t n) : range{std::move(r)}, count{n} {}
    //uaiw_constexpr Range base() const& { return range; }
    //uaiw_constexpr Range base() && { return std::move(range); }
    uaiw_constexpr auto begin()
    {
        if (cached_begin.has_value())
            return cached_begin.get_value();

        cached_begin.set_value(drop<iter_t, sent_t>{*this, std::begin(range), std::end(range), count});

        return cached_begin.get_value();
    }
    uaiw_constexpr auto end()
    {
        if constexpr (std::is_same_v<iter_t, sent_t>)
            return drop<iter_t, sent_t>{*this, std::end(range), std::end(range)};
        else
            return una::sentinel;
    }
};

} // namespace ranges

namespace detail::rng {

/* FILTER_VIEW */

template<class Pred>
struct adaptor_closure_filter
{
    Pred p;
    uaiw_constexpr explicit adaptor_closure_filter(Pred pred) : p{pred} {}
    template<class R>
    uaiw_constexpr auto operator()(R&& r) const
    { return ranges::filter_view{std::forward<R>(r), p}; }
};
template<class R, class Pred>
uaiw_constexpr auto operator|(R&& r, const adaptor_closure_filter<Pred>& a) { return a(std::forward<R>(r)); }

struct adaptor_filter
{
    template<class R, class Pred>
    uaiw_constexpr auto operator()(R&& r, Pred pred) const
    { return ranges::filter_view{std::forward<R>(r), std::move(pred)}; }
    template<class Pred>
    uaiw_constexpr auto operator()(Pred pred) const
    { return adaptor_closure_filter<Pred>{std::move(pred)}; }
};

/* REVERSE_VIEW */

struct adaptor_reverse
{
    template<class R>
    uaiw_constexpr auto operator()(R&& r) const
    { return ranges::reverse_view{std::forward<R>(r)}; }
};
template<class R>
uaiw_constexpr auto operator|(R&& r, const adaptor_reverse& a) { return a(std::forward<R>(r)); }

/* DROP_VIEW */

struct adaptor_closure_drop
{
    std::size_t count = 0;
    uaiw_constexpr explicit adaptor_closure_drop(std::size_t n): count{n} {}

    template<class R>
    uaiw_constexpr auto operator()(R&& r) const
    { return ranges::drop_view{std::forward<R>(r), count}; }
};
template<class R>
uaiw_constexpr auto operator|(R&& r, adaptor_closure_drop const &a) { return a(std::forward<R>(r)); }

struct adaptor_drop
{
    template<class R>
    uaiw_constexpr auto operator()(R&& r, std::size_t count) const
    { return ranges::drop_view{std::forward<R>(r), count}; }
    uaiw_constexpr auto operator()(std::size_t count) const
    { return adaptor_closure_drop{count}; }
};

/* TAKE_VIEW */

struct adaptor_closure_take
{
    std::size_t count = 0;
    uaiw_constexpr explicit adaptor_closure_take(std::size_t n): count{n} {}

    template <class R>
    uaiw_constexpr auto operator()(R&& r) const
    { return ranges::take_view{std::forward<R>(r), count}; }
};
template<class R>
uaiw_constexpr auto operator|(R&& r, adaptor_closure_take const &a) { return a(std::forward<R>(r)); }

struct adaptor_take
{
    template<class R>
    uaiw_constexpr auto operator()(R&& r, std::size_t count) const
    { return ranges::take_view{std::forward<R>(r), count}; }
    uaiw_constexpr auto operator()(std::size_t count) const
    { return adaptor_closure_take{count}; }
};

/* TRANSFORM_VIEW */

template<class Func>
struct adaptor_closure_transform
{
    Func f;
    uaiw_constexpr explicit adaptor_closure_transform(Func func) : f{func} {}
    template<class R>
    uaiw_constexpr auto operator()(R&& r) const
    { return ranges::transform_view{std::forward<R>(r), f}; }
};
template<class R, class Func>
uaiw_constexpr auto operator|(R&& r, const adaptor_closure_transform<Func>& a) { return a(std::forward<R>(r)); }

struct adaptor_transform
{
    template<class R, class Func>
    uaiw_constexpr auto operator()(R&& r, Func f) const
    { return ranges::transform_view{std::forward<R>(r), std::move(f)}; }
    template<class Func>
    uaiw_constexpr auto operator()(Func f) const
    { return adaptor_closure_transform<Func>{std::move(f)}; }
};

} // namespace detail::rng

namespace ranges::views {

inline constexpr detail::rng::adaptor_reverse reverse;
inline constexpr detail::rng::adaptor_filter filter;
inline constexpr detail::rng::adaptor_transform transform;
inline constexpr detail::rng::adaptor_take take;
inline constexpr detail::rng::adaptor_drop drop;

} // namespace views

namespace ranges {

// These user-defined CTAD guides are important
// the problem the code compiles in most cases and works perfectly fine
// even if there is a mistake here but there will be extra move/copy operations
// for the object we are viewing so the performance will be much worse
// It is handled by test/test_ranges.h -> test_ranges_ctad()

template<class Range, class Pred>
filter_view(Range&&, Pred) -> filter_view<views::all_t<Range>, Pred>;

template<class Range>
reverse_view(Range&&) -> reverse_view<views::all_t<Range>>;

template<class Range>
drop_view(Range&&, std::size_t) -> drop_view<views::all_t<Range>>;

template<class Range, class Func>
transform_view(Range&&, Func) -> transform_view<views::all_t<Range>, Func>;

template<class Range>
take_view(Range&&, std::size_t) -> take_view<views::all_t<Range>>;

} // namespace ranges

namespace views = ranges::views;

} // namespace una


// AMALGAMATION: uni_algo/ranges_conv.h


#ifdef UNI_ALGO_LOG_CPP_ITER
#include <iostream>
#endif

//!#include "config.h"
//!#include "internal/ranges_core.h"

//!#include "impl/impl_iter.h"

namespace una {

namespace ranges {

template<class Range, char32_t Error = detail::impl_iter_replacement>
class utf8_view : public detail::rng::view_base
{
private:
    template<class Iter, class Sent>
    class utf8
    {
        static_assert(std::is_integral_v<detail::rng::iter_value_t<Iter>>,
                      "utf8 view requires integral UTF-8 range");

        // Error is only used for tests, do not document it
        static_assert(Error == detail::impl_iter_error || Error == detail::impl_iter_replacement);

    private:
        utf8_view* parent = nullptr;
        Iter it_pos = Iter{};
        Iter it_next = Iter{};
        detail::type_codept codepoint = 0;

        using iter_tag = detail::rng::iter_tag<Iter>;

        using is_bidirectional_or_better = std::is_convertible<iter_tag, std::bidirectional_iterator_tag>;
        using is_forward_or_better       = std::is_convertible<iter_tag, std::forward_iterator_tag>;

    public:
        using iterator_category = std::conditional_t<is_bidirectional_or_better::value,
            std::bidirectional_iterator_tag, std::conditional_t<is_forward_or_better::value,
            std::forward_iterator_tag, std::input_iterator_tag>>;
        using value_type        = char32_t;
        using pointer           = void;
        using reference         = char32_t;
        using difference_type   = detail::rng::iter_difference_t<Iter>;

        uaiw_constexpr utf8() = default;
        uaiw_constexpr explicit utf8(utf8_view& p, Iter begin, Sent end)
            : parent{std::addressof(p)}, it_pos{begin}, it_next{begin}
        {
            if (begin != end)
                it_next = detail::impl_iter_utf8(it_next, end, &codepoint, Error);
        }
        //uaiw_constexpr const Iter& base() const & noexcept { return it_pos; }
        //uaiw_constexpr Iter base() && { return std::move(it_pos); }
        uaiw_constexpr reference operator*() const noexcept { return codepoint; }
        uaiw_constexpr Iter begin() const noexcept { return it_pos; }
        uaiw_constexpr Iter end() const noexcept { return it_next; }
        uaiw_constexpr utf8& operator++()
        {
#ifdef UNI_ALGO_LOG_CPP_ITER
            std::cout << "una::views::utf8::operator++() " << this << '\n';
#endif
            it_pos = it_next;
            if (it_pos == std::end(parent->range))
                return *this;
            it_next = detail::impl_iter_utf8(it_next, std::end(parent->range), &codepoint, Error);
            return *this;
        }
        uaiw_constexpr utf8 operator++(int)
        {
            utf8 tmp = *this;
            operator++();
            return tmp;
        }
        template<class T = utf8&> typename std::enable_if_t<is_bidirectional_or_better::value, T>
        uaiw_constexpr operator--()
        {
#ifdef UNI_ALGO_LOG_CPP_ITER
            std::cout << "una::views::utf8::operator--() " << this << '\n';
#endif
            it_next = it_pos;
            if (it_pos == std::begin(parent->range))
                return *this;
            it_pos = detail::impl_iter_rev_utf8(std::begin(parent->range), it_pos, &codepoint, Error);
            return *this;
        }
        template<class T = utf8> typename std::enable_if_t<is_bidirectional_or_better::value, T>
        uaiw_constexpr operator--(int)
        {
            utf8 tmp = *this;
            operator--();
            return tmp;
        }
        friend uaiw_constexpr bool operator==(const utf8& x, const utf8& y) { return x.it_pos == y.it_pos; }
        friend uaiw_constexpr bool operator!=(const utf8& x, const utf8& y) { return x.it_pos != y.it_pos; }
    private:
        static uaiw_constexpr bool friend_compare_sentinel(const utf8& x) { return x.it_pos == std::end(x.parent->range); }
    public:
        friend uaiw_constexpr bool operator==(const utf8& x, una::sentinel_t) { return friend_compare_sentinel(x); }
        friend uaiw_constexpr bool operator!=(const utf8& x, una::sentinel_t) { return !friend_compare_sentinel(x); }
        friend uaiw_constexpr bool operator==(una::sentinel_t, const utf8& x) { return friend_compare_sentinel(x); }
        friend uaiw_constexpr bool operator!=(una::sentinel_t, const utf8& x) { return !friend_compare_sentinel(x); }
    };

    using iter_t = detail::rng::iterator_t<Range>;
    using sent_t = detail::rng::sentinel_t<Range>;

    Range range = Range{};
    detail::rng::cache<utf8<iter_t, sent_t>> cached_begin;

public:
    uaiw_constexpr utf8_view() = default;
    uaiw_constexpr explicit utf8_view(Range r) : range{std::move(r)} {}
    //uaiw_constexpr Range base() const & { return range; }
    //uaiw_constexpr Range base() && { return std::move(range); }
    uaiw_constexpr auto begin()
    {
        if (cached_begin.has_value())
            return cached_begin.get_value();

        cached_begin.set_value(utf8<iter_t, sent_t>{*this, std::begin(range), std::end(range)});

        return cached_begin.get_value();
    }
    uaiw_constexpr auto end()
    {
        if constexpr (std::is_same_v<iter_t, sent_t>) // std::ranges::common_range<Range>
            return utf8<iter_t, sent_t>{*this, std::end(range), std::end(range)};
        else
            return una::sentinel;
    }
    //uaiw_constexpr bool empty() { return begin() == end(); }
    //explicit uaiw_constexpr operator bool() { return !empty(); }
};

template<class Range, char32_t Error = detail::impl_iter_replacement>
class utf16_view : public detail::rng::view_base
{
private:
    template<class Iter, class Sent>
    class utf16
    {
        static_assert(std::is_integral_v<detail::rng::iter_value_t<Iter>> &&
                      sizeof(detail::rng::iter_value_t<Iter>) >= sizeof(char16_t),
                      "utf16 view requires integral UTF-16 range");

        // Error is only used for tests, do not document it
        static_assert(Error == detail::impl_iter_error || Error == detail::impl_iter_replacement);

    private:
        utf16_view* parent = nullptr;
        Iter it_pos = Iter{};
        Iter it_next = Iter{};
        detail::type_codept codepoint = 0;

        using iter_tag = detail::rng::iter_tag<Iter>;

        using is_bidirectional_or_better = std::is_convertible<iter_tag, std::bidirectional_iterator_tag>;
        using is_forward_or_better       = std::is_convertible<iter_tag, std::forward_iterator_tag>;

    public:
        using iterator_category = std::conditional_t<is_bidirectional_or_better::value,
            std::bidirectional_iterator_tag, std::conditional_t<is_forward_or_better::value,
            std::forward_iterator_tag, std::input_iterator_tag>>;
        using value_type        = char32_t;
        using pointer           = void;
        using reference         = char32_t;
        using difference_type   = detail::rng::iter_difference_t<Iter>;

        uaiw_constexpr utf16() = default;
        uaiw_constexpr explicit utf16(utf16_view& p, Iter begin, Sent end)
            : parent{std::addressof(p)}, it_pos{begin}, it_next{begin}
        {
            if (begin != end)
                it_next = detail::impl_iter_utf16(it_next, end, &codepoint, Error);
        }
        //uaiw_constexpr const Iter& base() const & noexcept { return it_pos; }
        //uaiw_constexpr Iter base() && { return std::move(it_pos); }
        uaiw_constexpr reference operator*() const noexcept { return codepoint; }
        uaiw_constexpr Iter begin() const noexcept { return it_pos; }
        uaiw_constexpr Iter end() const noexcept { return it_next; }
        uaiw_constexpr utf16& operator++()
        {
#ifdef UNI_ALGO_LOG_CPP_ITER
            std::cout << "una::views::utf16::operator++() " << this << '\n';
#endif
            it_pos = it_next;
            if (it_pos == std::end(parent->range))
                return *this;
            it_next = detail::impl_iter_utf16(it_next, std::end(parent->range), &codepoint, Error);
            return *this;
        }
        uaiw_constexpr utf16 operator++(int)
        {
            utf16 tmp = *this;
            operator++();
            return tmp;
        }
        template<class T = utf16&> typename std::enable_if_t<is_bidirectional_or_better::value, T>
        uaiw_constexpr operator--()
        {
#ifdef UNI_ALGO_LOG_CPP_ITER
            std::cout << "una::views::utf16::operator--() " << this << '\n';
#endif
            it_next = it_pos;
            if (it_pos == std::begin(parent->range))
                return *this;
            it_pos = detail::impl_iter_rev_utf16(std::begin(parent->range), it_pos, &codepoint, Error);
            return *this;
        }
        template<class T = utf16> typename std::enable_if_t<is_bidirectional_or_better::value, T>
        uaiw_constexpr operator--(int)
        {
            utf16 tmp = *this;
            operator--();
            return tmp;
        }
        friend uaiw_constexpr bool operator==(const utf16& x, const utf16& y) { return x.it_pos == y.it_pos; }
        friend uaiw_constexpr bool operator!=(const utf16& x, const utf16& y) { return x.it_pos != y.it_pos; }
    private:
        static uaiw_constexpr bool friend_compare_sentinel(const utf16& x) { return x.it_pos == std::end(x.parent->range); }
    public:
        friend uaiw_constexpr bool operator==(const utf16& x, una::sentinel_t) { return friend_compare_sentinel(x); }
        friend uaiw_constexpr bool operator!=(const utf16& x, una::sentinel_t) { return !friend_compare_sentinel(x); }
        friend uaiw_constexpr bool operator==(una::sentinel_t, const utf16& x) { return friend_compare_sentinel(x); }
        friend uaiw_constexpr bool operator!=(una::sentinel_t, const utf16& x) { return !friend_compare_sentinel(x); }
    };

    using iter_t = detail::rng::iterator_t<Range>;
    using sent_t = detail::rng::sentinel_t<Range>;

    Range range = Range{};
    detail::rng::cache<utf16<iter_t, sent_t>> cached_begin;

public:
    uaiw_constexpr utf16_view() = default;
    uaiw_constexpr explicit utf16_view(Range r) : range{std::move(r)} {}
    //uaiw_constexpr Range base() const & { return range; }
    //uaiw_constexpr Range base() && { return std::move(range); }
    uaiw_constexpr auto begin()
    {
        if (cached_begin.has_value())
            return cached_begin.get_value();

        cached_begin.set_value(utf16<iter_t, sent_t>{*this, std::begin(range), std::end(range)});

        return cached_begin.get_value();
    }
    uaiw_constexpr auto end()
    {
        if constexpr (std::is_same_v<iter_t, sent_t>) // std::ranges::common_range<Range>
            return utf16<iter_t, sent_t>{*this, std::end(range), std::end(range)};
        else
            return una::sentinel;
    }
    //uaiw_constexpr bool empty() { return begin() == end(); }
    //explicit uaiw_constexpr operator bool() { return !empty(); }
};

} // namespace ranges

namespace detail::rng {

/* UTF8_VIEW */

struct adaptor_utf8
{
    template<class R>
    uaiw_constexpr auto operator()(R&& r) const
    { return ranges::utf8_view{std::forward<R>(r)}; }
};
template<class R>
uaiw_constexpr auto operator|(R&& r, const adaptor_utf8& a) { return a(std::forward<R>(r)); }

/* UTF16_VIEW */

struct adaptor_utf16
{
    template<class R>
    uaiw_constexpr auto operator()(R&& r) const
    { return ranges::utf16_view{std::forward<R>(r)}; }
};
template<class R>
uaiw_constexpr auto operator|(R&& r, const adaptor_utf16& a) { return a(std::forward<R>(r)); }

/* TO_UTF8 */

// https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1206r7.pdf

template<class Result, class Alloc = std::allocator<detail::rng::range_value_t<Result>>>
struct adaptor_closure_to_utf8
{
    Alloc alloc;
    uaiw_constexpr explicit adaptor_closure_to_utf8(const Alloc& a = Alloc()): alloc{a} {}

    template<class R>
    uaiw_constexpr auto operator()(R&& r) const
    {
        using range_v = detail::rng::range_value_t<R>;
        using result_v = detail::rng::range_value_t<Result>;

        // Technically we want this static_assert for range_v:
        // static_assert(std::is_same_v<range_v, char32_t>);
        // but it makes it a bit clanky to use with transform view so use more permissive static_assert
        // See: test/test_ranges.h -> test_ranges()
        static_assert(std::is_integral_v<range_v> && sizeof(range_v) >= sizeof(char32_t),
                      "to_utf8 range requires char32_t range");
        static_assert(std::is_integral_v<result_v>,
                      "to_utf8 result type cannot store UTF-8");

        Result result{alloc};
        std::back_insert_iterator output{result};
        for (auto c : r)
            detail::impl_output_utf8(static_cast<char32_t>(c), output);
        return result;
    }
};
template<class R, class Result, class Alloc>
uaiw_constexpr auto operator|(R&& r, const adaptor_closure_to_utf8<Result, Alloc>& a) { return a(std::forward<R>(r)); }

template<class Result>
struct adaptor_to_utf8
{
    uaiw_constexpr auto operator()() const
    { return adaptor_closure_to_utf8<Result>{}; }
    template<class R, class = std::enable_if_t<detail::rng::has_member_begin<R>::value>>
    uaiw_constexpr auto operator()(R&& r) const
    { return adaptor_closure_to_utf8<Result>{}(std::forward<R>(r)); }
    template<class Alloc, class = std::enable_if_t<detail::rng::has_member_allocate<Alloc>::value>>
    uaiw_constexpr auto operator()(const Alloc& a) const
    { return adaptor_closure_to_utf8<Result, Alloc>{a}; }
    template<class R, class Alloc>
    uaiw_constexpr auto operator()(R&& r, const Alloc& a) const
    { return adaptor_closure_to_utf8<Result, Alloc>{a}(std::forward<R>(r)); }
};

/* TO_UTF16 */

template<class Result, class Alloc = std::allocator<detail::rng::range_value_t<Result>>>
struct adaptor_closure_to_utf16
{
    Alloc alloc;
    uaiw_constexpr explicit adaptor_closure_to_utf16(const Alloc& a = Alloc()): alloc{a} {}

    template<class R>
    uaiw_constexpr auto operator()(R&& r) const
    {
        using range_v = detail::rng::range_value_t<R>;
        using result_v = detail::rng::range_value_t<Result>;

        // See comments in to_utf8 adaptor above
        // static_assert(std::is_same_v<range_v, char32_t>);
        static_assert(std::is_integral_v<range_v> && sizeof(range_v) >= sizeof(char32_t),
                      "to_utf16 range requires char32_t range");
        static_assert(std::is_integral_v<result_v> && sizeof(result_v) >= sizeof(char16_t),
                      "to_utf16 result type cannot store UTF-16");

        Result result{alloc};
        std::back_insert_iterator output{result};
        for (auto c : r)
            detail::impl_output_utf16(static_cast<char32_t>(c), output);
        return result;
    }
};
template<class R, class Result, class Alloc>
uaiw_constexpr auto operator|(R&& r, const adaptor_closure_to_utf16<Result, Alloc>& a) { return a(std::forward<R>(r)); }

template<class Result>
struct adaptor_to_utf16
{
    uaiw_constexpr auto operator()() const
    { return adaptor_closure_to_utf16<Result>{}; }
    template<class R, class = std::enable_if_t<detail::rng::has_member_begin<R>::value>>
    uaiw_constexpr auto operator()(R&& r) const
    { return adaptor_closure_to_utf16<Result>{}(std::forward<R>(r)); }
    template<class Alloc, class = std::enable_if_t<detail::rng::has_member_allocate<Alloc>::value>>
    uaiw_constexpr auto operator()(const Alloc& a) const
    { return adaptor_closure_to_utf16<Result, Alloc>{a}; }
    template<class R, class Alloc>
    uaiw_constexpr auto operator()(R&& r, const Alloc& a) const
    { return adaptor_closure_to_utf16<Result, Alloc>{a}(std::forward<R>(r)); }
};

/* TO_UTF8_RESERVE */

template<class Result, class Alloc = std::allocator<detail::rng::range_value_t<Result>>>
struct adaptor_closure_to_utf8_reserve
{
    std::size_t size = 0;
    Alloc alloc;
    uaiw_constexpr explicit adaptor_closure_to_utf8_reserve(std::size_t n, const Alloc& a = Alloc()): size{n}, alloc{a} {}

    template<class R>
    uaiw_constexpr auto operator()(R&& r) const
    {
        using range_v = detail::rng::range_value_t<R>;
        using result_v = detail::rng::range_value_t<Result>;

        static_assert(std::is_integral_v<range_v> && sizeof(range_v) >= sizeof(char32_t),
                      "to_utf8_reserve range requires char32_t range");
        static_assert(std::is_integral_v<result_v>,
                      "to_utf8_reserve result type cannot store UTF-8");

        Result result{alloc};
        result.reserve(size);
        const std::back_insert_iterator output{result};
        for (auto c : r)
            detail::impl_output_utf8(static_cast<char32_t>(c), output);
        return result;
    }
};
template<class R, class Result, class Alloc>
uaiw_constexpr auto operator|(R&& r, const adaptor_closure_to_utf8_reserve<Result, Alloc>& a) { return a(std::forward<R>(r)); }

template<class Result>
struct adaptor_to_utf8_reserve
{
    uaiw_constexpr auto operator()(std::size_t n) const
    { return adaptor_closure_to_utf8_reserve<Result>{n}; }
    template<class R>
    uaiw_constexpr auto operator()(R&& r, std::size_t n) const
    { return adaptor_closure_to_utf8_reserve<Result>{n}(std::forward<R>(r)); }
    template<class Alloc>
    uaiw_constexpr auto operator()(std::size_t n, const Alloc& a) const
    { return adaptor_closure_to_utf8_reserve<Result, Alloc>{n, a}; }
    template<class R, class Alloc>
    uaiw_constexpr auto operator()(R&& r, std::size_t n, const Alloc& a) const
    { return adaptor_closure_to_utf8_reserve<Result, Alloc>{n, a}(std::forward<R>(r)); }
};

/* TO_UTF16_RESERVE */

template<class Result, class Alloc = std::allocator<detail::rng::range_value_t<Result>>>
struct adaptor_closure_to_utf16_reserve
{
    std::size_t size = 0;
    Alloc alloc;
    uaiw_constexpr explicit adaptor_closure_to_utf16_reserve(std::size_t n, const Alloc& a = Alloc()): size{n}, alloc{a} {}

    template<class R>
    uaiw_constexpr auto operator()(R&& r) const
    {
        using range_v = detail::rng::range_value_t<R>;
        using result_v = detail::rng::range_value_t<Result>;

        static_assert(std::is_integral_v<range_v> && sizeof(range_v) >= sizeof(char32_t),
                      "to_utf16_reserve range requires char32_t range");
        static_assert(std::is_integral_v<result_v> && sizeof(result_v) >= sizeof(char16_t),
                      "to_utf16_reserve result type cannot store UTF-16");

        Result result{alloc};
        result.reserve(size);
        const std::back_insert_iterator output{result};
        for (auto c : r)
            detail::impl_output_utf16(static_cast<char32_t>(c), output);
        return result;
    }
};
template<class R, class Result, class Alloc>
uaiw_constexpr auto operator|(R&& r, const adaptor_closure_to_utf16_reserve<Result, Alloc>& a) { return a(std::forward<R>(r)); }

template<class Result>
struct adaptor_to_utf16_reserve
{
    uaiw_constexpr auto operator()(std::size_t n) const
    { return adaptor_closure_to_utf16_reserve<Result>{n}; }
    template<class R>
    uaiw_constexpr auto operator()(R&& r, std::size_t n) const
    { return adaptor_closure_to_utf16_reserve<Result>{n}(std::forward<R>(r)); }
    template<class Alloc>
    uaiw_constexpr auto operator()(std::size_t n, const Alloc& a) const
    { return adaptor_closure_to_utf16_reserve<Result, Alloc>{n, a}; }
    template<class R, class Alloc>
    uaiw_constexpr auto operator()(R&& r, std::size_t n, const Alloc& a) const
    { return adaptor_closure_to_utf16_reserve<Result, Alloc>{n, a}(std::forward<R>(r)); }
};

} // namespace detail::rng

namespace ranges::views {

inline constexpr detail::rng::adaptor_utf8 utf8;
inline constexpr detail::rng::adaptor_utf16 utf16;

} // namespace views

namespace ranges {

template<class Range>
utf8_view(Range&&) -> utf8_view<views::all_t<Range>>;

template<class Range>
utf16_view(Range&&) -> utf16_view<views::all_t<Range>>;

} // namespace ranges

namespace ranges {

// NOTE:
// If {} below is not used MSVC 19.16 and probably other versions produces this:
// error C2737: 'una::ranges::to_utf8': 'constexpr' object must be initialized
// It should not interfere with anything.

template<class Result>
inline constexpr detail::rng::adaptor_to_utf8<Result> to_utf8{};
template<class Result>
inline constexpr detail::rng::adaptor_to_utf16<Result> to_utf16{};
template<class Result>
inline constexpr detail::rng::adaptor_to_utf8_reserve<Result> to_utf8_reserve{};
template<class Result>
inline constexpr detail::rng::adaptor_to_utf16_reserve<Result> to_utf16_reserve{};

} // namespace ranges

namespace views = ranges::views;

} // namespace una


// AMALGAMATION: uni_algo/ranges_norm.h


//!#include "config.h"
//!#include "internal/safe_layer.h"
//!#include "internal/ranges_core.h"

//!#include "impl/impl_norm.h"

#ifdef UNI_ALGO_DISABLE_NORM
#error "Normalization module is disabled via define UNI_ALGO_DISABLE_NORM"
#endif

namespace una {

namespace ranges::norm {

template<class Range>
class nfc_view : public detail::rng::view_base
{
private:
    template<class Iter, class Sent>
    class nfc
    {
        static_assert(std::is_integral_v<detail::rng::iter_value_t<Iter>> &&
                      sizeof(detail::rng::iter_value_t<Iter>) >= sizeof(char32_t),
                      "norm::nfc view requires char32_t range");

    private:
        nfc_view* parent = nullptr;
        Iter it_pos = Iter{};

        bool stream_end = false;

        detail::type_codept codepoint = 0;
        detail::impl_norm_iter_state state{};

        uaiw_constexpr void iter_func_norm_nfc()
        {
            if (!detail::inline_norm_iter_ready(&state))
            {
                for (bool stop = false; !stop && it_pos != std::end(parent->range); ++it_pos)
                    stop = detail::inline_norm_iter_nfc(&state, *it_pos);
            }
            if (!detail::inline_norm_iter_next_comp(&state, &codepoint))
                stream_end = true;
        }

    public:
        using iterator_category = std::input_iterator_tag;
        using value_type        = char32_t;
        using pointer           = void;
        using reference         = char32_t;
        using difference_type   = std::ptrdiff_t;

        uaiw_constexpr nfc() = default;
        uaiw_constexpr explicit nfc(nfc_view& p, Iter begin, Sent) : parent{std::addressof(p)}, it_pos{begin}
        {
            detail::impl_norm_iter_state_reset(&state);

            iter_func_norm_nfc(); // Fn call must not be inlined
        }
        uaiw_constexpr reference operator*() const noexcept { return codepoint; }
        uaiw_constexpr nfc& operator++()
        {
            iter_func_norm_nfc(); // Fn call must not be inlined

            return *this;
        }
        uaiw_constexpr nfc operator++(int)
        {
            nfc tmp = *this;
            operator++();
            return tmp;
        }
        friend uaiw_constexpr bool operator==(const nfc& x, const nfc& y) { return x.stream_end == y.stream_end; }
        friend uaiw_constexpr bool operator!=(const nfc& x, const nfc& y) { return x.stream_end != y.stream_end; }
        friend uaiw_constexpr bool operator==(const nfc& x, una::sentinel_t) { return x.stream_end; }
        friend uaiw_constexpr bool operator!=(const nfc& x, una::sentinel_t) { return !x.stream_end; }
        friend uaiw_constexpr bool operator==(una::sentinel_t, const nfc& x) { return x.stream_end; }
        friend uaiw_constexpr bool operator!=(una::sentinel_t, const nfc& x) { return !x.stream_end; }
    };

    using iter_t = detail::rng::iterator_t<Range>;
    using sent_t = detail::rng::sentinel_t<Range>;

    Range range = Range{};
    detail::rng::cache<nfc<iter_t, sent_t>> cached_begin;

public:
    uaiw_constexpr nfc_view() = default;
    uaiw_constexpr explicit nfc_view(Range r) : range{std::move(r)} {}
    //uaiw_constexpr Range base() const & { return range; }
    //uaiw_constexpr Range base() && { return std::move(range); }
    uaiw_constexpr auto begin()
    {
        if (cached_begin.has_value())
            return cached_begin.get_value();

        cached_begin.set_value(nfc<iter_t, sent_t>{*this, std::begin(range), std::end(range)});

        return cached_begin.get_value();
    }
    uaiw_constexpr auto end()
    {
        return una::sentinel;
    }
    //uaiw_constexpr bool empty() { return begin() == end(); }
    //explicit uaiw_constexpr operator bool() { return !empty(); }
};

template<class Range>
class nfd_view : public detail::rng::view_base
{
private:
    template<class Iter, class Sent>
    class nfd
    {
        static_assert(std::is_integral_v<detail::rng::iter_value_t<Iter>> &&
                      sizeof(detail::rng::iter_value_t<Iter>) >= sizeof(char32_t),
                      "norm::nfd view requires char32_t range");

    private:
        nfd_view* parent = nullptr;
        Iter it_pos = Iter{};

        bool stream_end = false;

        detail::type_codept codepoint = 0;
        detail::impl_norm_iter_state state{};

        uaiw_constexpr void iter_func_norm_nfd()
        {
            if (!detail::inline_norm_iter_ready(&state))
            {
                for (bool stop = false; !stop && it_pos != std::end(parent->range); ++it_pos)
                    stop = detail::inline_norm_iter_nfd(&state, *it_pos);
            }
            if (!detail::inline_norm_iter_next_decomp(&state, &codepoint))
                stream_end = true;
        }

    public:
        using iterator_category = std::input_iterator_tag;
        using value_type        = char32_t;
        using pointer           = void;
        using reference         = char32_t;
        using difference_type   = std::ptrdiff_t;

        uaiw_constexpr nfd() = default;
        uaiw_constexpr explicit nfd(nfd_view& p, Iter begin, Sent) : parent{std::addressof(p)}, it_pos{begin}
        {
            detail::impl_norm_iter_state_reset(&state);

            iter_func_norm_nfd(); // Fn call must not be inlined
        }
        uaiw_constexpr reference operator*() const noexcept { return codepoint; }
        uaiw_constexpr nfd& operator++()
        {
            iter_func_norm_nfd(); // Fn call must not be inlined

            return *this;
        }
        uaiw_constexpr nfd operator++(int)
        {
            nfd tmp = *this;
            operator++();
            return tmp;
        }
        friend uaiw_constexpr bool operator==(const nfd& x, const nfd& y) { return x.stream_end == y.stream_end; }
        friend uaiw_constexpr bool operator!=(const nfd& x, const nfd& y) { return x.stream_end != y.stream_end; }
        friend uaiw_constexpr bool operator==(const nfd& x, una::sentinel_t) { return x.stream_end; }
        friend uaiw_constexpr bool operator!=(const nfd& x, una::sentinel_t) { return !x.stream_end; }
        friend uaiw_constexpr bool operator==(una::sentinel_t, const nfd& x) { return x.stream_end; }
        friend uaiw_constexpr bool operator!=(una::sentinel_t, const nfd& x) { return !x.stream_end; }
    };

    using iter_t = detail::rng::iterator_t<Range>;
    using sent_t = detail::rng::sentinel_t<Range>;

    Range range = Range{};
    detail::rng::cache<nfd<iter_t, sent_t>> cached_begin;

public:
    uaiw_constexpr nfd_view() = default;
    uaiw_constexpr explicit nfd_view(Range r) : range{std::move(r)} {}
    //uaiw_constexpr Range base() const & { return range; }
    //uaiw_constexpr Range base() && { return std::move(range); }
    uaiw_constexpr auto begin()
    {
        if (cached_begin.has_value())
            return cached_begin.get_value();

        cached_begin.set_value(nfd<iter_t, sent_t>{*this, std::begin(range), std::end(range)});

        return cached_begin.get_value();
    }
    uaiw_constexpr auto end()
    {
        return una::sentinel;
    }
    //uaiw_constexpr bool empty() { return begin() == end(); }
    //explicit uaiw_constexpr operator bool() { return !empty(); }
};

#ifndef UNI_ALGO_DISABLE_NFKC_NFKD

template<class Range>
class nfkc_view : public detail::rng::view_base
{
private:
    template<class Iter, class Sent>
    class nfkc
    {
        static_assert(std::is_integral_v<detail::rng::iter_value_t<Iter>> &&
                      sizeof(detail::rng::iter_value_t<Iter>) >= sizeof(char32_t),
                      "norm::nfkc view requires char32_t range");

    private:
        nfkc_view* parent = nullptr;
        Iter it_pos = Iter{};

        bool stream_end = false;

        detail::type_codept codepoint = 0;
        detail::impl_norm_iter_state state{};

        uaiw_constexpr void iter_func_norm_nfkc()
        {
            if (!detail::inline_norm_iter_ready(&state))
            {
                for (bool stop = false; !stop && it_pos != std::end(parent->range); ++it_pos)
                    stop = detail::inline_norm_iter_nfkc(&state, *it_pos);
            }
            if (!detail::inline_norm_iter_next_comp(&state, &codepoint))
                stream_end = true;
        }

    public:
        using iterator_category = std::input_iterator_tag;
        using value_type        = char32_t;
        using pointer           = void;
        using reference         = char32_t;
        using difference_type   = std::ptrdiff_t;

        uaiw_constexpr nfkc() = default;
        uaiw_constexpr explicit nfkc(nfkc_view& p, Iter begin, Sent) : parent{std::addressof(p)}, it_pos{begin}
        {
            detail::impl_norm_iter_state_reset(&state);

            iter_func_norm_nfkc(); // Fn call must not be inlined
        }
        uaiw_constexpr reference operator*() const noexcept { return codepoint; }
        uaiw_constexpr nfkc& operator++()
        {
            iter_func_norm_nfkc(); // Fn call must not be inlined

            return *this;
        }
        uaiw_constexpr nfkc operator++(int)
        {
            nfkc tmp = *this;
            operator++();
            return tmp;
        }
        friend uaiw_constexpr bool operator==(const nfkc& x, const nfkc& y) { return x.stream_end == y.stream_end; }
        friend uaiw_constexpr bool operator!=(const nfkc& x, const nfkc& y) { return x.stream_end != y.stream_end; }
        friend uaiw_constexpr bool operator==(const nfkc& x, una::sentinel_t) { return x.stream_end; }
        friend uaiw_constexpr bool operator!=(const nfkc& x, una::sentinel_t) { return !x.stream_end; }
        friend uaiw_constexpr bool operator==(una::sentinel_t, const nfkc& x) { return x.stream_end; }
        friend uaiw_constexpr bool operator!=(una::sentinel_t, const nfkc& x) { return !x.stream_end; }
    };

    using iter_t = detail::rng::iterator_t<Range>;
    using sent_t = detail::rng::sentinel_t<Range>;

    Range range = Range{};
    detail::rng::cache<nfkc<iter_t, sent_t>> cached_begin;

public:
    uaiw_constexpr nfkc_view() = default;
    uaiw_constexpr explicit nfkc_view(Range r) : range{std::move(r)} {}
    //uaiw_constexpr Range base() const & { return range; }
    //uaiw_constexpr Range base() && { return std::move(range); }
    uaiw_constexpr auto begin()
    {
        if (cached_begin.has_value())
            return cached_begin.get_value();

        cached_begin.set_value(nfkc<iter_t, sent_t>{*this, std::begin(range), std::end(range)});

        return cached_begin.get_value();
    }
    uaiw_constexpr auto end()
    {
        return una::sentinel;
    }
    //uaiw_constexpr bool empty() { return begin() == end(); }
    //explicit uaiw_constexpr operator bool() { return !empty(); }
};

template<class Range>
class nfkd_view : public detail::rng::view_base
{
private:
    template<class Iter, class Sent>
    class nfkd
    {
        static_assert(std::is_integral_v<detail::rng::iter_value_t<Iter>> &&
                      sizeof(detail::rng::iter_value_t<Iter>) >= sizeof(char32_t),
                      "norm::nfkd view requires char32_t range");

    private:
        nfkd_view* parent = nullptr;
        Iter it_pos = Iter{};

        bool stream_end = false;

        detail::type_codept codepoint = 0;
        detail::impl_norm_iter_state state{};

        uaiw_constexpr void iter_func_norm_nfkd()
        {
            if (!detail::inline_norm_iter_ready(&state))
            {
                for (bool stop = false; !stop && it_pos != std::end(parent->range); ++it_pos)
                    stop = detail::inline_norm_iter_nfkd(&state, *it_pos);
            }
            if (!detail::inline_norm_iter_next_decomp(&state, &codepoint))
                stream_end = true;
        }

    public:
        using iterator_category = std::input_iterator_tag;
        using value_type        = char32_t;
        using pointer           = void;
        using reference         = char32_t;
        using difference_type   = std::ptrdiff_t;

        uaiw_constexpr nfkd() = default;
        uaiw_constexpr explicit nfkd(nfkd_view& p, Iter begin, Sent) : parent{std::addressof(p)}, it_pos{begin}
        {
            detail::impl_norm_iter_state_reset(&state);

            iter_func_norm_nfkd(); // Fn call must not be inlined
        }
        uaiw_constexpr reference operator*() const noexcept { return codepoint; }
        uaiw_constexpr nfkd& operator++()
        {
            iter_func_norm_nfkd(); // Fn call must not be inlined

            return *this;
        }
        uaiw_constexpr nfkd operator++(int)
        {
            nfkd tmp = *this;
            operator++();
            return tmp;
        }
        friend uaiw_constexpr bool operator==(const nfkd& x, const nfkd& y) { return x.stream_end == y.stream_end; }
        friend uaiw_constexpr bool operator!=(const nfkd& x, const nfkd& y) { return x.stream_end != y.stream_end; }
        friend uaiw_constexpr bool operator==(const nfkd& x, una::sentinel_t) { return x.stream_end; }
        friend uaiw_constexpr bool operator!=(const nfkd& x, una::sentinel_t) { return !x.stream_end; }
        friend uaiw_constexpr bool operator==(una::sentinel_t, const nfkd& x) { return x.stream_end; }
        friend uaiw_constexpr bool operator!=(una::sentinel_t, const nfkd& x) { return !x.stream_end; }
    };

    using iter_t = detail::rng::iterator_t<Range>;
    using sent_t = detail::rng::sentinel_t<Range>;

    Range range = Range{};
    detail::rng::cache<nfkd<iter_t, sent_t>> cached_begin;

public:
    uaiw_constexpr nfkd_view() = default;
    uaiw_constexpr explicit nfkd_view(Range r) : range{std::move(r)} {}
    //uaiw_constexpr Range base() const & { return range; }
    //uaiw_constexpr Range base() && { return std::move(range); }
    uaiw_constexpr auto begin()
    {
        if (cached_begin.has_value())
            return cached_begin.get_value();

        cached_begin.set_value(nfkd<iter_t, sent_t>{*this, std::begin(range), std::end(range)});

        return cached_begin.get_value();
    }
    uaiw_constexpr auto end()
    {
        return una::sentinel;
    }
    //uaiw_constexpr bool empty() { return begin() == end(); }
    //explicit uaiw_constexpr operator bool() { return !empty(); }
};

#endif // UNI_ALGO_DISABLE_NFKC_NFKD

template<class Range>
nfc_view(Range&&) -> nfc_view<views::all_t<Range>>;
template<class Range>
nfd_view(Range&&) -> nfd_view<views::all_t<Range>>;
#ifndef UNI_ALGO_DISABLE_NFKC_NFKD
template<class Range>
nfkc_view(Range&&) -> nfkc_view<views::all_t<Range>>;
template<class Range>
nfkd_view(Range&&) -> nfkd_view<views::all_t<Range>>;
#endif // UNI_ALGO_DISABLE_NFKC_NFKD

} // namespace ranges::norm

namespace detail::rng {

/* NFC_VIEW */

struct adaptor_nfc
{
    template<class R>
    uaiw_constexpr auto operator()(R&& r) const
    { return ranges::norm::nfc_view{std::forward<R>(r)}; }
};
template<class R>
uaiw_constexpr auto operator|(R&& r, const adaptor_nfc& a) { return a(std::forward<R>(r)); }

/* NFD_VIEW */

struct adaptor_nfd
{
    template<class R>
    uaiw_constexpr auto operator()(R&& r) const
    { return ranges::norm::nfd_view{std::forward<R>(r)}; }
};
template<class R>
uaiw_constexpr auto operator|(R&& r, const adaptor_nfd& a) { return a(std::forward<R>(r)); }

#ifndef UNI_ALGO_DISABLE_NFKC_NFKD

/* NFKC_VIEW */

struct adaptor_nfkc
{
    template<class R>
    uaiw_constexpr auto operator()(R&& r) const
    { return ranges::norm::nfkc_view{std::forward<R>(r)}; }
};
template<class R>
uaiw_constexpr auto operator|(R&& r, const adaptor_nfkc& a) { return a(std::forward<R>(r)); }

/* NFKD_VIEW */

struct adaptor_nfkd
{
    template<class R>
    uaiw_constexpr auto operator()(R&& r) const
    { return ranges::norm::nfkd_view{std::forward<R>(r)}; }
};
template<class R>
uaiw_constexpr auto operator|(R&& r, const adaptor_nfkd& a) { return a(std::forward<R>(r)); }

#endif // UNI_ALGO_DISABLE_NFKC_NFKD

} // namespace detail::rng

namespace ranges::views::norm {

inline constexpr detail::rng::adaptor_nfc nfc;
inline constexpr detail::rng::adaptor_nfd nfd;
#ifndef UNI_ALGO_DISABLE_NFKC_NFKD
inline constexpr detail::rng::adaptor_nfkc nfkc;
inline constexpr detail::rng::adaptor_nfkd nfkd;
#endif // UNI_ALGO_DISABLE_NFKC_NFKD

} // namespace ranges::views::norm

namespace views = ranges::views;

} // namespace una


// AMALGAMATION: uni_algo/ranges_grapheme.h


#ifdef UNI_ALGO_DISABLE_SEGMENT_GRAPHEME
#error "Grapheme segmentation module is disabled via define UNI_ALGO_DISABLE_SEGMENT_GRAPHEME"
#endif

#include <string_view>
#include <cassert>

//!#include "config.h"
//!#include "internal/safe_layer.h"
//!#include "internal/ranges_core.h"

//!#include "impl/impl_iter.h"
//!#include "impl/impl_segment_grapheme.h"

namespace una {

namespace ranges::grapheme {

template<class Range>
class utf8_view : public detail::rng::view_base
{
private:
    template<class Iter, class Sent>
    class utf8
    {
        static_assert(detail::rng::is_iter_bidi_or_better<Iter>::value &&
                      std::is_integral_v<detail::rng::iter_value_t<Iter>>,
                      "grapheme::utf8 view requires bidirectional or better UTF-8 range");

    private:
        utf8_view* parent = nullptr;
        Iter it_begin = Iter{};
        Iter it_pos = Iter{};
        Iter it_next = Iter{};

        detail::impl_segment_grapheme_state state{};

        uaiw_constexpr void iter_func_segment_grapheme_utf8()
        {
            it_begin = it_pos;

            while (it_next != std::end(parent->range))
            {
                it_pos = it_next;
                detail::type_codept codepoint = 0;
                it_next = detail::inline_iter_utf8(it_next, std::end(parent->range), &codepoint, detail::impl_iter_replacement);
                if (detail::inline_segment_grapheme(&state, codepoint))
                    return;
            }

            if (it_next == std::end(parent->range))
                it_pos = it_next;
        }
        uaiw_constexpr void iter_func_segment_grapheme_rev_utf8()
        {
            detail::impl_segment_grapheme_state_reset(&state);
            it_pos = it_begin;

            while (it_begin != std::begin(parent->range))
            {
                it_next = it_begin;
                detail::type_codept codepoint = 0;
                it_begin = detail::inline_iter_rev_utf8(std::begin(parent->range), it_begin, &codepoint, detail::impl_iter_replacement);
                if (detail::inline_segment_grapheme_rev_utf8(&state, codepoint, std::begin(parent->range), it_begin))
                {
                    it_begin = it_next;
                    break;
                }
            }

            it_next = it_pos;
            detail::impl_segment_grapheme_state_reset(&state);
        }
        uaiw_constexpr void iter_func_segment_grapheme_pos_utf8(Iter pos)
        {
            // Find UTF-8 boundary
            for (std::size_t i = 0; i < 3 && pos != std::end(parent->range); ++i, ++pos)
            {
                if (((*pos & 0xFF) & 0xC0) != 0x80)
                    break;
            }

            // NOTE: https://unicode.org/reports/tr29/#Random_Access

            it_begin = pos;

            iter_func_segment_grapheme_rev_utf8();

            it_pos = it_begin;
            it_next = it_begin;

            iter_func_segment_grapheme_utf8();
        }

        using is_contiguous = detail::rng::is_range_contiguous<Range>;

    public:
        using iterator_category = std::bidirectional_iterator_tag;
        using value_type        = std::conditional_t<is_contiguous::value,
            std::basic_string_view<detail::rng::iter_value_t<Iter>>, void>;
        using pointer           = void;
        using reference         = value_type;
        using difference_type   = detail::rng::iter_difference_t<Iter>;

        uaiw_constexpr utf8() = default;
        uaiw_constexpr explicit utf8(utf8_view& p, Iter begin, Sent end)
            : parent{std::addressof(p)}, it_begin{begin}, it_pos{begin}, it_next{begin}
        {
            if (begin == end)
                return;

            detail::impl_segment_grapheme_state_reset(&state);

            iter_func_segment_grapheme_utf8();
        }
        uaiw_constexpr explicit utf8(utf8_view& p, Iter begin, Sent, Iter pos)
            : parent{std::addressof(p)}, it_begin{begin}, it_pos{begin}, it_next{begin}
        {
            iter_func_segment_grapheme_pos_utf8(pos);
        }
        template<class T = reference> typename std::enable_if_t<is_contiguous::value, T>
        uaiw_constexpr operator*() const
        {
            return detail::rng::to_string_view<reference>(parent->range, it_begin, it_pos);
        }
        uaiw_constexpr Iter begin() const noexcept { return it_begin; }
        uaiw_constexpr Iter end() const noexcept { return it_pos; }
        uaiw_constexpr utf8& operator++()
        {
            iter_func_segment_grapheme_utf8();

            return *this;
        }
        uaiw_constexpr utf8 operator++(int)
        {
            utf8 tmp = *this;
            operator++();
            return tmp;
        }
        uaiw_constexpr utf8& operator--()
        {
            iter_func_segment_grapheme_rev_utf8();

            return *this;
        }
        uaiw_constexpr utf8 operator--(int)
        {
            utf8 tmp = *this;
            operator--();
            return tmp;
        }
        friend uaiw_constexpr bool operator==(const utf8& x, const utf8& y) { return (x.it_begin == y.it_begin); }
        friend uaiw_constexpr bool operator!=(const utf8& x, const utf8& y) { return (x.it_begin != y.it_begin); }
    private:
        static uaiw_constexpr bool friend_compare_sentinel(const utf8& x) { return x.it_begin == std::end(x.parent->range); }
    public:
        friend uaiw_constexpr bool operator==(const utf8& x, una::sentinel_t) { return friend_compare_sentinel(x); }
        friend uaiw_constexpr bool operator!=(const utf8& x, una::sentinel_t) { return !friend_compare_sentinel(x); }
        friend uaiw_constexpr bool operator==(una::sentinel_t, const utf8& x) { return friend_compare_sentinel(x); }
        friend uaiw_constexpr bool operator!=(una::sentinel_t, const utf8& x) { return !friend_compare_sentinel(x); }
    };

    using iter_t = detail::rng::iterator_t<Range>;
    using sent_t = detail::rng::sentinel_t<Range>;

    Range range = Range{};
    detail::rng::cache<utf8<iter_t, sent_t>> cached_begin;

public:
    uaiw_constexpr utf8_view() = default;
    uaiw_constexpr explicit utf8_view(Range r) : range{std::move(r)} {}
    //uaiw_constexpr Range base() const & { return range; }
    //uaiw_constexpr Range base() && { return std::move(range); }
    uaiw_constexpr auto begin()
    {
        if (cached_begin.has_value())
            return cached_begin.get_value();

        cached_begin.set_value(utf8<iter_t, sent_t>{*this, std::begin(range), std::end(range)});

        return cached_begin.get_value();
    }
    uaiw_constexpr auto end()
    {
        return utf8<iter_t, sent_t>{*this, std::end(range), std::end(range)};
    }
    uaiw_constexpr auto cursor(iter_t pos)
    {
        return utf8<iter_t, sent_t>{*this, std::begin(range), std::end(range), pos};
    }
    //uaiw_constexpr bool empty() { return begin() == end(); }
    //explicit uaiw_constexpr operator bool() { return !empty(); }
};

template<class Range>
class utf16_view : public detail::rng::view_base
{
private:
    template<class Iter, class Sent>
    class utf16
    {
        static_assert(detail::rng::is_iter_bidi_or_better<Iter>::value &&
                      std::is_integral_v<detail::rng::iter_value_t<Iter>> &&
                      sizeof(detail::rng::iter_value_t<Iter>) >= sizeof(char16_t),
                      "grapheme::utf16 view requires bidirectional or better UTF-16 range");

    private:
        utf16_view* parent = nullptr;
        Iter it_begin = Iter{};
        Iter it_pos = Iter{};
        Iter it_next = Iter{};

        detail::impl_segment_grapheme_state state{};

        uaiw_constexpr void iter_func_segment_grapheme_utf16()
        {
            it_begin = it_pos;

            while (it_next != std::end(parent->range))
            {
                it_pos = it_next;
                detail::type_codept codepoint = 0;
                it_next = detail::inline_iter_utf16(it_next, std::end(parent->range), &codepoint, detail::impl_iter_replacement);
                if (detail::inline_segment_grapheme(&state, codepoint))
                    return;
            }

            if (it_next == std::end(parent->range))
                it_pos = it_next;
        }
        uaiw_constexpr void iter_func_segment_grapheme_rev_utf16()
        {
            detail::impl_segment_grapheme_state_reset(&state);
            it_pos = it_begin;

            while (it_begin != std::begin(parent->range))
            {
                it_next = it_begin;
                detail::type_codept codepoint = 0;
                it_begin = detail::inline_iter_rev_utf16(std::begin(parent->range), it_begin, &codepoint, detail::impl_iter_replacement);
                if (detail::inline_segment_grapheme_rev_utf16(&state, codepoint, std::begin(parent->range), it_begin))
                {
                    it_begin = it_next;
                    break;
                }
            }

            it_next = it_pos;
            detail::impl_segment_grapheme_state_reset(&state);
        }
        uaiw_constexpr void iter_func_segment_grapheme_pos_utf16(Iter pos)
        {
            // Find UTF-16 boundary
            for (std::size_t i = 0; i < 1 && pos != std::end(parent->range); ++i, ++pos)
            {
                if (!((*pos & 0xFFFF) >= 0xDC00 && (*pos & 0xFFFF) <= 0xDFFF))
                    break;
            }

            // NOTE: https://unicode.org/reports/tr29/#Random_Access

            it_begin = pos;

            iter_func_segment_grapheme_rev_utf16();

            it_pos = it_begin;
            it_next = it_begin;

            iter_func_segment_grapheme_utf16();
        }

        using is_contiguous = detail::rng::is_range_contiguous<Range>;

    public:
        using iterator_category = std::bidirectional_iterator_tag;
        using value_type        = std::conditional_t<is_contiguous::value,
            std::basic_string_view<detail::rng::iter_value_t<Iter>>, void>;
        using pointer           = void;
        using reference         = value_type;
        using difference_type   = detail::rng::iter_difference_t<Iter>;

        uaiw_constexpr utf16() = default;
        uaiw_constexpr explicit utf16(utf16_view& p, Iter begin, Sent end)
            : parent{std::addressof(p)}, it_begin{begin}, it_pos{begin}, it_next{begin}
        {
            if (begin == end)
                return;

            detail::impl_segment_grapheme_state_reset(&state);

            iter_func_segment_grapheme_utf16();
        }
        uaiw_constexpr explicit utf16(utf16_view& p, Iter begin, Sent, Iter pos)
            : parent{std::addressof(p)}, it_begin{begin}, it_pos{begin}, it_next{begin}
        {
            iter_func_segment_grapheme_pos_utf16(pos);
        }
        template<class T = reference> typename std::enable_if_t<is_contiguous::value, T>
        uaiw_constexpr operator*() const
        {
            return detail::rng::to_string_view<reference>(parent->range, it_begin, it_pos);
        }
        uaiw_constexpr Iter begin() const noexcept { return it_begin; }
        uaiw_constexpr Iter end() const noexcept { return it_pos; }
        uaiw_constexpr utf16& operator++()
        {
            iter_func_segment_grapheme_utf16();

            return *this;
        }
        uaiw_constexpr utf16 operator++(int)
        {
            utf16 tmp = *this;
            operator++();
            return tmp;
        }
        uaiw_constexpr utf16& operator--()
        {
            iter_func_segment_grapheme_rev_utf16();

            return *this;
        }
        uaiw_constexpr utf16 operator--(int)
        {
            utf16 tmp = *this;
            operator--();
            return tmp;
        }
        friend uaiw_constexpr bool operator==(const utf16& x, const utf16& y) { return (x.it_begin == y.it_begin); }
        friend uaiw_constexpr bool operator!=(const utf16& x, const utf16& y) { return (x.it_begin != y.it_begin); }
    private:
        static uaiw_constexpr bool friend_compare_sentinel(const utf16& x) { return x.it_begin == std::end(x.parent->range); }
    public:
        friend uaiw_constexpr bool operator==(const utf16& x, una::sentinel_t) { return friend_compare_sentinel(x); }
        friend uaiw_constexpr bool operator!=(const utf16& x, una::sentinel_t) { return !friend_compare_sentinel(x); }
        friend uaiw_constexpr bool operator==(una::sentinel_t, const utf16& x) { return friend_compare_sentinel(x); }
        friend uaiw_constexpr bool operator!=(una::sentinel_t, const utf16& x) { return !friend_compare_sentinel(x); }
    };

    using iter_t = detail::rng::iterator_t<Range>;
    using sent_t = detail::rng::sentinel_t<Range>;

    Range range = Range{};
    detail::rng::cache<utf16<iter_t, sent_t>> cached_begin;

public:
    uaiw_constexpr utf16_view() = default;
    uaiw_constexpr explicit utf16_view(Range r) : range{std::move(r)} {}
    //uaiw_constexpr Range base() const & { return range; }
    //uaiw_constexpr Range base() && { return std::move(range); }
    uaiw_constexpr auto begin()
    {
        if (cached_begin.has_value())
            return cached_begin.get_value();

        cached_begin.set_value(utf16<iter_t, sent_t>{*this, std::begin(range), std::end(range)});

        return cached_begin.get_value();
    }
    uaiw_constexpr auto end()
    {
        return utf16<iter_t, sent_t>{*this, std::end(range), std::end(range)};
    }
    uaiw_constexpr auto cursor(iter_t pos)
    {
        return utf16<iter_t, sent_t>{*this, std::begin(range), std::end(range), pos};
    }
    //uaiw_constexpr bool empty() { return begin() == end(); }
    //explicit uaiw_constexpr operator bool() { return !empty(); }
};

template<class Range>
utf8_view(Range&&) -> utf8_view<views::all_t<Range>>;
template<class Range>
utf16_view(Range&&) -> utf16_view<views::all_t<Range>>;

} // namespace ranges::grapheme

namespace detail::rng {

/* GRAPHEME_UTF8_VIEW */

struct adaptor_grapheme_utf8
{
    template<class R>
    uaiw_constexpr auto operator()(R&& r) const
    { return ranges::grapheme::utf8_view{std::forward<R>(r)}; }
};
template<class R>
uaiw_constexpr auto operator|(R&& r, const adaptor_grapheme_utf8& a) { return a(std::forward<R>(r)); }

/* GRAPHEME_UTF16_VIEW */

struct adaptor_grapheme_utf16
{
    template<class R>
    uaiw_constexpr auto operator()(R&& r) const
    { return ranges::grapheme::utf16_view{std::forward<R>(r)}; }
};
template<class R>
uaiw_constexpr auto operator|(R&& r, const adaptor_grapheme_utf16& a) { return a(std::forward<R>(r)); }

} // namespace detail::rng

namespace ranges::views::grapheme {

inline constexpr detail::rng::adaptor_grapheme_utf8 utf8;
inline constexpr detail::rng::adaptor_grapheme_utf16 utf16;

}

namespace views = ranges::views;

} // namespace una


// AMALGAMATION: uni_algo/ranges_word.h


#ifdef UNI_ALGO_DISABLE_SEGMENT_WORD
#error "Word segmentation module is disabled via define UNI_ALGO_DISABLE_SEGMENT_WORD"
#endif

#include <string_view>
#include <cassert>

//!#include "config.h"
//!#include "internal/safe_layer.h"
//!#include "internal/ranges_core.h"

//!#include "impl/impl_iter.h"
//!#include "impl/impl_segment_word.h"

namespace una {

namespace ranges {

namespace word {

template<class Range>
class utf8_view : public detail::rng::view_base
{
private:
    template<class Iter, class Sent>
    class utf8
    {
        static_assert(detail::rng::is_iter_bidi_or_better<Iter>::value &&
                      std::is_integral_v<detail::rng::iter_value_t<Iter>>,
                      "word::utf8 view requires bidirectional or better UTF-8 range");

    private:
        utf8_view* parent = nullptr;
        Iter it_begin = Iter{};
        Iter it_pos = Iter{};
        Iter it_next = Iter{};
        detail::type_codept word_prop = 0;
        detail::type_codept next_word_prop = 0;

        detail::impl_segment_word_state state{};

        uaiw_constexpr void iter_func_segment_word_utf8()
        {
            it_begin = it_pos;

            while (it_next != std::end(parent->range))
            {
                it_pos = it_next;
                word_prop = next_word_prop;
                detail::type_codept codepoint = 0;
                it_next = detail::inline_iter_utf8(it_next, std::end(parent->range), &codepoint, detail::impl_iter_replacement);
                if (detail::inline_segment_word_utf8(&state, codepoint, &next_word_prop, it_next, std::end(parent->range)))
                    return;
            }

            if (it_next == std::end(parent->range))
            {
                it_pos = it_next;
                word_prop = next_word_prop;
            }
        }
        uaiw_constexpr void iter_func_segment_word_rev_utf8()
        {
            detail::impl_segment_word_state_reset(&state);
            it_pos = it_begin;

            while (it_begin != std::begin(parent->range))
            {
                it_next = it_begin;
                word_prop = next_word_prop;
                detail::type_codept codepoint = 0;
                it_begin = detail::inline_iter_rev_utf8(std::begin(parent->range), it_begin, &codepoint, detail::impl_iter_replacement);
                if (detail::inline_segment_word_rev_utf8(&state, codepoint, &next_word_prop, std::begin(parent->range), it_begin))
                {
                    it_begin = it_next;
                    break;
                }
            }

            it_next = it_pos;
            detail::impl_segment_word_state_reset(&state);
        }
        uaiw_constexpr void iter_func_segment_word_pos_utf8(Iter pos)
        {
            // Find UTF-8 boundary
            for (std::size_t i = 0; i < 3 && pos != std::end(parent->range); ++i, ++pos)
            {
                if (((*pos & 0xFF) & 0xC0) != 0x80)
                    break;
            }

            // NOTE: https://unicode.org/reports/tr29/#Random_Access

            it_begin = pos;

            iter_func_segment_word_rev_utf8();

            it_pos = it_begin;
            it_next = it_begin;

            iter_func_segment_word_utf8();
        }

        using is_contiguous = detail::rng::is_range_contiguous<Range>;

    public:
        using iterator_category = std::bidirectional_iterator_tag;
        using value_type        = std::conditional_t<is_contiguous::value,
            std::basic_string_view<detail::rng::iter_value_t<Iter>>, void>;
        using pointer           = void;
        using reference         = value_type;
        using difference_type   = detail::rng::iter_difference_t<Iter>;

        uaiw_constexpr utf8() = default;
        uaiw_constexpr explicit utf8(utf8_view& p, Iter begin, Sent end)
            : parent{std::addressof(p)}, it_begin{begin}, it_pos{begin}, it_next{begin}
        {
            if (begin == end)
                return;

            detail::impl_segment_word_state_reset(&state);

            iter_func_segment_word_utf8();
        }
        uaiw_constexpr explicit utf8(utf8_view& p, Iter begin, Sent, Iter pos)
            : parent{std::addressof(p)}, it_begin{begin}, it_pos{begin}, it_next{begin}
        {
            iter_func_segment_word_pos_utf8(pos);
        }
        template<class T = reference> typename std::enable_if_t<is_contiguous::value, T>
        uaiw_constexpr operator*() const
        {
            return detail::rng::to_string_view<reference>(parent->range, it_begin, it_pos);
        }
        uaiw_constexpr Iter begin() const noexcept { return it_begin; }
        uaiw_constexpr Iter end() const noexcept { return it_pos; }
        uaiw_constexpr bool is_word()             const noexcept { return detail::impl_segment_is_word(word_prop); }
        uaiw_constexpr bool is_word_number()      const noexcept { return detail::impl_segment_is_word_number(word_prop); }
        uaiw_constexpr bool is_word_letter()      const noexcept { return detail::impl_segment_is_word_letter(word_prop); }
        uaiw_constexpr bool is_word_kana()        const noexcept { return detail::impl_segment_is_word_kana(word_prop); }
        uaiw_constexpr bool is_word_ideographic() const noexcept { return detail::impl_segment_is_word_ideo(word_prop); }
        uaiw_constexpr bool is_emoji()            const noexcept { return detail::impl_segment_is_word_emoji(word_prop); }
        uaiw_constexpr bool is_punctuation()      const noexcept { return detail::impl_segment_is_word_punct(word_prop); }
        uaiw_constexpr bool is_segspace()         const noexcept { return detail::impl_segment_is_word_space(word_prop); }
        uaiw_constexpr bool is_newline()          const noexcept { return detail::impl_segment_is_word_newline(word_prop); }
        uaiw_constexpr utf8& operator++()
        {
            iter_func_segment_word_utf8();

            return *this;
        }
        uaiw_constexpr utf8 operator++(int)
        {
            utf8 tmp = *this;
            operator++();
            return tmp;
        }
        uaiw_constexpr utf8& operator--()
        {
            iter_func_segment_word_rev_utf8();

            return *this;
        }
        uaiw_constexpr utf8 operator--(int)
        {
            utf8 tmp = *this;
            operator--();
            return tmp;
        }
        friend uaiw_constexpr bool operator==(const utf8& x, const utf8& y) { return (x.it_begin == y.it_begin); }
        friend uaiw_constexpr bool operator!=(const utf8& x, const utf8& y) { return (x.it_begin != y.it_begin); }
    private:
        static uaiw_constexpr bool friend_compare_sentinel(const utf8& x) { return x.it_begin == std::end(x.parent->range); }
    public:
        friend uaiw_constexpr bool operator==(const utf8& x, una::sentinel_t) { return friend_compare_sentinel(x); }
        friend uaiw_constexpr bool operator!=(const utf8& x, una::sentinel_t) { return !friend_compare_sentinel(x); }
        friend uaiw_constexpr bool operator==(una::sentinel_t, const utf8& x) { return friend_compare_sentinel(x); }
        friend uaiw_constexpr bool operator!=(una::sentinel_t, const utf8& x) { return !friend_compare_sentinel(x); }
    };

    using iter_t = detail::rng::iterator_t<Range>;
    using sent_t = detail::rng::sentinel_t<Range>;

    Range range = Range{};
    detail::rng::cache<utf8<iter_t, sent_t>> cached_begin;

public:
    uaiw_constexpr utf8_view() = default;
    uaiw_constexpr explicit utf8_view(Range r) : range{std::move(r)} {}
    //uaiw_constexpr Range base() const & { return range; }
    //uaiw_constexpr Range base() && { return std::move(range); }
    uaiw_constexpr auto begin()
    {
        if (cached_begin.has_value())
            return cached_begin.get_value();

        cached_begin.set_value(utf8<iter_t, sent_t>{*this, std::begin(range), std::end(range)});

        return cached_begin.get_value();
    }
    uaiw_constexpr auto end()
    {
        return utf8<iter_t, sent_t>{*this, std::end(range), std::end(range)};
    }
    uaiw_constexpr auto cursor(iter_t pos)
    {
        return utf8<iter_t, sent_t>{*this, std::begin(range), std::end(range), pos};
    }
    //uaiw_constexpr bool empty() { return begin() == end(); }
    //explicit uaiw_constexpr operator bool() { return !empty(); }
};

template<class Range>
class utf16_view : public detail::rng::view_base
{
private:
    template<class Iter, class Sent>
    class utf16
    {
        static_assert(detail::rng::is_iter_bidi_or_better<Iter>::value &&
                      std::is_integral_v<detail::rng::iter_value_t<Iter>> &&
                      sizeof(detail::rng::iter_value_t<Iter>) >= sizeof(char16_t),
                      "word::utf16 view requires bidirectional or better UTF-16 range");

    private:
        utf16_view* parent = nullptr;
        Iter it_begin = Iter{};
        Iter it_pos = Iter{};
        Iter it_next = Iter{};
        detail::type_codept word_prop = 0;
        detail::type_codept next_word_prop = 0;

        detail::impl_segment_word_state state{};

        uaiw_constexpr void iter_func_segment_word_utf16()
        {
            it_begin = it_pos;

            while (it_next != std::end(parent->range))
            {
                it_pos = it_next;
                word_prop = next_word_prop;
                detail::type_codept codepoint = 0;
                it_next = detail::inline_iter_utf16(it_next, std::end(parent->range), &codepoint, detail::impl_iter_replacement);
                if (detail::inline_segment_word_utf16(&state, codepoint, &next_word_prop, it_next, std::end(parent->range)))
                    return;
            }

            if (it_next == std::end(parent->range))
            {
                it_pos = it_next;
                word_prop = next_word_prop;
            }
        }
        uaiw_constexpr void iter_func_segment_word_rev_utf16()
        {
            detail::impl_segment_word_state_reset(&state);
            it_pos = it_begin;

            while (it_begin != std::begin(parent->range))
            {
                it_next = it_begin;
                word_prop = next_word_prop;
                detail::type_codept codepoint = 0;
                it_begin = detail::inline_iter_rev_utf16(std::begin(parent->range), it_begin, &codepoint, detail::impl_iter_replacement);
                if (detail::inline_segment_word_rev_utf16(&state, codepoint, &next_word_prop, std::begin(parent->range), it_begin))
                {
                    it_begin = it_next;
                    break;
                }
            }

            it_next = it_pos;
            detail::impl_segment_word_state_reset(&state);
        }
        uaiw_constexpr void iter_func_segment_word_pos_utf16(Iter pos)
        {
            // Find UTF-16 boundary
            for (std::size_t i = 0; i < 1 && pos != std::end(parent->range); ++i, ++pos)
            {
                if (!((*pos & 0xFFFF) >= 0xDC00 && (*pos & 0xFFFF) <= 0xDFFF))
                    break;
            }

            // NOTE: https://unicode.org/reports/tr29/#Random_Access

            it_begin = pos;

            iter_func_segment_word_rev_utf16();

            it_pos = it_begin;
            it_next = it_begin;

            iter_func_segment_word_utf16();
        }

        using is_contiguous = detail::rng::is_range_contiguous<Range>;

    public:
        using iterator_category = std::bidirectional_iterator_tag;
        using value_type        = std::conditional_t<is_contiguous::value,
            std::basic_string_view<detail::rng::iter_value_t<Iter>>, void>;
        using pointer           = void;
        using reference         = value_type;
        using difference_type   = detail::rng::iter_difference_t<Iter>;

        uaiw_constexpr utf16() = default;
        uaiw_constexpr explicit utf16(utf16_view& p, Iter begin, Sent end)
            : parent{std::addressof(p)}, it_begin{begin}, it_pos{begin}, it_next{begin}
        {
            if (begin == end)
                return;

            detail::impl_segment_word_state_reset(&state);

            iter_func_segment_word_utf16();
        }
        uaiw_constexpr explicit utf16(utf16_view& p, Iter begin, Sent, Iter pos)
            : parent{std::addressof(p)}, it_begin{begin}, it_pos{begin}, it_next{begin}
        {
            iter_func_segment_word_pos_utf16(pos);
        }
        template<class T = reference> typename std::enable_if_t<is_contiguous::value, T>
        uaiw_constexpr operator*() const
        {
            return detail::rng::to_string_view<reference>(parent->range, it_begin, it_pos);
        }
        uaiw_constexpr Iter begin() const noexcept { return it_begin; }
        uaiw_constexpr Iter end() const noexcept { return it_pos; }
        uaiw_constexpr bool is_word()             const noexcept { return detail::impl_segment_is_word(word_prop); }
        uaiw_constexpr bool is_word_number()      const noexcept { return detail::impl_segment_is_word_number(word_prop); }
        uaiw_constexpr bool is_word_letter()      const noexcept { return detail::impl_segment_is_word_letter(word_prop); }
        uaiw_constexpr bool is_word_kana()        const noexcept { return detail::impl_segment_is_word_kana(word_prop); }
        uaiw_constexpr bool is_word_ideographic() const noexcept { return detail::impl_segment_is_word_ideo(word_prop); }
        uaiw_constexpr bool is_emoji()            const noexcept { return detail::impl_segment_is_word_emoji(word_prop); }
        uaiw_constexpr bool is_punctuation()      const noexcept { return detail::impl_segment_is_word_punct(word_prop); }
        uaiw_constexpr bool is_segspace()         const noexcept { return detail::impl_segment_is_word_space(word_prop); }
        uaiw_constexpr bool is_newline()          const noexcept { return detail::impl_segment_is_word_newline(word_prop); }
        uaiw_constexpr utf16& operator++()
        {
            iter_func_segment_word_utf16();

            return *this;
        }
        uaiw_constexpr utf16 operator++(int)
        {
            utf16 tmp = *this;
            operator++();
            return tmp;
        }
        uaiw_constexpr utf16& operator--()
        {
            iter_func_segment_word_rev_utf16();

            return *this;
        }
        uaiw_constexpr utf16 operator--(int)
        {
            utf16 tmp = *this;
            operator--();
            return tmp;
        }
        friend uaiw_constexpr bool operator==(const utf16& x, const utf16& y) { return (x.it_begin == y.it_begin); }
        friend uaiw_constexpr bool operator!=(const utf16& x, const utf16& y) { return (x.it_begin != y.it_begin); }
    private:
        static uaiw_constexpr bool friend_compare_sentinel(const utf16& x) { return x.it_begin == std::end(x.parent->range); }
    public:
        friend uaiw_constexpr bool operator==(const utf16& x, una::sentinel_t) { return friend_compare_sentinel(x); }
        friend uaiw_constexpr bool operator!=(const utf16& x, una::sentinel_t) { return !friend_compare_sentinel(x); }
        friend uaiw_constexpr bool operator==(una::sentinel_t, const utf16& x) { return friend_compare_sentinel(x); }
        friend uaiw_constexpr bool operator!=(una::sentinel_t, const utf16& x) { return !friend_compare_sentinel(x); }
    };

    using iter_t = detail::rng::iterator_t<Range>;
    using sent_t = detail::rng::sentinel_t<Range>;

    Range range = Range{};
    detail::rng::cache<utf16<iter_t, sent_t>> cached_begin;

public:
    uaiw_constexpr utf16_view() = default;
    uaiw_constexpr explicit utf16_view(Range r) : range{std::move(r)} {}
    //uaiw_constexpr Range base() const & { return range; }
    //uaiw_constexpr Range base() && { return std::move(range); }
    uaiw_constexpr auto begin()
    {
        if (cached_begin.has_value())
            return cached_begin.get_value();

        cached_begin.set_value(utf16<iter_t, sent_t>{*this, std::begin(range), std::end(range)});

        return cached_begin.get_value();
    }
    uaiw_constexpr auto end()
    {
        return utf16<iter_t, sent_t>{*this, std::end(range), std::end(range)};
    }
    uaiw_constexpr auto cursor(iter_t pos)
    {
        return utf16<iter_t, sent_t>{*this, std::begin(range), std::end(range), pos};
    }
    //uaiw_constexpr bool empty() { return begin() == end(); }
    //explicit uaiw_constexpr operator bool() { return !empty(); }
};

} // namespace word

namespace word_only {

template<class Range>
class utf8_view : public detail::rng::view_base
{
private:
    template<class Iter, class Sent>
    class utf8
    {
        static_assert(detail::rng::is_iter_bidi_or_better<Iter>::value &&
                      std::is_integral_v<detail::rng::iter_value_t<Iter>>,
                      "word_only::utf8 view requires bidirectional or better UTF-8 range");

    private:
        utf8_view* parent = nullptr;
        Iter it_begin = Iter{};
        Iter it_pos = Iter{};
        Iter it_next = Iter{};
        detail::type_codept word_prop = 0;
        detail::type_codept next_word_prop = 0;

        detail::impl_segment_word_state state{};

        uaiw_constexpr void iter_func_segment_word_only_utf8()
        {
            it_begin = it_pos;

            while (it_next != std::end(parent->range))
            {
                it_pos = it_next;
                word_prop = next_word_prop;
                detail::type_codept codepoint = 0;
                it_next = detail::inline_iter_utf8(it_next, std::end(parent->range), &codepoint, detail::impl_iter_replacement);
                if (detail::inline_segment_word_utf8(&state, codepoint, &next_word_prop, it_next, std::end(parent->range)))
                {
                    if (detail::impl_segment_is_word(word_prop))
                        return;

                    it_begin = it_pos;
                    continue;
                }
            }

            if (it_next == std::end(parent->range))
            {
                it_pos = it_next;
                word_prop = next_word_prop;
                if (!detail::impl_segment_is_word(word_prop))
                    it_begin = it_next;
            }
        }
        uaiw_constexpr void iter_func_segment_word_only_rev_utf8()
        {
            detail::impl_segment_word_state_reset(&state);
            it_pos = it_begin;

            while (it_begin != std::begin(parent->range))
            {
                it_next = it_begin;
                word_prop = next_word_prop;
                detail::type_codept codepoint = 0;
                it_begin = detail::inline_iter_rev_utf8(std::begin(parent->range), it_begin, &codepoint, detail::impl_iter_replacement);
                if (detail::inline_segment_word_rev_utf8(&state, codepoint, &next_word_prop, std::begin(parent->range), it_begin))
                {
                    if (detail::impl_segment_is_word(word_prop))
                    {
                        it_begin = it_next;
                        break;
                    }
                    it_pos = it_next;
                }
            }

            it_next = it_pos;
            detail::impl_segment_word_state_reset(&state);
        }
        uaiw_constexpr void iter_func_segment_word_only_pos_utf8(Iter pos)
        {
            // Find UTF-8 boundary
            for (std::size_t i = 0; i < 3 && pos != std::end(parent->range); ++i, ++pos)
            {
                if (((*pos & 0xFF) & 0xC0) != 0x80)
                    break;
            }

            // NOTE: https://unicode.org/reports/tr29/#Random_Access

            it_begin = pos;

            iter_func_segment_word_only_rev_utf8();

            it_pos = it_begin;
            it_next = it_begin;

            iter_func_segment_word_only_utf8();
        }

        using is_contiguous = detail::rng::is_range_contiguous<Range>;

    public:
        using iterator_category = std::bidirectional_iterator_tag;
        using value_type        = std::conditional_t<is_contiguous::value,
            std::basic_string_view<detail::rng::iter_value_t<Iter>>, void>;
        using pointer           = void;
        using reference         = value_type;
        using difference_type   = detail::rng::iter_difference_t<Iter>;

        uaiw_constexpr utf8() = default;
        uaiw_constexpr explicit utf8(utf8_view& p, Iter begin, Sent end)
            : parent{std::addressof(p)}, it_begin{begin}, it_pos{begin}, it_next{begin}
        {
            if (begin == end)
                return;

            detail::impl_segment_word_state_reset(&state);

            iter_func_segment_word_only_utf8();
        }
        uaiw_constexpr explicit utf8(utf8_view& p, Iter begin, Sent, Iter pos)
            : parent{std::addressof(p)}, it_begin{begin}, it_pos{begin}, it_next{begin}
        {
            iter_func_segment_word_only_pos_utf8(pos);
        }
        template<class T = reference> typename std::enable_if_t<is_contiguous::value, T>
        uaiw_constexpr operator*() const
        {
            return detail::rng::to_string_view<reference>(parent->range, it_begin, it_pos);
        }
        uaiw_constexpr Iter begin() const noexcept { return it_begin; }
        uaiw_constexpr Iter end() const noexcept { return it_pos; }
        uaiw_constexpr utf8& operator++()
        {
            iter_func_segment_word_only_utf8();

            return *this;
        }
        uaiw_constexpr utf8 operator++(int)
        {
            utf8 tmp = *this;
            operator++();
            return tmp;
        }
        uaiw_constexpr utf8& operator--()
        {
            iter_func_segment_word_only_rev_utf8();

            return *this;
        }
        uaiw_constexpr utf8 operator--(int)
        {
            utf8 tmp = *this;
            operator--();
            return tmp;
        }
        friend uaiw_constexpr bool operator==(const utf8& x, const utf8& y) { return (x.it_begin == y.it_begin); }
        friend uaiw_constexpr bool operator!=(const utf8& x, const utf8& y) { return (x.it_begin != y.it_begin); }
    private:
        static uaiw_constexpr bool friend_compare_sentinel(const utf8& x) { return x.it_begin == std::end(x.parent->range); }
    public:
        friend uaiw_constexpr bool operator==(const utf8& x, una::sentinel_t) { return friend_compare_sentinel(x); }
        friend uaiw_constexpr bool operator!=(const utf8& x, una::sentinel_t) { return !friend_compare_sentinel(x); }
        friend uaiw_constexpr bool operator==(una::sentinel_t, const utf8& x) { return friend_compare_sentinel(x); }
        friend uaiw_constexpr bool operator!=(una::sentinel_t, const utf8& x) { return !friend_compare_sentinel(x); }
    };

    using iter_t = detail::rng::iterator_t<Range>;
    using sent_t = detail::rng::sentinel_t<Range>;

    Range range = Range{};
    detail::rng::cache<utf8<iter_t, sent_t>> cached_begin;

public:
    uaiw_constexpr utf8_view() = default;
    uaiw_constexpr explicit utf8_view(Range r) : range{std::move(r)} {}
    //uaiw_constexpr Range base() const & { return range; }
    //uaiw_constexpr Range base() && { return std::move(range); }
    uaiw_constexpr auto begin()
    {
        if (cached_begin.has_value())
            return cached_begin.get_value();

        cached_begin.set_value(utf8<iter_t, sent_t>{*this, std::begin(range), std::end(range)});

        return cached_begin.get_value();
    }
    uaiw_constexpr auto end()
    {
        return utf8<iter_t, sent_t>{*this, std::end(range), std::end(range)};
    }
    uaiw_constexpr auto cursor(iter_t pos)
    {
        return utf8<iter_t, sent_t>{*this, std::begin(range), std::end(range), pos};
    }
    //uaiw_constexpr bool empty() { return begin() == end(); }
    //explicit uaiw_constexpr operator bool() { return !empty(); }
};

template<class Range>
class utf16_view : public detail::rng::view_base
{
private:
    template<class Iter, class Sent>
    class utf16
    {
        static_assert(detail::rng::is_iter_bidi_or_better<Iter>::value &&
                      std::is_integral_v<detail::rng::iter_value_t<Iter>> &&
                      sizeof(detail::rng::iter_value_t<Iter>) >= sizeof(char16_t),
                      "word_only::utf16 view requires bidirectional or better UTF-16 range");

    private:
        utf16_view* parent = nullptr;
        Iter it_begin = Iter{};
        Iter it_pos = Iter{};
        Iter it_next = Iter{};
        detail::type_codept word_prop = 0;
        detail::type_codept next_word_prop = 0;

        detail::impl_segment_word_state state{};

        uaiw_constexpr void iter_func_segment_word_only_utf16()
        {
            it_begin = it_pos;

            while (it_next != std::end(parent->range))
            {
                it_pos = it_next;
                word_prop = next_word_prop;
                detail::type_codept codepoint = 0;
                it_next = detail::inline_iter_utf16(it_next, std::end(parent->range), &codepoint, detail::impl_iter_replacement);
                if (detail::inline_segment_word_utf16(&state, codepoint, &next_word_prop, it_next, std::end(parent->range)))
                {
                    if (detail::impl_segment_is_word(word_prop))
                        return;

                    it_begin = it_pos;
                    continue;
                }
            }

            if (it_next == std::end(parent->range))
            {
                it_pos = it_next;
                word_prop = next_word_prop;
                if (!detail::impl_segment_is_word(word_prop))
                    it_begin = it_next;
            }
        }
        uaiw_constexpr void iter_func_segment_word_only_rev_utf16()
        {
            detail::impl_segment_word_state_reset(&state);
            it_pos = it_begin;

            while (it_begin != std::begin(parent->range))
            {
                it_next = it_begin;
                word_prop = next_word_prop;
                detail::type_codept codepoint = 0;
                it_begin = detail::inline_iter_rev_utf16(std::begin(parent->range), it_begin, &codepoint, detail::impl_iter_replacement);
                if (detail::inline_segment_word_rev_utf16(&state, codepoint, &next_word_prop, std::begin(parent->range), it_begin))
                {
                    if (detail::impl_segment_is_word(word_prop))
                    {
                        it_begin = it_next;
                        break;
                    }
                    it_pos = it_next;
                }
            }

            it_next = it_pos;
            detail::impl_segment_word_state_reset(&state);
        }
        uaiw_constexpr void iter_func_segment_word_only_pos_utf16(Iter pos)
        {
            // Find UTF-16 boundary
            for (std::size_t i = 0; i < 1 && pos != std::end(parent->range); ++i, ++pos)
            {
                if (!((*pos & 0xFFFF) >= 0xDC00 && (*pos & 0xFFFF) <= 0xDFFF))
                    break;
            }

            // NOTE: https://unicode.org/reports/tr29/#Random_Access

            it_begin = pos;

            iter_func_segment_word_only_rev_utf16();

            it_pos = it_begin;
            it_next = it_begin;

            iter_func_segment_word_only_utf16();
        }

        using is_contiguous = detail::rng::is_range_contiguous<Range>;

    public:
        using iterator_category = std::bidirectional_iterator_tag;
        using value_type        = std::conditional_t<is_contiguous::value,
            std::basic_string_view<detail::rng::iter_value_t<Iter>>, void>;
        using pointer           = void;
        using reference         = value_type;
        using difference_type   = detail::rng::iter_difference_t<Iter>;

        uaiw_constexpr utf16() = default;
        uaiw_constexpr explicit utf16(utf16_view& p, Iter begin, Sent end)
            : parent{std::addressof(p)}, it_begin{begin}, it_pos{begin}, it_next{begin}
        {
            if (begin == end)
                return;

            detail::impl_segment_word_state_reset(&state);

            iter_func_segment_word_only_utf16();
        }
        uaiw_constexpr explicit utf16(utf16_view& p, Iter begin, Sent, Iter pos)
            : parent{std::addressof(p)}, it_begin{begin}, it_pos{begin}, it_next{begin}
        {
            iter_func_segment_word_only_pos_utf16(pos);
        }
        template<class T = reference> typename std::enable_if_t<is_contiguous::value, T>
        uaiw_constexpr operator*() const
        {
            return detail::rng::to_string_view<reference>(parent->range, it_begin, it_pos);
        }
        uaiw_constexpr Iter begin() const noexcept { return it_begin; }
        uaiw_constexpr Iter end() const noexcept { return it_pos; }
        uaiw_constexpr utf16& operator++()
        {
            iter_func_segment_word_only_utf16();

            return *this;
        }
        uaiw_constexpr utf16 operator++(int)
        {
            utf16 tmp = *this;
            operator++();
            return tmp;
        }
        uaiw_constexpr utf16& operator--()
        {
            iter_func_segment_word_only_rev_utf16();

            return *this;
        }
        uaiw_constexpr utf16 operator--(int)
        {
            utf16 tmp = *this;
            operator--();
            return tmp;
        }
        friend uaiw_constexpr bool operator==(const utf16& x, const utf16& y) { return (x.it_begin == y.it_begin); }
        friend uaiw_constexpr bool operator!=(const utf16& x, const utf16& y) { return (x.it_begin != y.it_begin); }
    private:
        static uaiw_constexpr bool friend_compare_sentinel(const utf16& x) { return x.it_begin == std::end(x.parent->range); }
    public:
        friend uaiw_constexpr bool operator==(const utf16& x, una::sentinel_t) { return friend_compare_sentinel(x); }
        friend uaiw_constexpr bool operator!=(const utf16& x, una::sentinel_t) { return !friend_compare_sentinel(x); }
        friend uaiw_constexpr bool operator==(una::sentinel_t, const utf16& x) { return friend_compare_sentinel(x); }
        friend uaiw_constexpr bool operator!=(una::sentinel_t, const utf16& x) { return !friend_compare_sentinel(x); }
    };

    using iter_t = detail::rng::iterator_t<Range>;
    using sent_t = detail::rng::sentinel_t<Range>;

    Range range = Range{};
    detail::rng::cache<utf16<iter_t, sent_t>> cached_begin;

public:
    uaiw_constexpr utf16_view() = default;
    uaiw_constexpr explicit utf16_view(Range r) : range{std::move(r)} {}
    //uaiw_constexpr Range base() const & { return range; }
    //uaiw_constexpr Range base() && { return std::move(range); }
    uaiw_constexpr auto begin()
    {
        if (cached_begin.has_value())
            return cached_begin.get_value();

        cached_begin.set_value(utf16<iter_t, sent_t>{*this, std::begin(range), std::end(range)});

        return cached_begin.get_value();
    }
    uaiw_constexpr auto end()
    {
        return utf16<iter_t, sent_t>{*this, std::end(range), std::end(range)};
    }
    uaiw_constexpr auto cursor(iter_t pos)
    {
        return utf16<iter_t, sent_t>{*this, std::begin(range), std::end(range), pos};
    }
    //uaiw_constexpr bool empty() { return begin() == end(); }
    //explicit uaiw_constexpr operator bool() { return !empty(); }
};

} // namespace word_only

namespace word {
template<class Range>
utf8_view(Range&&) -> utf8_view<views::all_t<Range>>;
template<class Range>
utf16_view(Range&&) -> utf16_view<views::all_t<Range>>;
}
namespace word_only {
template<class Range>
utf8_view(Range&&) -> utf8_view<views::all_t<Range>>;
template<class Range>
utf16_view(Range&&) -> utf16_view<views::all_t<Range>>;
}

} // namespace ranges

namespace detail::rng {

/* WORD_UTF8_VIEW */

struct adaptor_word_utf8
{
    template<class R>
    uaiw_constexpr auto operator()(R&& r) const
    { return ranges::word::utf8_view{std::forward<R>(r)}; }
};
template<class R>
uaiw_constexpr auto operator|(R&& r, const adaptor_word_utf8& a) { return a(std::forward<R>(r)); }

/* WORD_UTF16_VIEW */

struct adaptor_word_utf16
{
    template<class R>
    uaiw_constexpr auto operator()(R&& r) const
    { return ranges::word::utf16_view{std::forward<R>(r)}; }
};
template<class R>
uaiw_constexpr auto operator|(R&& r, const adaptor_word_utf16& a) { return a(std::forward<R>(r)); }

/* WORD_ONLY_UTF8_VIEW */

struct adaptor_word_only_utf8
{
    template<class R>
    uaiw_constexpr auto operator()(R&& r) const
    { return ranges::word_only::utf8_view{std::forward<R>(r)}; }
};
template<class R>
uaiw_constexpr auto operator|(R&& r, const adaptor_word_only_utf8& a) { return a(std::forward<R>(r)); }

/* WORD_ONLY_UTF16_VIEW */

struct adaptor_word_only_utf16
{
    template<class R>
    uaiw_constexpr auto operator()(R&& r) const
    { return ranges::word_only::utf16_view{std::forward<R>(r)}; }
};
template<class R>
uaiw_constexpr auto operator|(R&& r, const adaptor_word_only_utf16& a) { return a(std::forward<R>(r)); }

} // namespace detail::rng

namespace ranges::views {

namespace word {
inline constexpr detail::rng::adaptor_word_utf8 utf8;
inline constexpr detail::rng::adaptor_word_utf16 utf16;
}
namespace word_only {
inline constexpr detail::rng::adaptor_word_only_utf8 utf8;
inline constexpr detail::rng::adaptor_word_only_utf16 utf16;
}

} // namespace ranges::views

namespace views = ranges::views;

} // namespace una


#endif // UNI_ALGO_H_AMALGAMATION

/* Public Domain License
 *
 * This is free and unencumbered software released into the public domain.
 *
 * Anyone is free to copy, modify, publish, use, compile, sell, or distribute this
 * software, either in source code form or as a compiled binary, for any purpose,
 * commercial or non-commercial, and by any means.
 *
 * In jurisdictions that recognize copyright laws, the author or authors of this
 * software dedicate any and all copyright interest in the software to the public
 * domain. We make this dedication for the benefit of the public at large and to
 * the detriment of our heirs and successors. We intend this dedication to be an
 * overt act of relinquishment in perpetuity of all present and future rights to
 * this software under copyright law.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * MIT License
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
