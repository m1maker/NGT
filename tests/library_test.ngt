/*
Library object example
This shows how to call functions from librarys, with conventions _cdecl and _stdcall.
The first parameter of the call function takes a C-style function signature.
You can use any types, even pointers, but for now you cannot do, for example
unsigned int, or const unsigned char*
So far, the function parser is not designed for this.
All subsequent arguments are those that will have to be passed to the library.
Returns a dictionary with values, where 0 is what the function returned, and the rest is everything that relates to pointers.
*/
library kernel32;
void main(){
library user32;
user32.load("user32");
kernel32.load("kernel32");
string text="Now we will get your computer name using the pointers, and show a window with it. Are you ready?";
string title="Hello";
wstring text_u;
wstring title_u;
unicode_convert(text, text_u);
unicode_convert(title, title_u);
int val=int(user32.call("int MessageBoxW(int, char*, char*, int);", 0, text_u.c_str(), title_u.c_str(), 0x00000001)[0]);
if(val==2){
exit(0);
}
// Allocating memory for output buffer;
uint64 name_ptr=malloc(500);
name_ptr=uint64(kernel32.call("int GetComputerNameW(char*, int*);", uint64(name_ptr), 500)[1]);
wstring name=wc_str_to_wstring(name_ptr);
free(name_ptr);
show_window("Window");
timer window_creating;
while(get_window_handle()==0){
if(window_creating.elapsed_millis>2000){
alert("LibraryTest", "Failed to create window");
exit(-1);
}
}
update_window_freq=5;
set_window_closable(false);
// Now, set window text from a DLL.
uint64 window = get_window_handle();
user32.call("int SetWindowTextW(long, char*);", window, name.c_str());
while(true){
kernel32.call("void Sleep(int);", 5);
if(key_pressed(SDLK_ESCAPE))hide_window();
if(key_pressed(SDLK_SPACE))kernel32.call("int Beep(int, int);", 500, 100);
bool is_window=bool(user32.call("long IsWindow(long);", window)[0]);
if(!is_window)break;
}
kernel32.unload();
exit(0);
}